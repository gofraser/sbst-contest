/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:54:02 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Compiler;
import com.google.re2j.Prog;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Compiler.compileRegexp(regexp0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      int int0 = 9;
      regexp0.cap = int0;
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[2];
      int int0 = (-332);
      regexp0.flags = int0;
      int int1 = 9;
      regexp0.flags = int1;
      intArray0[0] = int1;
      int int2 = 13;
      intArray0[1] = int2;
      regexp0.runes = intArray0;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 680;
      regexp0.min = int0;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      int int1 = (-334);
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp0);
      Regexp regexp1 = new Regexp(regexp0);
      Compiler.compileRegexp(regexp1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op1;
      int[] intArray0 = new int[3];
      int int0 = (-623);
      intArray0[0] = int0;
      regexp0.reinit();
      int int1 = 11491;
      regexp0.max = int1;
      int int2 = 0;
      regexp0.min = int0;
      intArray0[1] = int2;
      int int3 = 2;
      intArray0[2] = int3;
      regexp0.runes = intArray0;
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 0;
      regexp0.reinit();
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // regexp: unhandled case in compile
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.op = regexp_Op0;
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      regexp1.subs = regexpArray0;
      Regexp.Op regexp_Op2 = Regexp.Op.STAR;
      regexp1.op.isPseudo();
      regexp1.op = regexp_Op2;
      int int0 = 324;
      regexp0.min = int0;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      Regexp regexp2 = new Regexp(regexpArray0[2]);
      assertNotNull(regexp2);
      assertEquals(7, regexpArray0.length);
      
      regexpArray0[6] = regexp2;
      regexp0.subs = regexpArray0;
      Regexp regexp3 = new Regexp(regexp0);
      assertNotNull(regexp3);
      
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = (-415);
      regexp0.max = int0;
      Prog prog0 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog0);
      
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog1);
      assertNotSame(prog1, prog0);
      assertFalse(prog1.equals((Object)prog0));
      
      regexp0.reinit();
      Prog prog2 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog2);
      assertNotSame(prog2, prog1);
      assertNotSame(prog2, prog0);
      assertFalse(prog2.equals((Object)prog1));
      assertFalse(prog2.equals((Object)prog0));
      
      regexp0.reinit();
      Prog prog3 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog3);
      assertNotSame(prog3, prog0);
      assertNotSame(prog3, prog2);
      assertNotSame(prog3, prog1);
      assertFalse(prog3.equals((Object)prog0));
      assertFalse(prog3.equals((Object)prog2));
      assertFalse(prog3.equals((Object)prog1));
      
      Prog prog4 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog4);
      assertNotSame(prog4, prog1);
      assertNotSame(prog4, prog0);
      assertNotSame(prog4, prog3);
      assertNotSame(prog4, prog2);
      assertFalse(prog4.equals((Object)prog1));
      assertFalse(prog4.equals((Object)prog0));
      assertFalse(prog4.equals((Object)prog3));
      assertFalse(prog4.equals((Object)prog2));
      
      Prog prog5 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog5);
      assertNotSame(prog5, prog4);
      assertNotSame(prog5, prog2);
      assertNotSame(prog5, prog0);
      assertNotSame(prog5, prog1);
      assertNotSame(prog5, prog3);
      assertFalse(prog5.equals((Object)prog4));
      assertFalse(prog5.equals((Object)prog2));
      assertFalse(prog5.equals((Object)prog0));
      assertFalse(prog5.equals((Object)prog1));
      assertFalse(prog5.equals((Object)prog3));
      
      Prog prog6 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog6);
      assertNotSame(prog6, prog5);
      assertNotSame(prog6, prog1);
      assertNotSame(prog6, prog0);
      assertNotSame(prog6, prog2);
      assertNotSame(prog6, prog3);
      assertNotSame(prog6, prog4);
      assertFalse(prog6.equals((Object)prog5));
      assertFalse(prog6.equals((Object)prog1));
      assertFalse(prog6.equals((Object)prog0));
      assertFalse(prog6.equals((Object)prog2));
      assertFalse(prog6.equals((Object)prog3));
      assertFalse(prog6.equals((Object)prog4));
      
      Prog prog7 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog7);
      assertNotSame(prog7, prog0);
      assertNotSame(prog7, prog2);
      assertNotSame(prog7, prog3);
      assertNotSame(prog7, prog5);
      assertNotSame(prog7, prog1);
      assertNotSame(prog7, prog4);
      assertNotSame(prog7, prog6);
      assertFalse(prog7.equals((Object)prog0));
      assertFalse(prog7.equals((Object)prog2));
      assertFalse(prog7.equals((Object)prog3));
      assertFalse(prog7.equals((Object)prog5));
      assertFalse(prog7.equals((Object)prog1));
      assertFalse(prog7.equals((Object)prog4));
      assertFalse(prog7.equals((Object)prog6));
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp1.equals(object0);
      assertFalse(boolean0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp1.flags = int0;
      Object object1 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object1);
      
      Prog prog8 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog8);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog8, prog2);
      assertNotSame(prog8, prog0);
      assertNotSame(prog8, prog7);
      assertNotSame(prog8, prog6);
      assertNotSame(prog8, prog1);
      assertNotSame(prog8, prog4);
      assertNotSame(prog8, prog3);
      assertNotSame(prog8, prog5);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(prog8.equals((Object)prog2));
      assertFalse(prog8.equals((Object)prog0));
      assertFalse(prog8.equals((Object)prog7));
      assertFalse(prog8.equals((Object)prog6));
      assertFalse(prog8.equals((Object)prog1));
      assertFalse(prog8.equals((Object)prog4));
      assertFalse(prog8.equals((Object)prog3));
      assertFalse(prog8.equals((Object)prog5));
      assertTrue(regexp1.equals((Object)regexp0));
      
      Prog prog9 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog9);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog9, prog8);
      assertNotSame(prog9, prog1);
      assertNotSame(prog9, prog0);
      assertNotSame(prog9, prog2);
      assertNotSame(prog9, prog5);
      assertNotSame(prog9, prog3);
      assertNotSame(prog9, prog4);
      assertNotSame(prog9, prog6);
      assertNotSame(prog9, prog7);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(prog9.equals((Object)prog8));
      assertFalse(prog9.equals((Object)prog1));
      assertFalse(prog9.equals((Object)prog0));
      assertFalse(prog9.equals((Object)prog2));
      assertFalse(prog9.equals((Object)prog5));
      assertFalse(prog9.equals((Object)prog3));
      assertFalse(prog9.equals((Object)prog4));
      assertFalse(prog9.equals((Object)prog6));
      assertFalse(prog9.equals((Object)prog7));
      assertTrue(regexp1.equals((Object)regexp0));
      
      Prog prog10 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog10);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog10, prog9);
      assertNotSame(prog10, prog4);
      assertNotSame(prog10, prog2);
      assertNotSame(prog10, prog8);
      assertNotSame(prog10, prog1);
      assertNotSame(prog10, prog5);
      assertNotSame(prog10, prog3);
      assertNotSame(prog10, prog7);
      assertNotSame(prog10, prog0);
      assertNotSame(prog10, prog6);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(prog10.equals((Object)prog9));
      assertFalse(prog10.equals((Object)prog4));
      assertFalse(prog10.equals((Object)prog2));
      assertFalse(prog10.equals((Object)prog8));
      assertFalse(prog10.equals((Object)prog1));
      assertFalse(prog10.equals((Object)prog5));
      assertFalse(prog10.equals((Object)prog3));
      assertFalse(prog10.equals((Object)prog7));
      assertFalse(prog10.equals((Object)prog0));
      assertFalse(prog10.equals((Object)prog6));
      
      Prog prog11 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog11);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog11, prog7);
      assertNotSame(prog11, prog2);
      assertNotSame(prog11, prog8);
      assertNotSame(prog11, prog6);
      assertNotSame(prog11, prog10);
      assertNotSame(prog11, prog3);
      assertNotSame(prog11, prog9);
      assertNotSame(prog11, prog0);
      assertNotSame(prog11, prog5);
      assertNotSame(prog11, prog1);
      assertNotSame(prog11, prog4);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(prog11.equals((Object)prog7));
      assertFalse(prog11.equals((Object)prog2));
      assertFalse(prog11.equals((Object)prog8));
      assertFalse(prog11.equals((Object)prog6));
      assertFalse(prog11.equals((Object)prog10));
      assertFalse(prog11.equals((Object)prog3));
      assertFalse(prog11.equals((Object)prog9));
      assertFalse(prog11.equals((Object)prog0));
      assertFalse(prog11.equals((Object)prog5));
      assertFalse(prog11.equals((Object)prog1));
      assertFalse(prog11.equals((Object)prog4));
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      Prog prog12 = Compiler.compileRegexp(regexp2);
      assertNotNull(prog12);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(prog12, prog4);
      assertNotSame(prog12, prog10);
      assertNotSame(prog12, prog5);
      assertNotSame(prog12, prog9);
      assertNotSame(prog12, prog2);
      assertNotSame(prog12, prog3);
      assertNotSame(prog12, prog0);
      assertNotSame(prog12, prog8);
      assertNotSame(prog12, prog11);
      assertNotSame(prog12, prog1);
      assertNotSame(prog12, prog6);
      assertNotSame(prog12, prog7);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(prog12.equals((Object)prog4));
      assertFalse(prog12.equals((Object)prog10));
      assertFalse(prog12.equals((Object)prog5));
      assertFalse(prog12.equals((Object)prog9));
      assertFalse(prog12.equals((Object)prog2));
      assertFalse(prog12.equals((Object)prog3));
      assertFalse(prog12.equals((Object)prog0));
      assertFalse(prog12.equals((Object)prog8));
      assertFalse(prog12.equals((Object)prog11));
      assertFalse(prog12.equals((Object)prog1));
      assertFalse(prog12.equals((Object)prog6));
      assertFalse(prog12.equals((Object)prog7));
      
      Prog prog13 = Compiler.compileRegexp(regexp2);
      assertNotNull(prog13);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(prog13, prog6);
      assertNotSame(prog13, prog10);
      assertNotSame(prog13, prog8);
      assertNotSame(prog13, prog11);
      assertNotSame(prog13, prog0);
      assertNotSame(prog13, prog4);
      assertNotSame(prog13, prog1);
      assertNotSame(prog13, prog7);
      assertNotSame(prog13, prog12);
      assertNotSame(prog13, prog5);
      assertNotSame(prog13, prog3);
      assertNotSame(prog13, prog9);
      assertNotSame(prog13, prog2);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(prog13.equals((Object)prog6));
      assertFalse(prog13.equals((Object)prog10));
      assertFalse(prog13.equals((Object)prog8));
      assertFalse(prog13.equals((Object)prog11));
      assertFalse(prog13.equals((Object)prog0));
      assertFalse(prog13.equals((Object)prog4));
      assertFalse(prog13.equals((Object)prog1));
      assertFalse(prog13.equals((Object)prog7));
      assertFalse(prog13.equals((Object)prog12));
      assertFalse(prog13.equals((Object)prog5));
      assertFalse(prog13.equals((Object)prog3));
      assertFalse(prog13.equals((Object)prog9));
      assertFalse(prog13.equals((Object)prog2));
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      
      Prog prog14 = Compiler.compileRegexp(regexp3);
      assertNotNull(prog14);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(prog14, prog13);
      assertNotSame(prog14, prog12);
      assertNotSame(prog14, prog7);
      assertNotSame(prog14, prog4);
      assertNotSame(prog14, prog5);
      assertNotSame(prog14, prog1);
      assertNotSame(prog14, prog3);
      assertNotSame(prog14, prog10);
      assertNotSame(prog14, prog6);
      assertNotSame(prog14, prog9);
      assertNotSame(prog14, prog2);
      assertNotSame(prog14, prog8);
      assertNotSame(prog14, prog0);
      assertNotSame(prog14, prog11);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(prog14.equals((Object)prog13));
      assertFalse(prog14.equals((Object)prog12));
      assertFalse(prog14.equals((Object)prog7));
      assertFalse(prog14.equals((Object)prog4));
      assertFalse(prog14.equals((Object)prog5));
      assertFalse(prog14.equals((Object)prog1));
      assertFalse(prog14.equals((Object)prog3));
      assertFalse(prog14.equals((Object)prog10));
      assertFalse(prog14.equals((Object)prog6));
      assertFalse(prog14.equals((Object)prog9));
      assertFalse(prog14.equals((Object)prog2));
      assertFalse(prog14.equals((Object)prog8));
      assertFalse(prog14.equals((Object)prog0));
      assertFalse(prog14.equals((Object)prog11));
      
      Prog prog15 = Compiler.compileRegexp(regexp2);
      assertNotNull(prog15);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp1);
      assertNotSame(prog15, prog8);
      assertNotSame(prog15, prog2);
      assertNotSame(prog15, prog10);
      assertNotSame(prog15, prog9);
      assertNotSame(prog15, prog4);
      assertNotSame(prog15, prog12);
      assertNotSame(prog15, prog13);
      assertNotSame(prog15, prog7);
      assertNotSame(prog15, prog1);
      assertNotSame(prog15, prog0);
      assertNotSame(prog15, prog14);
      assertNotSame(prog15, prog3);
      assertNotSame(prog15, prog5);
      assertNotSame(prog15, prog6);
      assertNotSame(prog15, prog11);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(prog15.equals((Object)prog8));
      assertFalse(prog15.equals((Object)prog2));
      assertFalse(prog15.equals((Object)prog10));
      assertFalse(prog15.equals((Object)prog9));
      assertFalse(prog15.equals((Object)prog4));
      assertFalse(prog15.equals((Object)prog12));
      assertFalse(prog15.equals((Object)prog13));
      assertFalse(prog15.equals((Object)prog7));
      assertFalse(prog15.equals((Object)prog1));
      assertFalse(prog15.equals((Object)prog0));
      assertFalse(prog15.equals((Object)prog14));
      assertFalse(prog15.equals((Object)prog3));
      assertFalse(prog15.equals((Object)prog5));
      assertFalse(prog15.equals((Object)prog6));
      assertFalse(prog15.equals((Object)prog11));
      
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp4 = new Regexp(regexp_Op1);
      assertNotNull(regexp4);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      int[] intArray0 = new int[7];
      int int0 = 8;
      intArray0[0] = int0;
      int int1 = 209;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 2495;
      intArray0[4] = int4;
      int int5 = (-647);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      intArray0[5] = int5;
      int int6 = 2293;
      intArray0[6] = int6;
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp1.op = regexp_Op0;
      Prog prog0 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog1, prog0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(prog1.equals((Object)prog0));
      
      Prog prog2 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(prog2, prog1);
      assertNotSame(prog2, prog0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(prog2.equals((Object)prog1));
      assertFalse(prog2.equals((Object)prog0));
      
      Prog prog3 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog3, prog0);
      assertNotSame(prog3, prog1);
      assertNotSame(prog3, prog2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(prog3.equals((Object)prog0));
      assertFalse(prog3.equals((Object)prog1));
      assertFalse(prog3.equals((Object)prog2));
      
      Prog prog4 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog4);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog4, prog2);
      assertNotSame(prog4, prog3);
      assertNotSame(prog4, prog0);
      assertNotSame(prog4, prog1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(prog4.equals((Object)prog2));
      assertFalse(prog4.equals((Object)prog3));
      assertFalse(prog4.equals((Object)prog0));
      assertFalse(prog4.equals((Object)prog1));
      
      Prog prog5 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog5);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog5, prog3);
      assertNotSame(prog5, prog1);
      assertNotSame(prog5, prog4);
      assertNotSame(prog5, prog0);
      assertNotSame(prog5, prog2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(prog5.equals((Object)prog3));
      assertFalse(prog5.equals((Object)prog1));
      assertFalse(prog5.equals((Object)prog4));
      assertFalse(prog5.equals((Object)prog0));
      assertFalse(prog5.equals((Object)prog2));
      
      Prog prog6 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog6);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(prog6, prog3);
      assertNotSame(prog6, prog1);
      assertNotSame(prog6, prog2);
      assertNotSame(prog6, prog4);
      assertNotSame(prog6, prog0);
      assertNotSame(prog6, prog5);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(prog6.equals((Object)prog3));
      assertFalse(prog6.equals((Object)prog1));
      assertFalse(prog6.equals((Object)prog2));
      assertFalse(prog6.equals((Object)prog4));
      assertFalse(prog6.equals((Object)prog0));
      assertFalse(prog6.equals((Object)prog5));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      int[] intArray0 = new int[7];
      int int0 = 8;
      int int1 = 209;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 2495;
      intArray0[4] = intArray0[3];
      int int5 = (-647);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      intArray0[5] = int5;
      int int6 = 2293;
      intArray0[6] = int6;
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp1.op = regexp_Op0;
      Prog prog0 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog1, prog0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(prog1.equals((Object)prog0));
      
      Prog prog2 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(prog2, prog0);
      assertNotSame(prog2, prog1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(prog2.equals((Object)prog0));
      assertFalse(prog2.equals((Object)prog1));
      
      Prog prog3 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog3, prog1);
      assertNotSame(prog3, prog0);
      assertNotSame(prog3, prog2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(prog3.equals((Object)prog1));
      assertFalse(prog3.equals((Object)prog0));
      assertFalse(prog3.equals((Object)prog2));
      
      Prog prog4 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog4);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog4, prog2);
      assertNotSame(prog4, prog1);
      assertNotSame(prog4, prog0);
      assertNotSame(prog4, prog3);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(prog4.equals((Object)prog2));
      assertFalse(prog4.equals((Object)prog1));
      assertFalse(prog4.equals((Object)prog0));
      assertFalse(prog4.equals((Object)prog3));
      
      Prog prog5 = new Prog();
      assertNotNull(prog5);
      assertFalse(prog5.equals((Object)prog1));
      assertFalse(prog5.equals((Object)prog2));
      assertFalse(prog5.equals((Object)prog3));
      assertFalse(prog5.equals((Object)prog4));
      assertFalse(prog5.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexpArray0[0]);
      assertNotNull(regexp1);
      assertEquals(3, regexpArray0.length);
      
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      
      regexpArray0[2] = regexp2;
      regexp0.subs = regexpArray0;
      int int0 = 0;
      regexp0.flags = int0;
      String string0 = "XYhb\"$A";
      regexp0.name = string0;
      regexp0.op = regexp_Op0;
      Regexp regexp3 = new Regexp(regexp0);
      assertNotNull(regexp3);
      
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      regexp1.op = regexp_Op1;
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("(?s:.)", string0);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      
      int int0 = (-2532);
      regexp0.flags = int0;
      int int1 = (-2420);
      regexp1.max = int1;
      Prog prog0 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog0);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog1);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog1, prog0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(prog1.equals((Object)prog0));
      
      regexp0.min = int0;
      int int2 = (-2793);
      regexp1.cap = int2;
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Prog prog2 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog2);
      assertNotSame(prog2, prog1);
      assertNotSame(prog2, prog0);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertFalse(prog2.equals((Object)prog1));
      assertFalse(prog2.equals((Object)prog0));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = regexp1.cap;
      intArray0[1] = regexp1.max;
      intArray0[2] = regexp0.flags;
      intArray0[3] = regexp1.cap;
      regexp0.runes = intArray0;
      Prog prog3 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog3);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(prog3, prog2);
      assertNotSame(prog3, prog0);
      assertNotSame(prog3, prog1);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(prog3.equals((Object)prog2));
      assertFalse(prog3.equals((Object)prog0));
      assertFalse(prog3.equals((Object)prog1));
      
      Prog prog4 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog4);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(prog4, prog3);
      assertNotSame(prog4, prog1);
      assertNotSame(prog4, prog2);
      assertNotSame(prog4, prog0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(prog4.equals((Object)prog3));
      assertFalse(prog4.equals((Object)prog1));
      assertFalse(prog4.equals((Object)prog2));
      assertFalse(prog4.equals((Object)prog0));
      
      Prog prog5 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog5);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog5, prog3);
      assertNotSame(prog5, prog2);
      assertNotSame(prog5, prog0);
      assertNotSame(prog5, prog1);
      assertNotSame(prog5, prog4);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(prog5.equals((Object)prog3));
      assertFalse(prog5.equals((Object)prog2));
      assertFalse(prog5.equals((Object)prog0));
      assertFalse(prog5.equals((Object)prog1));
      assertFalse(prog5.equals((Object)prog4));
      
      Prog prog6 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog6);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(prog6, prog3);
      assertNotSame(prog6, prog5);
      assertNotSame(prog6, prog4);
      assertNotSame(prog6, prog0);
      assertNotSame(prog6, prog2);
      assertNotSame(prog6, prog1);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(prog6.equals((Object)prog3));
      assertFalse(prog6.equals((Object)prog5));
      assertFalse(prog6.equals((Object)prog4));
      assertFalse(prog6.equals((Object)prog0));
      assertFalse(prog6.equals((Object)prog2));
      assertFalse(prog6.equals((Object)prog1));
      
      Prog prog7 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog7);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog7, prog5);
      assertNotSame(prog7, prog4);
      assertNotSame(prog7, prog0);
      assertNotSame(prog7, prog1);
      assertNotSame(prog7, prog2);
      assertNotSame(prog7, prog6);
      assertNotSame(prog7, prog3);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(prog7.equals((Object)prog5));
      assertFalse(prog7.equals((Object)prog4));
      assertFalse(prog7.equals((Object)prog0));
      assertFalse(prog7.equals((Object)prog1));
      assertFalse(prog7.equals((Object)prog2));
      assertFalse(prog7.equals((Object)prog6));
      assertFalse(prog7.equals((Object)prog3));
      
      Prog prog8 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog8);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(prog8, prog3);
      assertNotSame(prog8, prog0);
      assertNotSame(prog8, prog7);
      assertNotSame(prog8, prog6);
      assertNotSame(prog8, prog5);
      assertNotSame(prog8, prog4);
      assertNotSame(prog8, prog1);
      assertNotSame(prog8, prog2);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(prog8.equals((Object)prog3));
      assertFalse(prog8.equals((Object)prog0));
      assertFalse(prog8.equals((Object)prog7));
      assertFalse(prog8.equals((Object)prog6));
      assertFalse(prog8.equals((Object)prog5));
      assertFalse(prog8.equals((Object)prog4));
      assertFalse(prog8.equals((Object)prog1));
      assertFalse(prog8.equals((Object)prog2));
      
      Prog prog9 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog9);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog9, prog4);
      assertNotSame(prog9, prog0);
      assertNotSame(prog9, prog3);
      assertNotSame(prog9, prog1);
      assertNotSame(prog9, prog2);
      assertNotSame(prog9, prog6);
      assertNotSame(prog9, prog8);
      assertNotSame(prog9, prog7);
      assertNotSame(prog9, prog5);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(prog9.equals((Object)prog4));
      assertFalse(prog9.equals((Object)prog0));
      assertFalse(prog9.equals((Object)prog3));
      assertFalse(prog9.equals((Object)prog1));
      assertFalse(prog9.equals((Object)prog2));
      assertFalse(prog9.equals((Object)prog6));
      assertFalse(prog9.equals((Object)prog8));
      assertFalse(prog9.equals((Object)prog7));
      assertFalse(prog9.equals((Object)prog5));
      
      Prog prog10 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog10);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(prog10, prog4);
      assertNotSame(prog10, prog0);
      assertNotSame(prog10, prog1);
      assertNotSame(prog10, prog7);
      assertNotSame(prog10, prog8);
      assertNotSame(prog10, prog6);
      assertNotSame(prog10, prog2);
      assertNotSame(prog10, prog3);
      assertNotSame(prog10, prog5);
      assertNotSame(prog10, prog9);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(prog10.equals((Object)prog4));
      assertFalse(prog10.equals((Object)prog0));
      assertFalse(prog10.equals((Object)prog1));
      assertFalse(prog10.equals((Object)prog7));
      assertFalse(prog10.equals((Object)prog8));
      assertFalse(prog10.equals((Object)prog6));
      assertFalse(prog10.equals((Object)prog2));
      assertFalse(prog10.equals((Object)prog3));
      assertFalse(prog10.equals((Object)prog5));
      assertFalse(prog10.equals((Object)prog9));
      
      Prog prog11 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog11);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog11, prog8);
      assertNotSame(prog11, prog7);
      assertNotSame(prog11, prog3);
      assertNotSame(prog11, prog0);
      assertNotSame(prog11, prog1);
      assertNotSame(prog11, prog5);
      assertNotSame(prog11, prog6);
      assertNotSame(prog11, prog10);
      assertNotSame(prog11, prog2);
      assertNotSame(prog11, prog9);
      assertNotSame(prog11, prog4);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(prog11.equals((Object)prog8));
      assertFalse(prog11.equals((Object)prog7));
      assertFalse(prog11.equals((Object)prog3));
      assertFalse(prog11.equals((Object)prog0));
      assertFalse(prog11.equals((Object)prog1));
      assertFalse(prog11.equals((Object)prog5));
      assertFalse(prog11.equals((Object)prog6));
      assertFalse(prog11.equals((Object)prog10));
      assertFalse(prog11.equals((Object)prog2));
      assertFalse(prog11.equals((Object)prog9));
      assertFalse(prog11.equals((Object)prog4));
      
      Prog prog12 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog12);
      assertNotSame(prog12, prog10);
      assertNotSame(prog12, prog3);
      assertNotSame(prog12, prog6);
      assertNotSame(prog12, prog5);
      assertNotSame(prog12, prog7);
      assertNotSame(prog12, prog11);
      assertNotSame(prog12, prog8);
      assertNotSame(prog12, prog4);
      assertNotSame(prog12, prog0);
      assertNotSame(prog12, prog1);
      assertNotSame(prog12, prog2);
      assertNotSame(prog12, prog9);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(prog12.equals((Object)prog10));
      assertFalse(prog12.equals((Object)prog3));
      assertFalse(prog12.equals((Object)prog6));
      assertFalse(prog12.equals((Object)prog5));
      assertFalse(prog12.equals((Object)prog7));
      assertFalse(prog12.equals((Object)prog11));
      assertFalse(prog12.equals((Object)prog8));
      assertFalse(prog12.equals((Object)prog4));
      assertFalse(prog12.equals((Object)prog0));
      assertFalse(prog12.equals((Object)prog1));
      assertFalse(prog12.equals((Object)prog2));
      assertFalse(prog12.equals((Object)prog9));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      
      Prog prog13 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog13);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(prog13, prog2);
      assertNotSame(prog13, prog3);
      assertNotSame(prog13, prog0);
      assertNotSame(prog13, prog1);
      assertNotSame(prog13, prog7);
      assertNotSame(prog13, prog5);
      assertNotSame(prog13, prog6);
      assertNotSame(prog13, prog10);
      assertNotSame(prog13, prog11);
      assertNotSame(prog13, prog4);
      assertNotSame(prog13, prog9);
      assertNotSame(prog13, prog8);
      assertNotSame(prog13, prog12);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(prog13.equals((Object)prog2));
      assertFalse(prog13.equals((Object)prog3));
      assertFalse(prog13.equals((Object)prog0));
      assertFalse(prog13.equals((Object)prog1));
      assertFalse(prog13.equals((Object)prog7));
      assertFalse(prog13.equals((Object)prog5));
      assertFalse(prog13.equals((Object)prog6));
      assertFalse(prog13.equals((Object)prog10));
      assertFalse(prog13.equals((Object)prog11));
      assertFalse(prog13.equals((Object)prog4));
      assertFalse(prog13.equals((Object)prog9));
      assertFalse(prog13.equals((Object)prog8));
      assertFalse(prog13.equals((Object)prog12));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp1.op);
      assertNotNull(regexp2);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp0));
      
      Prog prog14 = Compiler.compileRegexp(regexp2);
      assertNotNull(prog14);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(prog14, prog0);
      assertNotSame(prog14, prog1);
      assertNotSame(prog14, prog11);
      assertNotSame(prog14, prog7);
      assertNotSame(prog14, prog6);
      assertNotSame(prog14, prog2);
      assertNotSame(prog14, prog13);
      assertNotSame(prog14, prog5);
      assertNotSame(prog14, prog3);
      assertNotSame(prog14, prog8);
      assertNotSame(prog14, prog12);
      assertNotSame(prog14, prog4);
      assertNotSame(prog14, prog9);
      assertNotSame(prog14, prog10);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(prog14.equals((Object)prog0));
      assertFalse(prog14.equals((Object)prog1));
      assertFalse(prog14.equals((Object)prog11));
      assertFalse(prog14.equals((Object)prog7));
      assertFalse(prog14.equals((Object)prog6));
      assertFalse(prog14.equals((Object)prog2));
      assertFalse(prog14.equals((Object)prog13));
      assertFalse(prog14.equals((Object)prog5));
      assertFalse(prog14.equals((Object)prog3));
      assertFalse(prog14.equals((Object)prog8));
      assertFalse(prog14.equals((Object)prog12));
      assertFalse(prog14.equals((Object)prog4));
      assertFalse(prog14.equals((Object)prog9));
      assertFalse(prog14.equals((Object)prog10));
      
      Prog prog15 = Compiler.compileRegexp(regexp1);
      assertNotNull(prog15);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(prog15, prog14);
      assertNotSame(prog15, prog12);
      assertNotSame(prog15, prog11);
      assertNotSame(prog15, prog4);
      assertNotSame(prog15, prog10);
      assertNotSame(prog15, prog8);
      assertNotSame(prog15, prog1);
      assertNotSame(prog15, prog0);
      assertNotSame(prog15, prog13);
      assertNotSame(prog15, prog9);
      assertNotSame(prog15, prog2);
      assertNotSame(prog15, prog5);
      assertNotSame(prog15, prog3);
      assertNotSame(prog15, prog7);
      assertNotSame(prog15, prog6);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(prog15.equals((Object)prog14));
      assertFalse(prog15.equals((Object)prog12));
      assertFalse(prog15.equals((Object)prog11));
      assertFalse(prog15.equals((Object)prog4));
      assertFalse(prog15.equals((Object)prog10));
      assertFalse(prog15.equals((Object)prog8));
      assertFalse(prog15.equals((Object)prog1));
      assertFalse(prog15.equals((Object)prog0));
      assertFalse(prog15.equals((Object)prog13));
      assertFalse(prog15.equals((Object)prog9));
      assertFalse(prog15.equals((Object)prog2));
      assertFalse(prog15.equals((Object)prog5));
      assertFalse(prog15.equals((Object)prog3));
      assertFalse(prog15.equals((Object)prog7));
      assertFalse(prog15.equals((Object)prog6));
      
      Prog prog16 = Compiler.compileRegexp(regexp2);
      assertNotNull(prog16);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(prog16, prog11);
      assertNotSame(prog16, prog8);
      assertNotSame(prog16, prog7);
      assertNotSame(prog16, prog15);
      assertNotSame(prog16, prog3);
      assertNotSame(prog16, prog4);
      assertNotSame(prog16, prog10);
      assertNotSame(prog16, prog12);
      assertNotSame(prog16, prog0);
      assertNotSame(prog16, prog1);
      assertNotSame(prog16, prog13);
      assertNotSame(prog16, prog2);
      assertNotSame(prog16, prog9);
      assertNotSame(prog16, prog14);
      assertNotSame(prog16, prog5);
      assertNotSame(prog16, prog6);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(prog16.equals((Object)prog11));
      assertFalse(prog16.equals((Object)prog8));
      assertFalse(prog16.equals((Object)prog7));
      assertFalse(prog16.equals((Object)prog15));
      assertFalse(prog16.equals((Object)prog3));
      assertFalse(prog16.equals((Object)prog4));
      assertFalse(prog16.equals((Object)prog10));
      assertFalse(prog16.equals((Object)prog12));
      assertFalse(prog16.equals((Object)prog0));
      assertFalse(prog16.equals((Object)prog1));
      assertFalse(prog16.equals((Object)prog13));
      assertFalse(prog16.equals((Object)prog2));
      assertFalse(prog16.equals((Object)prog9));
      assertFalse(prog16.equals((Object)prog14));
      assertFalse(prog16.equals((Object)prog5));
      assertFalse(prog16.equals((Object)prog6));
      
      Prog prog17 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog17);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(prog17, prog13);
      assertNotSame(prog17, prog6);
      assertNotSame(prog17, prog1);
      assertNotSame(prog17, prog4);
      assertNotSame(prog17, prog7);
      assertNotSame(prog17, prog9);
      assertNotSame(prog17, prog5);
      assertNotSame(prog17, prog0);
      assertNotSame(prog17, prog15);
      assertNotSame(prog17, prog3);
      assertNotSame(prog17, prog12);
      assertNotSame(prog17, prog14);
      assertNotSame(prog17, prog10);
      assertNotSame(prog17, prog16);
      assertNotSame(prog17, prog8);
      assertNotSame(prog17, prog2);
      assertNotSame(prog17, prog11);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(prog17.equals((Object)prog13));
      assertFalse(prog17.equals((Object)prog6));
      assertFalse(prog17.equals((Object)prog1));
      assertFalse(prog17.equals((Object)prog4));
      assertFalse(prog17.equals((Object)prog7));
      assertFalse(prog17.equals((Object)prog9));
      assertFalse(prog17.equals((Object)prog5));
      assertFalse(prog17.equals((Object)prog0));
      assertFalse(prog17.equals((Object)prog15));
      assertFalse(prog17.equals((Object)prog3));
      assertFalse(prog17.equals((Object)prog12));
      assertFalse(prog17.equals((Object)prog14));
      assertFalse(prog17.equals((Object)prog10));
      assertFalse(prog17.equals((Object)prog16));
      assertFalse(prog17.equals((Object)prog8));
      assertFalse(prog17.equals((Object)prog2));
      assertFalse(prog17.equals((Object)prog11));
  }
}
