/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:07:32 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BranchInstruction_ESTest extends BranchInstruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      LCMP lCMP0 = (LCMP)InstructionConstants.LCMP;
      assertNotNull(lCMP0);
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(lCMP0);
      assertNotNull(instructionHandle0);
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) lCMP0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle1);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotNull(iF_ICMPGT0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(3, iF_ICMPGT0.getLength());
      
      IfInstruction ifInstruction0 = iF_ICMPGT0.negate();
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotNull(ifInstruction0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      
      ifInstruction0.updateTarget(instructionHandle1, instructionHandle0);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IFGE iFGE0 = new IFGE();
      assertNotNull(iFGE0);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(instructionList0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFGE0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(branchHandle0);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      JSR jSR0 = new JSR(branchHandle0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(jSR0);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, jSR0.getIndex());
      assertEquals((short)168, jSR0.getOpcode());
      assertEquals(3, jSR0.getLength());
      
      int int0 = (-763);
      int int1 = jSR0.updatePosition(int0, int0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, jSR0.getIndex());
      assertEquals((short)168, jSR0.getOpcode());
      assertEquals(3, jSR0.getLength());
      
      boolean boolean2 = false;
      String string0 = jSR0.toString(boolean2);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean2 == boolean0);
      assertNotNull(string0);
      assertEquals("jsr -> 0", string0);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, jSR0.getIndex());
      assertEquals((short)168, jSR0.getOpcode());
      assertEquals(3, jSR0.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertNotNull(iF_ICMPNE0);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      
      IF_ICMPEQ iF_ICMPEQ0 = (IF_ICMPEQ)iF_ICMPNE0.negate();
      assertNotNull(iF_ICMPEQ0);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      iF_ICMPEQ0.initFromFile(byteSequence0, boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((-256), iF_ICMPEQ0.getIndex());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      assertEquals(2, byteSequence0.getIndex());
      
      int int0 = iF_ICMPEQ0.updatePosition(byte0, byteArray0[5]);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((-256), iF_ICMPEQ0.getIndex());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertNotNull(iF_ICMPGT0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      assertNotNull(instructionList0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertNotNull(instructionHandle0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      GOTO gOTO0 = new GOTO(instructionHandle0);
      assertNotNull(gOTO0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals(3, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      
      String string0 = "WiZ7";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      int int0 = 1;
      int int1 = gOTO0.updatePosition(int0, int0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals(3, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      gOTO0.dump(dataOutputStream0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals((-1), gOTO0.getIndex());
      assertEquals(3, gOTO0.getLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      ICONST iCONST0 = (ICONST)InstructionConstants.ICONST_0;
      assertNotNull(iCONST0);
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iCONST0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IFGT iFGT0 = new IFGT(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(iFGT0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFGT0.getIndex());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(3, iFGT0.getLength());
      
      BranchInstruction.notifyTarget(instructionHandle0, instructionHandle0, iFGT0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFGT0.getIndex());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(3, iFGT0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-102);
      byteArray0[0] = byte0;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      String string0 = instructionList0.toString();
      assertArrayEquals(new byte[] {(byte) (-102), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(string0);
      assertEquals("   0: ifne[154](3) -> <points to itself>\n   3: nop[0](1)\n   4: nop[0](1)\n", string0);
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(instructionList0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertNotNull(iF_ACMPEQ0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ACMPEQ0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(branchHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      assertNotNull(iF_ICMPLT0);
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      
      int int0 = iF_ICMPLT0.getTargetOffset(branchHandle0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertNotNull(iF_ICMPGT0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      assertNotNull(instructionList0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertNotNull(instructionHandle0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      assertNotNull(iF_ACMPNE0);
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      
      iF_ACMPNE0.dispose();
      assertEquals((-1), iF_ACMPNE0.getIndex());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      
      int int0 = iF_ACMPNE0.getTargetOffset(instructionHandle0);
      assertEquals(1, int0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals((-1), iF_ACMPNE0.getIndex());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertNotNull(iF_ICMPGT0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      assertNotNull(instructionList0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertNotNull(instructionHandle0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      
      GOTO gOTO0 = new GOTO(instructionHandle0);
      assertNotNull(gOTO0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(3, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short)167, gOTO0.getOpcode());
      
      int int0 = gOTO0.getTargetOffset();
      assertEquals(0, int0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(3, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short)167, gOTO0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertNotNull(iF_ICMPGT0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      assertNotNull(instructionList0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      int int0 = 0;
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertNotNull(instructionHandle0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      
      GOTO gOTO0 = new GOTO(instructionHandle0);
      assertNotNull(gOTO0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals(3, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      int int2 = iF_ICMPGT0.updatePosition(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      
      int int3 = gOTO0.getTargetOffset();
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(2, int3);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals(3, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertNotNull(iF_ICMPGT0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      assertNotNull(instructionList0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      int int0 = 0;
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertNotNull(instructionHandle0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      GOTO gOTO0 = new GOTO(instructionHandle0);
      assertNotNull(gOTO0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(0, gOTO0.getIndex());
      assertEquals(3, gOTO0.getLength());
      assertEquals((short)167, gOTO0.getOpcode());
      
      int int1 = 1;
      int int2 = gOTO0.updatePosition(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(0, gOTO0.getIndex());
      assertEquals(3, gOTO0.getLength());
      assertEquals((short)167, gOTO0.getOpcode());
      
      int int3 = gOTO0.getTargetOffset();
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(0, gOTO0.getIndex());
      assertEquals(3, gOTO0.getLength());
      assertEquals((short)167, gOTO0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      assertNotNull(iF_ICMPLT0);
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      
      IfInstruction ifInstruction0 = iF_ICMPLT0.negate();
      assertNotNull(ifInstruction0);
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)162, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      
      InstructionHandle instructionHandle0 = ifInstruction0.getTarget();
      assertNull(instructionHandle0);
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)162, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      ICONST iCONST0 = new ICONST();
      assertNotNull(iCONST0);
      assertEquals(1, iCONST0.getLength());
      assertEquals((short) (-1), iCONST0.getOpcode());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iCONST0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, iCONST0.getLength());
      assertEquals((short) (-1), iCONST0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IFGT iFGT0 = new IFGT(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(iFGT0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, iCONST0.getLength());
      assertEquals((short) (-1), iCONST0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFGT0.getLength());
      assertEquals(0, iFGT0.getIndex());
      assertEquals((short)157, iFGT0.getOpcode());
      
      instructionHandle0.dispose();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, iCONST0.getLength());
      assertEquals((short) (-1), iCONST0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      InstructionHandle instructionHandle1 = iFGT0.getTarget();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionHandle1);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, iCONST0.getLength());
      assertEquals((short) (-1), iCONST0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iFGT0.getLength());
      assertEquals(0, iFGT0.getIndex());
      assertEquals((short)157, iFGT0.getOpcode());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertNotNull(iF_ACMPEQ0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ACMPEQ0);
      assertNotNull(branchHandle0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(branchHandle0);
      assertNotNull(iF_ICMPLT0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      
      InstructionHandle instructionHandle0 = iF_ICMPLT0.getTarget();
      assertNotNull(instructionHandle0);
      assertSame(branchHandle0, instructionHandle0);
      assertSame(instructionHandle0, branchHandle0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      assertNotNull(iF_ACMPNE0);
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(1, iF_ACMPNE0.getLength());
      
      IF_ACMPEQ iF_ACMPEQ0 = (IF_ACMPEQ)iF_ACMPNE0.negate();
      assertNotNull(iF_ACMPEQ0);
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      
      int int0 = iF_ACMPEQ0.getPosition();
      assertEquals(0, int0);
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals(0, iF_ACMPEQ0.getIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSR jSR0 = new JSR();
      assertNotNull(jSR0);
      assertEquals(0, jSR0.getIndex());
      assertEquals((short) (-1), jSR0.getOpcode());
      assertEquals(1, jSR0.getLength());
      
      int int0 = 1108;
      jSR0.setPosition(int0);
      assertEquals(0, jSR0.getIndex());
      assertEquals((short) (-1), jSR0.getOpcode());
      assertEquals(1, jSR0.getLength());
      
      int int1 = jSR0.getPosition();
      assertTrue(int1 == int0);
      assertEquals(1108, int1);
      assertEquals(0, jSR0.getIndex());
      assertEquals((short) (-1), jSR0.getOpcode());
      assertEquals(1, jSR0.getLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IFLT iFLT0 = new IFLT();
      assertNotNull(iFLT0);
      assertEquals(0, iFLT0.getIndex());
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      
      IFGE iFGE0 = (IFGE)iFLT0.negate();
      assertNotNull(iFGE0);
      assertEquals(0, iFLT0.getIndex());
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals((short)156, iFGE0.getOpcode());
      assertEquals(3, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      
      iFGE0.dispose();
      assertEquals(0, iFLT0.getIndex());
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals((short)156, iFGE0.getOpcode());
      assertEquals((-1), iFGE0.getIndex());
      assertEquals(3, iFGE0.getLength());
      
      int int0 = iFGE0.getPosition();
      assertEquals((-1), int0);
      assertEquals(0, iFLT0.getIndex());
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals((short)156, iFGE0.getOpcode());
      assertEquals((-1), iFGE0.getIndex());
      assertEquals(3, iFGE0.getLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertNotNull(iF_ICMPNE0);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      
      IF_ICMPEQ iF_ICMPEQ0 = (IF_ICMPEQ)iF_ICMPNE0.negate();
      assertNotNull(iF_ICMPEQ0);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      
      int int0 = 1;
      iF_ICMPEQ0.setIndex(int0);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      assertEquals(1, iF_ICMPEQ0.getIndex());
      
      int int1 = iF_ICMPEQ0.getIndex();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      assertEquals(1, iF_ICMPEQ0.getIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertNotNull(iF_ICMPNE0);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      
      IF_ICMPEQ iF_ICMPEQ0 = (IF_ICMPEQ)iF_ICMPNE0.negate();
      assertNotNull(iF_ICMPEQ0);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      iF_ICMPEQ0.initFromFile(byteSequence0, boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals((-256), iF_ICMPEQ0.getIndex());
      assertEquals(2, byteSequence0.getIndex());
      
      int int0 = iF_ICMPEQ0.getIndex();
      assertEquals((-256), int0);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals((-256), iF_ICMPEQ0.getIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      
      ICONST iCONST0 = (ICONST)InstructionConstants.ICONST_0;
      assertNotNull(iCONST0);
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iCONST0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionHandle0);
      assertEquals(10, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(10, instructionList0.size());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFGT iFGT0 = new IFGT(instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(iFGT0);
      assertEquals(10, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(10, instructionList0.size());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFGT0.getLength());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(0, iFGT0.getIndex());
      
      IfInstruction ifInstruction0 = iFGT0.negate();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(ifInstruction0);
      assertEquals(10, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(10, instructionList0.size());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFGT0.getLength());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(0, iFGT0.getIndex());
      assertEquals((short)158, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) ifInstruction0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(branchHandle0);
      assertEquals(11, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(11, instructionList0.size());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFGT0.getLength());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(0, iFGT0.getIndex());
      assertEquals((short)158, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      // Undeclared exception!
      try { 
        iFGT0.updateTarget(branchHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not targeting   -1: ifle[158](3) -> -1, but   -1: iconst_0[3](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertNotNull(iF_ICMPGT0);
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      assertNotNull(instructionList0);
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertNotNull(instructionHandle0);
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      instructionList0.delete(instructionHandle0, instructionHandle0);
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((-1), iF_ICMPGT0.getIndex());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      assertNotNull(iF_ACMPNE0);
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      
      // Undeclared exception!
      try { 
        iF_ACMPNE0.updateTarget(instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertNotNull(iF_ICMPGT0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      assertNotNull(instructionList0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      
      int int0 = 0;
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(int0);
      assertNotNull(aNEWARRAY0);
      assertEquals((short)189, aNEWARRAY0.getOpcode());
      assertEquals(0, aNEWARRAY0.getIndex());
      assertEquals(3, aNEWARRAY0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) aNEWARRAY0);
      assertNotNull(instructionHandle0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)189, aNEWARRAY0.getOpcode());
      assertEquals(0, aNEWARRAY0.getIndex());
      assertEquals(3, aNEWARRAY0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      GOTO gOTO0 = new GOTO(instructionHandle0);
      assertNotNull(gOTO0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)189, aNEWARRAY0.getOpcode());
      assertEquals(0, aNEWARRAY0.getIndex());
      assertEquals(3, aNEWARRAY0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short)167, gOTO0.getOpcode());
      
      // Undeclared exception!
      try { 
        gOTO0.updatePosition(int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for goto[167](3):-1:  -1: anewarray[189](3) 0
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      GOTO gOTO0 = new GOTO();
      assertNotNull(gOTO0);
      assertEquals(0, gOTO0.getIndex());
      assertEquals(1, gOTO0.getLength());
      assertEquals((short) (-1), gOTO0.getOpcode());
      
      // Undeclared exception!
      try { 
        gOTO0.updatePosition(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IFNULL iFNULL0 = new IFNULL();
      assertNotNull(iFNULL0);
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(1, iFNULL0.getLength());
      assertEquals(0, iFNULL0.getIndex());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        iFNULL0.toString(boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = false;
      GOTO gOTO0 = new GOTO();
      assertNotNull(gOTO0);
      assertEquals(1, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short) (-1), gOTO0.getOpcode());
      
      ByteSequence byteSequence0 = null;
      // Undeclared exception!
      try { 
        gOTO0.initFromFile(byteSequence0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertNotNull(iF_ICMPNE0);
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      try { 
        iF_ICMPNE0.initFromFile(byteSequence0, boolean0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      ICONST iCONST0 = (ICONST)InstructionConstants.ICONST_0;
      assertNotNull(iCONST0);
      assertEquals(1, iCONST0.getLength());
      assertEquals((short)3, iCONST0.getOpcode());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iCONST0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, iCONST0.getLength());
      assertEquals((short)3, iCONST0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IFGT iFGT0 = new IFGT(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(iFGT0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, iCONST0.getLength());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(3, iFGT0.getLength());
      assertEquals(0, iFGT0.getIndex());
      
      instructionHandle0.dispose();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, iCONST0.getLength());
      assertEquals((short)3, iCONST0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      // Undeclared exception!
      try { 
        iFGT0.getTargetOffset(instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      assertNotNull(tABLESWITCH0);
      assertEquals(1, tABLESWITCH0.getLength());
      assertEquals(0, tABLESWITCH0.getIndex());
      assertEquals((short) (-1), tABLESWITCH0.getOpcode());
      
      InstructionHandle instructionHandle0 = null;
      // Undeclared exception!
      try { 
        tABLESWITCH0.getTargetOffset(instructionHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertNotNull(iF_ICMPGT0);
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      
      IfInstruction ifInstruction0 = iF_ICMPGT0.negate();
      assertNotNull(ifInstruction0);
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      
      IF_ICMPGT iF_ICMPGT1 = (IF_ICMPGT)ifInstruction0.negate();
      assertFalse(iF_ICMPGT1.equals((Object)iF_ICMPGT0));
      assertNotNull(iF_ICMPGT1);
      assertNotSame(iF_ICMPGT0, iF_ICMPGT1);
      assertNotSame(iF_ICMPGT1, iF_ICMPGT0);
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, iF_ICMPGT1.getLength());
      assertEquals(0, iF_ICMPGT1.getIndex());
      assertEquals((short)163, iF_ICMPGT1.getOpcode());
      
      // Undeclared exception!
      try { 
        iF_ICMPGT1.getTargetOffset();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of if_icmpgt[163](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      ICONST iCONST0 = (ICONST)InstructionConstants.ICONST_0;
      assertNotNull(iCONST0);
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iCONST0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IFGT iFGT0 = new IFGT(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(iFGT0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iFGT0.getLength());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(0, iFGT0.getIndex());
      
      instructionHandle0.dispose();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      // Undeclared exception!
      try { 
        iFGT0.getTargetOffset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertNotNull(iF_ICMPNE0);
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(1, iF_ICMPNE0.getLength());
      
      // Undeclared exception!
      try { 
        iF_ICMPNE0.getTargetOffset();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InstructionHandle instructionHandle0 = null;
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      assertNotNull(iF_ACMPEQ0);
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      
      String string0 = "<cgG~u";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      // Undeclared exception!
      try { 
        iF_ACMPEQ0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of if_acmpeq[165](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertNotNull(iF_ICMPGE0);
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      
      DataOutputStream dataOutputStream0 = null;
      // Undeclared exception!
      try { 
        iF_ICMPGE0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IFNE iFNE0 = new IFNE();
      assertNotNull(iFNE0);
      assertEquals((short) (-1), iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(1, iFNE0.getLength());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        iFNE0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IFLT iFLT0 = new IFLT();
      assertNotNull(iFLT0);
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      try { 
        iFLT0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertNotNull(iF_ACMPEQ0);
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ACMPEQ0);
      assertNotNull(branchHandle0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(branchHandle0);
      assertNotNull(iF_ICMPLT0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      iF_ICMPLT0.dump(dataOutputStream0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertNotNull(iF_ICMPNE0);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      
      IfInstruction ifInstruction0 = iF_ICMPNE0.negate();
      assertNotNull(ifInstruction0);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)159, ifInstruction0.getOpcode());
      
      int int0 = ifInstruction0.getIndex();
      assertEquals(0, int0);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)159, ifInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      ICONST iCONST0 = (ICONST)InstructionConstants.ICONST_0;
      assertNotNull(iCONST0);
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iCONST0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFGT iFGT0 = new IFGT(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(iFGT0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(3, iFGT0.getLength());
      assertEquals(0, iFGT0.getIndex());
      
      iFGT0.setTarget(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(3, iFGT0.getLength());
      assertEquals(0, iFGT0.getIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertNotNull(iF_ACMPEQ0);
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ACMPEQ0);
      assertNotNull(branchHandle0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(branchHandle0);
      assertNotNull(iF_ICMPLT0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      
      boolean boolean0 = iF_ICMPLT0.containsTarget(branchHandle0);
      assertTrue(boolean0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertNotNull(iF_ACMPEQ0);
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ACMPEQ0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(branchHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      assertNotNull(iF_ICMPLT0);
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(1, iF_ICMPLT0.getLength());
      
      boolean boolean0 = iF_ICMPLT0.containsTarget(branchHandle0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(1, iF_ICMPLT0.getLength());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertNotNull(iF_ICMPGT0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      assertNotNull(instructionList0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertNotNull(instructionHandle0);
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      assertNotNull(iF_ACMPNE0);
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      
      // Undeclared exception!
      try { 
        iF_ACMPNE0.updateTarget(instructionHandle0, instructionHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IFLT iFLT0 = new IFLT();
      assertNotNull(iFLT0);
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      assertEquals(0, iFLT0.getIndex());
      
      IfInstruction ifInstruction0 = iFLT0.negate();
      assertNotNull(ifInstruction0);
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short)156, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      
      boolean boolean0 = false;
      String string0 = ifInstruction0.toString(boolean0);
      assertNotNull(string0);
      assertEquals("ifge -> null", string0);
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short)156, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      ICONST iCONST0 = new ICONST();
      assertNotNull(iCONST0);
      assertEquals(1, iCONST0.getLength());
      assertEquals((short) (-1), iCONST0.getOpcode());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iCONST0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, iCONST0.getLength());
      assertEquals((short) (-1), iCONST0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFGT iFGT0 = new IFGT(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(iFGT0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, iCONST0.getLength());
      assertEquals((short) (-1), iCONST0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(3, iFGT0.getLength());
      assertEquals(0, iFGT0.getIndex());
      
      boolean boolean0 = true;
      instructionHandle0.dispose();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, iCONST0.getLength());
      assertEquals((short) (-1), iCONST0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      String string0 = iFGT0.toString(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertEquals("ifgt[157](3) -> <null instruction!!!?>", string0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, iCONST0.getLength());
      assertEquals((short) (-1), iCONST0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(3, iFGT0.getLength());
      assertEquals(0, iFGT0.getIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IFLT iFLT0 = new IFLT();
      assertNotNull(iFLT0);
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      
      IfInstruction ifInstruction0 = iFLT0.negate();
      assertNotNull(ifInstruction0);
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      assertEquals((short)156, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      
      boolean boolean0 = true;
      String string0 = ifInstruction0.toString(boolean0);
      assertNotNull(string0);
      assertEquals("ifge[156](3) -> null", string0);
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      assertEquals((short)156, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      ICONST iCONST0 = new ICONST();
      assertNotNull(iCONST0);
      assertEquals((short) (-1), iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iCONST0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFGT iFGT0 = new IFGT(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(iFGT0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(0, iFGT0.getIndex());
      assertEquals(3, iFGT0.getLength());
      
      boolean boolean0 = true;
      String string0 = iFGT0.toString(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertEquals("ifgt[157](3) -> -1", string0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(0, iFGT0.getIndex());
      assertEquals(3, iFGT0.getLength());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IFGE iFGE0 = new IFGE();
      assertNotNull(iFGE0);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, iFGE0.getLength());
      
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(instructionList0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFGE0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(branchHandle0);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, iFGE0.getLength());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      JSR jSR0 = new JSR(branchHandle0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(jSR0);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, iFGE0.getLength());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(3, jSR0.getLength());
      assertEquals(0, jSR0.getIndex());
      assertEquals((short)168, jSR0.getOpcode());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(instructionHandle0);
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      // Undeclared exception!
      try { 
        jSR0.getTargetOffset(instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for jsr[168](3):-1:  -1: iconst_1[4](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }
}
