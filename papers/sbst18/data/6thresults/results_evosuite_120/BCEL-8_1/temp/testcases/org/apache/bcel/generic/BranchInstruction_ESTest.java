/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:35:53 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionComparator;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BranchInstruction_ESTest extends BranchInstruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LMUL lMUL0 = (LMUL)InstructionConstants.LMUL;
      assertNotNull(lMUL0);
      assertEquals(1, lMUL0.getLength());
      assertEquals((short)105, lMUL0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList(lMUL0);
      assertNotNull(instructionList0);
      assertEquals(1, lMUL0.getLength());
      assertEquals((short)105, lMUL0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lMUL0);
      assertNotNull(instructionHandle0);
      assertEquals(1, lMUL0.getLength());
      assertEquals((short)105, lMUL0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      int int0 = 0;
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(int0);
      assertNotNull(iNVOKEVIRTUAL0);
      assertEquals(3, iNVOKEVIRTUAL0.getLength());
      assertEquals((short)182, iNVOKEVIRTUAL0.getOpcode());
      assertEquals(0, iNVOKEVIRTUAL0.getIndex());
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (Instruction) iNVOKEVIRTUAL0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotNull(instructionHandle1);
      assertEquals(1, lMUL0.getLength());
      assertEquals((short)105, lMUL0.getOpcode());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(3, iNVOKEVIRTUAL0.getLength());
      assertEquals((short)182, iNVOKEVIRTUAL0.getOpcode());
      assertEquals(0, iNVOKEVIRTUAL0.getIndex());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle1);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotNull(iF_ICMPGT0);
      assertEquals(1, lMUL0.getLength());
      assertEquals((short)105, lMUL0.getOpcode());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(3, iNVOKEVIRTUAL0.getLength());
      assertEquals((short)182, iNVOKEVIRTUAL0.getOpcode());
      assertEquals(0, iNVOKEVIRTUAL0.getIndex());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(3, iF_ICMPGT0.getLength());
      
      // Undeclared exception!
      try { 
        iF_ICMPGT0.updateTarget(instructionHandle0, instructionHandle1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not targeting   -1: lmul[105](1), but   -1: invokevirtual[182](3) 0
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      long long0 = (-1184L);
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertNotNull(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertNotNull(instructionList0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertNotNull(instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      assertNotNull(iFNONNULL0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(3, iFNONNULL0.getLength());
      
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      assertNotNull(gOTO_W0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short)200, gOTO_W0.getOpcode());
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFNONNULL0);
      assertNotNull(branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      gOTO_W0.updateTarget(instructionHandle0, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InstructionHandle instructionHandle0 = null;
      IFGE iFGE0 = new IFGE(instructionHandle0);
      assertNotNull(iFGE0);
      assertEquals((short)156, iFGE0.getOpcode());
      assertEquals(3, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      
      int int0 = 0;
      int int1 = 108;
      iFGE0.index = int1;
      assertEquals((short)156, iFGE0.getOpcode());
      assertEquals(108, iFGE0.getIndex());
      assertEquals(3, iFGE0.getLength());
      
      int int2 = iFGE0.updatePosition(int0, int1);
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((short)156, iFGE0.getOpcode());
      assertEquals(108, iFGE0.getIndex());
      assertEquals(3, iFGE0.getLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DSTORE dSTORE0 = new DSTORE();
      assertNotNull(dSTORE0);
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertEquals(1, dSTORE0.getLength());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(dSTORE0);
      assertNotNull(instructionHandle0);
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      assertNotNull(iFNONNULL0);
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(3, iFNONNULL0.getLength());
      
      IFNULL iFNULL0 = (IFNULL)iFNONNULL0.negate();
      assertNotNull(iFNULL0);
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(3, iFNULL0.getLength());
      assertEquals(0, iFNULL0.getIndex());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNULL0);
      assertNotNull(instructionList0);
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(3, iFNULL0.getLength());
      assertEquals(0, iFNULL0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) dSTORE0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotNull(instructionHandle1);
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(3, iFNULL0.getLength());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      
      // Undeclared exception!
      try { 
        iFNULL0.getTargetOffset(instructionHandle1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      assertNotNull(iFNONNULL0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFNONNULL0);
      assertNotNull(branchHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      iFNONNULL0.target = (InstructionHandle) branchHandle0;
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, iFNONNULL0.target.getPosition());
      assertFalse(iFNONNULL0.target.hasTargeters());
      
      int int0 = 91;
      int int1 = iFNONNULL0.updatePosition(int0, int0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      iFNONNULL0.dump(dataOutputStream0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IFGE iFGE0 = new IFGE();
      assertNotNull(iFGE0);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, iFGE0.getLength());
      
      InstructionHandle instructionHandle0 = null;
      BranchInstruction.notifyTarget(instructionHandle0, instructionHandle0, iFGE0);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, iFGE0.getLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DSTORE dSTORE0 = new DSTORE();
      assertNotNull(dSTORE0);
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((short) (-1), dSTORE0.getOpcode());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(dSTORE0);
      assertNotNull(instructionHandle0);
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      assertNotNull(iFNONNULL0);
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      
      IfInstruction ifInstruction0 = iFNONNULL0.negate();
      assertNotNull(ifInstruction0);
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)198, ifInstruction0.getOpcode());
      
      DSTORE dSTORE1 = (DSTORE)instructionHandle0.swapInstruction(iFNONNULL0);
      assertSame(dSTORE0, dSTORE1);
      assertSame(dSTORE1, dSTORE0);
      assertNotNull(dSTORE1);
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals((-1), dSTORE1.getIndex());
      assertEquals((short)57, dSTORE1.getCanonicalTag());
      assertEquals((short) (-1), dSTORE1.getOpcode());
      assertEquals(1, dSTORE1.getLength());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertNotNull(instructionList0);
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, (Instruction) iFNONNULL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction ifnonnull[199](3) -> <points to itself> to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      assertNotNull(tABLESWITCH0);
      assertEquals((short) (-1), tABLESWITCH0.getOpcode());
      assertEquals(0, tABLESWITCH0.getIndex());
      assertEquals(1, tABLESWITCH0.getLength());
      
      int int0 = 0;
      int int1 = tABLESWITCH0.updatePosition(int0, int0);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals((short) (-1), tABLESWITCH0.getOpcode());
      assertEquals(3, tABLESWITCH0.getLength());
      assertEquals(0, tABLESWITCH0.getIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      POP pOP0 = (POP)InstructionConstants.POP;
      assertNotNull(pOP0);
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(pOP0);
      assertNotNull(instructionHandle0);
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      assertNotNull(iFNONNULL0);
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFNONNULL0);
      assertNotNull(branchHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      iFNONNULL0.target = (InstructionHandle) branchHandle0;
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(iFNONNULL0.target.hasTargeters());
      assertEquals(0, iFNONNULL0.target.getPosition());
      
      GOTO_W gOTO_W0 = new GOTO_W(branchHandle0);
      assertNotNull(gOTO_W0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(0, gOTO_W0.getIndex());
      
      int int0 = gOTO_W0.getTargetOffset(iFNONNULL0.target);
      assertEquals(0, int0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(0, gOTO_W0.getIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      POP pOP0 = (POP)InstructionConstants.POP;
      assertNotNull(pOP0);
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(pOP0);
      assertNotNull(instructionHandle0);
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      assertNotNull(iFNONNULL0);
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFNONNULL0);
      assertNotNull(branchHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      iFNONNULL0.target = (InstructionHandle) branchHandle0;
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(iFNONNULL0.target.hasTargeters());
      assertEquals(0, iFNONNULL0.target.getPosition());
      
      GOTO_W gOTO_W0 = new GOTO_W(branchHandle0);
      assertNotNull(gOTO_W0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      
      gOTO_W0.dispose();
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals((-1), gOTO_W0.getIndex());
      
      int int0 = gOTO_W0.getTargetOffset(iFNONNULL0.target);
      assertEquals(1, int0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals((-1), gOTO_W0.getIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      assertNotNull(iFNONNULL0);
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFNONNULL0);
      assertNotNull(branchHandle0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(branchHandle0);
      assertNotNull(iF_ICMPLE0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals(0, iF_ICMPLE0.getIndex());
      
      int int0 = 91;
      int int1 = iFNONNULL0.updatePosition(int0, int0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      
      int int2 = iF_ICMPLE0.getTargetOffset();
      assertEquals(91, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(91, branchHandle0.getPosition());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals(0, iF_ICMPLE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      POP pOP0 = (POP)InstructionConstants.POP;
      assertNotNull(pOP0);
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(pOP0);
      assertNotNull(instructionHandle0);
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      assertNotNull(iFNONNULL0);
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFNONNULL0);
      assertNotNull(branchHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(branchHandle0);
      assertNotNull(iF_ICMPLE0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals(3, iF_ICMPLE0.getLength());
      
      int int0 = 642;
      int int1 = iF_ICMPLE0.updatePosition(int0, int0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals(3, iF_ICMPLE0.getLength());
      
      int int2 = iF_ICMPLE0.getTargetOffset();
      assertEquals((-642), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals(1, pOP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals(3, iF_ICMPLE0.getLength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IFGE iFGE0 = new IFGE();
      assertNotNull(iFGE0);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      
      InstructionHandle instructionHandle0 = iFGE0.getTarget();
      assertNull(instructionHandle0);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      I2S i2S0 = (I2S)InstructionConstants.I2S;
      assertNotNull(i2S0);
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(i2S0);
      assertNotNull(instructionHandle0);
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertNotNull(iF_ICMPGE0);
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals(3, iF_ICMPGE0.getLength());
      
      instructionHandle0.dispose();
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      InstructionHandle instructionHandle1 = iF_ICMPGE0.getTarget();
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      assertNotNull(instructionHandle1);
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      assertNotNull(lDIV0);
      assertEquals(1, lDIV0.getLength());
      assertEquals((short)109, lDIV0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList(lDIV0);
      assertNotNull(instructionList0);
      assertEquals(1, lDIV0.getLength());
      assertEquals((short)109, lDIV0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(lDIV0);
      assertNotNull(instructionHandle0);
      assertEquals(1, lDIV0.getLength());
      assertEquals((short)109, lDIV0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IFGT iFGT0 = new IFGT(instructionHandle0);
      assertNotNull(iFGT0);
      assertEquals(1, lDIV0.getLength());
      assertEquals((short)109, lDIV0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iFGT0.getIndex());
      assertEquals(3, iFGT0.getLength());
      assertEquals((short)157, iFGT0.getOpcode());
      
      IfInstruction ifInstruction0 = iFGT0.negate();
      assertNotNull(ifInstruction0);
      assertEquals(1, lDIV0.getLength());
      assertEquals((short)109, lDIV0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iFGT0.getIndex());
      assertEquals(3, iFGT0.getLength());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)158, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertNotNull(branchHandle0);
      assertEquals(1, lDIV0.getLength());
      assertEquals((short)109, lDIV0.getOpcode());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iFGT0.getIndex());
      assertEquals(3, iFGT0.getLength());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)158, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE(branchHandle0);
      assertNotNull(iF_ACMPNE0);
      assertEquals(1, lDIV0.getLength());
      assertEquals((short)109, lDIV0.getOpcode());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iFGT0.getIndex());
      assertEquals(3, iFGT0.getLength());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)158, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      
      InstructionHandle instructionHandle1 = iF_ACMPNE0.getTarget();
      assertSame(branchHandle0, instructionHandle1);
      assertSame(instructionHandle1, branchHandle0);
      assertNotNull(instructionHandle1);
      assertEquals(1, lDIV0.getLength());
      assertEquals((short)109, lDIV0.getOpcode());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iFGT0.getIndex());
      assertEquals(3, iFGT0.getLength());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)158, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(0, instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LOOKUPSWITCH lOOKUPSWITCH0 = new LOOKUPSWITCH();
      assertNotNull(lOOKUPSWITCH0);
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      
      int int0 = lOOKUPSWITCH0.getPosition();
      assertEquals(0, int0);
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      assertNotNull(iF_ICMPLE0);
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      
      int int0 = 1;
      iF_ICMPLE0.setPosition(int0);
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      
      int int1 = iF_ICMPLE0.getPosition();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IFNULL iFNULL0 = new IFNULL();
      assertNotNull(iFNULL0);
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(1, iFNULL0.getLength());
      
      int int0 = (-1270);
      int int1 = iFNULL0.updatePosition(int0, int0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(1, iFNULL0.getLength());
      
      int int2 = iFNULL0.getPosition();
      assertEquals((-1270), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(1, iFNULL0.getLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LAND lAND0 = (LAND)InstructionConstants.LAND;
      assertNotNull(lAND0);
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals(1, lAND0.getLength());
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lAND0);
      assertNotNull(instructionHandle0);
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals(1, lAND0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      instructionList0.delete((Instruction) lAND0, (Instruction) lAND0);
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals(1, lAND0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      assertNotNull(iF_ICMPLE0);
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      
      // Undeclared exception!
      try { 
        iF_ICMPLE0.updateTarget(instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IFLT iFLT0 = new IFLT();
      assertNotNull(iFLT0);
      assertEquals(0, iFLT0.getIndex());
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(instructionList0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      
      Instruction instruction0 = instructionHandle0.swapInstruction(iFLT0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(instruction0);
      assertEquals(0, iFLT0.getIndex());
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(1, instruction0.getLength());
      assertEquals((short)0, instruction0.getOpcode());
      
      // Undeclared exception!
      try { 
        iFLT0.updateTarget(instructionHandle0, instructionHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InstructionHandle instructionHandle0 = null;
      JSR jSR0 = new JSR(instructionHandle0);
      assertNotNull(jSR0);
      assertEquals(0, jSR0.getIndex());
      assertEquals((short)168, jSR0.getOpcode());
      assertEquals(3, jSR0.getLength());
      
      int int0 = 1844;
      // Undeclared exception!
      try { 
        jSR0.updatePosition(int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of jsr[168](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      GOTO gOTO0 = new GOTO();
      assertNotNull(gOTO0);
      assertEquals(1, gOTO0.getLength());
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(0, gOTO0.getIndex());
      
      // Undeclared exception!
      try { 
        gOTO0.updatePosition(byteArray0[6], byteArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IFLT iFLT0 = new IFLT();
      assertNotNull(iFLT0);
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        iFLT0.toString(boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertNotNull(iF_ACMPEQ0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      
      boolean boolean0 = iF_ACMPEQ0.equals(iF_ACMPEQ0);
      assertFalse(boolean0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      
      ByteSequence byteSequence0 = null;
      // Undeclared exception!
      try { 
        iF_ACMPEQ0.initFromFile(byteSequence0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      assertNotNull(iFGT0);
      assertEquals(0, iFGT0.getIndex());
      assertEquals((short) (-1), iFGT0.getOpcode());
      assertEquals(1, iFGT0.getLength());
      
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = false;
      try { 
        iFGT0.initFromFile(byteSequence0, boolean0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      I2S i2S0 = (I2S)InstructionConstants.I2S;
      assertNotNull(i2S0);
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(i2S0);
      assertNotNull(instructionHandle0);
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertNotNull(iF_ICMPGE0);
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      
      instructionHandle0.dispose();
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      // Undeclared exception!
      try { 
        iF_ICMPGE0.getTargetOffset(instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertNotNull(iF_ICMPGT0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      
      IF_ICMPLE iF_ICMPLE0 = (IF_ICMPLE)iF_ICMPGT0.negate();
      assertNotNull(iF_ICMPLE0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      
      // Undeclared exception!
      try { 
        iF_ICMPLE0.getTargetOffset();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of if_icmple[164](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      I2S i2S0 = (I2S)InstructionConstants.I2S;
      assertNotNull(i2S0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(i2S0);
      assertNotNull(instructionHandle0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      instructionHandle0.dispose();
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFLT iFLT0 = new IFLT(instructionHandle0);
      assertNotNull(iFLT0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iFLT0.getIndex());
      assertEquals(3, iFLT0.getLength());
      assertEquals((short)155, iFLT0.getOpcode());
      
      // Undeclared exception!
      try { 
        iFLT0.getTargetOffset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      POP pOP0 = (POP)InstructionConstants.POP;
      assertNotNull(pOP0);
      assertEquals(1, pOP0.getLength());
      assertEquals((short)87, pOP0.getOpcode());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(pOP0);
      assertNotNull(instructionHandle0);
      assertEquals(1, pOP0.getLength());
      assertEquals((short)87, pOP0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      assertNotNull(iFNONNULL0);
      assertEquals(1, pOP0.getLength());
      assertEquals((short)87, pOP0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(3, iFNONNULL0.getLength());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      // Undeclared exception!
      try { 
        iFNONNULL0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for ifnonnull[199](3):-1:  -1: pop[87](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertNotNull(iF_ICMPGE0);
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      
      DataOutputStream dataOutputStream0 = null;
      // Undeclared exception!
      try { 
        iF_ICMPGE0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IFNULL iFNULL0 = new IFNULL();
      assertNotNull(iFNULL0);
      assertEquals(0, iFNULL0.getIndex());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(1, iFNULL0.getLength());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      // Undeclared exception!
      try { 
        iFNULL0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      assertNotNull(iF_ICMPLT0);
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      try { 
        iF_ICMPLT0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InstructionHandle instructionHandle0 = null;
      GOTO gOTO0 = new GOTO(instructionHandle0);
      assertNotNull(gOTO0);
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals(3, gOTO0.getLength());
      
      boolean boolean0 = false;
      String string0 = gOTO0.toString(boolean0);
      assertEquals("goto -> null", string0);
      assertNotNull(string0);
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals(3, gOTO0.getLength());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      assertNotNull(iF_ACMPNE0);
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      
      InstructionHandle instructionHandle0 = null;
      iF_ACMPNE0.setTarget(instructionHandle0);
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      assertNotNull(iF_ICMPLE0);
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      
      InstructionHandle instructionHandle0 = null;
      boolean boolean0 = iF_ICMPLE0.containsTarget(instructionHandle0);
      assertTrue(boolean0);
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LAND lAND0 = (LAND)InstructionConstants.LAND;
      assertNotNull(lAND0);
      assertEquals(1, lAND0.getLength());
      assertEquals((short)127, lAND0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lAND0);
      assertNotNull(instructionHandle0);
      assertEquals(1, lAND0.getLength());
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      assertNotNull(iF_ICMPLE0);
      assertEquals(1, lAND0.getLength());
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      
      InstructionHandle instructionHandle1 = null;
      boolean boolean0 = iF_ICMPLE0.containsTarget(instructionHandle1);
      assertFalse(boolean0);
      assertEquals(1, lAND0.getLength());
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      I2S i2S0 = (I2S)InstructionConstants.I2S;
      assertNotNull(i2S0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(i2S0);
      assertNotNull(instructionHandle0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertNotNull(iF_ICMPGE0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      
      instructionHandle0.dispose();
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      boolean boolean0 = true;
      String string0 = iF_ICMPGE0.toString(boolean0);
      assertEquals("if_icmpge[162](3) -> <null instruction!!!?>", string0);
      assertNotNull(string0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DSTORE dSTORE0 = new DSTORE();
      assertNotNull(dSTORE0);
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((-1), dSTORE0.getIndex());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(dSTORE0);
      assertNotNull(instructionHandle0);
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      assertNotNull(iFNONNULL0);
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      
      IFNULL iFNULL0 = new IFNULL(instructionHandle0);
      assertNotNull(iFNULL0);
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFNULL0.getLength());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals((short)198, iFNULL0.getOpcode());
      
      InstructionComparator instructionComparator0 = null;
      Instruction.setComparator(instructionComparator0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNULL0);
      assertNotNull(instructionList0);
      assertEquals((short) (-1), dSTORE0.getOpcode());
      assertEquals(1, dSTORE0.getLength());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((-1), dSTORE0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFNULL0.getLength());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, (Instruction) iFNONNULL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction ifnonnull[199](3) -> -1 to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      I2S i2S0 = (I2S)InstructionConstants.I2S;
      assertNotNull(i2S0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(i2S0);
      assertNotNull(instructionHandle0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertNotNull(iF_ICMPGE0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(3, iF_ICMPGE0.getLength());
      
      iF_ICMPGE0.dispose();
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), iF_ICMPGE0.getIndex());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(3, iF_ICMPGE0.getLength());
      
      boolean boolean0 = true;
      String string0 = iF_ICMPGE0.toString(boolean0);
      assertEquals("if_icmpge[162](3) -> null", string0);
      assertNotNull(string0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), iF_ICMPGE0.getIndex());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(3, iF_ICMPGE0.getLength());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      I2S i2S0 = (I2S)InstructionConstants.I2S;
      assertNotNull(i2S0);
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(i2S0);
      assertNotNull(instructionHandle0);
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertNotNull(iF_ICMPGE0);
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(3, iF_ICMPGE0.getLength());
      
      boolean boolean0 = true;
      String string0 = iF_ICMPGE0.toString(boolean0);
      assertEquals("if_icmpge[162](3) -> -1", string0);
      assertNotNull(string0);
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(3, iF_ICMPGE0.getLength());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DCONST dCONST0 = new DCONST();
      assertNotNull(dCONST0);
      assertEquals((short) (-1), dCONST0.getOpcode());
      assertEquals(1, dCONST0.getLength());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(dCONST0);
      assertNotNull(instructionHandle0);
      assertEquals((short) (-1), dCONST0.getOpcode());
      assertEquals(1, dCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      assertNotNull(iF_ACMPEQ0);
      assertEquals((short) (-1), dCONST0.getOpcode());
      assertEquals(1, dCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      
      boolean boolean0 = false;
      String string0 = iF_ACMPEQ0.toString(boolean0);
      assertEquals("if_acmpeq -> -1", string0);
      assertNotNull(string0);
      assertEquals((short) (-1), dCONST0.getOpcode());
      assertEquals(1, dCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), iF_ACMPEQ0.getIndex());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      
      int int0 = iF_ACMPEQ0.getIndex();
      assertEquals((-1), int0);
      assertEquals((short) (-1), dCONST0.getOpcode());
      assertEquals(1, dCONST0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), iF_ACMPEQ0.getIndex());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      I2S i2S0 = (I2S)InstructionConstants.I2S;
      assertNotNull(i2S0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(i2S0);
      assertNotNull(instructionHandle0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertNotNull(iF_ICMPGE0);
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals(1, i2S0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      
      // Undeclared exception!
      try { 
        iF_ICMPGE0.getTargetOffset(instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for if_icmpge[162](3):-1:  -1: i2s[147](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IFLT iFLT0 = new IFLT();
      assertNotNull(iFLT0);
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      
      // Undeclared exception!
      try { 
        iFLT0.getTargetOffset();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertNotNull(iF_ICMPNE0);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      
      int int0 = iF_ICMPNE0.getIndex();
      assertEquals(0, int0);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      assertNotNull(iFNONNULL0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFNONNULL0);
      assertNotNull(branchHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(branchHandle0);
      assertNotNull(iF_ICMPLE0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals(3, iF_ICMPLE0.getLength());
      
      int int0 = iF_ICMPLE0.getTargetOffset();
      assertEquals(0, int0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals(3, iF_ICMPLE0.getLength());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IFGE iFGE0 = new IFGE();
      assertNotNull(iFGE0);
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = true;
      iFGE0.initFromFile(byteSequence0, boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, iFGE0.getIndex());
      assertEquals(3, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(2, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      assertEquals(65536, int0);
      
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertNotNull(iF_ICMPNE0);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      
      iF_ICMPNE0.setIndex(int0);
      assertEquals(65536, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      
      int int1 = iF_ICMPNE0.getIndex();
      assertEquals(65536, int1);
      assertTrue(int1 == int0);
      assertEquals(65536, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
  }
}
