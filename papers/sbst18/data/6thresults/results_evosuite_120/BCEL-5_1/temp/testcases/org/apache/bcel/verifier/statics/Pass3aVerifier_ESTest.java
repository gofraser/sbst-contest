/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 19:55:32 GMT 2018
 */

package org.apache.bcel.verifier.statics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.util.SyntheticRepository;
import org.apache.bcel.verifier.VerificationResult;
import org.apache.bcel.verifier.Verifier;
import org.apache.bcel.verifier.statics.Pass3aVerifier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Pass3aVerifier_ESTest extends Pass3aVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_OK;
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertNotNull(verificationResult0);
      
      String string0 = "java.lang.Long";
      String string1 = "8s=U5XLS^OM}+PZ";
      String string2 = "Index '";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0).when(verifier0).doPass2();
      doReturn(string0, string1).when(verifier0).getClassName();
      int int0 = 0;
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, int0);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(0, pass3aVerifier0.getMethodNo());
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(pass3aVerifier0);
      
      VerificationResult verificationResult1 = VerificationResult.VR_OK;
      assertSame(verificationResult1, verificationResult0);
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertNotNull(verificationResult1);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class 8s=U5XLS^OM}+PZ: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: 8s=U5XLS^OM}+PZ.class
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_OK;
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, verificationResult0.getStatus());
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertNotNull(verificationResult0);
      
      String string0 = "java.lang.Long";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0).when(verifier0).doPass2();
      doReturn(string0, (String) null).when(verifier0).getClassName();
      int int0 = 0;
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, int0);
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, verificationResult0.getStatus());
      assertEquals(0, pass3aVerifier0.getMethodNo());
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertNotNull(pass3aVerifier0);
      
      VerificationResult verificationResult1 = VerificationResult.VR_OK;
      assertSame(verificationResult1, verificationResult0);
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertNotNull(verificationResult1);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name null
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_OK;
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, verificationResult0.getStatus());
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertNotNull(verificationResult0);
      
      String string0 = "java.lang.Long";
      String string1 = "JlSuJ;I$_v[myXX b*";
      String string2 = "'.";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0).when(verifier0).doPass2();
      doReturn(string0, string0, string1).when(verifier0).getClassName();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_OK);
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, verificationResult0.getStatus());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(pass3aVerifier0);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class JlSuJ;I$_v[myXX b*: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: JlSuJ;I$_v[myXX b*.class
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier$InstOperandConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_OK;
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertNotNull(verificationResult0);
      
      String string0 = "java.lang.Long";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0).when(verifier0).doPass2();
      doReturn(string0, (String) null).when(verifier0).getClassName();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_REJECTED);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertNotNull(pass3aVerifier0);
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(0, pass3aVerifier0.getMethodNo());
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name null
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_OK;
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertNotNull(verificationResult0);
      
      String string0 = "java.lang.Long";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0).when(verifier0).doPass2();
      doReturn(string0).when(verifier0).getClassName();
      int int0 = (-23);
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, int0);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals((-23), pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertNotNull(pass3aVerifier0);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -23
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_OK;
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertNotNull(verificationResult0);
      
      String string0 = "mO[}rF";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0).when(verifier0).doPass2();
      doReturn(string0).when(verifier0).getClassName();
      int int0 = 0;
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, int0);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(0, pass3aVerifier0.getMethodNo());
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertNotNull(pass3aVerifier0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class mO[}rF: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: mO[}rF.class
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_OK;
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, verificationResult0.getStatus());
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertNotNull(verificationResult0);
      
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0).when(verifier0).doPass2();
      doReturn((String) null).when(verifier0).getClassName();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_REJECTED);
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, verificationResult0.getStatus());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertNotNull(pass3aVerifier0);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name null
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_NOTYET;
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertNotNull(verificationResult0);
      
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0).when(verifier0).doPass2();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_OK);
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertNotNull(pass3aVerifier0);
      
      VerificationResult verificationResult1 = pass3aVerifier0.do_verify();
      assertSame(verificationResult0, verificationResult1);
      assertSame(verificationResult1, verificationResult0);
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals("Not yet verified.", verificationResult1.getMessage());
      assertEquals(0, verificationResult1.getStatus());
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertNotNull(verificationResult1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Verifier verifier0 = null;
      int int0 = (-3934);
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, int0);
      assertEquals((-3934), pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      
      int int1 = pass3aVerifier0.getMethodNo();
      assertEquals((-3934), pass3aVerifier0.getMethodNo());
      assertEquals((-3934), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Verifier verifier0 = null;
      int int0 = 0;
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, int0);
      assertEquals(0, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, int0);
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      
      int[] intArray0 = new int[2];
      Verifier verifier1 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<Pass3aVerifier>) Pass3aVerifier.class, pass3aVerifier0, "myOwner", (Object) verifier1);
      assertEquals(1, pass3aVerifier0.getMethodNo());
      
      intArray0[0] = int0;
      intArray0[1] = int0;
      Object object0 = PrivateAccess.callMethod((Class<Pass3aVerifier>) Pass3aVerifier.class, pass3aVerifier0, "contains", (Object) intArray0, (Class<?>) int[].class, (Object) intArray0[0], (Class<?>) int.class);
      assertEquals(2, intArray0.length);
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertEquals(true, object0);
      assertNotNull(object0);
      
      Verifier verifier2 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn((VerificationResult) null).when(verifier2).doPass2();
      Pass3aVerifier pass3aVerifier1 = new Pass3aVerifier(verifier2, intArray0[1]);
      assertEquals(2, intArray0.length);
      assertEquals(1, pass3aVerifier1.getMethodNo());
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertFalse(pass3aVerifier1.equals((Object)pass3aVerifier0));
      assertNotNull(pass3aVerifier1);
      
      // Undeclared exception!
      try { 
        pass3aVerifier1.getMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_OK;
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertNotNull(verificationResult0);
      
      String string0 = "java.lang.Long";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0, verificationResult0, verificationResult0, verificationResult0, verificationResult0).when(verifier0).doPass2();
      doReturn(string0, string0, string0, string0, string0).when(verifier0).getClassName();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_OK);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertNotNull(pass3aVerifier0);
      
      VerificationResult verificationResult1 = pass3aVerifier0.do_verify();
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult1, verificationResult0);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(2, verificationResult1.getStatus());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertNotNull(verificationResult1);
      
      VerificationResult verificationResult2 = pass3aVerifier0.do_verify();
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult2, verificationResult0);
      assertNotSame(verificationResult2, verificationResult1);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(2, verificationResult2.getStatus());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult2.equals((Object)verificationResult0));
      assertTrue(verificationResult2.equals((Object)verificationResult1));
      assertNotNull(verificationResult2);
      
      VerificationResult verificationResult3 = pass3aVerifier0.do_verify();
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult3, verificationResult2);
      assertNotSame(verificationResult3, verificationResult0);
      assertNotSame(verificationResult3, verificationResult1);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(2, verificationResult3.getStatus());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      assertTrue(verificationResult3.equals((Object)verificationResult1));
      assertFalse(verificationResult3.equals((Object)verificationResult0));
      assertTrue(verificationResult3.equals((Object)verificationResult2));
      assertNotNull(verificationResult3);
      
      String[] stringArray0 = pass3aVerifier0.getMessages();
      assertEquals(0, stringArray0.length);
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult2);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      assertNotNull(stringArray0);
      
      String[] stringArray1 = pass3aVerifier0.getMessages();
      assertEquals(0, stringArray1.length);
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      pass3aVerifier0.addMessage(string0);
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult2);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      
      String[] stringArray2 = pass3aVerifier0.getMessages();
      assertEquals(1, stringArray2.length);
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      int int0 = pass3aVerifier0.getMethodNo();
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult2);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, int0);
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      
      String string1 = "!%^Qi/6Eb$biC8A%0t+";
      pass3aVerifier0.addMessage(string1);
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      VerificationResult verificationResult4 = pass3aVerifier0.do_verify();
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult4);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult2);
      assertNotSame(string0, string1);
      assertNotSame(verificationResult4, verificationResult1);
      assertNotSame(verificationResult4, verificationResult0);
      assertNotSame(verificationResult4, verificationResult2);
      assertNotSame(verificationResult4, verificationResult3);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(2, verificationResult4.getStatus());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(verificationResult4.equals((Object)verificationResult0));
      assertTrue(verificationResult4.equals((Object)verificationResult3));
      assertTrue(verificationResult4.equals((Object)verificationResult2));
      assertTrue(verificationResult4.equals((Object)verificationResult1));
      assertNotNull(verificationResult4);
      
      VerificationResult verificationResult5 = pass3aVerifier0.do_verify();
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult4);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult5);
      assertNotSame(verificationResult0, verificationResult2);
      assertNotSame(string0, string1);
      assertNotSame(verificationResult5, verificationResult0);
      assertNotSame(verificationResult5, verificationResult2);
      assertNotSame(verificationResult5, verificationResult4);
      assertNotSame(verificationResult5, verificationResult1);
      assertNotSame(verificationResult5, verificationResult3);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(2, verificationResult5.getStatus());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult4));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(verificationResult5.equals((Object)verificationResult1));
      assertTrue(verificationResult5.equals((Object)verificationResult4));
      assertFalse(verificationResult5.equals((Object)verificationResult0));
      assertTrue(verificationResult5.equals((Object)verificationResult3));
      assertTrue(verificationResult5.equals((Object)verificationResult2));
      assertNotNull(verificationResult5);
      
      VerificationResult verificationResult6 = pass3aVerifier0.verify();
      assertNotSame(verificationResult6, verificationResult2);
      assertNotSame(verificationResult6, verificationResult5);
      assertNotSame(verificationResult6, verificationResult4);
      assertNotSame(verificationResult6, verificationResult3);
      assertNotSame(verificationResult6, verificationResult1);
      assertNotSame(verificationResult6, verificationResult0);
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult4);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult6);
      assertNotSame(verificationResult0, verificationResult5);
      assertNotSame(verificationResult0, verificationResult2);
      assertNotSame(string0, string1);
      assertEquals(2, verificationResult6.getStatus());
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertTrue(verificationResult6.equals((Object)verificationResult5));
      assertTrue(verificationResult6.equals((Object)verificationResult2));
      assertTrue(verificationResult6.equals((Object)verificationResult3));
      assertTrue(verificationResult6.equals((Object)verificationResult4));
      assertFalse(verificationResult6.equals((Object)verificationResult0));
      assertTrue(verificationResult6.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult4));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult5));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(verificationResult6);
      
      int int1 = pass3aVerifier0.getMethodNo();
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult4);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult6);
      assertNotSame(verificationResult0, verificationResult5);
      assertNotSame(verificationResult0, verificationResult2);
      assertNotSame(string0, string1);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, int1);
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult4));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult6));
      assertFalse(verificationResult0.equals((Object)verificationResult5));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      assertTrue(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      
      VerificationResult verificationResult7 = pass3aVerifier0.do_verify();
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult4);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult6);
      assertNotSame(verificationResult0, verificationResult5);
      assertNotSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult0, verificationResult7);
      assertNotSame(string0, string1);
      assertNotSame(verificationResult7, verificationResult0);
      assertNotSame(verificationResult7, verificationResult5);
      assertNotSame(verificationResult7, verificationResult6);
      assertNotSame(verificationResult7, verificationResult4);
      assertNotSame(verificationResult7, verificationResult2);
      assertNotSame(verificationResult7, verificationResult1);
      assertNotSame(verificationResult7, verificationResult3);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(2, verificationResult7.getStatus());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult4));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult6));
      assertFalse(verificationResult0.equals((Object)verificationResult5));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(verificationResult7.equals((Object)verificationResult3));
      assertTrue(verificationResult7.equals((Object)verificationResult4));
      assertTrue(verificationResult7.equals((Object)verificationResult2));
      assertFalse(verificationResult7.equals((Object)verificationResult0));
      assertTrue(verificationResult7.equals((Object)verificationResult6));
      assertTrue(verificationResult7.equals((Object)verificationResult1));
      assertTrue(verificationResult7.equals((Object)verificationResult5));
      assertNotNull(verificationResult7);
      
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      SyntheticRepository syntheticRepository1 = SyntheticRepository.getInstance();
      assertSame(syntheticRepository1, syntheticRepository0);
      assertNotNull(syntheticRepository1);
      
      VerificationResult verificationResult8 = pass3aVerifier0.do_verify();
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult4);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult6);
      assertNotSame(verificationResult0, verificationResult8);
      assertNotSame(verificationResult0, verificationResult5);
      assertNotSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult0, verificationResult7);
      assertNotSame(string0, string1);
      assertNotSame(verificationResult8, verificationResult3);
      assertNotSame(verificationResult8, verificationResult4);
      assertNotSame(verificationResult8, verificationResult1);
      assertNotSame(verificationResult8, verificationResult6);
      assertNotSame(verificationResult8, verificationResult7);
      assertNotSame(verificationResult8, verificationResult0);
      assertNotSame(verificationResult8, verificationResult2);
      assertNotSame(verificationResult8, verificationResult5);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(2, verificationResult8.getStatus());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult4));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult6));
      assertFalse(verificationResult0.equals((Object)verificationResult5));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      assertFalse(verificationResult0.equals((Object)verificationResult7));
      assertFalse(string0.equals((Object)string1));
      assertTrue(verificationResult8.equals((Object)verificationResult1));
      assertTrue(verificationResult8.equals((Object)verificationResult7));
      assertTrue(verificationResult8.equals((Object)verificationResult2));
      assertTrue(verificationResult8.equals((Object)verificationResult3));
      assertTrue(verificationResult8.equals((Object)verificationResult5));
      assertFalse(verificationResult8.equals((Object)verificationResult0));
      assertTrue(verificationResult8.equals((Object)verificationResult6));
      assertTrue(verificationResult8.equals((Object)verificationResult4));
      assertNotNull(verificationResult8);
      
      int int2 = pass3aVerifier0.getMethodNo();
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult4);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult6);
      assertNotSame(verificationResult0, verificationResult8);
      assertNotSame(verificationResult0, verificationResult5);
      assertNotSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult0, verificationResult7);
      assertNotSame(string0, string1);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, int2);
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult4));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult6));
      assertFalse(verificationResult0.equals((Object)verificationResult8));
      assertFalse(verificationResult0.equals((Object)verificationResult5));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      assertFalse(verificationResult0.equals((Object)verificationResult7));
      assertFalse(string0.equals((Object)string1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = pass3aVerifier0.getMethodNo();
      assertNotSame(verificationResult0, verificationResult3);
      assertNotSame(verificationResult0, verificationResult4);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult0, verificationResult6);
      assertNotSame(verificationResult0, verificationResult8);
      assertNotSame(verificationResult0, verificationResult5);
      assertNotSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult0, verificationResult7);
      assertNotSame(string0, string1);
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, pass3aVerifier0.getMethodNo());
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, int3);
      assertFalse(verificationResult0.equals((Object)verificationResult3));
      assertFalse(verificationResult0.equals((Object)verificationResult4));
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult0.equals((Object)verificationResult6));
      assertFalse(verificationResult0.equals((Object)verificationResult8));
      assertFalse(verificationResult0.equals((Object)verificationResult5));
      assertFalse(verificationResult0.equals((Object)verificationResult2));
      assertFalse(verificationResult0.equals((Object)verificationResult7));
      assertFalse(string0.equals((Object)string1));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "GMc(#Xw>i;cg=>";
  }
}
