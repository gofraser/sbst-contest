/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:25:42 GMT 2018
 */

package org.apache.bcel.verifier.statics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.verifier.VerificationResult;
import org.apache.bcel.verifier.Verifier;
import org.apache.bcel.verifier.statics.Pass3aVerifier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Pass3aVerifier_ESTest extends Pass3aVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_NOTYET;
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult1 = VerificationResult.VR_OK;
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertNotNull(verificationResult1);
      assertNotSame(verificationResult1, verificationResult0);
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      String string0 = "org.apache.bcel.classfile.Field";
      String string1 = "=_BuGQ*5Z";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0, verificationResult1).when(verifier0).doPass2();
      doReturn(string0, string0, string0, string1).when(verifier0).getClassName();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_REJECTED);
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult2 = pass3aVerifier0.verify();
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertEquals(0, verificationResult2.getStatus());
      assertEquals("Not yet verified.", verificationResult2.getMessage());
      assertNotNull(verificationResult2);
      assertSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult1, verificationResult0);
      assertNotSame(verificationResult1, verificationResult2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(verificationResult2, verificationResult1);
      assertSame(verificationResult2, verificationResult0);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(verificationResult2.equals((Object)verificationResult1));
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class =_BuGQ*5Z: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: =_BuGQ*5Z.class
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier$InstOperandConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_NOTYET;
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      VerificationResult verificationResult1 = VerificationResult.VR_OK;
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertNotNull(verificationResult1);
      assertNotSame(verificationResult1, verificationResult0);
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      String string0 = "org.apache.bcel.classfile.Field";
      String string1 = "MAX_CACHED_SIZE";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0, verificationResult1).when(verifier0).doPass2();
      doReturn(string0, string1).when(verifier0).getClassName();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_REJECTED);
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult2 = pass3aVerifier0.verify();
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertEquals(0, verificationResult2.getStatus());
      assertEquals("Not yet verified.", verificationResult2.getMessage());
      assertNotNull(verificationResult2);
      assertSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult1, verificationResult2);
      assertNotSame(verificationResult1, verificationResult0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(verificationResult2, verificationResult0);
      assertNotSame(verificationResult2, verificationResult1);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(verificationResult2.equals((Object)verificationResult1));
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class MAX_CACHED_SIZE: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: MAX_CACHED_SIZE.class
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_OK;
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, verificationResult0.getStatus());
      assertNotNull(verificationResult0);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      String string0 = "! Y";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0).when(verifier0).doPass2();
      doReturn(string0).when(verifier0).getClassName();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_REJECTED);
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, verificationResult0.getStatus());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.verify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class ! Y: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: ! Y.class
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_NOTYET;
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      VerificationResult verificationResult1 = VerificationResult.VR_OK;
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertNotNull(verificationResult1);
      assertNotSame(verificationResult1, verificationResult0);
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      String string0 = "org.apache.bcel.classfile.ConstantUtf8";
      String string1 = "java.lang.Object";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0, verificationResult1).when(verifier0).doPass2();
      doReturn(string0, string1, string0).when(verifier0).getClassName();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_REJECTED);
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult2 = pass3aVerifier0.verify();
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertEquals("Not yet verified.", verificationResult2.getMessage());
      assertEquals(0, verificationResult2.getStatus());
      assertNotNull(verificationResult2);
      assertSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult1, verificationResult2);
      assertNotSame(verificationResult1, verificationResult0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(verificationResult2, verificationResult0);
      assertNotSame(verificationResult2, verificationResult1);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(verificationResult2.equals((Object)verificationResult1));
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      VerificationResult verificationResult3 = pass3aVerifier0.do_verify();
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertEquals("Class Cast Exception: org.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.apache.bcel.classfile.ConstantCP", verificationResult3.getMessage());
      assertEquals(2, verificationResult3.getStatus());
      assertNotNull(verificationResult3);
      assertNotSame(verificationResult0, verificationResult3);
      assertSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult1, verificationResult2);
      assertNotSame(verificationResult1, verificationResult0);
      assertNotSame(verificationResult1, verificationResult3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(verificationResult3, verificationResult0);
      assertNotSame(verificationResult3, verificationResult2);
      assertNotSame(verificationResult3, verificationResult1);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult2));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(verificationResult3.equals((Object)verificationResult0));
      assertFalse(verificationResult3.equals((Object)verificationResult2));
      assertFalse(verificationResult3.equals((Object)verificationResult1));
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Verifier verifier0 = null;
      int int0 = 0;
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, int0);
      assertEquals(0, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      
      int int1 = pass3aVerifier0.getMethodNo();
      assertEquals(0, pass3aVerifier0.getMethodNo());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      int int0 = (-418);
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, int0);
      assertEquals((-418), pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      
      int int1 = pass3aVerifier0.getMethodNo();
      assertEquals((-418), pass3aVerifier0.getMethodNo());
      assertTrue(int1 == int0);
      assertEquals((-418), int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_NOTYET;
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult1 = VerificationResult.VR_OK;
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(1, verificationResult1.getStatus());
      assertNotNull(verificationResult1);
      assertNotSame(verificationResult1, verificationResult0);
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      String string0 = "org.apache.bcel.classfile.ConstantUtf8";
      String string1 = "dup_x1";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0, verificationResult1).when(verifier0).doPass2();
      doReturn(string0, string0, string0, string1).when(verifier0).getClassName();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_REJECTED);
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      VerificationResult verificationResult2 = pass3aVerifier0.verify();
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertEquals("Not yet verified.", verificationResult2.getMessage());
      assertEquals(0, verificationResult2.getStatus());
      assertNotNull(verificationResult2);
      assertNotSame(verificationResult0, verificationResult1);
      assertSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult1, verificationResult2);
      assertNotSame(verificationResult1, verificationResult0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(verificationResult2, verificationResult0);
      assertNotSame(verificationResult2, verificationResult1);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(verificationResult2.equals((Object)verificationResult1));
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class dup_x1: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: dup_x1.class
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier$InstOperandConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Verifier verifier0 = null;
      int int0 = 0;
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, int0);
      assertEquals(0, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_NOTYET;
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult1 = VerificationResult.VR_OK;
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertNotNull(verificationResult1);
      assertNotSame(verificationResult1, verificationResult0);
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      String string0 = "org.apache.bcel.classfile.ConstantUtf8";
      String string1 = "org.apache.bcel.verifier.exc.StaticCodeConstraintException";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0, verificationResult1).when(verifier0).doPass2();
      doReturn(string0, string0, string1).when(verifier0).getClassName();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_REJECTED);
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      VerificationResult verificationResult2 = pass3aVerifier0.verify();
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertEquals(0, verificationResult2.getStatus());
      assertEquals("Not yet verified.", verificationResult2.getMessage());
      assertNotNull(verificationResult2);
      assertSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult1, verificationResult2);
      assertNotSame(verificationResult1, verificationResult0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(verificationResult2, verificationResult0);
      assertNotSame(verificationResult2, verificationResult1);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(verificationResult2.equals((Object)verificationResult1));
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier$InstOperandConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_NOTYET;
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0).when(verifier0).doPass2();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_REJECTED);
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      VerificationResult verificationResult1 = pass3aVerifier0.do_verify();
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertEquals(0, verificationResult1.getStatus());
      assertEquals("Not yet verified.", verificationResult1.getMessage());
      assertNotNull(verificationResult1);
      assertSame(verificationResult0, verificationResult1);
      assertSame(verificationResult1, verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_NOTYET;
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult1 = VerificationResult.VR_OK;
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertNotNull(verificationResult1);
      assertNotSame(verificationResult1, verificationResult0);
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      String string0 = "org.apache.bcel.classfile.Field";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0, verificationResult1).when(verifier0).doPass2();
      doReturn(string0, string0, string0, string0, (String) null).when(verifier0).getClassName();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_REJECTED);
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult2 = pass3aVerifier0.verify();
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertEquals(0, verificationResult2.getStatus());
      assertEquals("Not yet verified.", verificationResult2.getMessage());
      assertNotNull(verificationResult2);
      assertNotSame(verificationResult0, verificationResult1);
      assertSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult1, verificationResult2);
      assertNotSame(verificationResult1, verificationResult0);
      assertSame(verificationResult2, verificationResult0);
      assertNotSame(verificationResult2, verificationResult1);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertFalse(verificationResult2.equals((Object)verificationResult1));
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name null
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_NOTYET;
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      VerificationResult verificationResult1 = VerificationResult.VR_OK;
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertNotNull(verificationResult1);
      assertNotSame(verificationResult1, verificationResult0);
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      String string0 = "org.apache.bcel.classfile.ConstantUtf8";
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      doReturn(verificationResult0, verificationResult1).when(verifier0).doPass2();
      doReturn(string0, (String) null).when(verifier0).getClassName();
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_REJECTED);
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult2 = pass3aVerifier0.verify();
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertEquals(0, verificationResult2.getStatus());
      assertEquals("Not yet verified.", verificationResult2.getMessage());
      assertNotNull(verificationResult2);
      assertSame(verificationResult0, verificationResult2);
      assertNotSame(verificationResult0, verificationResult1);
      assertNotSame(verificationResult1, verificationResult2);
      assertNotSame(verificationResult1, verificationResult0);
      assertNotSame(verificationResult2, verificationResult1);
      assertSame(verificationResult2, verificationResult0);
      assertFalse(verificationResult0.equals((Object)verificationResult1));
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      assertFalse(verificationResult2.equals((Object)verificationResult1));
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      // Undeclared exception!
      try { 
        pass3aVerifier0.do_verify();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name null
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VerificationResult verificationResult0 = VerificationResult.VR_NOTYET;
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      Verifier verifier0 = mock(Verifier.class, new ViolatedAssumptionAnswer());
      Pass3aVerifier pass3aVerifier0 = new Pass3aVerifier(verifier0, verificationResult0.VERIFIED_REJECTED);
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertNotNull(pass3aVerifier0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      int int0 = pass3aVerifier0.getMethodNo();
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(2, pass3aVerifier0.getMethodNo());
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, int0);
  }
}
