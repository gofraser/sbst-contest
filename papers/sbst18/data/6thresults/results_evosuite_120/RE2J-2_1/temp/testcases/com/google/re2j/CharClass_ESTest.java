/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:50:11 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-261);
      intArray0[0] = int0;
      int int1 = 64;
      intArray0[1] = int1;
      int int2 = 570;
      intArray0[2] = int2;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-261), 64, 570}, intArray0);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-1475);
      intArray0[0] = int0;
      int int1 = 127744;
      intArray0[1] = int1;
      int int2 = 2959;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 2;
      intArray0[5] = int5;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1475), 127744, 2959, 0, 0, 2}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1475), 127744, 2959, 0, (-1475), 127744}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1475), 127744, (-1475), 127744, 2959, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int int6 = 1483;
      CharClass charClass3 = charClass2.appendLiteral(int3, int6);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1475), 127744, (-1475), 127744, 2959, 0}, intArray0);
      assertNotNull(charClass3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int5);
      assertFalse(int3 == int6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-1199);
      intArray0[0] = int0;
      int int1 = (-1615);
      intArray0[1] = int1;
      int int2 = 1043;
      intArray0[2] = int2;
      int int3 = 2840;
      intArray0[3] = int3;
      int int4 = 1;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = 1324;
      intArray0[6] = int6;
      int int7 = (-1570);
      intArray0[7] = int7;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1199), (-1615), 1043, 2840, 1, 0, 1324, (-1570)}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(intArray0[3], int4);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1199), (-1615), 1043, 2840, 1, 0, 1324, (-1570)}, intArray0);
      assertNotNull(charClass1);
      assertFalse(int4 == int7);
      assertFalse(int4 == int0);
      assertFalse(int4 == int5);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int6);
      assertFalse(int4 == int3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int8 = 4219;
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, int8);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1199), (-1615), 1043, 2840, 1, 0, 1324, (-1570)}, intArray0);
      assertNotNull(charClass2);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int8 == int7);
      assertFalse(int8 == int0);
      assertFalse(int8 == int6);
      assertFalse(int8 == int1);
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int4 == int7);
      assertFalse(int4 == int0);
      assertFalse(int4 == int5);
      assertFalse(int4 == int8);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int6);
      assertFalse(int4 == int3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArrayArray0 = null;
      int int0 = 2852;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArrayArray0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-746);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-746), 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-746), 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.negateClass();
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      String string0 = charClass3.toString();
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(string0);
      assertEquals("[0x0]", string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      String string1 = charClass3.toString();
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(string1);
      assertEquals("[0x0]", string1);
      assertTrue(string1.equals((Object)string0));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotSame(string1, string0);
      
      int[][] intArray1 = new int[3][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = int0;
      intArray2[1] = int0;
      intArray2[2] = int0;
      int int2 = (-850);
      intArray2[3] = int2;
      intArray2[4] = int1;
      intArray2[5] = int1;
      intArray2[6] = int1;
      intArray2[7] = int0;
      intArray2[8] = int1;
      intArray1[2] = intArray2;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = null;
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][2];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = (-290);
      int int1 = 0;
      CharClass charClass2 = charClass1.appendLiteral(int0, int1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendTableWithSign(intArray0, int0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      
      int[] intArray1 = new int[6];
      intArray1[0] = int0;
      intArray1[1] = int1;
      intArray1[2] = int0;
      intArray1[3] = int0;
      intArray1[4] = int0;
      intArray1[5] = int0;
      CharClass charClass5 = charClass4.appendFoldedClass(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {(-290), 0, (-290), (-290), (-290), (-290)}, intArray1);
      assertNotNull(charClass5);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass5.appendTable(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {(-290), 0, (-290), (-290), (-290), (-290)}, intArray1);
      assertNotNull(charClass6);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      
      int[] intArray2 = charClass2.toArray();
      assertEquals(4, intArray2.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111, (-290), 0}, intArray2);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-868);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 1092;
      intArray0[2] = int2;
      int int3 = 0;
      String string0 = CharClass.charClassToString(intArray0, int3);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-868), 0, 1092}, intArray0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 3;
      intArray0[1] = int1;
      int int2 = (-106);
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 3, (-106), 0}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-3933);
      intArray0[0] = int0;
      int int1 = (-1354);
      intArray0[1] = int1;
      int int2 = 65;
      intArray0[2] = int2;
      int int3 = (-843);
      intArray0[3] = int3;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-3933), (-1354), 65, (-843)}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-3933), (-1354), (-1353), 1114111}, intArray0);
      assertNotNull(charClass1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-3933), 1114111, (-1353), 1114111}, intArray0);
      assertNotNull(charClass2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int int4 = 2237;
      // Undeclared exception!
      charClass2.appendFoldedRange(intArray0[0], int4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 1096;
      intArray0[0] = int0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1096}, intArray0);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[1];
      int int0 = (-4164);
      intArray0[0] = int0;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      
      int int0 = 0;
      int int1 = 701;
      CharClass charClass1 = charClass0.appendLiteral(int0, int1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendRange(int1, int1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass4.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass5);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      
      String string0 = charClass5.toString();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string0);
      assertEquals("[0x0-0x10ffff]", string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      
      int int2 = 1;
      CharClass charClass6 = charClass1.appendLiteral(int1, int2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass6);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      
      CharClass charClass7 = charClass2.cleanClass();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass7);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      
      CharClass charClass8 = charClass2.appendClassWithSign(intArray0, int1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass8);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      
      CharClass charClass9 = charClass8.cleanClass();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass9);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass8);
      
      CharClass charClass10 = charClass7.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass10);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass3);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass0);
      
      int int3 = 0;
      CharClass charClass11 = charClass7.appendRange(int0, int3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass11);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass11);
      
      CharClass charClass12 = charClass11.appendLiteral(int0, int3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass12);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass12);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass4);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass7, charClass12);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass11);
      
      CharClass charClass13 = charClass3.appendLiteral(int1, int1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass13);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass11);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass11);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass13);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass13);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass7);
      
      int[][] intArray1 = new int[1][5];
      intArray1[0] = intArray0;
      int int4 = (-2575);
      CharClass charClass14 = charClass0.appendRange(int4, int3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass14);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass11);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass5);
      
      // Undeclared exception!
      try { 
        charClass7.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 612;
      CharClass charClass1 = charClass0.appendFoldedRange(int0, int0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharGroup charGroup0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        charClass1.appendGroup(charGroup0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[6];
      int int0 = 0;
      intArray1[0] = int0;
      int int1 = 507;
      intArray1[1] = int1;
      int int2 = 2517;
      intArray1[2] = int2;
      int int3 = 0;
      intArray1[3] = int3;
      int int4 = 1648;
      intArray1[4] = int4;
      int int5 = (-1308);
      intArray1[5] = int5;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      int int6 = (-1168);
      intArray2[0] = int6;
      intArray2[1] = int2;
      intArray2[2] = int4;
      intArray2[3] = int1;
      intArray2[4] = int4;
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      int int0 = 1949;
      intArray2[0] = int0;
      int int1 = 0;
      intArray2[1] = int1;
      int int2 = (-2346);
      intArray2[2] = int2;
      int int3 = (-3211);
      intArray2[3] = int3;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int int4 = 0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, int4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 987;
      intArray0[1] = int1;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 987}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 987}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      int int0 = 1;
      intArray0[0] = int0;
      int int1 = 1;
      intArray0[1] = int1;
      int int2 = 724;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 2040;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, int4);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 724, 0}, intArray0);
      assertNotNull(charClass1);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 724, 0}, intArray0);
      assertNotNull(charClass2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray1 = new int[3][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = int3;
      intArray2[1] = int0;
      intArray2[2] = int2;
      intArray2[3] = int2;
      intArray1[2] = intArray2;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {1, 1, 724, 0}, intArray0);
      assertNotNull(charClass3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      
      int int5 = 0;
      // Undeclared exception!
      charClass3.appendFoldedRange(int5, intArray2[3]);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-1503);
      intArray0[0] = int0;
      int int1 = (-3853);
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1503), (-3853), 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1503), (-3853), 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int4 = 48;
      CharClass charClass2 = charClass0.appendFoldedRange(int4, intArray0[0]);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1503), (-3853), 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      String string0 = charClass0.toString();
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1503), (-3853), 0, 0}, intArray0);
      assertNotNull(string0);
      assertEquals("[0xfffffa21-0xfffff0f3 0x0 0xfffffa21-0xfffff0f3 0x30-0xfffffa21]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      
      CharClass charClass3 = charClass0.appendClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1503), (-3853), 0, 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1503), (-3853), 0, 0}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      String string1 = charClass4.toString();
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1503), (-3853), 0, 0}, intArray0);
      assertNotNull(string1);
      assertEquals("[0xfffffa21-0xfffff0f3 0xfffffa21-0xfffff0f3 0xfffffa21-0xfffff0f3 0x0 0x30-0xfffffa21]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      int[] intArray1 = charClass3.toArray();
      assertEquals(4, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {(-1503), (-3853), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1503), (-3853), (-1503), (-3853), (-1503), (-3853), 0, 0, 48, (-1503)}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      
      CharClass charClass5 = charClass3.cleanClass();
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1503), (-3853), 0, 0}, intArray0);
      assertNotNull(charClass5);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      
      int[] intArray2 = charClass4.toArray();
      assertEquals(4, intArray0.length);
      assertEquals(10, intArray2.length);
      assertArrayEquals(new int[] {(-1503), (-3853), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1503), (-3853), (-1503), (-3853), (-1503), (-3853), 0, 0, 48, (-1503)}, intArray2);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      int int0 = 3002;
      intArray0[0] = int0;
      int int1 = (-2330);
      intArray0[1] = int1;
      int int2 = 5279;
      intArray0[2] = int2;
      int int3 = 6040;
      intArray0[3] = int3;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {3002, (-2330), 5279, 6040}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[7][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      int int4 = 2245;
      intArray2[0] = int4;
      intArray2[1] = int3;
      intArray2[2] = int3;
      intArray2[3] = int2;
      intArray2[4] = int2;
      intArray2[5] = int0;
      intArray2[6] = int1;
      intArray1[5] = intArray2;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass0.appendTable(intArray1);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 1535;
      intArray0[2] = int2;
      int int3 = (-211);
      intArray0[3] = int3;
      int int4 = 608;
      intArray0[4] = int4;
      int int5 = 65;
      intArray0[5] = int5;
      int int6 = 2379;
      intArray0[6] = int6;
      int int7 = (-2185);
      intArray0[7] = int7;
      int int8 = 2;
      intArray0[8] = int8;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 1535, (-211), 608, 65, 2379, (-2185), 2}, intArray0);
      assertNotNull(charClass0);
      
      int int9 = 2;
      int int10 = 0;
      CharClass charClass1 = charClass0.appendLiteral(int9, int10);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 1535, (-211), 608, 65, 2379, (-2185), 2}, intArray0);
      assertNotNull(charClass1);
      assertFalse(int9 == int0);
      assertFalse(int9 == int3);
      assertFalse(int9 == int10);
      assertFalse(int9 == int2);
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertFalse(int9 == int4);
      assertFalse(int9 == int7);
      assertFalse(int9 == int6);
      assertFalse(int10 == int7);
      assertFalse(int10 == int4);
      assertFalse(int10 == int6);
      assertFalse(int10 == int5);
      assertFalse(int10 == int3);
      assertFalse(int10 == int8);
      assertFalse(int10 == int2);
      assertFalse(int10 == int9);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray1, intArray0[1]);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 1535, (-211), 608, 65, 2379, (-2185), 2}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(charClass2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int9 == int0);
      assertFalse(int9 == int3);
      assertFalse(int9 == int10);
      assertFalse(int9 == int2);
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertFalse(int9 == int4);
      assertFalse(int9 == int7);
      assertFalse(int9 == int6);
      assertFalse(int10 == int7);
      assertFalse(int10 == int4);
      assertFalse(int10 == int6);
      assertFalse(int10 == int5);
      assertFalse(int10 == int3);
      assertFalse(int10 == int8);
      assertFalse(int10 == int2);
      assertFalse(int10 == int9);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      // Undeclared exception!
      try { 
        charClass2.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 0;
      CharClass charClass1 = charClass0.appendRange(int0, int0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = null;
      int int1 = (-2110);
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][2];
      int int0 = 190;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, int0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray1 = new int[1];
      int int1 = 657;
      intArray1[0] = int1;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 834;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-453);
      intArray0[2] = int2;
      int int3 = 2;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = (-329);
      intArray0[5] = int5;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {834, 0, (-453), 2, 0, (-329)}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 833, (-328), 1114111, 0, (-329)}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 1533;
      intArray0[0] = int0;
      int int1 = (-1963);
      intArray0[1] = int1;
      int int2 = 1;
      intArray0[2] = int2;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1533, (-1963), 1}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1533, (-1963), 1}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendRange(intArray0[1], int0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1533, (-1963), 1}, intArray0);
      assertNotNull(charClass2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendFoldedRange(int0, int2);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1533, (-1963), 1}, intArray0);
      assertNotNull(charClass3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1533, (-1963), 1}, intArray0);
      assertNotNull(charClass4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      
      String string0 = charClass4.toString();
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1533, (-1963), 1}, intArray0);
      assertNotNull(string0);
      assertEquals("[0x5fd-0xfffff855 0x1-0x5fd 0xfffff855 0x10ffff-0x0]", string0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      
      // Undeclared exception!
      try { 
        charClass4.appendClassWithSign(intArray0, intArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-402);
      intArray0[0] = int0;
      int int1 = (-325);
      intArray0[1] = int1;
      int int2 = 1114111;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = (-1403);
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-402), (-325), 1114111, 0, (-1403), 0}, intArray0);
      assertNotNull(charClass0);
      
      int int6 = 128709;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, int6);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-402), (-325), 1114111, 0, (-1403), 0}, intArray0);
      assertNotNull(charClass1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendRange(int5, intArray0[4]);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-402), (-325), 1114111, 0, (-1403), 0}, intArray0);
      assertNotNull(charClass2);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int6);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      
      int int7 = 0;
      CharClass charClass3 = charClass2.appendLiteral(intArray0[1], int7);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-402), (-325), 1114111, 0, (-1403), 0}, intArray0);
      assertNotNull(charClass3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int6);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int7);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      
      int[][] intArray1 = new int[4][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-402), (-325), 1114111, 0, (-1403), 0}, intArray0);
      assertNotNull(charClass4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int6);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int7);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      
      CharClass charClass5 = charClass4.appendFoldedClass(intArray1[3]);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-402), (-325), 1114111, 0, (-1403), 0}, intArray0);
      assertNotNull(charClass5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int6);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int7);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      
      CharClass charClass6 = charClass5.appendClassWithSign(intArray1[0], intArray0[5]);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-402), (-325), 1114111, 0, (-1403), 0}, intArray0);
      assertNotNull(charClass6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int6);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int7);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-644);
      intArray0[0] = int0;
      int int1 = 3614;
      intArray0[1] = int1;
      int int2 = (-741);
      intArray0[2] = int2;
      int int3 = 12736;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = (-1558);
      intArray0[5] = int5;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-644), 3614, (-741), 12736, 0, (-1558)}, intArray0);
      assertNotNull(charClass0);
      
      int int6 = 1;
      int int7 = 1969;
      CharClass charClass1 = charClass0.appendLiteral(int6, int7);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-644), 3614, (-741), 12736, 0, (-1558)}, intArray0);
      assertNotNull(charClass1);
      assertFalse(int6 == int7);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      
      int int8 = 66639;
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, int8);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-644), 3614, (-741), 12736, 0, (-1558)}, intArray0);
      assertNotNull(charClass2);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int0);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int6 == int8);
      assertFalse(int6 == int7);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int8);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-644), 3614, (-741), 12736, 0, (-1558)}, intArray0);
      assertNotNull(charClass3);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int0);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int6 == int8);
      assertFalse(int6 == int7);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int8);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-644), 3614, (-741), 12736, 0, (-1558)}, intArray0);
      assertNotNull(charClass4);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int0);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int6 == int8);
      assertFalse(int6 == int7);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int8);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      
      CharClass charClass5 = charClass4.appendRange(int3, int1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-644), 3614, (-741), 12736, 0, (-1558)}, intArray0);
      assertNotNull(charClass5);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int0);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int6);
      assertFalse(int1 == int8);
      assertFalse(int1 == int5);
      assertFalse(int1 == int2);
      assertFalse(int1 == int7);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int6);
      assertFalse(int3 == int8);
      assertFalse(int3 == int1);
      assertFalse(int3 == int5);
      assertFalse(int3 == int7);
      assertFalse(int6 == int8);
      assertFalse(int6 == int7);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int8);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      
      CharClass charClass6 = charClass5.negateClass();
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-644), 3614, (-741), 12736, 0, (-1558)}, intArray0);
      assertNotNull(charClass6);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int6);
      assertFalse(int1 == int8);
      assertFalse(int1 == int5);
      assertFalse(int1 == int2);
      assertFalse(int1 == int7);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int6);
      assertFalse(int3 == int8);
      assertFalse(int3 == int1);
      assertFalse(int3 == int5);
      assertFalse(int3 == int7);
      assertFalse(int6 == int8);
      assertFalse(int6 == int7);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int8);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int0);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      int int0 = 1851;
      intArray0[0] = int0;
      int int1 = 1;
      intArray0[1] = int1;
      int int2 = 4;
      intArray0[2] = int2;
      int[][] intArray1 = new int[5][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertEquals(5, intArray1.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int3 = 1114111;
      intArray0[3] = int3;
      int int4 = (-2486);
      intArray0[4] = int4;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, intArray0[3]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int2 = (-596);
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendFoldedRange(int2, int2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertNotNull(charClass3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      int[][] intArray1 = new int[6][1];
      intArray1[0] = intArray0;
      CharClass charClass4 = charClass1.appendClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = int2;
      intArray2[1] = int0;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 2;
      intArray0[0] = int0;
      int int1 = 3652;
      intArray0[1] = int1;
      int int2 = 129;
      intArray0[2] = int2;
      int int3 = 2919;
      intArray0[3] = int3;
      int int4 = 643;
      intArray0[4] = int4;
      int int5 = (-2375);
      intArray0[5] = int5;
      int int6 = 92;
      intArray0[6] = int6;
      int int7 = 65930;
      intArray0[7] = int7;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2, 3652, 129, 2919, 643, (-2375), 92, 65930}, intArray0);
      assertNotNull(charClass0);
      
      int int8 = (-145);
      int int9 = 8298;
      // Undeclared exception!
      charClass0.appendFoldedRange(int8, int9);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      
      int int0 = 248;
      CharClass charClass1 = charClass0.appendLiteral(int0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int1 = (-578);
      int int2 = (-731);
      CharClass charClass2 = charClass1.appendRange(int1, int2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[][] intArray1 = new int[7][6];
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = int1;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      int int3 = 2;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[9];
      int int0 = 0;
      intArray1[0] = int0;
      int int1 = (-2396);
      intArray1[1] = int1;
      int int2 = (-2214);
      intArray1[2] = int2;
      int int3 = (-2113);
      intArray1[3] = int3;
      int int4 = 0;
      intArray1[4] = int4;
      int int5 = 0;
      intArray1[5] = int5;
      int int6 = 0;
      intArray1[6] = int6;
      int int7 = 0;
      intArray1[7] = int7;
      int int8 = 0;
      intArray1[8] = int8;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int9 = 1294;
      int int10 = 592;
      CharClass charClass2 = charClass1.appendLiteral(int9, int10);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass2);
      assertFalse(int9 == int10);
      assertFalse(int9 == int1);
      assertFalse(int9 == int4);
      assertFalse(int9 == int5);
      assertFalse(int9 == int3);
      assertFalse(int9 == int0);
      assertFalse(int9 == int7);
      assertFalse(int9 == int8);
      assertFalse(int9 == int6);
      assertFalse(int9 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int8);
      assertFalse(int10 == int2);
      assertFalse(int10 == int6);
      assertFalse(int10 == int9);
      assertFalse(int10 == int1);
      assertFalse(int10 == int4);
      assertFalse(int10 == int0);
      assertFalse(int10 == int7);
      assertFalse(int10 == int5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int int11 = 0;
      CharClass charClass3 = charClass2.appendLiteral(int8, int11);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int10);
      assertFalse(int8 == int1);
      assertFalse(int8 == int9);
      assertFalse(int8 == int3);
      assertFalse(int9 == int10);
      assertFalse(int9 == int1);
      assertFalse(int9 == int4);
      assertFalse(int9 == int5);
      assertFalse(int9 == int11);
      assertFalse(int9 == int3);
      assertFalse(int9 == int0);
      assertFalse(int9 == int7);
      assertFalse(int9 == int8);
      assertFalse(int9 == int6);
      assertFalse(int9 == int2);
      assertFalse(int10 == int11);
      assertFalse(int10 == int3);
      assertFalse(int10 == int8);
      assertFalse(int10 == int2);
      assertFalse(int10 == int6);
      assertFalse(int10 == int9);
      assertFalse(int10 == int1);
      assertFalse(int10 == int4);
      assertFalse(int10 == int0);
      assertFalse(int10 == int7);
      assertFalse(int10 == int5);
      assertFalse(int11 == int10);
      assertFalse(int11 == int1);
      assertFalse(int11 == int9);
      assertFalse(int11 == int2);
      assertFalse(int11 == int3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-653);
      intArray0[0] = int0;
      int int1 = 3678;
      intArray0[1] = int1;
      int int2 = 991;
      intArray0[2] = int2;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-653), 3678, 991}, intArray0);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
