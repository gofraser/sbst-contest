/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:25:20 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.AASTORE;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BALOAD;
import org.apache.bcel.generic.BASTORE;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CPInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.PUTSTATIC;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.ReturnInstruction;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.StackConsumer;
import org.apache.bcel.generic.StackProducer;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      short short0 = (short) (-2077);
      MULTIANEWARRAY mULTIANEWARRAY0 = mock(MULTIANEWARRAY.class, new ViolatedAssumptionAnswer());
      doReturn(short0).when(mULTIANEWARRAY0).getDimensions();
      instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      int int1 = 571;
      IINC iINC0 = new IINC(int1, int1);
      assertEquals(6, iINC0.getLength());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals(571, iINC0.getIndex());
      assertEquals("iinc", iINC0.getName());
      assertEquals(571, iINC0.getIncrement());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertNotNull(iINC0);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      CPInstruction cPInstruction0 = mock(CPInstruction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(cPInstruction0).getIndex();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(cPInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DNEG dNEG0 = new DNEG();
      assertEquals("dneg", dNEG0.getName());
      assertEquals((short)119, dNEG0.getOpcode());
      assertEquals(1, dNEG0.getLength());
      assertNotNull(dNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 1;
      ISTORE iSTORE0 = new ISTORE(int0);
      assertEquals(1, iSTORE0.getIndex());
      assertEquals("istore_1", iSTORE0.getName());
      assertEquals((short)60, iSTORE0.getOpcode());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(1, iSTORE0.getLength());
      assertNotNull(iSTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(iSTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      StackProducer stackProducer0 = mock(StackProducer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackProducer(stackProducer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.generic.StackProducer$MockitoMock$1259468343 cannot be cast to org.apache.bcel.generic.Instruction
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FCMPL fCMPL0 = new FCMPL();
      assertEquals("fcmpl", fCMPL0.getName());
      assertEquals((short)149, fCMPL0.getOpcode());
      assertEquals(1, fCMPL0.getLength());
      assertNotNull(fCMPL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackConsumer(fCMPL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      SWAP sWAP0 = new SWAP();
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, sWAP0.getLength());
      assertNotNull(sWAP0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP(sWAP0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<InstConstraintVisitor>) InstConstraintVisitor.class, instConstraintVisitor0, "cpg", (Object) constantPoolGen0);
      FNEG fNEG0 = new FNEG();
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertEquals((short)118, fNEG0.getOpcode());
      assertNotNull(fNEG0);
      
      ReferenceType referenceType0 = mock(ReferenceType.class, new ViolatedAssumptionAnswer());
      Object object0 = PrivateAccess.callMethod((Class<InstConstraintVisitor>) InstConstraintVisitor.class, instConstraintVisitor0, "referenceTypeIsInitialized", (Object) fNEG0, (Class<?>) Instruction.class, (Object) referenceType0, (Class<?>) ReferenceType.class);
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertEquals((short)118, fNEG0.getOpcode());
      assertNull(object0);
      
      SASTORE sASTORE0 = mock(SASTORE.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      SALOAD sALOAD0 = new SALOAD();
      assertEquals("saload", sALOAD0.getName());
      assertEquals(1, sALOAD0.getLength());
      assertEquals((short)53, sALOAD0.getOpcode());
      assertNotNull(sALOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSALOAD(sALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ReturnInstruction returnInstruction0 = mock(ReturnInstruction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitReturnInstruction(returnInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      RETURN rETURN0 = new RETURN();
      assertEquals(1, rETURN0.getLength());
      assertEquals("return", rETURN0.getName());
      assertEquals((short)177, rETURN0.getOpcode());
      assertNotNull(rETURN0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRETURN(rETURN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 0;
      RET rET0 = new RET(int0);
      assertEquals(0, rET0.getIndex());
      assertEquals(2, rET0.getLength());
      assertEquals("ret", rET0.getName());
      assertEquals((short)169, rET0.getOpcode());
      assertNotNull(rET0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      RET rET0 = new RET(int0);
      assertEquals(2, rET0.getLength());
      assertEquals("ret", rET0.getName());
      assertEquals(119, rET0.getIndex());
      assertEquals((short)169, rET0.getOpcode());
      assertNotNull(rET0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 119
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      String string0 = "The value at the stack next-to-top is not of size '1', but of size '";
      ReferenceType referenceType0 = mock(ReferenceType.class, new ViolatedAssumptionAnswer());
      PUTSTATIC pUTSTATIC0 = mock(PUTSTATIC.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(pUTSTATIC0).getFieldName(any(org.apache.bcel.generic.ConstantPoolGen.class));
      doReturn(referenceType0).when(pUTSTATIC0).getReferenceType(any(org.apache.bcel.generic.ConstantPoolGen.class));
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPUTSTATIC(pUTSTATIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction PUTSTATIC$MockitoMock$1044193383 constraint violated: expecting ObjectType but got null
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      F2I f2I0 = new F2I();
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertNotNull(f2I0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int0 = f2I0.consumeStack(constantPoolGen0);
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, int0);
      
      PUTSTATIC pUTSTATIC0 = new PUTSTATIC(int0);
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, pUTSTATIC0.getIndex());
      assertEquals(3, pUTSTATIC0.getLength());
      assertEquals("putstatic", pUTSTATIC0.getName());
      assertEquals((short)179, pUTSTATIC0.getOpcode());
      assertNotNull(pUTSTATIC0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPUTSTATIC(pUTSTATIC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 5211;
      PUTFIELD pUTFIELD0 = new PUTFIELD(int0);
      assertEquals(5211, pUTFIELD0.getIndex());
      assertEquals(3, pUTFIELD0.getLength());
      assertEquals((short)181, pUTFIELD0.getOpcode());
      assertEquals("putfield", pUTFIELD0.getName());
      assertNotNull(pUTFIELD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPUTFIELD(pUTFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      POP2 pOP2_0 = new POP2();
      assertEquals("pop2", pOP2_0.getName());
      assertEquals((short)88, pOP2_0.getOpcode());
      assertEquals(1, pOP2_0.getLength());
      assertNotNull(pOP2_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      POP pOP0 = new POP();
      assertEquals("pop", pOP0.getName());
      assertEquals(1, pOP0.getLength());
      assertEquals((short)87, pOP0.getOpcode());
      assertNotNull(pOP0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP(pOP0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      NEWARRAY nEWARRAY0 = mock(NEWARRAY.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 3456;
      NEW nEW0 = new NEW(int0);
      assertEquals(3, nEW0.getLength());
      assertEquals(3456, nEW0.getIndex());
      assertEquals("new", nEW0.getName());
      assertEquals((short)187, nEW0.getOpcode());
      assertNotNull(nEW0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEW(nEW0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      assertEquals("monitorexit", mONITOREXIT0.getName());
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      assertEquals(1, mONITOREXIT0.getLength());
      assertNotNull(mONITOREXIT0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals(1, mONITORENTER0.getLength());
      assertNotNull(mONITORENTER0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 0;
      LLOAD lLOAD0 = new LLOAD(int0);
      assertEquals("lload_0", lLOAD0.getName());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals(0, lLOAD0.getIndex());
      assertEquals((short)30, lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertNotNull(lLOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(lLOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LLOAD lLOAD0 = new LLOAD(int0);
      assertEquals(2, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getOpcode());
      assertEquals("lload", lLOAD0.getName());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals(119, lLOAD0.getIndex());
      assertNotNull(lLOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(lLOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 548;
      PUTSTATIC pUTSTATIC0 = new PUTSTATIC(int0);
      assertEquals((short)179, pUTSTATIC0.getOpcode());
      assertEquals("putstatic", pUTSTATIC0.getName());
      assertEquals(3, pUTSTATIC0.getLength());
      assertEquals(548, pUTSTATIC0.getIndex());
      assertNotNull(pUTSTATIC0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadClass(pUTSTATIC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LXOR lXOR0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LUSHR lUSHR0 = new LUSHR();
      assertEquals((short)125, lUSHR0.getOpcode());
      assertEquals(1, lUSHR0.getLength());
      assertEquals("lushr", lUSHR0.getName());
      assertNotNull(lUSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LSUB lSUB0 = new LSUB();
      assertEquals(1, lSUB0.getLength());
      assertEquals("lsub", lSUB0.getName());
      assertEquals((short)101, lSUB0.getOpcode());
      assertNotNull(lSUB0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LSHR lSHR0 = new LSHR();
      assertEquals("lshr", lSHR0.getName());
      assertEquals(1, lSHR0.getLength());
      assertEquals((short)123, lSHR0.getOpcode());
      assertNotNull(lSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      OperandStack operandStack0 = new OperandStack(int0);
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      assertTrue(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      assertTrue(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      assertTrue(operandStack0.isEmpty());
      
      LSHR lSHR0 = new LSHR();
      assertEquals(1, lSHR0.getLength());
      assertEquals("lshr", lSHR0.getName());
      assertEquals((short)123, lSHR0.getOpcode());
      assertNotNull(lSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LSHL lSHL0 = new LSHL();
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals("lshl", lSHL0.getName());
      assertEquals(1, lSHL0.getLength());
      assertNotNull(lSHL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LRETURN lRETURN0 = new LRETURN();
      assertEquals((short)173, lRETURN0.getOpcode());
      assertEquals("lreturn", lRETURN0.getName());
      assertEquals(1, lRETURN0.getLength());
      assertNotNull(lRETURN0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LREM lREM0 = new LREM();
      assertEquals(1, lREM0.getLength());
      assertEquals("lrem", lREM0.getName());
      assertEquals((short)113, lREM0.getOpcode());
      assertNotNull(lREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LOOKUPSWITCH lOOKUPSWITCH0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOOKUPSWITCH(lOOKUPSWITCH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LNEG lNEG0 = mock(LNEG.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LMUL lMUL0 = new LMUL();
      assertEquals((short)105, lMUL0.getOpcode());
      assertEquals("lmul", lMUL0.getName());
      assertEquals(1, lMUL0.getLength());
      assertNotNull(lMUL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LDIV lDIV0 = new LDIV();
      assertEquals("ldiv", lDIV0.getName());
      assertEquals(1, lDIV0.getLength());
      assertEquals((short)109, lDIV0.getOpcode());
      assertNotNull(lDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 0;
      LDC_W lDC_W0 = new LDC_W(int0);
      assertEquals("ldc", lDC_W0.getName());
      assertEquals((short)18, lDC_W0.getOpcode());
      assertEquals(0, lDC_W0.getIndex());
      assertEquals(2, lDC_W0.getLength());
      assertNotNull(lDC_W0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDC_W(lDC_W0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 1;
      LDC2_W lDC2_W0 = new LDC2_W(int0);
      assertEquals("ldc2_w", lDC2_W0.getName());
      assertEquals((short)20, lDC2_W0.getOpcode());
      assertEquals(3, lDC2_W0.getLength());
      assertEquals(1, lDC2_W0.getIndex());
      assertNotNull(lDC2_W0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDC2_W(lDC2_W0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 156;
      LDC_W lDC_W0 = new LDC_W(int0);
      assertEquals(2, lDC_W0.getLength());
      assertEquals((short)18, lDC_W0.getOpcode());
      assertEquals("ldc", lDC_W0.getName());
      assertEquals(156, lDC_W0.getIndex());
      assertNotNull(lDC_W0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDC(lDC_W0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LCMP lCMP0 = new LCMP();
      assertEquals("lcmp", lCMP0.getName());
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals(1, lCMP0.getLength());
      assertNotNull(lCMP0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LASTORE lASTORE0 = new LASTORE();
      assertEquals(1, lASTORE0.getLength());
      assertEquals((short)80, lASTORE0.getOpcode());
      assertEquals("lastore", lASTORE0.getName());
      assertNotNull(lASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LAND lAND0 = new LAND();
      assertEquals(1, lAND0.getLength());
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals("land", lAND0.getName());
      assertNotNull(lAND0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LALOAD lALOAD0 = new LALOAD();
      assertEquals(1, lALOAD0.getLength());
      assertEquals((short)47, lALOAD0.getOpcode());
      assertEquals("laload", lALOAD0.getName());
      assertNotNull(lALOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLALOAD(lALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LADD lADD0 = new LADD();
      assertEquals("ladd", lADD0.getName());
      assertEquals(1, lADD0.getLength());
      assertEquals((short)97, lADD0.getOpcode());
      assertNotNull(lADD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertNotNull(l2I0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2F l2F0 = new L2F();
      assertEquals(1, l2F0.getLength());
      assertEquals("l2f", l2F0.getName());
      assertEquals((short)137, l2F0.getOpcode());
      assertNotNull(l2F0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      operandStack0.clear();
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      
      L2F l2F0 = new L2F();
      assertEquals(1, l2F0.getLength());
      assertEquals("l2f", l2F0.getName());
      assertEquals((short)137, l2F0.getOpcode());
      assertNotNull(l2F0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      L2D l2D0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals("ixor", iXOR0.getName());
      assertEquals(1, iXOR0.getLength());
      assertEquals((short)130, iXOR0.getOpcode());
      assertNotNull(iXOR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IUSHR iUSHR0 = new IUSHR();
      assertEquals((short)124, iUSHR0.getOpcode());
      assertEquals(1, iUSHR0.getLength());
      assertEquals("iushr", iUSHR0.getName());
      assertNotNull(iUSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ISUB iSUB0 = new ISUB();
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals("isub", iSUB0.getName());
      assertEquals(1, iSUB0.getLength());
      assertNotNull(iSUB0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ISHR iSHR0 = new ISHR();
      assertEquals(1, iSHR0.getLength());
      assertEquals((short)122, iSHR0.getOpcode());
      assertEquals("ishr", iSHR0.getName());
      assertNotNull(iSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ISHL iSHL0 = new ISHL();
      assertEquals((short)120, iSHL0.getOpcode());
      assertEquals("ishl", iSHL0.getName());
      assertEquals(1, iSHL0.getLength());
      assertNotNull(iSHL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IRETURN iRETURN0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IREM iREM0 = new IREM();
      assertEquals("irem", iREM0.getName());
      assertEquals(1, iREM0.getLength());
      assertEquals((short)112, iREM0.getOpcode());
      assertNotNull(iREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IOR iOR0 = new IOR();
      assertEquals((short)128, iOR0.getOpcode());
      assertEquals("ior", iOR0.getName());
      assertEquals(1, iOR0.getLength());
      assertNotNull(iOR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 0;
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(int0);
      assertEquals("invokespecial", iNVOKESPECIAL0.getName());
      assertEquals((short)183, iNVOKESPECIAL0.getOpcode());
      assertEquals(0, iNVOKESPECIAL0.getIndex());
      assertEquals(3, iNVOKESPECIAL0.getLength());
      assertNotNull(iNVOKESPECIAL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKESPECIAL(iNVOKESPECIAL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 255;
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(int0);
      assertEquals("instanceof", iNSTANCEOF0.getName());
      assertEquals(3, iNSTANCEOF0.getLength());
      assertEquals(255, iNSTANCEOF0.getIndex());
      assertEquals((short)193, iNSTANCEOF0.getOpcode());
      assertNotNull(iNSTANCEOF0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      INEG iNEG0 = new INEG();
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals(1, iNEG0.getLength());
      assertEquals("ineg", iNEG0.getName());
      assertNotNull(iNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 3882;
      Frame frame0 = new Frame(int0, int0);
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      INEG iNEG0 = new INEG();
      assertEquals("ineg", iNEG0.getName());
      assertEquals(1, iNEG0.getLength());
      assertEquals((short)116, iNEG0.getOpcode());
      assertNotNull(iNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IMUL iMUL0 = new IMUL();
      assertEquals(1, iMUL0.getLength());
      assertEquals("imul", iMUL0.getName());
      assertEquals((short)104, iMUL0.getOpcode());
      assertNotNull(iMUL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IF_ICMPNE iF_ICMPNE0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE(iF_ICMPNE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      short short0 = Constants.MAJOR_1_3;
      assertEquals((short)47, short0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) short0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertNotNull(iF_ICMPLT0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(1, constantArray0.length);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean1);
      assertEquals(1, constantArray0.length);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, constantArray0.length);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertEquals(1, constantArray0.length);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      assertEquals(1, constantArray0.length);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals("if_icmple", iF_ICMPLE0.getName());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertNotNull(iF_ICMPLE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE(iF_ICMPLE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      InstructionHandle instructionHandle0 = null;
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertNotNull(iF_ICMPGT0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT(iF_ICMPGT0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertNotNull(iF_ICMPGE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGE(iF_ICMPGE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IF_ICMPEQ iF_ICMPEQ0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ(iF_ICMPEQ0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      D2I d2I0 = (D2I)InstructionConstants.D2I;
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertEquals((short)142, d2I0.getOpcode());
      assertNotNull(d2I0);
      
      InstructionList instructionList0 = new InstructionList(d2I0);
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE(instructionHandle0);
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertNotNull(iF_ACMPNE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPNE(iF_ACMPNE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IF_ACMPEQ iF_ACMPEQ0 = mock(IF_ACMPEQ.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IFNULL iFNULL0 = mock(IFNULL.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNULL(iFNULL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      InstructionHandle instructionHandle0 = null;
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals("ifnonnull", iFNONNULL0.getName());
      assertEquals(0, iFNONNULL0.getIndex());
      assertNotNull(iFNONNULL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNONNULL(iFNONNULL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IFNE iFNE0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE(iFNE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      InstructionHandle instructionHandle0 = null;
      IFLT iFLT0 = new IFLT(instructionHandle0);
      assertEquals((short)155, iFLT0.getOpcode());
      assertEquals(3, iFLT0.getLength());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(0, iFLT0.getIndex());
      assertNotNull(iFLT0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT(iFLT0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      byte[] byteArray0 = new byte[7];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(6, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IFLE iFLE0 = new IFLE(instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(6, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFLE0.getIndex());
      assertEquals((short)158, iFLE0.getOpcode());
      assertEquals("ifle", iFLE0.getName());
      assertEquals(3, iFLE0.getLength());
      assertNotNull(iFLE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLE(iFLE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IFGT iFGT0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT(iFGT0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IFGE iFGE0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE(iFGE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      DUP dUP0 = new DUP();
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals(1, dUP0.getLength());
      assertNotNull(dUP0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) dUP0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals(1, dUP0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals(1, dUP0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals(0, iFEQ0.getIndex());
      assertEquals(3, iFEQ0.getLength());
      assertEquals("ifeq", iFEQ0.getName());
      assertNotNull(iFEQ0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ(iFEQ0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IDIV iDIV0 = new IDIV();
      assertEquals((short)108, iDIV0.getOpcode());
      assertEquals("idiv", iDIV0.getName());
      assertEquals(1, iDIV0.getLength());
      assertNotNull(iDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IASTORE iASTORE0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IAND iAND0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IALOAD iALOAD0 = new IALOAD();
      assertEquals(1, iALOAD0.getLength());
      assertEquals("iaload", iALOAD0.getName());
      assertEquals((short)46, iALOAD0.getOpcode());
      assertNotNull(iALOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIALOAD(iALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IADD iADD0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      I2S i2S0 = new I2S();
      assertEquals("i2s", i2S0.getName());
      assertEquals(1, i2S0.getLength());
      assertEquals((short)147, i2S0.getOpcode());
      assertNotNull(i2S0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      I2L i2L0 = mock(I2L.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      I2F i2F0 = new I2F();
      assertEquals((short)134, i2F0.getOpcode());
      assertEquals("i2f", i2F0.getName());
      assertEquals(1, i2F0.getLength());
      assertNotNull(i2F0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      I2D i2D0 = mock(I2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      I2C i2C0 = new I2C();
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertNotNull(i2C0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      I2B i2B0 = new I2B();
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertNotNull(i2B0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 1971;
      GETFIELD gETFIELD0 = new GETFIELD(int0);
      assertEquals("getfield", gETFIELD0.getName());
      assertEquals(3, gETFIELD0.getLength());
      assertEquals(1971, gETFIELD0.getIndex());
      assertEquals((short)180, gETFIELD0.getOpcode());
      assertNotNull(gETFIELD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 2345;
      GETSTATIC gETSTATIC0 = new GETSTATIC(int0);
      assertEquals((short)178, gETSTATIC0.getOpcode());
      assertEquals(3, gETSTATIC0.getLength());
      assertEquals("getstatic", gETSTATIC0.getName());
      assertEquals(2345, gETSTATIC0.getIndex());
      assertNotNull(gETSTATIC0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFieldInstruction(gETSTATIC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FSUB fSUB0 = new FSUB();
      assertEquals((short)102, fSUB0.getOpcode());
      assertEquals(1, fSUB0.getLength());
      assertEquals("fsub", fSUB0.getName());
      assertNotNull(fSUB0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FRETURN fRETURN0 = new FRETURN();
      assertEquals("freturn", fRETURN0.getName());
      assertEquals((short)174, fRETURN0.getOpcode());
      assertEquals(1, fRETURN0.getLength());
      assertNotNull(fRETURN0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FREM fREM0 = new FREM();
      assertEquals("frem", fREM0.getName());
      assertEquals(1, fREM0.getLength());
      assertEquals((short)114, fREM0.getOpcode());
      assertNotNull(fREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FNEG fNEG0 = new FNEG();
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertNotNull(fNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FMUL fMUL0 = new FMUL();
      assertEquals(1, fMUL0.getLength());
      assertEquals((short)106, fMUL0.getOpcode());
      assertEquals("fmul", fMUL0.getName());
      assertNotNull(fMUL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FDIV fDIV0 = new FDIV();
      assertEquals("fdiv", fDIV0.getName());
      assertEquals((short)110, fDIV0.getOpcode());
      assertEquals(1, fDIV0.getLength());
      assertNotNull(fDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FCMPL fCMPL0 = new FCMPL();
      assertEquals("fcmpl", fCMPL0.getName());
      assertEquals((short)149, fCMPL0.getOpcode());
      assertEquals(1, fCMPL0.getLength());
      assertNotNull(fCMPL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FCMPG fCMPG0 = new FCMPG();
      assertEquals(1, fCMPG0.getLength());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals("fcmpg", fCMPG0.getName());
      assertNotNull(fCMPG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FASTORE fASTORE0 = mock(FASTORE.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      
      FALOAD fALOAD0 = new FALOAD();
      assertEquals((short)48, fALOAD0.getOpcode());
      assertEquals(1, fALOAD0.getLength());
      assertEquals("faload", fALOAD0.getName());
      assertNotNull(fALOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFALOAD(fALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FALOAD constraint violated: The 'index' is not of type int but of type j~*O3r`:\"Cj\\[fM.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FALOAD fALOAD0 = new FALOAD();
      assertEquals("faload", fALOAD0.getName());
      assertEquals(1, fALOAD0.getLength());
      assertEquals((short)48, fALOAD0.getOpcode());
      assertNotNull(fALOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFALOAD(fALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FADD fADD0 = new FADD();
      assertEquals(1, fADD0.getLength());
      assertEquals("fadd", fADD0.getName());
      assertEquals((short)98, fADD0.getOpcode());
      assertNotNull(fADD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      F2L f2L0 = new F2L();
      assertEquals((short)140, f2L0.getOpcode());
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertNotNull(f2L0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      F2I f2I0 = new F2I();
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals("f2i", f2I0.getName());
      assertEquals(1, f2I0.getLength());
      assertNotNull(f2I0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      F2D f2D0 = new F2D();
      assertEquals("f2d", f2D0.getName());
      assertEquals((short)141, f2D0.getOpcode());
      assertEquals(1, f2D0.getLength());
      assertNotNull(f2D0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DUP_X2 dUP_X2_0 = new DUP_X2();
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertNotNull(dUP_X2_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2(dUP_X2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DUP_X1 dUP_X1_0 = new DUP_X1();
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals(1, dUP_X1_0.getLength());
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertNotNull(dUP_X1_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DUP2_X2 dUP2_X2_0 = mock(DUP2_X2.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      assertEquals("dup2_x1", dUP2_X1_0.getName());
      assertEquals(1, dUP2_X1_0.getLength());
      assertEquals((short)93, dUP2_X1_0.getOpcode());
      assertNotNull(dUP2_X1_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DUP2 dUP2_0 = new DUP2();
      assertEquals((short)92, dUP2_0.getOpcode());
      assertEquals(1, dUP2_0.getLength());
      assertEquals("dup2", dUP2_0.getName());
      assertNotNull(dUP2_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2(dUP2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DUP dUP0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP(dUP0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DSUB dSUB0 = new DSUB();
      assertEquals(1, dSUB0.getLength());
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals("dsub", dSUB0.getName());
      assertNotNull(dSUB0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DRETURN dRETURN0 = new DRETURN();
      assertEquals((short)175, dRETURN0.getOpcode());
      assertEquals("dreturn", dRETURN0.getName());
      assertEquals(1, dRETURN0.getLength());
      assertNotNull(dRETURN0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      DREM dREM0 = new DREM();
      assertEquals(1, dREM0.getLength());
      assertEquals("drem", dREM0.getName());
      assertEquals((short)115, dREM0.getOpcode());
      assertNotNull(dREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DREM constraint violated: The value at the stack top is not of type 'double', but of type 'j~*O3r`:\"Cj\\[fM'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DREM dREM0 = new DREM();
      assertEquals("drem", dREM0.getName());
      assertEquals(1, dREM0.getLength());
      assertEquals((short)115, dREM0.getOpcode());
      assertNotNull(dREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DMUL dMUL0 = new DMUL();
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(1, dMUL0.getLength());
      assertEquals("dmul", dMUL0.getName());
      assertNotNull(dMUL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DDIV dDIV0 = mock(DDIV.class, new ViolatedAssumptionAnswer());
      int int0 = 795;
      OperandStack operandStack0 = new OperandStack(int0);
      assertEquals(0, operandStack0.size());
      assertEquals(795, operandStack0.maxStack());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = mock(Frame.class, new ViolatedAssumptionAnswer());
      doReturn(operandStack0).when(frame0).getStack();
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(0, operandStack0.size());
      assertEquals(795, operandStack0.maxStack());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DCMPL dCMPL0 = new DCMPL();
      assertEquals(1, dCMPL0.getLength());
      assertEquals("dcmpl", dCMPL0.getName());
      assertEquals((short)151, dCMPL0.getOpcode());
      assertNotNull(dCMPL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DCMPG dCMPG0 = new DCMPG();
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertEquals("dcmpg", dCMPG0.getName());
      assertNotNull(dCMPG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DASTORE dASTORE0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DALOAD dALOAD0 = new DALOAD();
      assertEquals(1, dALOAD0.getLength());
      assertEquals((short)49, dALOAD0.getOpcode());
      assertEquals("daload", dALOAD0.getName());
      assertNotNull(dALOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDALOAD(dALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DADD dADD0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      D2L d2L0 = new D2L();
      assertEquals("d2l", d2L0.getName());
      assertEquals((short)143, d2L0.getOpcode());
      assertEquals(1, d2L0.getLength());
      assertNotNull(d2L0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      D2I d2I0 = new D2I();
      assertEquals(1, d2I0.getLength());
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals("d2i", d2I0.getName());
      assertNotNull(d2I0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      D2F d2F0 = new D2F();
      assertEquals(1, d2F0.getLength());
      assertEquals("d2f", d2F0.getName());
      assertEquals((short)144, d2F0.getOpcode());
      assertNotNull(d2F0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 566;
      CHECKCAST cHECKCAST0 = new CHECKCAST(int0);
      assertEquals("checkcast", cHECKCAST0.getName());
      assertEquals(566, cHECKCAST0.getIndex());
      assertEquals((short)192, cHECKCAST0.getOpcode());
      assertEquals(3, cHECKCAST0.getLength());
      assertNotNull(cHECKCAST0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      CASTORE cASTORE0 = new CASTORE();
      assertEquals(1, cASTORE0.getLength());
      assertEquals("castore", cASTORE0.getName());
      assertEquals((short)85, cASTORE0.getOpcode());
      assertNotNull(cASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCASTORE(cASTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      BASTORE bASTORE0 = new BASTORE();
      assertEquals(1, bASTORE0.getLength());
      assertEquals("bastore", bASTORE0.getName());
      assertEquals((short)84, bASTORE0.getOpcode());
      assertNotNull(bASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBASTORE(bASTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      BALOAD bALOAD0 = new BALOAD();
      assertEquals((short)51, bALOAD0.getOpcode());
      assertEquals(1, bALOAD0.getLength());
      assertEquals("baload", bALOAD0.getName());
      assertNotNull(bALOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBALOAD(bALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ATHROW aTHROW0 = new ATHROW();
      assertEquals("athrow", aTHROW0.getName());
      assertEquals((short)191, aTHROW0.getOpcode());
      assertEquals(1, aTHROW0.getLength());
      assertNotNull(aTHROW0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ASTORE aSTORE0 = mock(ASTORE.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitASTORE(aSTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ARETURN aRETURN0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARETURN(aRETURN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 0;
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(int0);
      assertEquals((short)189, aNEWARRAY0.getOpcode());
      assertEquals(3, aNEWARRAY0.getLength());
      assertEquals("anewarray", aNEWARRAY0.getName());
      assertEquals(0, aNEWARRAY0.getIndex());
      assertNotNull(aNEWARRAY0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      AASTORE aASTORE0 = new AASTORE();
      assertEquals((short)83, aASTORE0.getOpcode());
      assertEquals("aastore", aASTORE0.getName());
      assertEquals(1, aASTORE0.getLength());
      assertNotNull(aASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitAASTORE(aASTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      AALOAD aALOAD0 = mock(AALOAD.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitAALOAD(aALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(119, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(119, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(119, operandStack0.maxStack());
      
      AALOAD aALOAD0 = new AALOAD();
      assertEquals("aaload", aALOAD0.getName());
      assertEquals((short)50, aALOAD0.getOpcode());
      assertEquals(1, aALOAD0.getLength());
      assertNotNull(aALOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitAALOAD(aALOAD0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 135;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(135, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(135, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(135, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(135, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(135, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(135, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      SASTORE sASTORE0 = new SASTORE();
      assertEquals((short)86, sASTORE0.getOpcode());
      assertEquals("sastore", sASTORE0.getName());
      assertEquals(1, sASTORE0.getLength());
      assertNotNull(sASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type 'j~*O3r`:\"Cj\\[fM'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      int int1 = 1;
      RET rET0 = new RET(int1);
      assertEquals("ret", rET0.getName());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(1, rET0.getIndex());
      assertEquals(2, rET0.getLength());
      assertNotNull(rET0);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      NEW nEW0 = mock(NEW.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(nEW0).getType(any(org.apache.bcel.generic.ConstantPoolGen.class));
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEW(nEW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: NEW.getType() returning a non-reference type?!
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      short short0 = (short)3459;
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(int0, short0);
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals(119, mULTIANEWARRAY0.getIndex());
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals((short)3459, mULTIANEWARRAY0.getDimensions());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      assertNotNull(mULTIANEWARRAY0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      MULTIANEWARRAY mULTIANEWARRAY0 = mock(MULTIANEWARRAY.class, new ViolatedAssumptionAnswer());
      doReturn((short)0).when(mULTIANEWARRAY0).getDimensions();
      instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      
      LSUB lSUB0 = new LSUB();
      assertEquals((short)101, lSUB0.getOpcode());
      assertEquals(1, lSUB0.getLength());
      assertEquals("lsub", lSUB0.getName());
      assertNotNull(lSUB0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type 'j~*O3r`:\"Cj\\[fM'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      LSHR lSHR0 = new LSHR();
      assertEquals((short)123, lSHR0.getOpcode());
      assertEquals(1, lSHR0.getLength());
      assertEquals("lshr", lSHR0.getName());
      assertNotNull(lSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type 'j~*O3r`:\"Cj\\[fM'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      OperandStack operandStack0 = mock(OperandStack.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(operandStack0).peek();
      doReturn((String) null).when(operandStack0).toString();
      Frame frame0 = mock(Frame.class, new ViolatedAssumptionAnswer());
      doReturn(operandStack0, (OperandStack) null).when(frame0).getStack();
      instConstraintVisitor0.setFrame(frame0);
      LOR lOR0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      LDIV lDIV0 = new LDIV();
      assertEquals((short)109, lDIV0.getOpcode());
      assertEquals(1, lDIV0.getLength());
      assertEquals("ldiv", lDIV0.getName());
      assertNotNull(lDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type 'j~*O3r`:\"Cj\\[fM'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      LASTORE lASTORE0 = new LASTORE();
      assertEquals(1, lASTORE0.getLength());
      assertEquals((short)80, lASTORE0.getOpcode());
      assertEquals("lastore", lASTORE0.getName());
      assertNotNull(lASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type 'j~*O3r`:\"Cj\\[fM'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = mock(LocalVariables.class, new ViolatedAssumptionAnswer());
      OperandStack operandStack0 = mock(OperandStack.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null, (Type) null).when(operandStack0).peek();
      doReturn((String) null, (String) null).when(operandStack0).toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = mock(IOR.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR$MockitoMock$2015107911 constraint violated: The value at the stack top is not of type 'int', but of type 'null'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = mock(INVOKEVIRTUAL.class, new ViolatedAssumptionAnswer());
      doReturn((Type[]) null).when(iNVOKEVIRTUAL0).getArgumentTypes(any(org.apache.bcel.generic.ConstantPoolGen.class));
      doReturn((Type) null).when(iNVOKEVIRTUAL0).getType(any(org.apache.bcel.generic.ConstantPoolGen.class));
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEVIRTUAL(iNVOKEVIRTUAL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      INVOKESTATIC iNVOKESTATIC0 = mock(INVOKESTATIC.class, new ViolatedAssumptionAnswer());
      doReturn((Type[]) null).when(iNVOKESTATIC0).getArgumentTypes(any(org.apache.bcel.generic.ConstantPoolGen.class));
      doReturn((Type) null).when(iNVOKESTATIC0).getType(any(org.apache.bcel.generic.ConstantPoolGen.class));
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKESTATIC(iNVOKESTATIC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      INVOKEINTERFACE iNVOKEINTERFACE0 = mock(INVOKEINTERFACE.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iNVOKEINTERFACE0).getCount();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INVOKEINTERFACE$MockitoMock$467740814 constraint violated: The 'count' argument must not be 0.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 1;
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(int0, int0);
      assertEquals((short)185, iNVOKEINTERFACE0.getOpcode());
      assertEquals(1, iNVOKEINTERFACE0.getCount());
      assertEquals(1, iNVOKEINTERFACE0.getIndex());
      assertEquals("invokeinterface", iNVOKEINTERFACE0.getName());
      assertEquals(5, iNVOKEINTERFACE0.getLength());
      assertNotNull(iNVOKEINTERFACE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      IINC iINC0 = new IINC(int0, int0);
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals(119, iINC0.getIndex());
      assertEquals("iinc", iINC0.getName());
      assertEquals(119, iINC0.getIncrement());
      assertEquals(3, iINC0.getLength());
      assertEquals((short)132, iINC0.getOpcode());
      assertNotNull(iINC0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      
      IDIV iDIV0 = new IDIV();
      assertEquals(1, iDIV0.getLength());
      assertEquals((short)108, iDIV0.getOpcode());
      assertEquals("idiv", iDIV0.getName());
      assertNotNull(iDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type 'j~*O3r`:\"Cj\\[fM'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      
      FNEG fNEG0 = mock(FNEG.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG$MockitoMock$1975285568 constraint violated: The value at the stack top is not of type 'float', but of type 'j~*O3r`:\"Cj\\[fM'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:Cj\\[fM;", objectType0.getSignature());
      assertEquals("j~*O3r`:Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:Cj\\[fM;", objectType0.getSignature());
      assertEquals("j~*O3r`:Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(119, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:Cj\\[fM;", objectType0.getSignature());
      assertEquals("j~*O3r`:Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(119, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:Cj\\[fM;", objectType0.getSignature());
      assertEquals("j~*O3r`:Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(119, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      
      F2D f2D0 = new F2D();
      assertEquals("f2d", f2D0.getName());
      assertEquals(1, f2D0.getLength());
      assertEquals((short)141, f2D0.getOpcode());
      assertNotNull(f2D0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2D constraint violated: The value at the stack top is not of type 'float', but of type 'j~*O3r`:Cj\\[fM'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      assertEquals("dup2_x1", dUP2_X1_0.getName());
      assertEquals(1, dUP2_X1_0.getLength());
      assertEquals((short)93, dUP2_X1_0.getOpcode());
      assertNotNull(dUP2_X1_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      DUP2 dUP2_0 = mock(DUP2.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2(dUP2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      DRETURN dRETURN0 = new DRETURN();
      assertEquals(1, dRETURN0.getLength());
      assertEquals("dreturn", dRETURN0.getName());
      assertEquals((short)175, dRETURN0.getOpcode());
      assertNotNull(dRETURN0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type 'j~*O3r`:\"Cj\\[fM'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DDIV dDIV0 = mock(DDIV.class, new ViolatedAssumptionAnswer());
      DCMPL dCMPL0 = new DCMPL();
      assertEquals(1, dCMPL0.getLength());
      assertEquals("dcmpl", dCMPL0.getName());
      assertEquals((short)151, dCMPL0.getOpcode());
      assertNotNull(dCMPL0);
      
      ConstantPoolGen constantPoolGen0 = null;
      Type type0 = dCMPL0.getType(constantPoolGen0);
      assertEquals(1, dCMPL0.getLength());
      assertEquals("dcmpl", dCMPL0.getName());
      assertEquals((short)151, dCMPL0.getOpcode());
      assertEquals("D", type0.getSignature());
      assertEquals((byte)7, type0.getType());
      assertEquals(2, type0.getSize());
      assertNotNull(type0);
      
      String string0 = "'.";
      OperandStack operandStack0 = mock(OperandStack.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(operandStack0).peek();
      doReturn(string0).when(operandStack0).toString();
      OperandStack operandStack1 = mock(OperandStack.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(operandStack1).peek(anyInt());
      doReturn(string0).when(operandStack1).toString();
      Frame frame0 = mock(Frame.class, new ViolatedAssumptionAnswer());
      doReturn(operandStack0, operandStack1).when(frame0).getStack();
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1, dCMPL0.getLength());
      assertEquals("dcmpl", dCMPL0.getName());
      assertEquals((short)151, dCMPL0.getOpcode());
      assertEquals("D", type0.getSignature());
      assertEquals((byte)7, type0.getType());
      assertEquals(2, type0.getSize());
      
      instConstraintVisitor0.visitDDIV(dDIV0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DDIV dDIV0 = mock(DDIV.class, new ViolatedAssumptionAnswer());
      DCMPL dCMPL0 = new DCMPL();
      assertEquals(1, dCMPL0.getLength());
      assertEquals("dcmpl", dCMPL0.getName());
      assertEquals((short)151, dCMPL0.getOpcode());
      assertNotNull(dCMPL0);
      
      ConstantPoolGen constantPoolGen0 = null;
      Type type0 = dCMPL0.getType(constantPoolGen0);
      assertEquals(1, dCMPL0.getLength());
      assertEquals("dcmpl", dCMPL0.getName());
      assertEquals((short)151, dCMPL0.getOpcode());
      assertEquals((byte)7, type0.getType());
      assertEquals(2, type0.getSize());
      assertEquals("D", type0.getSignature());
      assertNotNull(type0);
      
      String string0 = "'.";
      OperandStack operandStack0 = mock(OperandStack.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(operandStack0).peek();
      doReturn(string0).when(operandStack0).toString();
      OperandStack operandStack1 = mock(OperandStack.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(operandStack1).peek(anyInt());
      doReturn((String) null).when(operandStack1).toString();
      Frame frame0 = mock(Frame.class, new ViolatedAssumptionAnswer());
      doReturn(operandStack0, operandStack1, (OperandStack) null).when(frame0).getStack();
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1, dCMPL0.getLength());
      assertEquals("dcmpl", dCMPL0.getName());
      assertEquals((short)151, dCMPL0.getOpcode());
      assertEquals((byte)7, type0.getType());
      assertEquals(2, type0.getSize());
      assertEquals("D", type0.getSignature());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      D2F d2F0 = new D2F();
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals("d2f", d2F0.getName());
      assertNotNull(d2F0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type 'j~*O3r`:\"Cj\\[fM'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 3571;
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(int0);
      assertEquals("invokespecial", iNVOKESPECIAL0.getName());
      assertEquals(3571, iNVOKESPECIAL0.getIndex());
      assertEquals((short)183, iNVOKESPECIAL0.getOpcode());
      assertEquals(3, iNVOKESPECIAL0.getLength());
      assertNotNull(iNVOKESPECIAL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(iNVOKESPECIAL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      DUP_X2 dUP_X2_0 = new DUP_X2();
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertNotNull(dUP_X2_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(dUP_X2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DUP_X2 constraint violated: Cannot consume 3 stack slots: only 1 slot(s) left on stack!
         // Stack:
         // Slots used: 1 MaxStack: 119.
         // j~*O3r`:\"Cj\\[fM (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      assertEquals(1, iMPDEP2_0.getLength());
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals("impdep2", iMPDEP2_0.getName());
      assertNotNull(iMPDEP2_0);
      
      String string0 = "'.";
      OperandStack operandStack0 = mock(OperandStack.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(operandStack0).slotsUsed();
      doReturn(string0).when(operandStack0).toString();
      OperandStack operandStack1 = mock(OperandStack.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(operandStack1).slotsUsed();
      doReturn(string0).when(operandStack1).toString();
      OperandStack operandStack2 = mock(OperandStack.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(operandStack2).maxStack();
      doReturn((String) null).when(operandStack2).toString();
      Frame frame0 = mock(Frame.class, new ViolatedAssumptionAnswer());
      doReturn(operandStack0, operandStack1, operandStack2).when(frame0).getStack();
      instConstraintVisitor0.setFrame(frame0);
      Object object0 = PrivateAccess.callMethod((Class<InstConstraintVisitor>) InstConstraintVisitor.class, instConstraintVisitor0, "_visitStackAccessor", (Object) iMPDEP2_0, (Class<?>) Instruction.class);
      assertEquals(1, iMPDEP2_0.getLength());
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals("impdep2", iMPDEP2_0.getName());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      I2B i2B0 = (I2B)InstructionConstants.I2B;
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertNotNull(i2B0);
      
      try { 
        PrivateAccess.callMethod((Class<InstConstraintVisitor>) InstConstraintVisitor.class, instConstraintVisitor0, "arrayrefOfArrayType", (Object) i2B0, (Class<?>) Instruction.class, (Object) objectType0, (Class<?>) Type.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The 'arrayref' does not refer to an array but is of type j~*O3r`:\"Cj\\[fM.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      byte byte0 = (byte) (-100);
      NEWARRAY nEWARRAY0 = new NEWARRAY(byte0);
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte) (-100), nEWARRAY0.getTypecode());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals("newarray", nEWARRAY0.getName());
      assertNotNull(nEWARRAY0);
      
      Class<Object> class0 = Object.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      assertEquals("Ljava/lang/Object;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Object", objectType0.getClassName());
      assertNotNull(objectType0);
      
      try { 
        PrivateAccess.callMethod((Class<InstConstraintVisitor>) InstConstraintVisitor.class, instConstraintVisitor0, "valueOfInt", (Object) nEWARRAY0, (Class<?>) Instruction.class, (Object) objectType0, (Class<?>) Type.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The 'value' is not of type int but of type java.lang.Object.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = "j~*O3r`:\"Cj\\[fM";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(int0, objectType0);
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(119, localVariables0.maxLocals());
      assertEquals("j~*O3r`:\"Cj\\[fM", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lj~*O3r`:\"Cj\\[fM;", objectType0.getSignature());
      assertEquals(119, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      int int1 = 1;
      IINC iINC0 = new IINC(int1, int1);
      assertEquals(1, iINC0.getIncrement());
      assertEquals(1, iINC0.getIndex());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals(3, iINC0.getLength());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals("iinc", iINC0.getName());
      assertNotNull(iINC0);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 0;
      LLOAD lLOAD0 = new LLOAD(int0);
      assertEquals((short)30, lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertEquals("lload_0", lLOAD0.getName());
      assertEquals(0, lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertNotNull(lLOAD0);
      
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      assertEquals((short)30, lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertEquals("lload_0", lLOAD0.getName());
      assertEquals(0, lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DDIV dDIV0 = mock(DDIV.class, new ViolatedAssumptionAnswer());
      String string0 = "'.";
      OperandStack operandStack0 = mock(OperandStack.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(operandStack0).peek();
      doReturn(string0).when(operandStack0).toString();
      OperandStack operandStack1 = mock(OperandStack.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(operandStack1).peek();
      doReturn(string0).when(operandStack1).toString();
      Frame frame0 = mock(Frame.class, new ViolatedAssumptionAnswer());
      doReturn(operandStack0, operandStack1).when(frame0).getStack();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV$MockitoMock$1543513125 constraint violated: The value at the stack top is not of type 'double', but of type 'null'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 200;
      FSTORE fSTORE0 = new FSTORE(int0);
      assertEquals("fstore", fSTORE0.getName());
      assertEquals(2, fSTORE0.getLength());
      assertEquals(200, fSTORE0.getIndex());
      assertEquals((short)56, fSTORE0.getOpcode());
      assertEquals((short)56, fSTORE0.getCanonicalTag());
      assertNotNull(fSTORE0);
      
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      assertEquals("fstore", fSTORE0.getName());
      assertEquals(2, fSTORE0.getLength());
      assertEquals(200, fSTORE0.getIndex());
      assertEquals((short)56, fSTORE0.getOpcode());
      assertEquals((short)56, fSTORE0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      CALOAD cALOAD0 = new CALOAD();
      assertEquals((short)52, cALOAD0.getOpcode());
      assertEquals(1, cALOAD0.getLength());
      assertEquals("caload", cALOAD0.getName());
      assertNotNull(cALOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 372;
      ISTORE iSTORE0 = new ISTORE(int0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals(4, iSTORE0.getLength());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(372, iSTORE0.getIndex());
      assertNotNull(iSTORE0);
      
      instConstraintVisitor0.visitISTORE(iSTORE0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals(4, iSTORE0.getLength());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(372, iSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals(1, aCONST_NULL0.getLength());
      assertNotNull(aCONST_NULL0);
      
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals(1, aCONST_NULL0.getLength());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      NOP nOP0 = new NOP();
      assertEquals("nop", nOP0.getName());
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals(1, nOP0.getLength());
      assertNotNull(nOP0);
      
      instConstraintVisitor0.visitNOP(nOP0);
      assertEquals("nop", nOP0.getName());
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals(1, nOP0.getLength());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      byte byte0 = (byte)23;
      BIPUSH bIPUSH0 = new BIPUSH(byte0);
      assertEquals("bipush", bIPUSH0.getName());
      assertEquals((short)16, bIPUSH0.getOpcode());
      assertEquals(2, bIPUSH0.getLength());
      assertNotNull(bIPUSH0);
      
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals("bipush", bIPUSH0.getName());
      assertEquals((short)16, bIPUSH0.getOpcode());
      assertEquals(2, bIPUSH0.getLength());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      JSR_W jSR_W0 = mock(JSR_W.class, new ViolatedAssumptionAnswer());
      instConstraintVisitor0.visitJSR_W(jSR_W0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = 119;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      GETSTATIC gETSTATIC0 = new GETSTATIC(int0);
      assertEquals(3, gETSTATIC0.getLength());
      assertEquals("getstatic", gETSTATIC0.getName());
      assertEquals((short)178, gETSTATIC0.getOpcode());
      assertEquals(119, gETSTATIC0.getIndex());
      assertNotNull(gETSTATIC0);
      
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      assertEquals(3, gETSTATIC0.getLength());
      assertEquals("getstatic", gETSTATIC0.getName());
      assertEquals((short)178, gETSTATIC0.getOpcode());
      assertEquals(119, gETSTATIC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 3;
      DLOAD dLOAD0 = new DLOAD(int0);
      assertEquals(1, dLOAD0.getLength());
      assertEquals(3, dLOAD0.getIndex());
      assertEquals((short)24, dLOAD0.getCanonicalTag());
      assertEquals((short)41, dLOAD0.getOpcode());
      assertEquals("dload_3", dLOAD0.getName());
      assertNotNull(dLOAD0);
      
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      assertEquals(1, dLOAD0.getLength());
      assertEquals(3, dLOAD0.getIndex());
      assertEquals((short)24, dLOAD0.getCanonicalTag());
      assertEquals((short)41, dLOAD0.getOpcode());
      assertEquals("dload_3", dLOAD0.getName());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 1;
      LSTORE lSTORE0 = new LSTORE(int0);
      assertEquals(1, lSTORE0.getIndex());
      assertEquals((short)64, lSTORE0.getOpcode());
      assertEquals("lstore_1", lSTORE0.getName());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals(1, lSTORE0.getLength());
      assertNotNull(lSTORE0);
      
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      assertEquals(1, lSTORE0.getIndex());
      assertEquals((short)64, lSTORE0.getOpcode());
      assertEquals("lstore_1", lSTORE0.getName());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals(1, lSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      assertEquals((short)190, aRRAYLENGTH0.getOpcode());
      assertEquals("arraylength", aRRAYLENGTH0.getName());
      assertEquals(1, aRRAYLENGTH0.getLength());
      assertNotNull(aRRAYLENGTH0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 3;
      FLOAD fLOAD0 = new FLOAD(int0);
      assertEquals(3, fLOAD0.getIndex());
      assertEquals(1, fLOAD0.getLength());
      assertEquals("fload_3", fLOAD0.getName());
      assertEquals((short)37, fLOAD0.getOpcode());
      assertEquals((short)23, fLOAD0.getCanonicalTag());
      assertNotNull(fLOAD0);
      
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      assertEquals(3, fLOAD0.getIndex());
      assertEquals(1, fLOAD0.getLength());
      assertEquals("fload_3", fLOAD0.getName());
      assertEquals((short)37, fLOAD0.getOpcode());
      assertEquals((short)23, fLOAD0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 0;
      ILOAD iLOAD0 = new ILOAD(int0);
      assertEquals((short)26, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_0", iLOAD0.getName());
      assertEquals(0, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(iLOAD0);
      
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals((short)26, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_0", iLOAD0.getName());
      assertEquals(0, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LSHR lSHR0 = new LSHR();
      assertEquals((short)123, lSHR0.getOpcode());
      assertEquals("lshr", lSHR0.getName());
      assertEquals(1, lSHR0.getLength());
      assertNotNull(lSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackProducer(lSHR0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      TABLESWITCH tABLESWITCH0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH(tABLESWITCH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      JSR jSR0 = null;
      instConstraintVisitor0.visitJSR(jSR0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      short short0 = (short)1;
      SIPUSH sIPUSH0 = new SIPUSH(short0);
      assertEquals(3, sIPUSH0.getLength());
      assertEquals("sipush", sIPUSH0.getName());
      assertEquals((short)17, sIPUSH0.getOpcode());
      assertNotNull(sIPUSH0);
      
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals(3, sIPUSH0.getLength());
      assertEquals("sipush", sIPUSH0.getName());
      assertEquals((short)17, sIPUSH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNull(instructionHandle0);
      
      GOTO gOTO0 = new GOTO(instructionHandle0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(3, gOTO0.getLength());
      assertEquals("goto", gOTO0.getName());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals(0, gOTO0.getIndex());
      assertNotNull(gOTO0);
      
      instConstraintVisitor0.visitGOTO(gOTO0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(3, gOTO0.getLength());
      assertEquals("goto", gOTO0.getName());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals(0, gOTO0.getIndex());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      assertEquals("impdep2", iMPDEP2_0.getName());
      assertEquals(1, iMPDEP2_0.getLength());
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertNotNull(iMPDEP2_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      InstructionHandle instructionHandle0 = null;
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals("goto_w", gOTO_W0.getName());
      assertNotNull(gOTO_W0);
      
      instConstraintVisitor0.visitGOTO_W(gOTO_W0);
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals("goto_w", gOTO_W0.getName());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 1;
      ALOAD aLOAD0 = new ALOAD(int0);
      assertEquals((short)43, aLOAD0.getOpcode());
      assertEquals("aload_1", aLOAD0.getName());
      assertEquals(1, aLOAD0.getIndex());
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertEquals(1, aLOAD0.getLength());
      assertNotNull(aLOAD0);
      
      instConstraintVisitor0.visitALOAD(aLOAD0);
      assertEquals((short)43, aLOAD0.getOpcode());
      assertEquals("aload_1", aLOAD0.getName());
      assertEquals(1, aLOAD0.getIndex());
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertEquals(1, aLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      StackConsumer stackConsumer0 = mock(StackConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackConsumer(stackConsumer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.generic.StackConsumer$MockitoMock$443839228 cannot be cast to org.apache.bcel.generic.Instruction
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 0;
      ICONST iCONST0 = new ICONST(int0);
      assertEquals("iconst_0", iCONST0.getName());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertNotNull(iCONST0);
      
      instConstraintVisitor0.visitICONST(iCONST0);
      assertEquals("iconst_0", iCONST0.getName());
      assertEquals((short)3, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      long long0 = 0L;
      LCONST lCONST0 = new LCONST(long0);
      assertEquals((short)9, lCONST0.getOpcode());
      assertEquals(1, lCONST0.getLength());
      assertEquals("lconst_0", lCONST0.getName());
      assertNotNull(lCONST0);
      
      instConstraintVisitor0.visitLCONST(lCONST0);
      assertEquals((short)9, lCONST0.getOpcode());
      assertEquals(1, lCONST0.getLength());
      assertEquals("lconst_0", lCONST0.getName());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 119;
      IINC iINC0 = new IINC(int0, int0);
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals(119, iINC0.getIndex());
      assertEquals(119, iINC0.getIncrement());
      assertEquals("iinc", iINC0.getName());
      assertEquals(3, iINC0.getLength());
      assertEquals((short)132, iINC0.getOpcode());
      assertNotNull(iINC0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      DUP_X2 dUP_X2_0 = new DUP_X2();
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertNotNull(dUP_X2_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(dUP_X2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = mock(INVOKEDYNAMIC.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      MethodGen methodGen0 = null;
      instConstraintVisitor0.setMethodGen(methodGen0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 734;
      DSTORE dSTORE0 = new DSTORE(int0);
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((short)57, dSTORE0.getOpcode());
      assertEquals(4, dSTORE0.getLength());
      assertEquals(734, dSTORE0.getIndex());
      assertEquals("dstore", dSTORE0.getName());
      assertNotNull(dSTORE0);
      
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((short)57, dSTORE0.getOpcode());
      assertEquals(4, dSTORE0.getLength());
      assertEquals(734, dSTORE0.getIndex());
      assertEquals("dstore", dSTORE0.getName());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 0;
      DCONST dCONST0 = new DCONST(int0);
      assertEquals(1, dCONST0.getLength());
      assertEquals((short)14, dCONST0.getOpcode());
      assertEquals("dconst_0", dCONST0.getName());
      assertNotNull(dCONST0);
      
      instConstraintVisitor0.visitDCONST(dCONST0);
      assertEquals(1, dCONST0.getLength());
      assertEquals((short)14, dCONST0.getOpcode());
      assertEquals("dconst_0", dCONST0.getName());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      IMPDEP1 iMPDEP1_0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      float float0 = 1.0F;
      FCONST fCONST0 = new FCONST(float0);
      assertEquals((short)12, fCONST0.getOpcode());
      assertEquals("fconst_1", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertNotNull(fCONST0);
      
      instConstraintVisitor0.visitFCONST(fCONST0);
      assertEquals((short)12, fCONST0.getOpcode());
      assertEquals("fconst_1", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertNotNull(bREAKPOINT0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      byte byte0 = (byte)23;
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(byte0);
      assertEquals(3, iNVOKEVIRTUAL0.getLength());
      assertEquals(23, iNVOKEVIRTUAL0.getIndex());
      assertEquals((short)182, iNVOKEVIRTUAL0.getOpcode());
      assertEquals("invokevirtual", iNVOKEVIRTUAL0.getName());
      assertNotNull(iNVOKEVIRTUAL0);
      
      instConstraintVisitor0.visitInvokeInstruction(iNVOKEVIRTUAL0);
      assertEquals(3, iNVOKEVIRTUAL0.getLength());
      assertEquals(23, iNVOKEVIRTUAL0.getIndex());
      assertEquals((short)182, iNVOKEVIRTUAL0.getOpcode());
      assertEquals("invokevirtual", iNVOKEVIRTUAL0.getName());
  }
}
