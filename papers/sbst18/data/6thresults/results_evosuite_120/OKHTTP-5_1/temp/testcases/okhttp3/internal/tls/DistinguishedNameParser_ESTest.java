/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:14:52 GMT 2018
 */

package okhttp3.internal.tls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import javax.security.auth.x500.X500Principal;
import okhttp3.internal.tls.DistinguishedNameParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DistinguishedNameParser_ESTest extends DistinguishedNameParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      X500Principal x500Principal0 = null;
      DistinguishedNameParser distinguishedNameParser0 = null;
      try {
        distinguishedNameParser0 = new DistinguishedNameParser(x500Principal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.tls.DistinguishedNameParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = "";
      X500Principal x500Principal0 = new X500Principal(string0);
      assertNotNull(x500Principal0);
      
      DistinguishedNameParser distinguishedNameParser0 = new DistinguishedNameParser(x500Principal0);
      assertNotNull(distinguishedNameParser0);
      
      try { 
        PrivateAccess.callMethod((Class<DistinguishedNameParser>) DistinguishedNameParser.class, distinguishedNameParser0, "getUTF8");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Malformed DN: 
         //
         verifyException("okhttp3.internal.tls.DistinguishedNameParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = "";
      X500Principal x500Principal0 = new X500Principal(string0);
      assertNotNull(x500Principal0);
      
      DistinguishedNameParser distinguishedNameParser0 = new DistinguishedNameParser(x500Principal0);
      assertNotNull(distinguishedNameParser0);
      
      int int0 = (-601);
      try { 
        PrivateAccess.callMethod((Class<DistinguishedNameParser>) DistinguishedNameParser.class, distinguishedNameParser0, "getByte", (Object) int0, (Class<?>) int.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.tls.DistinguishedNameParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(inputStream0).markSupported();
      doReturn(0, 0).when(inputStream0).read();
      X500Principal x500Principal0 = new X500Principal(inputStream0);
      assertNotNull(x500Principal0);
      
      DistinguishedNameParser distinguishedNameParser0 = new DistinguishedNameParser(x500Principal0);
      assertNotNull(distinguishedNameParser0);
      
      try { 
        PrivateAccess.callMethod((Class<DistinguishedNameParser>) DistinguishedNameParser.class, distinguishedNameParser0, "getEscaped");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.tls.DistinguishedNameParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = "";
      X500Principal x500Principal0 = new X500Principal(string0);
      assertNotNull(x500Principal0);
      
      DistinguishedNameParser distinguishedNameParser0 = new DistinguishedNameParser(x500Principal0);
      assertNotNull(distinguishedNameParser0);
      
      try { 
        PrivateAccess.callMethod((Class<DistinguishedNameParser>) DistinguishedNameParser.class, distinguishedNameParser0, "escapedAV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "";
      X500Principal x500Principal0 = new X500Principal(string0);
      assertNotNull(x500Principal0);
      
      DistinguishedNameParser distinguishedNameParser0 = new DistinguishedNameParser(x500Principal0);
      assertNotNull(distinguishedNameParser0);
      
      try { 
        PrivateAccess.callMethod((Class<DistinguishedNameParser>) DistinguishedNameParser.class, distinguishedNameParser0, "hexAV");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected end of DN: 
         //
         verifyException("okhttp3.internal.tls.DistinguishedNameParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = "";
      X500Principal x500Principal0 = new X500Principal(string0);
      assertNotNull(x500Principal0);
      
      DistinguishedNameParser distinguishedNameParser0 = new DistinguishedNameParser(x500Principal0);
      assertNotNull(distinguishedNameParser0);
      
      try { 
        PrivateAccess.callMethod((Class<DistinguishedNameParser>) DistinguishedNameParser.class, distinguishedNameParser0, "quotedAV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.tls.DistinguishedNameParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = "";
      X500Principal x500Principal0 = new X500Principal(string0);
      assertNotNull(x500Principal0);
      
      DistinguishedNameParser distinguishedNameParser0 = new DistinguishedNameParser(x500Principal0);
      assertNotNull(distinguishedNameParser0);
      
      String string1 = distinguishedNameParser0.findMostSpecific(string0);
      assertNull(string1);
  }
}
