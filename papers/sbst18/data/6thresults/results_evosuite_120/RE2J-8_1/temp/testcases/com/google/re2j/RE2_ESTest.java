/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:27:56 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.nio.CharBuffer;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)4;
      byteArray0[1] = byte1;
      byte byte2 = (byte)47;
      byteArray0[2] = byte2;
      byte byte3 = (byte)2;
      String string1 = "ylQ4jmoLtEn:Iq/%l~";
      String string2 = RE2.quoteMeta(string1);
      assertNotNull(string2);
      assertEquals("ylQ4jmoLtEn:Iq/%l~", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byteArray0[3] = byte3;
      byte byte4 = (byte)97;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-72);
      int int0 = 2;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, int0);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)47, (byte)2, (byte)97, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      byteArray0[5] = byte5;
      byte byte6 = (byte)125;
      byteArray0[6] = byte6;
      rE2_0.prefix = string0;
      assertEquals("", rE2_0.toString());
      
      List<int[]> list1 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, byteArray0[5]);
      assertNotNull(list1);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)47, (byte)2, (byte)97, (byte) (-72), (byte)125}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(list1.isEmpty());
      assertEquals(6, list1.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      int int1 = 0;
      List<String[]> list2 = rE2_0.findAllSubmatch(string0, int1);
      assertNull(list2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      
      String string3 = " r";
      RE2 rE2_1 = RE2.compilePOSIX(string3);
      assertNotNull(rE2_1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(rE2_1, rE2_0);
      assertEquals(" r", rE2_1.toString());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      int int2 = 1;
      List<int[]> list3 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, int2);
      assertNotNull(list3);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)47, (byte)2, (byte)97, (byte) (-72), (byte)125}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(list3, list1);
      assertEquals("", rE2_0.toString());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(list3.equals((Object)list1));
      
      String string4 = "q?u !$8^.upm";
      String string5 = rE2_0.replaceFirst(string4, string3);
      assertNotNull(string5);
      assertEquals(" rq?u !$8^.upm", string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      byte[][] byteArray1 = rE2_1.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)47, (byte)2, (byte)97, (byte) (-72), (byte)125}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(rE2_1, rE2_0);
      assertEquals(" r", rE2_1.toString());
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      int int3 = 2049;
      boolean boolean0 = false;
      RE2 rE2_2 = RE2.compileImpl(string4, int3, boolean0);
      assertNotNull(rE2_2);
      assertNotSame(rE2_2, rE2_1);
      assertNotSame(rE2_2, rE2_0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertEquals("q?u !$8^.upm", rE2_2.toString());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(rE2_2.equals((Object)rE2_1));
      assertFalse(rE2_2.equals((Object)rE2_0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      List<int[]> list4 = rE2_1.findAllUTF8Index(byteArray0, byte3);
      assertNull(list4);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)47, (byte)2, (byte)97, (byte) (-72), (byte)125}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(rE2_1, rE2_2);
      assertNotSame(rE2_1, rE2_0);
      assertEquals(" r", rE2_1.toString());
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(byte3 == byte6);
      assertFalse(byte3 == byte5);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte4);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte2);
      assertFalse(rE2_1.equals((Object)rE2_2));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      int[] intArray0 = rE2_1.findIndex(string1);
      assertNull(intArray0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(rE2_1, rE2_2);
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertEquals(" r", rE2_1.toString());
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(rE2_1.equals((Object)rE2_2));
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      
      RE2 rE2_3 = new RE2(string5);
      assertNotNull(rE2_3);
      assertEquals("", rE2_0.toString());
      assertEquals(" rq?u !$8^.upm", rE2_3.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(rE2_0.equals((Object)rE2_2));
      assertFalse(rE2_3.equals((Object)rE2_0));
      assertFalse(rE2_3.equals((Object)rE2_1));
      assertFalse(rE2_3.equals((Object)rE2_2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      int[] intArray1 = new int[6];
      intArray1[0] = int2;
      intArray1[1] = (int) byte1;
      intArray1[2] = (int) byteArray0[1];
      intArray1[3] = (int) byte6;
      intArray1[4] = int1;
      intArray1[5] = (int) byteArray0[2];
      Object object0 = PrivateAccess.callMethod((Class<RE2>) RE2.class, rE2_3, "pad", (Object) intArray1, (Class<?>) int[].class);
      assertNotNull(object0);
      assertArrayEquals(new int[] {1, 4, 4, 125, 0, 47}, intArray1);
      assertEquals(6, intArray1.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(rE2_0, rE2_2);
      assertNotSame(rE2_0, rE2_3);
      assertNotSame(rE2_3, rE2_0);
      assertNotSame(rE2_3, rE2_1);
      assertNotSame(rE2_3, rE2_2);
      assertSame(intArray1, object0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertEquals("", rE2_0.toString());
      assertEquals(" rq?u !$8^.upm", rE2_3.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(rE2_0.equals((Object)rE2_2));
      assertFalse(rE2_0.equals((Object)rE2_3));
      assertFalse(rE2_3.equals((Object)rE2_0));
      assertFalse(rE2_3.equals((Object)rE2_1));
      assertFalse(rE2_3.equals((Object)rE2_2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = true;
      String string1 = "com.google.re2j.RE2";
      String string2 = rE2_0.replaceFirst(string0, string1);
      assertNotNull(string2);
      assertEquals("com.google.re2j.RE2", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)18;
      byteArray0[0] = byte0;
      String string3 = rE2_0.replaceAll(string1, string0);
      assertNotNull(string3);
      assertEquals("com.google.re2j.RE2", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      rE2_0.longest = boolean0;
      assertEquals("", rE2_0.toString());
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte1 = (byte)0;
      byteArray1[0] = byte1;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray1, byteArray1[0]);
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray1.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = rE2_0.findUTF8(byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int0 = (-105);
      List<int[]> list1 = rE2_0.findAllIndex(string3, int0);
      assertNotNull(list1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals(20, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      List<int[]> list2 = rE2_0.findAllUTF8Index(byteArray2, byteArray1[0]);
      assertNull(list2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int1 = 0;
      int[] intArray0 = new int[2];
      String string4 = "UTF-8";
      List<int[]> list3 = rE2_0.findAllSubmatchIndex(string4, byteArray1[0]);
      assertNull(list3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray1.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      
      intArray0[0] = (int) byteArray1[0];
      int int2 = (-518);
      intArray0[1] = int2;
      int[] intArray1 = null;
      boolean boolean1 = rE2_0.match(string0, int1, int1, byteArray1[0], intArray1, byteArray1[0]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertTrue(boolean1);
      assertEquals(6, byteArray1.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      
      rE2_0.reset();
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      
      RE2 rE2_1 = RE2.compilePOSIX(string3);
      assertNotNull(rE2_1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(rE2_1, rE2_0);
      assertEquals("", rE2_0.toString());
      assertEquals("com.google.re2j.RE2", rE2_1.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      List<int[]> list4 = rE2_1.findAllSubmatchIndex(string1, intArray0[0]);
      assertNull(list4);
      assertArrayEquals(new int[] {0, (-518)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(rE2_1, rE2_0);
      assertEquals("", rE2_0.toString());
      assertEquals("com.google.re2j.RE2", rE2_1.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      String string5 = ".>/?l^wx.a$u";
      String string6 = rE2_0.replaceFirst(string5, string0);
      assertNotNull(string6);
      assertEquals(".>/?l^wx.a$u", string6);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string6);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertEquals("", rE2_0.toString());
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String string7 = "S-";
      RE2 rE2_2 = RE2.compile(string7);
      assertNotNull(rE2_2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(rE2_2, rE2_1);
      assertNotSame(rE2_2, rE2_0);
      assertEquals("S-", rE2_2.toString());
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(rE2_2.equals((Object)rE2_1));
      assertFalse(rE2_2.equals((Object)rE2_0));
      
      String string8 = "H2";
      int int3 = 3470;
      RE2 rE2_3 = RE2.compileImpl(string8, int3, boolean1);
      assertNotNull(rE2_3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray1.length);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(rE2_0, rE2_3);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(rE2_0, rE2_2);
      assertNotSame(string8, string3);
      assertNotSame(string8, string4);
      assertNotSame(string8, string0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string1);
      assertNotSame(rE2_3, rE2_2);
      assertNotSame(rE2_3, rE2_0);
      assertNotSame(rE2_3, rE2_1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals("", rE2_0.toString());
      assertEquals("H2", rE2_3.toString());
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(rE2_0.equals((Object)rE2_2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(rE2_3.equals((Object)rE2_2));
      assertFalse(rE2_3.equals((Object)rE2_0));
      assertFalse(rE2_3.equals((Object)rE2_1));
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = true;
      boolean boolean1 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1);
      assertEquals(5, byteArray0.length);
      assertEquals("", rE2_0.toString());
      assertTrue(boolean1 == boolean0);
      
      rE2_0.longest = boolean0;
      assertEquals("", rE2_0.toString());
      
      String string1 = "n7V\\Z@hA";
      int int0 = (-866);
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(2, intArray0.length);
      assertNotSame(string0, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      
      List<String> list0 = rE2_0.findAll(string1, int0);
      assertNotNull(list0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(list0.contains(string0));
      assertFalse(list0.contains(string1));
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(9, list0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      byte byte0 = (byte) (-101);
      byteArray0[0] = byte0;
      rE2_0.prefixRune = (int) byte0;
      assertEquals("", rE2_0.toString());
      
      byte byte1 = (byte)52;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-66);
      rE2_0.longest = boolean0;
      assertEquals("", rE2_0.toString());
      
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      int[] intArray1 = rE2_0.findIndex(string0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray1.length);
      assertNotSame(string0, string1);
      assertNotSame(intArray1, intArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      byteArray0[4] = byte4;
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)52, (byte) (-66), (byte)0, (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(string0, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      
      rE2_0.prefix = string1;
      assertEquals("", rE2_0.toString());
      
      String string2 = "XngpPX0?'5!J1";
      String string3 = RE2.quoteMeta(string2);
      assertNotNull(string3);
      assertEquals("XngpPX0\\?'5!J1", string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      rE2_0.reset();
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      
      String string4 = rE2_0.find(string2);
      assertNotNull(string4);
      assertEquals("", string4);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)52, (byte) (-66), (byte)0, (byte)1}, byteArray0);
      assertTrue(boolean2);
      assertEquals(5, byteArray0.length);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = RE2.quoteMeta(string4);
      assertNotNull(string5);
      assertEquals("", string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean3 = rE2_0.match(string3);
      assertFalse(boolean3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      byte[] byteArray2 = new byte[15];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = byte3;
      byteArray2[1] = byte3;
      byte[] byteArray3 = rE2_0.findUTF8(byteArray2);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(15, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertEquals("", rE2_0.toString());
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      int int1 = (-515);
      List<int[]> list1 = rE2_0.findAllSubmatchIndex(string0, int1);
      assertNull(list1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      
      String string6 = rE2_0.toString();
      assertNotNull(string6);
      assertEquals("", string6);
      assertSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertSame(string6, string4);
      assertSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = null;
      // Undeclared exception!
      try { 
        rE2_0.findSubmatch(string7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "uc}U";
      int int0 = (-208);
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("uc}U", rE2_0.toString());
      
      int int1 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int1);
      assertEquals("uc}U", rE2_0.toString());
      assertFalse(int1 == int0);
      
      String string1 = RE2.quoteMeta(string0);
      assertNotNull(string1);
      assertEquals("uc\\}U", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      RE2.ReplaceFunc rE2_ReplaceFunc0 = null;
      int int2 = (-256);
      String string3 = rE2_0.replaceAllFunc(string2, rE2_ReplaceFunc0, int2);
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals("uc}U", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      int int3 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertEquals("uc}U", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      String string4 = "J+[!ifKVsDnl<";
      try { 
        RE2.compilePOSIX(string4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[!ifKVsDnl<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "\\.+*?()|[]{}^$";
      String string1 = RE2.quoteMeta(string0);
      assertNotNull(string1);
      assertEquals("\\\\\\.\\+\\*\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "`bC`";
      int int0 = 1004;
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string2, int0, boolean0);
      assertNotNull(rE2_0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("`bC`", rE2_0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = (-2480);
      List<String[]> list0 = rE2_0.findAllSubmatch(string2, int1);
      assertNotNull(list0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("`bC`", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-97);
      byteArray0[0] = byte0;
      byte byte1 = (byte)47;
      byteArray0[1] = byte1;
      byte byte2 = (byte)68;
      byteArray0[2] = byte2;
      List<int[]> list1 = rE2_0.findAllIndex(string2, byteArray0[2]);
      assertNotNull(list1);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)47, (byte)68}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("`bC`", rE2_0.toString());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int1);
      
      boolean boolean1 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)47, (byte)68}, byteArray0);
      assertFalse(boolean1);
      assertEquals(3, byteArray0.length);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("`bC`", rE2_0.toString());
      assertFalse(boolean1 == boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int1);
      
      int int2 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("`bC`", rE2_0.toString());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      
      rE2_0.reset();
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("`bC`", rE2_0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean1);
      
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Submatch(byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "Yu3}";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("Yu3}", rE2_0.toString());
      
      int int0 = (-1736);
      Machine machine0 = null;
      rE2_0.put(machine0);
      assertEquals("Yu3}", rE2_0.toString());
      
      int int1 = (-118);
      int int2 = 16;
      int[] intArray0 = new int[6];
      intArray0[0] = int2;
      intArray0[1] = int0;
      intArray0[2] = int1;
      intArray0[3] = int1;
      int int3 = 1162;
      intArray0[4] = int3;
      intArray0[5] = int1;
      int int4 = 646;
      // Undeclared exception!
      try { 
        rE2_0.match(string0, int0, int1, int2, intArray0, int4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.RE2", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-110);
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)35;
      byteArray0[4] = byte4;
      byte byte5 = (byte)1;
      byteArray0[5] = byte5;
      rE2_0.prefixUTF8 = byteArray0;
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findSubmatchIndex(string0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("", rE2_0.toString());
      
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, byteArray0[1]);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-110), (byte)1, (byte)0, (byte)35, (byte)1}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(list0.contains(byteArray0));
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals("", rE2_0.toString());
      
      int[] intArray1 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-110), (byte)1, (byte)0, (byte)35, (byte)1}, byteArray0);
      assertEquals(2, intArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(intArray1, intArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(intArray1.equals((Object)intArray0));
      
      String string1 = null;
      // Undeclared exception!
      try { 
        rE2_0.replaceAll(string1, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.RE2", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "com.google.re2j.RE2";
      int int0 = (-1275);
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      Machine machine0 = null;
      rE2_0.put(machine0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      Machine machine1 = rE2_0.get();
      assertNull(machine1);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)38;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-108);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      int int1 = 2805;
      rE2_0.prefixRune = int1;
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      byte byte7 = (byte)70;
      byteArray0[7] = byte7;
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)38, (byte)0, (byte)0, (byte)1, (byte) (-108), (byte)0, (byte)70}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertFalse(int0 == int1);
      
      boolean boolean1 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)38, (byte)0, (byte)0, (byte)1, (byte) (-108), (byte)0, (byte)70}, byteArray0);
      assertFalse(boolean1);
      assertEquals(8, byteArray0.length);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertFalse(int0 == int1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = null;
      int int2 = 0;
      // Undeclared exception!
      try { 
        rE2_0.findAll(string1, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = "|`w4&{a>";
      int int0 = 0;
      List<int[]> list0 = rE2_0.findAllIndex(string1, int0);
      assertNull(list0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = (-587);
      boolean boolean0 = true;
      RE2 rE2_1 = RE2.compile(string1);
      assertNotNull(rE2_1);
      assertNotSame(string1, string0);
      assertNotSame(rE2_1, rE2_0);
      assertEquals("|`w4&{a>", rE2_1.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      RE2 rE2_2 = RE2.compileImpl(string1, int1, boolean0);
      assertNotNull(rE2_2);
      assertNotSame(string1, string0);
      assertNotSame(rE2_2, rE2_1);
      assertNotSame(rE2_2, rE2_0);
      assertEquals("|`w4&{a>", rE2_2.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(rE2_2.equals((Object)rE2_1));
      assertFalse(rE2_2.equals((Object)rE2_0));
      
      String string2 = rE2_0.toString();
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(rE2_0, rE2_2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(rE2_0.equals((Object)rE2_2));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        rE2_2.match(charSequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = true;
      String string1 = "com.google.re2j.RE2";
      String string2 = rE2_0.replaceFirst(string0, string1);
      assertNotNull(string2);
      assertEquals("com.google.re2j.RE2", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)18;
      byteArray0[0] = byte0;
      String string3 = rE2_0.replaceAll(string1, string0);
      assertNotNull(string3);
      assertEquals("com.google.re2j.RE2", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      rE2_0.longest = boolean0;
      assertEquals("", rE2_0.toString());
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte1 = (byte)0;
      byteArray1[0] = byte1;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray1, byteArray1[0]);
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = rE2_0.findUTF8(byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int0 = (-105);
      List<int[]> list1 = rE2_0.findAllIndex(string3, int0);
      assertNotNull(list1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals(20, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      List<int[]> list2 = rE2_0.findAllUTF8Index(byteArray2, byteArray1[0]);
      assertNull(list2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int1 = 0;
      int[] intArray0 = new int[2];
      String string4 = "UTF-8";
      List<int[]> list3 = rE2_0.findAllSubmatchIndex(string4, byteArray1[0]);
      assertNull(list3);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      
      intArray0[0] = (int) byteArray1[0];
      int int2 = (-2260);
      intArray0[1] = int2;
      boolean boolean1 = rE2_0.match(string0, int1, int1, byteArray1[0], intArray0, byte1);
      assertArrayEquals(new int[] {0, (-2260)}, intArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertTrue(boolean1);
      assertEquals(2, intArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byte1 == byte0);
      
      rE2_0.reset();
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      
      RE2 rE2_1 = RE2.compilePOSIX(string3);
      assertNotNull(rE2_1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(rE2_1, rE2_0);
      assertEquals("", rE2_0.toString());
      assertEquals("com.google.re2j.RE2", rE2_1.toString());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertTrue(string3.equals((Object)string2));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      String string5 = null;
      // Undeclared exception!
      try { 
        rE2_1.find(string5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      int int0 = (-1120);
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = "";
      boolean boolean1 = false;
      rE2_0.longest = boolean1;
      assertEquals("", rE2_0.toString());
      
      int int1 = 0;
      List<int[]> list0 = rE2_0.findAllIndex(string0, int1);
      assertNull(list0);
      assertSame(string0, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string2 = "";
      String string3 = RE2.quoteMeta(string2);
      assertNotNull(string3);
      assertEquals("", string3);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = rE2_0.find(string1);
      assertNotNull(string4);
      assertEquals("", string4);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string4);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string1, string4);
      assertSame(string1, string2);
      assertSame(string4, string2);
      assertSame(string4, string0);
      assertSame(string4, string1);
      assertNotSame(string4, string3);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string3));
      assertFalse(int0 == int1);
      assertTrue(string1.equals((Object)string3));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = rE2_0.toString();
      assertNotNull(string5);
      assertEquals("", string5);
      assertNotSame(string0, string3);
      assertSame(string0, string5);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string4);
      assertSame(string5, string4);
      assertSame(string5, string2);
      assertSame(string5, string0);
      assertSame(string5, string1);
      assertNotSame(string5, string3);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string3));
      assertFalse(int0 == int1);
      assertTrue(string5.equals((Object)string3));
      
      String[] stringArray0 = rE2_0.findSubmatch(string1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(string0, string3);
      assertSame(string0, string5);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string4);
      assertSame(string1, string0);
      assertSame(string1, string5);
      assertNotSame(string1, string3);
      assertSame(string1, string4);
      assertSame(string1, string2);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string3));
      assertFalse(int0 == int1);
      assertTrue(string1.equals((Object)string3));
      
      boolean boolean2 = rE2_0.match(string4);
      assertTrue(boolean2);
      assertNotSame(string0, string3);
      assertSame(string0, string5);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string4);
      assertSame(string1, string0);
      assertSame(string1, string5);
      assertNotSame(string1, string3);
      assertSame(string1, string4);
      assertSame(string1, string2);
      assertSame(string4, string2);
      assertSame(string4, string0);
      assertSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(string4, string5);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string3));
      assertFalse(int0 == int1);
      assertTrue(string1.equals((Object)string3));
      assertTrue(string4.equals((Object)string3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int2 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int2);
      assertNotSame(string0, string3);
      assertSame(string0, string5);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string4);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string3));
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string6 = "";
      boolean boolean3 = RE2.match(string6, string6);
      assertTrue(boolean3);
      assertSame(string6, string5);
      assertNotSame(string6, string3);
      assertSame(string6, string0);
      assertSame(string6, string4);
      assertSame(string6, string2);
      assertSame(string6, string1);
      assertTrue(string6.equals((Object)string3));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      int int3 = 2034;
      List<String[]> list1 = rE2_0.findAllSubmatch(string6, int3);
      assertNotNull(list1);
      assertSame(string6, string5);
      assertNotSame(string6, string3);
      assertSame(string6, string0);
      assertSame(string6, string4);
      assertSame(string6, string2);
      assertSame(string6, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string5);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string6);
      assertSame(string0, string4);
      assertFalse(list1.contains(stringArray0));
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals("", rE2_0.toString());
      assertTrue(string6.equals((Object)string3));
      assertTrue(string0.equals((Object)string3));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean2);
      
      String string7 = "l:";
      rE2_0.prefix = string7;
      assertEquals("", rE2_0.toString());
      
      rE2_0.reset();
      assertNotSame(string0, string3);
      assertNotSame(string0, string7);
      assertSame(string0, string5);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string6);
      assertSame(string0, string4);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string7));
      assertTrue(string0.equals((Object)string3));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean2);
      
      byte[] byteArray0 = null;
      int int4 = (-929);
      // Undeclared exception!
      try { 
        rE2_0.findAllUTF8Index(byteArray0, int4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "t_wd|";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("t_wd|", rE2_0.toString());
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-85);
      byteArray0[0] = byte0;
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("t_wd|", rE2_0.toString());
      
      int int0 = 0;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, int0);
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("t_wd|", rE2_0.toString());
      
      byte byte1 = (byte) (-69);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)66;
      rE2_0.prefixRune = (int) byte4;
      assertEquals("t_wd|", rE2_0.toString());
      
      int int1 = 0;
      int int2 = (-2657);
      int int3 = 0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) byte3;
      intArray0[1] = (int) byte4;
      intArray0[2] = (int) byte4;
      int int4 = 0;
      boolean boolean0 = rE2_0.match(string0, int1, int2, int3, intArray0, int4);
      assertArrayEquals(new int[] {0, 66, 66}, intArray0);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      assertEquals("t_wd|", rE2_0.toString());
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int3 == int2);
      assertFalse(int4 == int2);
      
      byteArray0[4] = byte4;
      rE2_0.prefixUTF8 = byteArray0;
      assertEquals("t_wd|", rE2_0.toString());
      
      String string1 = "";
      String string2 = rE2_0.replaceAll(string0, string1);
      assertNotNull(string2);
      assertEquals("|", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("t_wd|", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "";
      String[] stringArray0 = rE2_0.findSubmatch(string3);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals("t_wd|", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int[] intArray1 = rE2_0.findIndex(string3);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray1.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(intArray1, intArray0);
      assertEquals("t_wd|", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int5 = 3112;
      List<int[]> list1 = rE2_0.findAllIndex(string3, int5);
      assertNotNull(list1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(list1.contains(intArray0));
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals("t_wd|", rE2_0.toString());
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-69), (byte)0, (byte)0, (byte)66}, byteArray0);
      assertTrue(boolean1);
      assertEquals(5, byteArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("t_wd|", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      
      int int6 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("t_wd|", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertTrue(int6 == int3);
      
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-69), (byte)0, (byte)0, (byte)66}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("t_wd|", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      
      String string4 = "";
      List<String[]> list2 = rE2_0.findAllSubmatch(string4, int1);
      assertNull(list2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(string4, string3);
      assertEquals("t_wd|", rE2_0.toString());
      assertTrue(int1 == int6);
      assertFalse(int1 == int5);
      assertFalse(int1 == int2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "/^gwmT7A";
      int int0 = 1;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("/^gwmT7A", rE2_0.toString());
      
      String string1 = "";
      String string2 = null;
      // Undeclared exception!
      try { 
        RE2.match(string2, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)41;
      byteArray0[0] = byte0;
      byte byte1 = (byte)4;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-8);
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)85;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-69);
      byteArray0[6] = byte6;
      rE2_0.prefixUTF8 = byteArray0;
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray1 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        rE2_0.findAllUTF8(byteArray1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "can't happen";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("can't happen", rE2_0.toString());
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Index(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      int int0 = 872;
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int1 = (-640);
      List<int[]> list0 = rE2_0.findAllIndex(string0, int1);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string1 = null;
      rE2_0.prefix = string1;
      assertEquals("", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.findIndex(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = ", ";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals(", ", rE2_0.toString());
      
      String string1 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-128);
      byteArray0[0] = byte0;
      rE2_0.prefixUTF8 = byteArray0;
      assertEquals(", ", rE2_0.toString());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        rE2_0.findAllIndex(string1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "";
      int int0 = 1;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = " l3%%@]-~etL?";
      int[] intArray0 = rE2_0.findIndex(string1);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      // Undeclared exception!
      try { 
        rE2_0.findSubmatchIndex(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "*SHpQWSlDjz";
      int int0 = 0;
      boolean boolean0 = false;
      try { 
        RE2.compileImpl(string0, int0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "UTF-8";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("UTF-8", rE2_0.toString());
      
      String string1 = null;
      int int0 = 2;
      // Undeclared exception!
      try { 
        rE2_0.findAllSubmatch(string1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "KWt>9O9";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("KWt>9O9", rE2_0.toString());
      
      RE2 rE2_1 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_1);
      assertNotSame(rE2_1, rE2_0);
      assertEquals("KWt>9O9", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      boolean boolean0 = true;
      rE2_1.longest = boolean0;
      assertEquals("KWt>9O9", rE2_1.toString());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-65);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)35;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)35, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotSame(rE2_0, rE2_1);
      assertEquals("KWt>9O9", rE2_0.toString());
      assertFalse(rE2_0.equals((Object)rE2_1));
      
      byteArray0[3] = byte3;
      byte byte4 = (byte)116;
      byteArray0[4] = byte4;
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        rE2_0.matchUTF8(byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "WORD_BOUNDARY";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("WORD_BOUNDARY", rE2_0.toString());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)18;
      byteArray0[1] = byte1;
      byte byte2 = (byte)13;
      byteArray0[2] = byte2;
      byte byte3 = (byte)113;
      byteArray0[3] = byte3;
      String string1 = "{'%{8:q$bZ^{";
      String string2 = rE2_0.find(string1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("WORD_BOUNDARY", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte byte4 = (byte)8;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)62;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      String string3 = "3p";
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        rE2_0.findUTF8SubmatchIndex(byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "}-'hq~Kb1";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("}-'hq~Kb1", rE2_0.toString());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)3;
      byteArray0[0] = byte0;
      String string1 = rE2_0.find(string0);
      assertNotNull(string1);
      assertEquals("}-'hq~Kb1", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("}-'hq~Kb1", rE2_0.toString());
      
      byte byte1 = (byte) (-39);
      byteArray0[1] = byte1;
      boolean boolean0 = false;
      rE2_0.prefixComplete = boolean0;
      assertEquals("}-'hq~Kb1", rE2_0.toString());
      
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      boolean boolean1 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-39), (byte)0}, byteArray0);
      assertFalse(boolean1);
      assertEquals(3, byteArray0.length);
      assertSame(string0, string1);
      assertEquals("}-'hq~Kb1", rE2_0.toString());
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-39), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertSame(string0, string1);
      assertEquals("}-'hq~Kb1", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.findAllUTF8SubmatchIndex(byteArray1, byte1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "oK|";
      int int0 = 2;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("oK|", rE2_0.toString());
      
      String string1 = rE2_0.find(string0);
      assertNotNull(string1);
      assertEquals("oK|", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("oK|", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "com.google.re2j.Regexp";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.Regexp", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      int int0 = 0;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, byte0);
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("com.google.re2j.Regexp", rE2_0.toString());
      
      List<int[]> list1 = rE2_0.findAllUTF8Index(byteArray0, int0);
      assertNull(list1);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("com.google.re2j.Regexp", rE2_0.toString());
      
      boolean boolean0 = RE2.match(string0, string0);
      assertTrue(boolean0);
      
      boolean boolean1 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertFalse(boolean1);
      assertEquals(1, byteArray0.length);
      assertEquals("com.google.re2j.Regexp", rE2_0.toString());
      assertFalse(boolean1 == boolean0);
      
      int int1 = 0;
      String string1 = "altmatch -> ";
      boolean boolean2 = RE2.match(string1, string0);
      assertFalse(boolean2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      List<int[]> list2 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, int1);
      assertNull(list2);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotSame(string0, string1);
      assertEquals("com.google.re2j.Regexp", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      
      String string2 = "{hXDk!Pd";
      RE2 rE2_1 = RE2.compilePOSIX(string2);
      assertNotNull(rE2_1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(rE2_1, rE2_0);
      assertEquals("{hXDk!Pd", rE2_1.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      String string3 = "";
      RE2 rE2_2 = RE2.compile(string3);
      assertNotNull(rE2_2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(rE2_2, rE2_1);
      assertNotSame(rE2_2, rE2_0);
      assertEquals("", rE2_2.toString());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(rE2_2.equals((Object)rE2_1));
      assertFalse(rE2_2.equals((Object)rE2_0));
      
      String string4 = "";
      int[] intArray0 = rE2_1.findIndex(string4);
      assertNull(intArray0);
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(rE2_1, rE2_2);
      assertEquals("{hXDk!Pd", rE2_1.toString());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(rE2_1.equals((Object)rE2_2));
      
      int int2 = 0;
      List<String[]> list3 = rE2_0.findAllSubmatch(string2, int2);
      assertNull(list3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(rE2_0, rE2_2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertEquals("com.google.re2j.Regexp", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(rE2_0.equals((Object)rE2_2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      
      RE2.ReplaceFunc rE2_ReplaceFunc0 = null;
      String string5 = rE2_0.replaceAllFunc(string1, rE2_ReplaceFunc0, byteArray0[0]);
      assertNotNull(string5);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertEquals("altmatch -> ", string5);
      assertEquals(1, byteArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(rE2_0, rE2_2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertEquals("com.google.re2j.Regexp", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(rE2_0.equals((Object)rE2_2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      
      String string6 = "76X>#YH{n0~:S)zVs,";
      String string7 = rE2_1.replaceFirst(string6, string5);
      assertNotNull(string7);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertEquals("76X>#YH{n0~:S)zVs,", string7);
      assertEquals(1, byteArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string7);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(rE2_0, rE2_2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string7);
      assertNotSame(string5, string4);
      assertNotSame(string5, string6);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      assertNotSame(string6, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string6);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string7);
      assertNotSame(string2, string6);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string7);
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(rE2_1, rE2_2);
      assertEquals("com.google.re2j.Regexp", rE2_0.toString());
      assertEquals("{hXDk!Pd", rE2_1.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(rE2_0.equals((Object)rE2_2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertTrue(string1.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(rE2_1.equals((Object)rE2_2));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = "com.google.re2j.RE2";
      int int0 = 816;
      List<String> list0 = rE2_0.findAll(string1, int0);
      assertNotNull(list0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(list0.contains(string0));
      assertFalse(list0.contains(string1));
      assertEquals("", rE2_0.toString());
      assertEquals(20, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int[] intArray0 = rE2_0.findSubmatchIndex(string0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(string0, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      
      rE2_0.put(machine0);
      assertNotSame(string0, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      
      String string2 = rE2_0.toString();
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      List<int[]> list1 = rE2_0.findAllIndex(string1, int0);
      assertNotNull(list1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(list1.contains(intArray0));
      assertEquals("", rE2_0.toString());
      assertFalse(list1.isEmpty());
      assertEquals(20, list1.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-63);
      byteArray0[3] = byte3;
      List<byte[][]> list2 = rE2_0.findAllUTF8Submatch(byteArray0, byteArray0[3]);
      assertNotNull(list2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-63)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertEquals("", rE2_0.toString());
      assertFalse(list2.isEmpty());
      assertEquals(4, list2.size());
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "c#D";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("c#D", rE2_0.toString());
      
      byte[] byteArray0 = null;
      int int0 = 1888;
      // Undeclared exception!
      try { 
        rE2_0.findAllUTF8Submatch(byteArray0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "c}[hr'nN<[`r7";
      try { 
        RE2.compilePOSIX(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[hr'nN<[`r7`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = RE2.match(string0, string0);
      assertTrue(boolean0);
      
      String string1 = "$Inn6<F/\"";
      RE2 rE2_0 = RE2.compilePOSIX(string1);
      assertNotNull(rE2_0);
      assertNotSame(string1, string0);
      assertEquals("$Inn6<F/\"", rE2_0.toString());
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        rE2_0.findUTF8(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "|E68aoJ^W";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("|E68aoJ^W", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch(string0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("|E68aoJ^W", rE2_0.toString());
      
      String string1 = "com.google.re2j.RE2";
      RE2.ReplaceFunc rE2_ReplaceFunc0 = null;
      int int0 = 29;
      // Undeclared exception!
      try { 
        rE2_0.replaceAllFunc(string1, rE2_ReplaceFunc0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.RE2", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = null;
      int int0 = (-1076);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RE2.compileImpl(string0, int0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "~[z";
      int int0 = 6;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("~[z", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      String string1 = null;
      int int1 = 0;
      // Undeclared exception!
      try { 
        rE2_0.findAllSubmatchIndex(string1, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        RE2.compilePOSIX(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "LEFT_PAREN";
      int int0 = 0;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("LEFT_PAREN", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)2;
      boolean boolean1 = true;
      rE2_0.longest = boolean1;
      assertEquals("LEFT_PAREN", rE2_0.toString());
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      String string1 = null;
      // Undeclared exception!
      try { 
        RE2.compile(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "Mu&X";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("Mu&X", rE2_0.toString());
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("Mu&X", rE2_0.toString());
      
      rE2_0.put(machine0);
      assertEquals("Mu&X", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "%1dF<EPB}FcDP!9.nem";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("%1dF<EPB}FcDP!9.nem", rE2_0.toString());
      
      String string1 = "azE(L^4oJ-|";
      char[] charArray0 = new char[7];
      char char0 = '|';
      charArray0[0] = char0;
      char char1 = '1';
      charArray0[1] = char1;
      char char2 = '\\';
      charArray0[2] = char2;
      char char3 = '`';
      charArray0[3] = char3;
      char char4 = '-';
      charArray0[4] = char4;
      char char5 = 'i';
      charArray0[5] = char5;
      char char6 = 'W';
      charArray0[6] = char6;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'|', '1', '\\', '`', '-', 'i', 'W'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("|1\\`-iW", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.limit());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.length());
      
      CharBuffer charBuffer1 = charBuffer0.compact();
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'|', '1', '\\', '`', '-', 'i', 'W'}, charArray0);
      assertEquals(7, charArray0.length);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.limit());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.position());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(7, charBuffer1.capacity());
      assertEquals(7, charBuffer1.position());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertEquals(7, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isReadOnly());
      
      try { 
        RE2.match(string1, charBuffer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `azE(L^4oJ-|`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "](!-E9[csjY]@,8uXv/";
      RE2 rE2_0 = null;
      try {
        rE2_0 = new RE2(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `](!-E9[csjY]@,8uXv/`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "[g%z";
      try { 
        RE2.compile(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[g%z`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals("", rE2_0.toString());
      
      String string1 = null;
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "/i";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("/i", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      int int0 = (-1764);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, int0);
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("/i", rE2_0.toString());
      
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-23);
      byteArray0[1] = byte1;
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("/i", rE2_0.toString());
      
      int int1 = 0;
      boolean boolean0 = false;
      RE2 rE2_1 = RE2.compileImpl(string0, int1, boolean0);
      assertNotNull(rE2_1);
      assertNotSame(rE2_1, rE2_0);
      assertEquals("/i", rE2_1.toString());
      assertFalse(int1 == int0);
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      String string1 = "";
      String string2 = "\\";
      int int2 = (-666);
      List<int[]> list1 = rE2_0.findAllSubmatchIndex(string2, int2);
      assertNull(list1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("/i", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string3 = "%21012=_.Q ";
      String string4 = rE2_1.replaceFirst(string1, string3);
      assertNotNull(string4);
      assertEquals("", string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertEquals("/i", rE2_1.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      
      String string5 = "";
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(rE2_0, rE2_1);
      assertEquals("/i", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(rE2_0.equals((Object)rE2_1));
      
      String[] stringArray0 = rE2_0.findSubmatch(string5);
      assertNull(stringArray0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertEquals("/i", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      int int3 = (-3472);
      // Undeclared exception!
      try { 
        rE2_0.match(string5, int3, byte0, byte1, intArray0, int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = null;
      RE2 rE2_0 = null;
      try {
        rE2_0 = new RE2(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = RE2.match(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "woC2";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("woC2", rE2_0.toString());
      
      String string1 = "";
      int int0 = 0;
      int int1 = 2963;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        rE2_0.match(string0, int0, int1, int0, intArray0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "com.google.re2j.RE2";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      String string1 = rE2_0.toString();
      assertNotNull(string1);
      assertEquals("com.google.re2j.RE2", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      String string2 = "w,";
      int[] intArray0 = rE2_0.findSubmatchIndex(string2);
      assertNull(intArray0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "C&v\\";
      String string1 = RE2.quoteMeta(string0);
      assertNotNull(string1);
      assertEquals("C&v\\\\", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 2;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertNotSame(string0, string1);
      assertEquals("C&v\\", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      
      String string2 = "com.google.re2j.RE2";
      int int1 = 3518;
      List<String[]> list0 = rE2_0.findAllSubmatch(string2, int1);
      assertNull(list0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("C&v\\", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)4;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byte byte2 = (byte)2;
      String string1 = "ylQ4jmoLtEn:Iq/%l~";
      String string2 = RE2.quoteMeta(string1);
      assertNotNull(string2);
      assertEquals("ylQ4jmoLtEn:Iq/%l~", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      byteArray0[3] = byte2;
      byte byte3 = (byte)97;
      byteArray0[4] = byte3;
      byte byte4 = (byte) (-72);
      int int0 = 2;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, int0);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)4, (byte)2, (byte)97, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      
      byteArray0[5] = byte4;
      byte byte5 = (byte)125;
      byteArray0[6] = byte5;
      rE2_0.prefix = string0;
      assertEquals("", rE2_0.toString());
      
      List<int[]> list1 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, byteArray0[5]);
      assertNotNull(list1);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)4, (byte)2, (byte)97, (byte) (-72), (byte)125}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", rE2_0.toString());
      assertEquals(6, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      
      int int1 = 0;
      List<String[]> list2 = rE2_0.findAllSubmatch(string0, int1);
      assertNull(list2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      
      String string3 = " r";
      RE2 rE2_1 = RE2.compilePOSIX(string3);
      assertNotNull(rE2_1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(rE2_1, rE2_0);
      assertEquals(" r", rE2_1.toString());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      int int2 = 1;
      List<int[]> list3 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, int2);
      assertNotNull(list3);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)4, (byte)2, (byte)97, (byte) (-72), (byte)125}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(list3, list1);
      assertEquals("", rE2_0.toString());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(list3.equals((Object)list1));
      
      String string4 = "q?u !$8^.upm";
      String string5 = rE2_0.replaceFirst(string4, string3);
      assertNotNull(string5);
      assertEquals(" rq?u !$8^.upm", string5);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      byte[][] byteArray1 = rE2_1.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)4, (byte)2, (byte)97, (byte) (-72), (byte)125}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(rE2_1, rE2_0);
      assertEquals(" r", rE2_1.toString());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      int int3 = 2049;
      boolean boolean0 = false;
      RE2 rE2_2 = RE2.compileImpl(string4, int3, boolean0);
      assertNotNull(rE2_2);
      assertNotSame(rE2_2, rE2_0);
      assertNotSame(rE2_2, rE2_1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertEquals("q?u !$8^.upm", rE2_2.toString());
      assertFalse(rE2_2.equals((Object)rE2_0));
      assertFalse(rE2_2.equals((Object)rE2_1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      List<int[]> list4 = rE2_1.findAllUTF8Index(byteArray0, byte2);
      assertNull(list4);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)4, (byte)2, (byte)97, (byte) (-72), (byte)125}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(rE2_1, rE2_2);
      assertNotSame(rE2_1, rE2_0);
      assertEquals(" r", rE2_1.toString());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(byte2 == byte5);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte4);
      assertFalse(rE2_1.equals((Object)rE2_2));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      int[] intArray0 = rE2_1.findIndex(string1);
      assertNull(intArray0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(rE2_1, rE2_2);
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertEquals(" r", rE2_1.toString());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(rE2_1.equals((Object)rE2_2));
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertTrue(string1.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "63g4kvHVvvduy@;m";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("63g4kvHVvvduy@;m", rE2_0.toString());
      
      String string1 = "";
      int int0 = 668;
      rE2_0.reset();
      assertNotSame(string0, string1);
      assertEquals("63g4kvHVvvduy@;m", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      
      List<String> list0 = rE2_0.findAll(string1, int0);
      assertNull(list0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("63g4kvHVvvduy@;m", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      int[] intArray0 = rE2_0.findIndex(string0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 16}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(string0, string1);
      assertEquals("63g4kvHVvvduy@;m", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      
      byteArray0[1] = byteArray0[0];
      byte byte1 = (byte) (-73);
      int int1 = 5;
      LinkedList<String[]> linkedList0 = new LinkedList<String[]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<byte[][]> list1 = rE2_0.findAllUTF8Submatch(byteArray0, int1);
      assertNull(list1);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotSame(string0, string1);
      assertEquals("63g4kvHVvvduy@;m", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      
      List<int[]> list2 = rE2_0.findAllIndex(string0, byteArray0[0]);
      assertNotNull(list2);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotSame(string0, string1);
      assertFalse(list2.contains(intArray0));
      assertEquals("63g4kvHVvvduy@;m", rE2_0.toString());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertFalse(string0.equals((Object)string1));
      
      int[] intArray1 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNull(intArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotSame(string0, string1);
      assertEquals("63g4kvHVvvduy@;m", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      
      int int2 = 1033;
      String string2 = rE2_0.replaceFirst(string0, string1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("63g4kvHVvvduy@;m", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      
      int int3 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("63g4kvHVvvduy@;m", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      String string3 = rE2_0.replaceFirst(string0, string1);
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals("63g4kvHVvvduy@;m", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      int int4 = 35;
      List<String[]> list3 = rE2_0.findAllSubmatch(string3, int4);
      assertNull(list3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals("63g4kvHVvvduy@;m", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)16;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-3);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-61);
      byteArray0[2] = byte2;
      byteArray0[3] = byte1;
      byte byte3 = (byte)48;
      byteArray0[4] = byte3;
      byte byte4 = (byte)75;
      byteArray0[7] = byte4;
      byte byte5 = (byte)63;
      byteArray0[6] = byte5;
      byte byte6 = (byte) (-68);
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-3), (byte) (-61), (byte) (-3), (byte)48, (byte)0, (byte)63, (byte)75}, byteArray0);
      assertTrue(boolean0);
      assertEquals(8, byteArray0.length);
      assertEquals("", rE2_0.toString());
      
      byteArray0[7] = byte6;
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-3), (byte) (-61), (byte) (-3), (byte)48, (byte)0, (byte)63, (byte) (-68)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals("", rE2_0.toString());
      
      String string1 = rE2_0.toString();
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray2, byteArray0[2]);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-3), (byte) (-61), (byte) (-3), (byte)48, (byte)0, (byte)63, (byte) (-68)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertEquals(8, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertSame(string0, string1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(list0.contains(byteArray1));
      assertEquals("", rE2_0.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "com.google.re2j.RE2";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      String string1 = "+#a /auAZ#\";ue=";
      rE2_0.prefix = string1;
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      String string2 = "`";
      int int0 = 5476;
      List<int[]> list0 = rE2_0.findAllSubmatchIndex(string2, int0);
      assertNull(list0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "cj#qt";
      String string4 = rE2_0.expr;
      assertNotNull(string4);
      assertEquals("com.google.re2j.RE2", string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string3);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      List<int[]> list1 = rE2_0.findAllIndex(string2, int0);
      assertNull(list1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      
      String string5 = "";
      boolean boolean0 = false;
      RE2 rE2_1 = RE2.compileImpl(string5, int0, boolean0);
      assertNotNull(rE2_1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(rE2_1, rE2_0);
      assertEquals("", rE2_1.toString());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      int[] intArray0 = rE2_0.findIndex(string1);
      assertNull(intArray0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      int[] intArray1 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(rE2_0, rE2_1);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(rE2_0.equals((Object)rE2_1));
      
      List<int[]> list2 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, byte0);
      assertNull(list2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(rE2_0, rE2_1);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(rE2_0.equals((Object)rE2_1));
      
      int int1 = 7;
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(rE2_0, rE2_1);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(rE2_0.equals((Object)rE2_1));
      
      Machine machine0 = rE2_1.get();
      assertNotNull(machine0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(rE2_1, rE2_0);
      assertEquals("", rE2_1.toString());
      assertFalse(int0 == int1);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      int[] intArray2 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(rE2_0, rE2_1);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(rE2_0.equals((Object)rE2_1));
      
      int int2 = (-1597);
      List<byte[]> list3 = rE2_1.findAllUTF8(byteArray0, int2);
      assertNotNull(list3);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(rE2_1, rE2_0);
      assertFalse(list3.contains(byteArray0));
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      assertEquals("", rE2_1.toString());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      List<String> list4 = rE2_1.findAll(string4, int0);
      assertNotNull(list4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(rE2_1, rE2_0);
      assertFalse(list4.contains(string1));
      assertTrue(list4.contains(string5));
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertFalse(list4.isEmpty());
      assertEquals(20, list4.size());
      assertEquals("", rE2_1.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(rE2_1.equals((Object)rE2_0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch(string0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-78);
      byteArray0[1] = byte0;
      byte byte1 = (byte)0;
      byteArray0[2] = byteArray0[0];
      byte byte2 = (byte)80;
      byteArray0[3] = byte2;
      byte byte3 = (byte)0;
      byteArray0[4] = byte3;
      byte byte4 = (byte) (-32);
      byteArray0[5] = byte4;
      byte byte5 = (byte)40;
      byteArray0[6] = byte5;
      byte byte6 = (byte)0;
      byteArray0[7] = byte6;
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, byteArray0[7]);
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte)0, (byte)80, (byte)0, (byte) (-32), (byte)40, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = byte4;
      byteArray1[1] = byte2;
      byteArray1[2] = byte2;
      List<int[]> list1 = rE2_0.findAllUTF8Index(byteArray1, byteArray0[2]);
      assertNull(list1);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)80, (byte)80}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte)0, (byte)80, (byte)0, (byte) (-32), (byte)40, (byte)0}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals("", rE2_0.toString());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte)0, (byte)80, (byte)0, (byte) (-32), (byte)40, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(2, intArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertEquals("", rE2_0.toString());
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      List<int[]> list2 = rE2_0.findAllSubmatchIndex(string0, byte2);
      assertNotNull(list2);
      assertFalse(list2.contains(intArray0));
      assertEquals("", rE2_0.toString());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte4);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte5);
      assertFalse(byte2 == byte6);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = true;
      String string1 = rE2_0.replaceFirst(string0, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", rE2_0.toString());
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)18;
      byteArray0[0] = byte0;
      String string2 = rE2_0.replaceAll(string0, string0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte1 = (byte)3;
      byteArray1[0] = byte1;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray1, byteArray1[0]);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = rE2_0.findUTF8(byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)3}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int int0 = (-105);
      List<int[]> list1 = rE2_0.findAllIndex(string2, int0);
      assertNotNull(list1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(list1, list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(list1.equals((Object)list0));
      
      List<int[]> list2 = rE2_0.findAllUTF8Index(byteArray2, byteArray1[0]);
      assertNotNull(list2);
      assertArrayEquals(new byte[] {(byte)3}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertEquals("", rE2_0.toString());
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int int1 = 0;
      int[] intArray0 = new int[2];
      String string3 = "UTF-8";
      List<int[]> list3 = rE2_0.findAllSubmatchIndex(string3, byteArray1[0]);
      assertNotNull(list3);
      assertArrayEquals(new byte[] {(byte)3}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(list3.contains(intArray0));
      assertEquals("", rE2_0.toString());
      assertFalse(list3.isEmpty());
      assertEquals(3, list3.size());
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(list3.equals((Object)list0));
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      
      intArray0[0] = (int) byteArray1[0];
      int int2 = (-2260);
      intArray0[1] = int2;
      // Undeclared exception!
      try { 
        rE2_0.match(string0, int1, int1, byteArray1[0], intArray0, byte1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = true;
      String string1 = "com.google.re2j.RE2";
      String string2 = rE2_0.replaceFirst(string0, string1);
      assertNotNull(string2);
      assertEquals("com.google.re2j.RE2", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[1];
      String string3 = rE2_0.replaceAll(string1, string0);
      assertNotNull(string3);
      assertEquals("com.google.re2j.RE2", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      rE2_0.longest = boolean0;
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte0 = (byte)2;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray1, byteArray1[0]);
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = rE2_0.findUTF8(byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int0 = (-105);
      List<int[]> list1 = rE2_0.findAllIndex(string3, int0);
      assertNotNull(list1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals("", rE2_0.toString());
      assertFalse(list1.isEmpty());
      assertEquals(20, list1.size());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      List<int[]> list2 = rE2_0.findAllUTF8Index(byteArray2, byteArray1[0]);
      assertNull(list2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int1 = 0;
      int[] intArray0 = new int[2];
      String string4 = "UTF-8";
      List<int[]> list3 = rE2_0.findAllSubmatchIndex(string4, byteArray1[0]);
      assertNull(list3);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      
      int int2 = (-2260);
      intArray0[1] = int2;
      // Undeclared exception!
      try { 
        rE2_0.match(string0, int1, int1, byteArray1[0], intArray0, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = true;
      String string1 = "com.google.re2j.RE2";
      String string2 = "Inl/.";
      String string3 = rE2_0.replaceFirst(string0, string1);
      assertNotNull(string3);
      assertEquals("com.google.re2j.RE2", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = (-1);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)18;
      byteArray0[0] = byte0;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, int0);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertEquals("", rE2_0.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      
      rE2_0.prefix = string2;
      assertEquals("", rE2_0.toString());
      
      List<String> list1 = rE2_0.findAll(string2, int0);
      assertNotNull(list1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertFalse(list1.contains(string1));
      assertTrue(list1.contains(string0));
      assertEquals("", rE2_0.toString());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      
      String string4 = rE2_0.replaceAll(string1, string0);
      assertNotNull(string4);
      assertEquals("com.google.re2j.RE2", string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      rE2_0.longest = boolean0;
      assertEquals("", rE2_0.toString());
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte1 = (byte)0;
      byteArray1[0] = byte1;
      List<int[]> list2 = rE2_0.findAllUTF8Index(byteArray1, byteArray1[0]);
      assertNull(list2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertEquals("", rE2_0.toString());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      
      byte[] byteArray2 = rE2_0.findUTF8(byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals("", rE2_0.toString());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int int1 = (-105);
      List<int[]> list3 = rE2_0.findAllIndex(string4, int1);
      assertNull(list3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string1.equals((Object)string4));
      assertFalse(int1 == int0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      List<int[]> list4 = rE2_0.findAllUTF8Index(byteArray2, byteArray1[0]);
      assertNull(list4);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals("", rE2_0.toString());
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int int2 = 0;
      int[] intArray0 = new int[2];
      String string5 = "UTF-8";
      List<int[]> list5 = rE2_0.findAllSubmatchIndex(string5, byteArray1[0]);
      assertNull(list5);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      intArray0[0] = (int) byteArray1[0];
      int int3 = (-2260);
      intArray0[1] = int3;
      boolean boolean1 = rE2_0.match(string0, int2, int2, byteArray1[0], intArray0, byte1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new int[] {0, (-2260)}, intArray0);
      assertFalse(boolean1);
      assertEquals(1, byteArray1.length);
      assertEquals(2, intArray0.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertEquals("", rE2_0.toString());
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(byte1 == byte0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(boolean1 == boolean0);
      
      rE2_0.reset();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      
      RE2 rE2_1 = RE2.compilePOSIX(string4);
      assertNotNull(rE2_1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertEquals("com.google.re2j.RE2", rE2_1.toString());
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string1.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertTrue(string4.equals((Object)string1));
      
      List<int[]> list6 = rE2_1.findAllSubmatchIndex(string1, intArray0[0]);
      assertNull(list6);
      assertArrayEquals(new int[] {0, (-2260)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertEquals("com.google.re2j.RE2", rE2_1.toString());
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string1.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertTrue(string4.equals((Object)string1));
      
      String string6 = ".>/?l^wx.a$u";
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = "";
      String string2 = rE2_0.expr;
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      
      int int0 = 2;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[1] = byte0;
      byte byte1 = (byte)127;
      byteArray0[2] = byte1;
      byte byte2 = (byte) (-51);
      byteArray0[3] = byte2;
      byteArray0[5] = byteArray0[2];
      byte byte3 = (byte)0;
      byteArray0[5] = byte3;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, byte1);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)127, (byte) (-51), (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte3);
      
      String string3 = "EMPTY_WIDTH";
      String string4 = rE2_0.find(string3);
      assertNotNull(string4);
      assertEquals("", string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertEquals("", rE2_0.toString());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = " ";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals(" ", rE2_0.toString());
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = true;
      boolean boolean1 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      assertEquals(5, byteArray0.length);
      assertEquals(" ", rE2_0.toString());
      assertFalse(boolean1 == boolean0);
      
      rE2_0.longest = boolean0;
      assertEquals(" ", rE2_0.toString());
      
      int int0 = (-866);
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNull(intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(" ", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll(string0, int0);
      assertNotNull(list0);
      assertTrue(list0.contains(string0));
      assertEquals(" ", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      byte byte0 = (byte) (-101);
      byteArray0[0] = byte0;
      int int1 = 0;
      rE2_0.prefixRune = (int) byteArray0[0];
      assertEquals(" ", rE2_0.toString());
      
      byte byte1 = (byte)52;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-66);
      rE2_0.longest = boolean0;
      assertEquals(" ", rE2_0.toString());
      
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      boolean boolean2 = true;
      rE2_0.prefixComplete = boolean2;
      assertEquals(" ", rE2_0.toString());
      
      int[] intArray1 = rE2_0.findIndex(string0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 1}, intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(" ", rE2_0.toString());
      
      byteArray0[4] = byte4;
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)52, (byte)0, (byte)0, (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(" ", rE2_0.toString());
      
      rE2_0.prefix = string0;
      assertEquals(" ", rE2_0.toString());
      
      String string1 = "XngpPX0?'5!J1";
      String string2 = RE2.quoteMeta(string1);
      assertNotNull(string2);
      assertEquals("XngpPX0\\?'5!J1", string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      rE2_0.reset();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(" ", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      
      String string3 = rE2_0.find(string1);
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals(" ", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean3 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)52, (byte)0, (byte)0, (byte)1}, byteArray0);
      assertFalse(boolean3);
      assertEquals(5, byteArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertEquals(" ", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string4 = RE2.quoteMeta(string3);
      assertNotNull(string4);
      assertEquals("", string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertEquals(" ", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean4 = rE2_0.match(string2);
      assertFalse(boolean4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertEquals(" ", rE2_0.toString());
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      
      byte[] byteArray2 = new byte[15];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = byte3;
      byteArray2[1] = byte3;
      byte[] byteArray3 = rE2_0.findUTF8(byteArray2);
      assertNull(byteArray3);
      assertEquals(15, byteArray2.length);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(" ", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int2 = (-515);
      List<int[]> list1 = rE2_0.findAllSubmatchIndex(string0, int2);
      assertNotNull(list1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertFalse(list1.contains(intArray1));
      assertEquals(" ", rE2_0.toString());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      rE2_0.prefix = string0;
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals("", rE2_0.toString());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("", rE2_0.toString());
      
      int int1 = 0;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, int1);
      assertNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", rE2_0.toString());
      assertTrue(int1 == int0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex(string0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("", rE2_0.toString());
      
      RE2 rE2_1 = RE2.compilePOSIX(rE2_0.prefix);
      assertNotNull(rE2_1);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(rE2_1, rE2_0);
      assertEquals("", rE2_0.toString());
      assertEquals("", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      int int2 = 1916;
      String string1 = "";
      String string2 = rE2_0.replaceFirst(rE2_0.prefix, string0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", rE2_0.toString());
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      List<byte[][]> list1 = rE2_1.findAllUTF8Submatch(byteArray0, int2);
      assertNotNull(list1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(rE2_1, rE2_0);
      assertFalse(list1.contains(byteArray1));
      assertEquals("", rE2_0.toString());
      assertEquals("", rE2_1.toString());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(string0.equals((Object)string2));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = 2396;
      int int4 = (-3577);
      int int5 = 0;
      boolean boolean0 = rE2_1.prefixComplete;
      assertTrue(boolean0);
      
      byte[] byteArray2 = rE2_0.findUTF8(byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string2));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      String string3 = "wY[XV$appsa";
      int int6 = 34;
      List<String[]> list2 = rE2_0.findAllSubmatch(string3, int6);
      assertNotNull(list2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("", rE2_0.toString());
      assertEquals(12, list2.size());
      assertFalse(list2.isEmpty());
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      
      int[] intArray1 = rE2_1.findIndex(string1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray1.length);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertEquals("", rE2_0.toString());
      assertEquals("", rE2_1.toString());
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(string1.equals((Object)string3));
      assertTrue(string1.equals((Object)string2));
      
      int[] intArray2 = rE2_0.findUTF8Index(byteArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(2, intArray2.length);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean boolean1 = rE2_0.match(string2);
      assertTrue(boolean1);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertTrue(boolean1 == boolean0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      
      List<byte[]> list3 = rE2_1.findAllUTF8(byteArray0, int1);
      assertNull(list3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(rE2_1, rE2_0);
      assertEquals("", rE2_0.toString());
      assertEquals("", rE2_1.toString());
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int6);
      assertFalse(int1 == int4);
      assertFalse(rE2_1.equals((Object)rE2_0));
      
      String string4 = null;
      // Undeclared exception!
      try { 
        rE2_1.replaceFirst(string4, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "xX?:B9$9L*}whh";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("xX?:B9$9L*}whh", rE2_0.toString());
      
      int int0 = 0;
      int int1 = (-1414);
      int int2 = (-3);
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      boolean boolean0 = rE2_0.match(string0, int0, int1, int2, intArray0, intArray0[0]);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertEquals("xX?:B9$9L*}whh", rE2_0.toString());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("xX?:B9$9L*}whh", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte)0;
      byte byte1 = (byte)0;
      byte byte2 = (byte)0;
      String string1 = "";
      int int3 = 1;
      boolean boolean1 = false;
      RE2 rE2_1 = RE2.compileImpl(string1, int3, boolean1);
      assertNotNull(rE2_1);
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(string1, string0);
      assertEquals("", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = PrivateAccess.callMethod((Class<RE2>) RE2.class, rE2_1, "pad", (Object) intArray0, (Class<?>) int[].class);
      assertNotNull(object0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(intArray0, object0);
      assertNotSame(string1, string0);
      assertEquals("", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "X:X&pK<}hXj";
      int int0 = 3780;
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("X:X&pK<}hXj", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch(string0, int0);
      assertNotNull(list0);
      assertEquals("X:X&pK<}hXj", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      String[] stringArray0 = rE2_0.findSubmatch(string0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("X:X&pK<}hXj", rE2_0.toString());
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)1;
      byte byte1 = (byte)0;
      byteArray0[3] = byte1;
      byte byte2 = (byte)62;
      String string1 = "com.google.re2j.Regexp$Op";
      int int1 = 0;
      List<String> list1 = rE2_0.findAll(string1, int1);
      assertNull(list1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("X:X&pK<}hXj", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      
      byteArray0[4] = byte2;
      byte byte3 = (byte)46;
      byteArray0[5] = byte3;
      byte byte4 = (byte) (-13);
      byteArray0[6] = byte4;
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)62, (byte)46, (byte) (-13)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(string0, string1);
      assertEquals("X:X&pK<}hXj", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      
      String string2 = "^\\x00-\\x{10FFFF}";
      boolean boolean1 = RE2.match(string2, string0);
      assertFalse(boolean1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      
      List<int[]> list2 = rE2_0.findAllUTF8Index(byteArray0, byteArray0[6]);
      assertNull(list2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)62, (byte)46, (byte) (-13)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("X:X&pK<}hXj", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("X:X&pK<}hXj", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      
      int int2 = 2;
      List<int[]> list3 = rE2_0.findAllSubmatchIndex(string2, int2);
      assertNull(list3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("X:X&pK<}hXj", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = byte2;
      List<byte[][]> list4 = rE2_0.findAllUTF8Submatch(byteArray2, byteArray0[1]);
      assertNull(list4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)62, (byte)46, (byte) (-13)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)62}, byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals("X:X&pK<}hXj", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      String string3 = "9/DF6;r4:,K";
      String string4 = RE2.quoteMeta(string3);
      assertNotNull(string4);
      assertEquals("9/DF6;r4:,K", string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = "";
      String[] stringArray1 = rE2_0.findSubmatch(string5);
      assertNull(stringArray1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertEquals("X:X&pK<}hXj", rE2_0.toString());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
  }
}
