/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 21:02:42 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)10;
      byteArray0[0] = byte0;
      byteArray0[1] = byteArray0[0];
      String string1 = "BMFZ<uGM7j`E+Dd";
      List<String[]> list0 = rE2_0.findAllSubmatch(string1, byteArray0[1]);
      assertNotNull(list0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(10, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(6, byteArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "v?7k3KZu'E40";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("v?7k3KZu'E40", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch(string0);
      assertNotNull(stringArray0);
      assertEquals("v?7k3KZu'E40", rE2_0.toString());
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "FAIL";
      int int0 = (-3277);
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("FAIL", rE2_0.toString());
      
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      int int1 = (-8);
      intArray0[3] = int1;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      Object object0 = PrivateAccess.callMethod((Class<RE2>) RE2.class, rE2_0, "pad", (Object) intArray0, (Class<?>) int[].class);
      assertNotNull(object0);
      assertFalse(int0 == int1);
      assertArrayEquals(new int[] {(-3277), (-3277), (-3277), (-8), (-3277), (-3277), (-3277)}, intArray0);
      assertEquals("FAIL", rE2_0.toString());
      assertEquals(7, intArray0.length);
      assertSame(intArray0, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "H1dpO#G!,y_:b";
      int int0 = 13;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("H1dpO#G!,y_:b", rE2_0.toString());
      
      boolean boolean1 = rE2_0.match(string0);
      assertFalse(boolean1 == boolean0);
      assertEquals("H1dpO#G!,y_:b", rE2_0.toString());
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[8];
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertFalse(boolean0 == boolean1);
      assertEquals("H1dpO#G!,y_:b", rE2_0.toString());
      
      rE2_0.put(machine0);
      assertFalse(boolean0 == boolean1);
      assertEquals("H1dpO#G!,y_:b", rE2_0.toString());
      
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertFalse(boolean0 == boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("H1dpO#G!,y_:b", rE2_0.toString());
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = rE2_0.toString();
      assertNotNull(string1);
      assertEquals("", rE2_0.toString());
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = "BMFZ<uGM7j`E+Dd";
      String string2 = rE2_0.replaceFirst(string0, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", rE2_0.toString());
      assertEquals("BMFZ<uGM7j`E+Dd", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "fa";
      int int0 = 2064;
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("fa", rE2_0.toString());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = linkedList0.toString();
      assertFalse(linkedList0.contains(string1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertEquals("[]", string1);
      assertNotSame(string1, string0);
      
      RE2.ReplaceFunc rE2_ReplaceFunc0 = null;
      String string2 = rE2_0.replaceAllFunc(string1, rE2_ReplaceFunc0, int0);
      assertFalse(linkedList0.contains(string1));
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("fa", rE2_0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      int int0 = (-2);
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = rE2_0.find(string0);
      assertNotNull(string1);
      assertEquals("", rE2_0.toString());
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = RE2.quoteMeta(string1);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", rE2_0.toString());
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "can't happen";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("can't happen", rE2_0.toString());
      
      String string1 = "R#G";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      assertNotNull(stringBuilder0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("can't happen", stringBuilder0.toString());
      
      int int0 = 0;
      int int1 = 2;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int1, (CharSequence) string1, int0, int1);
      assertNotNull(stringBuilder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("caR#n't happen", stringBuilder0.toString());
      assertEquals("caR#n't happen", stringBuilder1.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      boolean boolean0 = rE2_0.match(stringBuilder0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("can't happen", rE2_0.toString());
      assertEquals("caR#n't happen", stringBuilder0.toString());
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = " itm&";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals(" itm&", rE2_0.toString());
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals(" itm&", rE2_0.toString());
      
      rE2_0.put(machine0);
      assertEquals(" itm&", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "RQd''ZA\\]";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("RQd''ZA\\]", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNull(intArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("RQd''ZA\\]", rE2_0.toString());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "V5GrYcO,'QPhN2";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("V5GrYcO,'QPhN2", rE2_0.toString());
      
      String string1 = rE2_0.find(string0);
      assertNotNull(string1);
      assertEquals("V5GrYcO,'QPhN2", rE2_0.toString());
      assertEquals("V5GrYcO,'QPhN2", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      int int0 = (-2);
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = rE2_0.find(string0);
      assertNotNull(string1);
      assertEquals("", rE2_0.toString());
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        rE2_0.replaceFirst(string2, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = rE2_0.replaceAll(string0, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", rE2_0.toString());
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 452;
      RE2.ReplaceFunc rE2_ReplaceFunc0 = null;
      // Undeclared exception!
      try { 
        rE2_0.replaceAllFunc(string1, rE2_ReplaceFunc0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.RE2", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = null;
      // Undeclared exception!
      try { 
        rE2_0.replaceAll(string1, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.RE2", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        RE2.quoteMeta(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.RE2", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        rE2_0.matchUTF8(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "Du|b\\mZzZRq*H=2a";
      String string1 = RE2.quoteMeta(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Du\\|b\\\\mZzZRq\\*H=2a", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      try { 
        RE2.match(string0, string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        RE2.match(string0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "g#ef]0S5+2x";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("g#ef]0S5+2x", rE2_0.toString());
      
      int int0 = 128;
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        rE2_0.match(string0, int0, int0, int0, intArray0, intArray0[5]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "P`@UyQ/l,:ft&30B";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("P`@UyQ/l,:ft&30B", rE2_0.toString());
      
      CharSequence charSequence0 = null;
      int int0 = 0;
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        rE2_0.match(charSequence0, int0, int0, int0, intArray0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF16Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "RUNE_ANY_NOT_NL";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("RUNE_ANY_NOT_NL", rE2_0.toString());
      
      int int0 = (-491);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        rE2_0.match(string0, int0, int0, int0, intArray0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int0 = 0;
      int[] intArray0 = new int[4];
      int int1 = 7;
      // Undeclared exception!
      try { 
        rE2_0.match(string0, int0, int0, int0, intArray0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "4";
      int int0 = 3129;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("4", rE2_0.toString());
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        rE2_0.match(charSequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "v?7k3KZu'E40";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("v?7k3KZu'E40", rE2_0.toString());
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        rE2_0.findUTF8SubmatchIndex(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Submatch(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Index(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "r/wTLhYa}!i'!x";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("r/wTLhYa}!i'!x", rE2_0.toString());
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        rE2_0.findUTF8(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "com.google.re2j.RE2";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      String string1 = null;
      // Undeclared exception!
      try { 
        rE2_0.findSubmatchIndex(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = null;
      // Undeclared exception!
      try { 
        rE2_0.findSubmatch(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = ",,P|X,";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals(",,P|X,", rE2_0.toString());
      
      String string1 = null;
      // Undeclared exception!
      try { 
        rE2_0.findIndex(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "dNCz,Xh<%j|20JERWQ'";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("dNCz,Xh<%j|20JERWQ'", rE2_0.toString());
      
      byte[] byteArray0 = null;
      int int0 = (-2088);
      // Undeclared exception!
      try { 
        rE2_0.findAllUTF8SubmatchIndex(byteArray0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "";
      int int0 = (-1345);
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        rE2_0.findAllUTF8Submatch(byteArray0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = " itm&";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals(" itm&", rE2_0.toString());
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)110;
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(" itm&", rE2_0.toString());
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        rE2_0.findAllUTF8Index(byteArray1, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        rE2_0.findAllUTF8(byteArray0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = null;
      int int0 = 1097;
      // Undeclared exception!
      try { 
        rE2_0.findAllSubmatchIndex(string1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[9];
      String string1 = null;
      // Undeclared exception!
      try { 
        rE2_0.findAllSubmatch(string1, byteArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "rwER\\%P-q";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("rwER\\%P-q", rE2_0.toString());
      
      String string1 = null;
      int int0 = (-2682);
      // Undeclared exception!
      try { 
        rE2_0.findAllIndex(string1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "\\\\$lf_E:n";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("\\\\$lf_E:n", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      String string1 = null;
      // Undeclared exception!
      try { 
        rE2_0.findAll(string1, byteArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "";
      int int0 = 2969;
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = null;
      // Undeclared exception!
      try { 
        rE2_0.find(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "m Y/b_M//$oIK?\\I9";
      try { 
        RE2.compilePOSIX(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\I`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        RE2.compilePOSIX(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "35]9S\\(n6*P+(a](:";
      int int0 = 256;
      boolean boolean0 = true;
      try { 
        RE2.compileImpl(string0, int0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `35]9S\\(n6*P+(a](:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = null;
      int int0 = 3;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RE2.compileImpl(string0, int0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "-Gk\\Crz7:\\6*sD";
      try { 
        RE2.compile(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\C`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        RE2.compile(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "(P,hFYZt$!]k";
      RE2 rE2_0 = null;
      try {
        rE2_0 = new RE2(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(P,hFYZt$!]k`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = null;
      RE2 rE2_0 = null;
      try {
        rE2_0 = new RE2(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int0 = 0;
      List<int[]> list0 = rE2_0.findAllSubmatchIndex(string0, int0);
      assertNull(list0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = ",,P|X,";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals(",,P|X,", rE2_0.toString());
      
      int int0 = 0;
      List<String[]> list0 = rE2_0.findAllSubmatch(string0, int0);
      assertNull(list0);
      assertEquals(",,P|X,", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "";
      int int0 = (-2);
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int1 = rE2_0.numberOfCapturingGroups();
      assertFalse(int1 == int0);
      assertEquals("", rE2_0.toString());
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[3];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, int1);
      assertNull(list0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)10;
      byteArray0[0] = byte0;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, byteArray0[0]);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "RQd''ZA\\]";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("RQd''ZA\\]", rE2_0.toString());
      
      int int0 = (-2);
      List<String> list0 = rE2_0.findAll(string0, int0);
      assertNull(list0);
      assertEquals("RQd''ZA\\]", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "RQd''ZA\\]";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("RQd''ZA\\]", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int int0 = (-2);
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, int0);
      assertNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("RQd''ZA\\]", rE2_0.toString());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "8j>;";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("8j>;", rE2_0.toString());
      
      String string1 = "";
      String[] stringArray0 = rE2_0.findSubmatch(string1);
      assertNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("8j>;", rE2_0.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch(string0);
      assertNotNull(stringArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[3];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(3, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "\\\\$lf_E:n";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("\\\\$lf_E:n", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex(string0);
      assertNull(intArray0);
      assertEquals("\\\\$lf_E:n", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "";
      int int0 = (-2);
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex(string0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "Other_Grapheme_Extend";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("Other_Grapheme_Extend", rE2_0.toString());
      
      String string1 = "REPEAT";
      String string2 = rE2_0.find(string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Other_Grapheme_Extend", rE2_0.toString());
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "";
      int int0 = (-59);
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(2, byteArray0.length);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals("", rE2_0.toString());
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "4";
      int int0 = 3129;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("4", rE2_0.toString());
      
      int int1 = (-389);
      List<String[]> list0 = rE2_0.findAllSubmatch(string0, int1);
      assertNotNull(list0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("4", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[0];
      Object object0 = PrivateAccess.callMethod((Class<RE2>) RE2.class, rE2_0, "pad", (Object) intArray0, (Class<?>) int[].class);
      assertNotNull(object0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, object0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = " XPkr@p\"O<_~fOD~0l";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals(" XPkr@p\"O<_~fOD~0l", rE2_0.toString());
      
      String string1 = "can't happen";
      int[] intArray0 = rE2_0.findSubmatchIndex(string1);
      assertNull(intArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(" XPkr@p\"O<_~fOD~0l", rE2_0.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "V5GrYcO,'QPhN2";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("V5GrYcO,'QPhN2", rE2_0.toString());
      
      String string1 = rE2_0.replaceAll(string0, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("V5GrYcO,'QPhN2", rE2_0.toString());
      assertEquals("V5GrYcO,'QPhN2", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = "EMPTY_MATCH";
      String string2 = rE2_0.replaceAll(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", rE2_0.toString());
      assertEquals("EMPTY_MATCH", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "\\z";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("\\z", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("\\z", rE2_0.toString());
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "8j>;";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("8j>;", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("8j>;", rE2_0.toString());
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "]R";
      int int0 = (-984);
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("]R", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      String string1 = RE2.quoteMeta(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\]R", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
      assertFalse(string0.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("]R", rE2_0.toString());
      assertEquals(1, byteArray0.length);
      assertNotSame(string0, string1);
      
      String string2 = "";
      RE2 rE2_1 = RE2.compilePOSIX(string2);
      assertNotNull(rE2_1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("", rE2_1.toString());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(rE2_1, rE2_0);
      
      boolean boolean1 = rE2_1.match(string1, byteArray0[0], byteArray0[0], byte0, intArray0, byteArray0[0]);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("]R", rE2_0.toString());
      assertEquals("", rE2_1.toString());
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(rE2_1, rE2_0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "|iDu";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("|iDu", rE2_0.toString());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)1;
      byteArray0[1] = byte0;
      byte byte1 = (byte) (-113);
      int[] intArray0 = rE2_0.findSubmatchIndex(string0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("|iDu", rE2_0.toString());
      assertEquals(2, intArray0.length);
      
      StringBuffer stringBuffer0 = new StringBuffer(byte0);
      assertNotNull(stringBuffer0);
      assertFalse(byte0 == byte1);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      boolean boolean0 = rE2_0.match(stringBuffer0, byte1, byteArray0[3], byteArray0[1], intArray0, byteArray0[2]);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("|iDu", rE2_0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(8, byteArray0.length);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "c(tuOIh30P=11f>,  K";
      String string1 = "I";
      RE2 rE2_0 = RE2.compile(string1);
      assertNotNull(rE2_0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I", rE2_0.toString());
      assertNotSame(string1, string0);
      
      int int0 = 2147483645;
      int int1 = (-1561);
      int[] intArray0 = new int[1];
      boolean boolean0 = rE2_0.match(string0, int0, int1, int1, intArray0, int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals("I", rE2_0.toString());
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "RQd''ZA\\]";
      boolean boolean0 = RE2.match(string0, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "";
      int int0 = (-2);
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)81;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, byte0);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int0 = 3574;
      List<int[]> list0 = rE2_0.findAllSubmatchIndex(string0, int0);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int int0 = 3574;
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, int0);
      assertFalse(list0.contains(byteArray0));
      assertNotNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "\\z";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("\\z", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)107;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, byte0);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("\\z", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "\\z";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("\\z", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, byteArray0[0]);
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("\\z", rE2_0.toString());
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "\\z";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("\\z", rE2_0.toString());
      
      byte byte0 = (byte)107;
      List<String> list0 = rE2_0.findAll(string0, byte0);
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      assertEquals("\\z", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int0 = 1;
      List<int[]> list0 = rE2_0.findAllIndex(string0, int0);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, byte0);
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = "";
      int int0 = (-2);
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int1 = rE2_0.numberOfCapturingGroups();
      assertFalse(int1 == int0);
      assertEquals("", rE2_0.toString());
      assertEquals(0, int1);
      
      List<int[]> list0 = rE2_0.findAllIndex(string0, int1);
      assertNull(list0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String string0 = "Qd''ZA\\p";
      RE2 rE2_0 = null;
      try {
        rE2_0 = new RE2(string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = " XPkr@p\"O<_~fOD~0l";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals(" XPkr@p\"O<_~fOD~0l", rE2_0.toString());
      
      String string1 = rE2_0.toString();
      assertNotNull(string1);
      assertEquals(" XPkr@p\"O<_~fOD~0l", rE2_0.toString());
      assertEquals(" XPkr@p\"O<_~fOD~0l", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = "";
      int int0 = (-2);
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[3];
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(3, byteArray0.length);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = "";
      int int0 = (-2);
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = rE2_0.find(string0);
      assertNotNull(string1);
      assertEquals("", rE2_0.toString());
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = rE2_0.replaceFirst(string1, string1);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", rE2_0.toString());
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = RE2.match(string0, string0);
      assertTrue(boolean0);
  }
}
