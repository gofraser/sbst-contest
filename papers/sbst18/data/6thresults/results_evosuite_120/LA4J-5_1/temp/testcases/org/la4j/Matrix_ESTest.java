/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:49:06 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[5];
      double double0 = 495.9128577187974;
      doubleArray0[0] = double0;
      double double1 = 998.523351897;
      doubleArray0[1] = double1;
      double double2 = 272.7854;
      doubleArray0[2] = double2;
      DenseVector denseVector0 = mock(DenseVector.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(denseVector0).length();
      ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      double double3 = (-593.854);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      DenseVector denseVector1 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector1, denseVector1);
      matrix0.toString();
      NumberFormat numberFormat0 = null;
      // Undeclared exception!
      try { 
        matrix0.toCSV(numberFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 0;
      int int1 = 17;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.toBinary();
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      int int2 = 1;
      int int3 = 0;
      int int4 = 2965;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, int2, int0, int0, int3, int2, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 2965 cols at 0, 0 in a 0x17 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(int0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      double double0 = (-15.575237525156677);
      Matrix matrix0 = denseMatrix0.multiply(double0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      RowMajorSparseMatrix.diagonal(int0, long0);
      int int1 = (-3258);
      mockRandom0.nextLong();
      matrix0.diagonalProduct();
      int int2 = 2170;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(int2, vectorFunction0);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = mock(DenseVector.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(denseVector0).blank();
      doReturn(0).when(denseVector0).length();
      Vector vector0 = ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        denseMatrix0.multiply(vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 1110;
      int int1 = 0;
      Matrix matrix0 = Matrix.zero(int0, int1);
      Matrix matrix1 = matrix0.transpose();
      Matrix matrix2 = matrix1.blank();
      Matrix matrix3 = matrix2.blankOfRows(int1);
      Matrix matrix4 = matrix3.multiply(matrix2);
      int int2 = 1;
      String string0 = "";
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      char char0 = 'E';
      decimalFormatSymbols0.setDecimalSeparator(char0);
      Locale locale0 = Locale.US;
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      boolean boolean0 = true;
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean0);
      PrivateAccess.callMethod((Class<Matrix>) Matrix.class, matrix2, "indent", (Object) stringBuilder1, (Class<?>) StringBuilder.class, (Object) int1, (Class<?>) int.class);
      NumberFormat.getIntegerInstance(locale0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)int1).when(matrixAccumulator0).accumulate();
      matrix2.fold(matrixAccumulator0);
      Matrix.constant(int0, int2, int1);
      matrix3.shuffle();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix4.withInverter(linearAlgebra_InverterFactory0);
      int[] intArray0 = new int[3];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      int int3 = 704;
      // Undeclared exception!
      try { 
        matrix0.slice(intArray0[2], intArray0[1], int3, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.columnMajorIterator();
      double double0 = matrix0.manhattanNorm();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 0;
      int int2 = 5505;
      double double1 = 0.0;
      matrix0.rank();
      matrix0.subtract(double1);
      int int3 = 1109;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      int int4 = 0;
      boolean boolean0 = false;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int4, boolean0);
      char[] charArray0 = new char[2];
      char char0 = '}';
      charArray0[0] = char0;
      char char1 = '\'';
      charArray0[1] = char1;
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      int int5 = 1;
      PrivateAccess.callMethod((Class<Matrix>) Matrix.class, matrix0, "indent", (Object) stringBuilder2, (Class<?>) StringBuilder.class, (Object) int5, (Class<?>) int.class);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(int0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      double double0 = (-15.575237525156677);
      Matrix matrix0 = denseMatrix0.multiply(double0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      RowMajorSparseMatrix.diagonal(int0, long0);
      int int1 = (-3258);
      matrix0.diagonalProduct();
      int int2 = 2170;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = matrix0.transformRow(int2, vectorFunction0);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrixOperation0).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.DenseMatrix.class));
      matrix1.insert(matrix0);
      // Undeclared exception!
      try { 
        denseMatrix0.apply(matrixMatrixOperation0, matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(int0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      sparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      String string0 = "m";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      long long0 = (-4133L);
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, long0);
      Object object0 = null;
      StringBuilder stringBuilder2 = stringBuilder1.append(object0);
      int int1 = 0;
      char[] charArray0 = new char[8];
      char char0 = 'I';
      charArray0[0] = char0;
      char char1 = '\"';
      charArray0[1] = char1;
      char char2 = 'x';
      charArray0[2] = char2;
      char char3 = 'e';
      charArray0[3] = char3;
      char char4 = 'q';
      charArray0[4] = char4;
      char char5 = '_';
      charArray0[5] = char5;
      char char6 = 'g';
      charArray0[6] = char6;
      char char7 = 'A';
      charArray0[7] = char7;
      StringBuilder stringBuilder3 = stringBuilder2.insert(int1, charArray0);
      StringBuilder stringBuilder4 = stringBuilder3.append(int0);
      int int2 = 1106;
      PrivateAccess.callMethod((Class<Matrix>) Matrix.class, (Matrix) sparseMatrix0, "indent", (Object) stringBuilder4, (Class<?>) StringBuilder.class, (Object) int2, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = mock(DenseVector.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(denseVector0).length();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      Matrix matrix1 = ooPlaceKroneckerProduct0.applyCommon(matrix0, matrix0);
      matrix0.hadamardProduct(matrix1);
      matrix0.sum();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = (-294);
      int int1 = (-1274);
      // Undeclared exception!
      try { 
        DenseMatrix.unit(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.columnMajorIterator();
      double double0 = matrix0.manhattanNorm();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 0;
      int int2 = 5505;
      double double1 = 0.0;
      matrix0.rank();
      matrix0.subtract(double1);
      int int3 = 1109;
      Object object0 = null;
      matrix0.equals(object0);
      rowMajorSparseMatrix0.blankOfColumns(int1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      DenseVector denseVector0 = DenseVector.unit(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      int int1 = 0;
      int int2 = 10;
      Matrix.constant(int1, int2, int2);
      Matrix matrix1 = matrix0.rotate();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix1.is(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[5];
      double double0 = 495.9128577187974;
      doubleArray0[0] = double0;
      double double1 = 998.523351897;
      doubleArray0[1] = double1;
      double double2 = 272.7854;
      doubleArray0[2] = double2;
      double double3 = (-593.854);
      double double4 = 0.0;
      doubleArray0[4] = double4;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.toString();
      Matrix matrix1 = matrix0.removeFirstRow();
      int int0 = 2672;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix1.updateAt(int0, int0, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 1110;
      int int1 = 0;
      Matrix matrix0 = Matrix.zero(int0, int1);
      Matrix matrix1 = matrix0.transpose();
      Matrix matrix2 = matrix1.blank();
      Matrix matrix3 = matrix2.blankOfRows(int1);
      Matrix matrix4 = matrix3.multiply(matrix2);
      int int2 = 1;
      String string0 = "";
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      char char0 = 'E';
      decimalFormatSymbols0.setDecimalSeparator(char0);
      DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols0);
      Locale locale0 = Locale.US;
      NumberFormat.getIntegerInstance(locale0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)int1).when(matrixAccumulator0).accumulate();
      NumberFormat.getIntegerInstance();
      matrix2.fold(matrixAccumulator0);
      matrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      Matrix.constant(int0, int2, int1);
      matrix3.shuffle();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix4.withInverter(linearAlgebra_InverterFactory0);
      int[] intArray0 = new int[3];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      int int3 = 704;
      int int4 = Integer.MAX_VALUE;
      // Undeclared exception!
      matrix0.slice(intArray0[2], intArray0[1], int3, int4);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 24;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(int0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      sparseMatrix0.toCSV();
      Matrix matrix0 = sparseMatrix0.blankOfRows(int0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      // Undeclared exception!
      matrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[5];
      double double0 = 495.9128577187974;
      doubleArray0[0] = double0;
      double double1 = 998.523351897;
      doubleArray0[1] = double1;
      double double2 = 272.7854;
      doubleArray0[2] = double2;
      double double3 = (-593.854);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.toString();
      matrix0.removeFirstRow();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transform(matrixFunction0);
      matrix1.euclideanNorm();
      int int0 = 1;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.transformColumn(int0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.toBinary();
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      int int2 = (-4);
      int int3 = 1439;
      int int4 = 2965;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, int2, int0, int0, int3, int2, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -4x2965
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      double double0 = matrix0.manhattanNorm();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 0;
      int int2 = 5505;
      matrix0.rank();
      matrix0.subtract((double) int0);
      int int3 = 1109;
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int4 = 2;
      int int5 = 315;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(int4, int4, int5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 4.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.columnMajorIterator();
      double double0 = matrix0.manhattanNorm();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 0;
      int int2 = 5505;
      double double1 = 0.0;
      matrix0.rank();
      Matrix matrix1 = matrix0.subtract(double1);
      int int3 = 1109;
      matrix1.euclideanNorm();
      int int4 = (-927);
      // Undeclared exception!
      try { 
        matrix0.setColumn(int4, (Vector) denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int2 = 1;
      int int3 = 0;
      int int4 = 2965;
      int int5 = (-3889);
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.columnMajorIterator();
      double double0 = matrix0.manhattanNorm();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 0;
      int int2 = 5505;
      double double1 = 0.0;
      matrix0.rank();
      matrix0.subtract(double1);
      int int3 = 1109;
      rowMajorSparseMatrix0.kroneckerProduct(matrix0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.toBinary();
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      int int2 = 1;
      int int3 = 0;
      int int4 = 2965;
      int int5 = 1;
      int int6 = (-418);
      // Undeclared exception!
      try { 
        matrix0.blankOfShape(int5, int6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1x-418
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int0);
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int1 = 1;
      int int2 = 0;
      int int3 = (-3889);
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.maxInRow(int0);
      columnMajorSparseMatrix0.blankOfColumns(int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.columnMajorIterator();
      matrix0.manhattanNorm();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = null;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom1);
      int int1 = 0;
      int int2 = 5505;
      double double0 = 0.0;
      Integer integer0 = new Integer(int0);
      Matrix matrix1 = matrix0.subtract(double0);
      int int3 = 1109;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix1, int2, (int) integer0, int3, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 5505, 1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      int int1 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1);
      NumberFormat numberFormat0 = null;
      VectorFunction vectorFunction0 = null;
      rowMajorSparseMatrix0.updateColumn(int1, vectorFunction0);
      SparseMatrix.identity(int0);
      rowMajorSparseMatrix0.toMatrixMarket(numberFormat0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int2 = 1;
      cRSMatrix0.ensureDimensionsAreCorrect(int0, int2);
      BasicVector basicVector0 = (BasicVector)DenseVector.zero(int2);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setColumn(int0, (Vector) basicVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      String string0 = "i )";
      int int0 = 258;
      Matrix matrix1 = Matrix.identity(int0);
      String string1 = "Pk//b";
      matrix0.mkString(string1, string1);
      // Undeclared exception!
      matrix1.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      String string0 = "i )";
      int int0 = (-2938);
      matrix0.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.columnMajorIterator();
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 25;
      int int2 = (-1994166310);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, int0, int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 25x-1994166310
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[6];
      double double0 = 1.0;
      doubleArray1[0] = double0;
      double double1 = 1.0;
      doubleArray1[1] = double1;
      double double2 = 46.97730294920478;
      doubleArray1[2] = double2;
      double double3 = (-2676.9);
      doubleArray1[3] = double3;
      double double4 = (-893.2863441);
      doubleArray1[4] = double4;
      double double5 = (-486.65647272);
      doubleArray1[5] = double5;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 68;
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.identity(int0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '11' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.columnMajorIterator();
      double double0 = matrix0.manhattanNorm();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 0;
      matrix0.insert((Matrix) rowMajorSparseMatrix0, int0, int0, int1, int1);
      double double1 = 0.0;
      Matrix matrix1 = matrix0.subtract(double1);
      int int2 = 1109;
      // Undeclared exception!
      try { 
        matrix1.insert((Matrix) rowMajorSparseMatrix0, int2, int0, int1, int1, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1109, 1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[5];
      double double0 = 495.9128577187974;
      doubleArray0[0] = double0;
      double double1 = 998.523351897;
      doubleArray0[1] = double1;
      double double2 = 272.7854;
      doubleArray0[2] = double2;
      double double3 = (-593.854);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.toString();
      matrix0.removeFirstRow();
      int int0 = Integer.MAX_VALUE;
      int int1 = 0;
      // Undeclared exception!
      Matrix.zero(int0, int1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.toBinary();
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      int int2 = 0;
      Matrix matrix1 = columnMajorSparseMatrix0.insert(matrix0, int0, int0, int0, int2, int0, int1);
      int int3 = (-3889);
      matrix0.iteratorOfColumn(int3);
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        matrix1.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.columnMajorIterator();
      double double0 = matrix0.manhattanNorm();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 0;
      int int2 = 5505;
      double double1 = 0.0;
      matrix0.rank();
      matrix0.subtract(double1);
      int int3 = 1109;
      rowMajorSparseMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(int0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      mockRandom0.nextBoolean();
      Locale locale0 = Locale.US;
      locale0.stripExtensions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      denseMatrix0.toCSV(numberFormat0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int0);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      int int1 = 1;
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 1 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 5;
      double double0 = 297.1836145;
      Matrix matrix0 = Matrix.diagonal(int0, double0);
      matrix0.hashCode();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      int int1 = (-3273);
      String string0 = "T";
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 0;
      int int1 = 5505;
      double double0 = 0.0;
      int int2 = 1109;
      int int3 = 1;
      MockRandom mockRandom1 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int3, mockRandom1);
      int int4 = 3616;
      // Undeclared exception!
      try { 
        denseMatrix0.maxInColumn(int4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.columnMajorIterator();
      double double0 = matrix0.manhattanNorm();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 2196;
      int int2 = 5505;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, int0, int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2196 rows and 5505 cols at 1, 1 in a 1x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      double double0 = 0.0;
      int int1 = 1;
      DenseVector denseVector0 = DenseVector.zero(int1);
      Matrix matrix0 = denseVector0.toRowMatrix();
      String string0 = "EIGEN";
      String string1 = "vV45P!V@*tp";
      matrix0.mkString(string0, string1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      int int2 = 0;
      int int3 = 2965;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, int1, int0, int0, int2, int1, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 2965 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      String string0 = "onG)Foe0^okvTi$O";
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      int int1 = (-1257);
      // Undeclared exception!
      try { 
        Matrix.zero(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.is(advancedMatrixPredicate0);
      int int1 = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      double double0 = (-2024.2943291491322);
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) int0;
      double double1 = 0.6;
      doubleArray0[5] = double1;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int1;
      doubleArray0[8] = (double) int1;
      Matrix matrix0 = Matrix.from1DArray(int0, int1, doubleArray0);
      String string0 = "org.la4j.Matrix";
      Locale locale0 = Locale.forLanguageTag(string0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      matrix0.mkString(numberFormat0);
      int int2 = 5258;
      Matrix.unit(int1, int2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 3232;
      double double0 = 0.4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, double0);
      // Undeclared exception!
      columnMajorSparseMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 124;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(int0, int0);
      boolean boolean0 = false;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Collection<Double> collection0 = null;
      denseMatrix0.blank();
      // Undeclared exception!
      denseMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      int int1 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1);
      NumberFormat numberFormat0 = null;
      VectorFunction vectorFunction0 = null;
      rowMajorSparseMatrix0.updateColumn(int1, vectorFunction0);
      SparseMatrix.identity(int0);
      rowMajorSparseMatrix0.toMatrixMarket(numberFormat0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int2 = 1;
      cRSMatrix0.ensureDimensionsAreCorrect(int0, int2);
      BasicVector basicVector0 = (BasicVector)DenseVector.zero(int1);
      rowMajorSparseMatrix0.setColumn(int0, (Vector) basicVector0);
      boolean boolean0 = false;
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.is(advancedMatrixPredicate0);
      int int3 = (-1463);
      rowMajorSparseMatrix0.apply((MatrixMatrixOperation<Matrix>) ooPlaceMatricesMultiplication0, (Matrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeColumn(int3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 1110;
      int int1 = 0;
      Matrix matrix0 = Matrix.zero(int0, int1);
      Matrix matrix1 = matrix0.transpose();
      Matrix matrix2 = matrix1.blank();
      Matrix matrix3 = matrix2.blankOfRows(int1);
      Matrix matrix4 = matrix3.multiply(matrix2);
      int int2 = 1;
      String string0 = "";
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols0);
      Locale locale0 = Locale.US;
      NumberFormat.getIntegerInstance(locale0);
      double double0 = 3542.66845688;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(matrixAccumulator0).accumulate();
      matrix2.fold(matrixAccumulator0);
      matrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      Matrix.constant(int0, int2, int1);
      matrix3.shuffle();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix4.withInverter(linearAlgebra_InverterFactory0);
      int[] intArray0 = new int[3];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      int int3 = 0;
      int int4 = 3764;
      matrix3.copyOfShape(int3, int4);
      matrix3.toColumnVector();
      matrix2.copy();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      double double0 = 0.0;
      Matrix matrix0 = denseMatrix0.multiply(double0);
      Vector vector0 = null;
      // Undeclared exception!
      try { 
        matrix0.setRow(int0, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[5];
      double double0 = 495.9128577187974;
      doubleArray0[0] = double0;
      double double1 = 998.523351897;
      doubleArray0[1] = double1;
      double double2 = 272.7854;
      doubleArray0[2] = double2;
      double double3 = (-593.854);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.toString();
      Matrix matrix1 = matrix0.removeFirstRow();
      matrix1.min();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      String string0 = "i )";
      matrix0.toCSV();
      int int0 = 1411;
      matrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 19;
      int int1 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1);
      NumberFormat numberFormat0 = null;
      VectorFunction vectorFunction0 = null;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateColumn(int1, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 2147483622;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      // Undeclared exception!
      Matrix.randomSymmetric(int0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      double double0 = 507.8028417657;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[2];
      double double1 = 4972.3;
      doubleArray1[0] = double1;
      doubleArray1[1] = double0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = double1;
      doubleArray2[1] = double0;
      doubleArray2[2] = double0;
      doubleArray2[3] = double0;
      doubleArray2[4] = double1;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      columnMajorSparseMatrix0.rows();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 78;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      DenseVector denseVector0 = DenseVector.random(int0, mockRandom0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      String string0 = ">s4";
      Locale locale0 = Locale.ENGLISH;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      char char0 = 't';
      decimalFormatSymbols0.setMinusSign(char0);
      DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols0);
      matrix0.mkString((NumberFormat) decimalFormat0);
      int int1 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transformColumn(int1, vectorFunction0);
      double double0 = (-3088.21347996);
      matrix0.equals(matrix1, double0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.toBinary();
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      int int2 = 1;
      int int3 = 0;
      int int4 = 2965;
      int int5 = (-3158);
      int int6 = 1;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.getColumn(int6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[5];
      double double0 = 495.9128577187974;
      doubleArray0[0] = double0;
      double double1 = 998.523351897;
      doubleArray0[1] = double1;
      double double2 = 272.7854;
      doubleArray0[2] = double2;
      double double3 = (-593.854);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.toString();
      int int0 = (-490);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformRow(int0, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 2;
      double double0 = 2507.449208;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(int0, double0);
      double double1 = 0.0;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double1).when(matrixAccumulator0).accumulate();
      denseMatrix0.fold(matrixAccumulator0);
      denseMatrix0.manhattanNorm();
      // Undeclared exception!
      try { 
        denseMatrix0.get(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      int int1 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1);
      NumberFormat numberFormat0 = null;
      VectorFunction vectorFunction0 = null;
      rowMajorSparseMatrix0.updateColumn(int1, vectorFunction0);
      SparseMatrix.identity(int0);
      rowMajorSparseMatrix0.toMatrixMarket(numberFormat0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int2 = 1;
      cRSMatrix0.ensureDimensionsAreCorrect(int0, int2);
      BasicVector basicVector0 = (BasicVector)DenseVector.zero(int1);
      rowMajorSparseMatrix0.setColumn(int0, (Vector) basicVector0);
      boolean boolean0 = true;
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.is(advancedMatrixPredicate0);
      int int3 = (-1463);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(int0, int3, int3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      int int1 = 4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.toBinary();
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      int int2 = 1;
      int int3 = 0;
      int int4 = 2965;
      int int5 = (-3158);
      matrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 1110;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        matrix0.setColumn(int0, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      int int1 = 0;
      double double0 = (-2340.548);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int0, int1, double0);
      int int2 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int0, int2);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      double double1 = 4050.415;
      matrix0.setAll(double1);
      int int3 = 1;
      Matrix.zero(int3, int0);
      columnMajorSparseMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.toBinary();
      boolean boolean0 = false;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      int int2 = 1;
      int int3 = 0;
      int int4 = 2965;
      matrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, int2, int0, int0, int3, int2, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[6];
      double double0 = (-2562.0);
      doubleArray1[0] = double0;
      double double1 = (-1028.92280699316);
      doubleArray1[1] = double1;
      double double2 = 0.0;
      doubleArray1[2] = double2;
      double double3 = (-384.894056218);
      doubleArray1[3] = double3;
      double double4 = 2866.6886524778;
      doubleArray1[4] = double4;
      double double5 = 0.7;
      doubleArray1[5] = double5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = double4;
      doubleArray2[1] = double4;
      doubleArray2[2] = double1;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.columns();
      // Undeclared exception!
      try { 
        denseMatrix0.transpose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 732;
      int int1 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1, int1);
      int int2 = 1;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(int1);
      mockRandom0.doubles();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(int0, int2, double0, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.randomSymmetric(int1, mockRandom0);
      int int3 = (-2307);
      matrix0.iteratorOfColumn(int3);
      int int4 = 3447;
      int int5 = (-2551);
      rowMajorSparseMatrix0.sum();
      // Undeclared exception!
      try { 
        basic2DMatrix0.ensureDimensionsAreCorrect(int4, int5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 3447x-2551
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 1110;
      int int1 = 0;
      Matrix matrix0 = Matrix.zero(int0, int1);
      Matrix matrix1 = matrix0.transpose();
      Matrix matrix2 = matrix1.blank();
      Matrix matrix3 = matrix1.multiply(matrix2);
      int int2 = 1;
      String string0 = "";
      Locale locale0 = Locale.US;
      NumberFormat.getIntegerInstance(locale0);
      double double0 = 0.0;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(matrixAccumulator0).accumulate();
      matrix2.fold(matrixAccumulator0);
      Matrix.constant(int0, int2, int1);
      matrix0.shuffle();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix3.withInverter(linearAlgebra_InverterFactory0);
      int[] intArray0 = new int[3];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 1110;
      int int1 = 3;
      Matrix matrix0 = Matrix.zero(int0, int1);
      Matrix matrix1 = matrix0.transpose();
      Matrix matrix2 = matrix1.blank();
      matrix0.multiply(matrix2);
      String string0 = "";
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols0);
      Locale locale0 = Locale.US;
      NumberFormat.getIntegerInstance(locale0);
      double double0 = 1.0;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(matrixAccumulator0).accumulate();
      matrix2.fold(matrixAccumulator0);
      matrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      Matrix.constant(int0, int0, int1);
      // Undeclared exception!
      matrix2.shuffle();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 2;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(int0, int0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
      double[] doubleArray0 = null;
      Matrix.from1DArray(int0, int0, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.eachInColumn(int0, vectorProcedure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = " ";
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      double double0 = 0.0;
      Matrix matrix0 = denseMatrix0.multiply(double0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.eachInColumn(int0, vectorProcedure0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 1;
      int int1 = 3018;
      double double0 = 0.8;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int0, int1, double0);
      int int2 = (-3657);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.eachInColumn(int2, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.toBinary();
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      int int2 = 1;
      int int3 = (-1850730346);
      int int4 = 2965;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      matrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, int2, int0, int0, int3, int2, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 0, -1850730346
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 78;
      String string0 = ">s4";
      int int1 = 2725;
      DenseVector denseVector0 = DenseVector.zero(int1);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      int[] intArray0 = new int[2];
      int int2 = 1584;
      // Undeclared exception!
      try { 
        matrix0.removeColumn(int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[5];
      double double0 = 495.9128577187974;
      doubleArray0[0] = double0;
      double double1 = 998.523351897;
      doubleArray0[1] = double1;
      double double2 = 272.7854;
      doubleArray0[2] = double2;
      double double3 = (-593.854);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      int int0 = 0;
      double double5 = 0.0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, double5);
      double double6 = (-589.9610257);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(double6);
      int int1 = 0;
      int int2 = (-670);
      // Undeclared exception!
      try { 
        matrix0.swapColumns(int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      int int1 = 0;
      double double0 = (-2340.548);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int0, int1, double0);
      int int2 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int0, int2);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      matrix0.setAll(int2);
      ooPlaceMatricesMultiplication0.partiallyApply(columnMajorSparseMatrix0);
      denseMatrix0.trace();
      double double1 = 667.8348693163214;
      matrix0.setAll(double1);
      long long0 = 504L;
      MockRandom mockRandom0 = new MockRandom(long0);
      DenseVector denseVector0 = DenseVector.random(int1, mockRandom0);
      matrix0.multiply((Vector) denseVector0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "0.000";
      SparseVector sparseVector0 = SparseVector.fromCSV(string0);
      double double0 = sparseVector0.sum();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix.fromCSV(string0);
      int int0 = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(int0, int0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      int int1 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1);
      NumberFormat numberFormat0 = null;
      VectorFunction vectorFunction0 = null;
      rowMajorSparseMatrix0.updateColumn(int1, vectorFunction0);
      SparseMatrix.identity(int0);
      rowMajorSparseMatrix0.toMatrixMarket(numberFormat0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int2 = 1;
      cRSMatrix0.ensureDimensionsAreCorrect(int0, int2);
      BasicVector basicVector0 = (BasicVector)DenseVector.zero(int1);
      rowMajorSparseMatrix0.setColumn(int0, (Vector) basicVector0);
      boolean boolean0 = true;
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.is(advancedMatrixPredicate0);
      int int3 = (-1463);
      int int4 = 988;
      cRSMatrix0.setRow(int4, (Vector) basicVector0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeColumn(int3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      double double0 = matrix0.manhattanNorm();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 0;
      int int2 = 5505;
      double double1 = 0.0;
      Matrix matrix1 = matrix0.subtract(double1);
      int int3 = 1109;
      // Undeclared exception!
      try { 
        matrix1.insert((Matrix) rowMajorSparseMatrix0, int3, int0, int1, int2, int1, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 5505
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int0);
      ooPlaceMatricesMultiplication0.partiallyApply(rowMajorSparseMatrix0);
      int int1 = 0;
      int int2 = 0;
      double double0 = (-2340.548);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int1, int2, double0);
      int int3 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int1, int1, int3);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      matrix0.setAll(int3);
      denseMatrix0.trace();
      double double1 = 667.8348693163214;
      matrix0.setAll(double1);
      columnMajorSparseMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-636);
      int int1 = 0;
      double[] doubleArray0 = null;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int1);
      rowMajorSparseMatrix0.setAll(int1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = rowMajorSparseMatrix0.transform(matrixFunction0);
      matrix0.equals((Matrix) rowMajorSparseMatrix0, (double) int0);
      matrix0.sum();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      String string0 = "_Z==8;Q";
      matrix0.iterator();
      rowMajorSparseMatrix1.toColumnVector();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      rowMajorSparseMatrix1.add((Matrix) rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.toBinary();
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      int int2 = 1;
      int int3 = 0;
      int int4 = 2965;
      int int5 = 0;
      matrix0.swapColumns(int5, int3);
      String string0 = "VFCQ~8(:qm[onkV";
      // Undeclared exception!
      try { 
        Matrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[5];
      double double0 = 495.9128577187974;
      doubleArray0[0] = double0;
      double double1 = 998.523351897;
      doubleArray0[1] = double1;
      double double2 = 272.7854;
      doubleArray0[2] = double2;
      double double3 = (-593.854);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      int int0 = 3;
      Random random0 = null;
      // Undeclared exception!
      try { 
        Matrix.random(int0, int0, random0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      int int1 = 0;
      double double0 = (-2340.548);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int0, int1, double0);
      int int2 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int0, int2);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      double double1 = 4050.415;
      matrix0.setAll(double1);
      denseMatrix0.norm();
      String string0 = "K";
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 243;
      int int1 = 5396;
      SparseVector sparseVector0 = SparseVector.zero(int0, int1);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int2 = 1793;
      DenseVector.fromMap(hashMap0, int2);
      int int3 = 1202;
      int int4 = (-389);
      sparseVector0.swapElements(int3, int4);
      int int5 = 1537;
      int int6 = (-3030);
      int int7 = 3;
      Integer integer0 = new Integer(int2);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int8 = 2;
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int2;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(int4, int8, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -389x2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = ", ";
      SparseVector sparseVector0 = SparseVector.fromCSV(string0);
      sparseVector0.sum();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix.fromCSV(string0);
      int int0 = (-1463);
      long long0 = (-1869L);
      MockRandom mockRandom0 = new MockRandom(long0);
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric(int0, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 2306;
      double double0 = (-3630.7);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int1 = 76;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, int1);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.blankOfShape(int1, int1);
      String string0 = "Cannot have negative source position: ";
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = null;
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      int int1 = 0;
      int int2 = (-263);
      int int3 = 0;
      int int4 = 0;
      Matrix.zero(int1, int4);
      String string1 = null;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        Matrix.from2DArray(doubleArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 78;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      DenseVector denseVector0 = DenseVector.random(int0, mockRandom0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      String string0 = ">s4";
      Locale locale0 = Locale.ENGLISH;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols0);
      matrix0.mkString((NumberFormat) decimalFormat0);
      int int1 = 3743;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateRow(int1, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 1;
      int int1 = 551;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(int0, int1);
      denseMatrix0.rotate();
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(int0, int1, mockRandom0);
      int int2 = (-2575);
      // Undeclared exception!
      try { 
        denseMatrix0.blankOfRows(int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 2;
      double double0 = 2507.449208;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(int0, double0);
      double double1 = (-2303.8916448510904);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double1).when(matrixAccumulator0).accumulate();
      denseMatrix0.fold(matrixAccumulator0);
      denseMatrix0.iteratorOfRow(int0);
      int int1 = 1;
      double double2 = 0.0;
      Matrix.diagonal(int1, double2);
      // Undeclared exception!
      try { 
        denseMatrix0.get(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = 2507.449208;
      Matrix matrix0 = null;
      int int0 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      int int2 = 0;
      int int3 = 3;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int4 = 6577;
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int5 = 4;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      NumberFormat.getInstance();
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      int int6 = 0;
      Matrix matrix1 = Matrix.diagonal(int0, int6);
      Object object0 = new Object();
      matrix1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(int0);
      Matrix matrix0 = Matrix.randomSymmetric(int0, mockRandom0);
      MatrixVectorOperation<Integer> matrixVectorOperation0 = (MatrixVectorOperation<Integer>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((VectorOperation) null).when(matrixVectorOperation0).partiallyApply(any(org.la4j.matrix.DenseMatrix.class));
      int int1 = 1;
      Matrix.zero(int0, int1);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      int int2 = 1;
      SparseVector sparseVector0 = SparseVector.random(int2, (double) int2, (Random) mockRandom0);
      Vector vector0 = ooPlaceVectorsAddition0.apply(sparseVector0, sparseVector0);
      vector0.divide(int2);
      // Undeclared exception!
      try { 
        matrix0.apply(matrixVectorOperation0, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.toBinary();
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      int int2 = 1;
      int int3 = 0;
      int int4 = 2965;
      int int5 = (-3158);
      // Undeclared exception!
      try { 
        matrix0.removeRow(int5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 1;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(int0, int0);
      Matrix matrix0 = null;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      sparseMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "        ";
      int int0 = (-1875);
      int int1 = (-2130);
      int int2 = 0;
      int int3 = 0;
      int int4 = 0;
      int int5 = 4034;
      Matrix.unit(int2, int5);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int6 = 1;
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 2;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(int0, int0);
      int int1 = 0;
      int int2 = 2906;
      int int3 = (-1399);
      int int4 = 0;
      sparseMatrix0.copyOfShape(int4, int0);
      int int5 = (-1177);
      // Undeclared exception!
      try { 
        sparseMatrix0.slice(int1, int2, int3, int5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1399][2906..-1177].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 584;
      double double0 = 0.0;
      long long0 = 1107L;
      MockRandom mockRandom0 = new MockRandom(long0);
      long long1 = 1633L;
      mockRandom0.longs(long1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      columnMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      String string0 = "     ";
      String string1 = "org.la4j.Matrices";
      // Undeclared exception!
      columnMajorSparseMatrix0.mkString(numberFormat0, string0, string1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(int0, int1);
      sparseMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      matrix0.toDenseMatrix();
      int int0 = 0;
      Matrix matrix1 = matrix0.copyOfRows(int0);
      matrix1.toMatrixMarket();
      matrix0.trace();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 2224;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(int0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 1;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(int0, int1, int1);
      // Undeclared exception!
      try { 
        Matrix.block(denseMatrix0, sparseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 1;
      double double0 = 346.7448;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int0, double0);
      int int1 = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        Matrix.block(rowMajorSparseMatrix0, matrix0, matrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      String string0 = "i )";
      String string1 = "Pk//b";
      matrix0.mkString(string1, string1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      Matrix.block(columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      double double0 = 433.187;
      Matrix matrix0 = Matrix.constant(int0, int1, double0);
      MatrixFunction matrixFunction0 = null;
      matrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-2);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)67;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-21);
      byteArray0[3] = byte3;
      mockRandom0.nextBytes(byteArray0);
      DenseVector denseVector0 = DenseVector.random(int0, mockRandom0);
      ooPlaceOuterProduct0.partiallyApply(denseVector0);
      int int1 = 1;
      DenseVector denseVector1 = DenseVector.zero(int1);
      int int2 = 0;
      SparseVector sparseVector0 = SparseVector.zero(int2);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector1, sparseVector0);
      matrix0.toSparseMatrix();
      matrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[5];
      double double0 = 495.9128577187974;
      doubleArray0[0] = double0;
      double double1 = 998.523351897;
      doubleArray0[1] = double1;
      double double2 = 272.7854;
      doubleArray0[2] = double2;
      double double3 = (-593.854);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.toString();
      matrix0.removeFirstRow();
      int int0 = (-1);
      matrix0.iteratorOfRow(int0);
      matrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 3878;
      RowMajorSparseMatrix.zero(int0, int0, int0);
      Matrix matrix0 = Matrix.unit(int0, int0);
      // Undeclared exception!
      matrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 211;
      DenseVector denseVector0 = DenseVector.constant(int0, int0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      matrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "";
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV(string0);
      denseMatrix0.toBinary();
      denseMatrix0.columns();
      denseMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 720;
      double double0 = 0.0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int0, double0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      Locale locale0 = Locale.PRC;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      // Undeclared exception!
      matrix0.toCSV(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      double double0 = 2800.075448218567;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(int0, int0, doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.add(doubleArray0[0]);
      matrix0.toColumnVector();
      MatrixOperation<Double> matrixOperation0 = null;
      // Undeclared exception!
      try { 
        matrix0.apply(matrixOperation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      double double0 = 1.0;
      doubleArray1[0] = double0;
      double double1 = (-284.0522325911);
      doubleArray1[1] = double1;
      double double2 = (-4343.48271756);
      doubleArray1[2] = double2;
      double double3 = 0.0;
      doubleArray1[3] = double3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      double double4 = 314.789817301885;
      doubleArray2[0] = double4;
      doubleArray2[1] = double2;
      doubleArray2[2] = double3;
      doubleArray2[3] = double1;
      doubleArray2[4] = double2;
      doubleArray2[5] = double0;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      double double5 = 1.0;
      columnMajorSparseMatrix0.multiply(double5);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(int0);
      sparseMatrix0.blankOfShape(int0, int0);
      int int1 = 1069;
      // Undeclared exception!
      try { 
        sparseMatrix0.removeRow(int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 346;
      int int1 = 2;
      double double0 = (-1088.443916849);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int0, int1, double0);
      int int2 = 0;
      DenseMatrix.zero(int0, int2);
      int int3 = 387;
      double double1 = (-3136.684186);
      // Undeclared exception!
      try { 
        denseMatrix0.set(int3, int1, double1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      String string0 = "";
      DenseVector denseVector0 = DenseVector.fromCSV(string0);
      double[] doubleArray0 = new double[6];
      double double0 = (-950.1722222);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 1270.143;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      DenseMatrix denseMatrix0 = DenseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      denseMatrix0.fold(matrixAccumulator0);
      Matrix.fromCSV(string0);
      // Undeclared exception!
      try { 
        denseMatrix0.subtract(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 0x6.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 1;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(int0);
      sparseMatrix0.transpose();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      String string0 = "          ";
      sparseMatrix0.toCSV();
      Matrix matrix0 = Matrix.fromCSV(string0);
      matrix0.iteratorOfRow(int0);
      Matrix matrix1 = sparseMatrix0.blankOfRows(int0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      // Undeclared exception!
      try { 
        matrix1.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      double double0 = 0.0;
      Matrix matrix0 = denseMatrix0.multiply(double0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformColumn(int0, vectorFunction0);
      int int1 = 2426;
      double double1 = (-1397.3456364279);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int1, double1);
      // Undeclared exception!
      try { 
        matrix0.subtract((Matrix) columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 2426x2426.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 183;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int0);
      double double0 = 0.0;
      Matrix matrix0 = rowMajorSparseMatrix0.divide(double0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      matrix0.rowMajorIterator();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      int int1 = 1319;
      numberFormat0.setMaximumFractionDigits(int1);
      columnMajorSparseMatrix0.swapRows(int1, int1);
      matrix0.toMatrixMarket(numberFormat0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 2;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(int0, int0);
      int int1 = 0;
      int int2 = 2906;
      int int3 = 0;
      Matrix matrix0 = sparseMatrix0.copyOfShape(int3, int0);
      int int4 = (-1177);
      sparseMatrix0.copy();
      matrix0.swapColumns(int0, int3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 1;
      int int1 = 2627;
      long long0 = 2258L;
      MockRandom mockRandom0 = new MockRandom(long0);
      DenseMatrix denseMatrix0 = DenseMatrix.random(int0, int1, mockRandom0);
      double double0 = (-1756.920263096691);
      // Undeclared exception!
      denseMatrix0.multiply(double0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 192;
      int int1 = 0;
      Matrix matrix0 = Matrix.unit(int0, int1);
      matrix0.toCSV();
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 0;
      int int1 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int0, int1, int0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      int int2 = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      double double0 = 0.0;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int2;
      doubleArray0[4] = (double) int0;
      Matrix.from1DArray(int0, int2, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(int0, int0);
      // Undeclared exception!
      try { 
        sparseMatrix0.removeColumn(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = null;
      int int0 = 3128;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, int0);
      NumberFormat numberFormat0 = null;
      String string0 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.mkString(numberFormat0, string0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 1193;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int0);
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int1, int1);
      ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      int int2 = 0;
      int int3 = (-877);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int2;
      doubleArray0[1] = (double) int3;
      doubleArray0[2] = (double) int3;
      doubleArray0[3] = (double) int2;
      doubleArray0[4] = (double) int3;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(int2, int3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-877
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 2;
      double double0 = 2507.449208;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(int0, double0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      denseMatrix0.fold(matrixAccumulator0);
      // Undeclared exception!
      try { 
        denseMatrix0.get(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(int0, int0);
      // Undeclared exception!
      try { 
        denseMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 0;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.rank();
      matrix0.toColumnMajorSparseMatrix();
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        NumberFormat.getCurrencyInstance(locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 1110;
      int int1 = 0;
      Matrix matrix0 = Matrix.zero(int0, int1);
      Matrix matrix1 = matrix0.transpose();
      Matrix matrix2 = matrix1.blank();
      Matrix matrix3 = matrix2.blankOfRows(int1);
      Matrix matrix4 = matrix3.multiply(matrix2);
      int int2 = 1;
      String string0 = "";
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols0);
      Locale locale0 = Locale.US;
      NumberFormat.getIntegerInstance(locale0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      matrix2.fold(matrixAccumulator0);
      matrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      Matrix.constant(int0, int2, int1);
      matrix3.shuffle();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix4.withInverter(linearAlgebra_InverterFactory0);
      int[] intArray0 = new int[3];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      // Undeclared exception!
      try { 
        matrix1.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 0;
      int int1 = 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(int1, int0, doubleArray0);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseVector denseVector0 = DenseVector.unit(int0);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.multiply(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 0 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      SparseVector sparseVector0 = SparseVector.zero(int0, int1);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      int int2 = 1203;
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(int2, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [1203..0][1203..1].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      double double0 = 2824.759201518;
      doubleArray1[0] = double0;
      double double1 = 1.0;
      doubleArray1[1] = double1;
      double double2 = 0.0;
      doubleArray1[2] = double2;
      double double3 = 4457.148;
      doubleArray1[3] = double3;
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      int int0 = 3469;
      sparseMatrix0.blankOfColumns(int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 216;
      double double0 = 788.4115753893269;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(int0, double0);
      int int1 = (-3651);
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInRow(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3651
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 0;
      double double0 = 1408.78763564502;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, double0);
      int int1 = 0;
      double double1 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      long long0 = 1517L;
      mockRandom0.setSeed(long0);
      mockRandom0.nextGaussian();
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.randomSymmetric(int1, double1, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix1.toRowMajorSparseMatrix();
      columnMajorSparseMatrix0.foldRow(int0, vectorAccumulator0);
      double double2 = 0.0;
      Matrix matrix0 = columnMajorSparseMatrix0.subtract(double2);
      int int2 = 0;
      double double3 = 0.0;
      int int3 = 1899;
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator1).accumulate();
      matrix0.foldColumn(int3, vectorAccumulator1);
      matrix0.setRow(int2, double3);
      // Undeclared exception!
      try { 
        matrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 0;
      int int2 = 5505;
      double double0 = 0.0;
      matrix0.subtract(double0);
      int int3 = 1109;
      matrix0.toString();
      // Undeclared exception!
      try { 
        matrix0.setRow(int2, (double) int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 2995;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.copyOfColumns(int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = " ";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV(string0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.product();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 2761;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(int0, int0);
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray1[3] = (double) int0;
      doubleArray1[4] = (double) int0;
      doubleArray1[5] = (double) int0;
      doubleArray1[6] = (double) int0;
      doubleArray1[7] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) int0;
      double double0 = 0.0;
      doubleArray2[1] = double0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int0;
      doubleArray2[4] = (double) int0;
      doubleArray2[5] = (double) int0;
      doubleArray2[6] = (double) int0;
      doubleArray2[7] = (double) int0;
      doubleArray2[8] = (double) int0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) int0;
      doubleArray3[1] = (double) int0;
      doubleArray3[2] = (double) int0;
      doubleArray3[3] = double0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) int0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) int0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      Matrix.from2DArray(doubleArray0);
      sparseMatrix0.toDenseMatrix();
      sparseMatrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 0;
      DenseVector denseVector0 = DenseVector.unit(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        matrix0.insertRow(int0, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 1110;
      int int1 = 33;
      Matrix matrix0 = Matrix.zero(int0, int1);
      Matrix matrix1 = matrix0.transpose();
      Matrix matrix2 = matrix1.blank();
      Matrix matrix3 = matrix2.blankOfRows(int1);
      // Undeclared exception!
      try { 
        matrix3.multiply(matrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 33 does not equal to 1110.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 0;
      int int1 = 5505;
      double double0 = 0.0;
      int int2 = 1109;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, int1);
      columnMajorSparseMatrix0.rotate();
      int int3 = (-1869);
      // Undeclared exception!
      try { 
        Matrix.random(int1, int3, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV(string0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.update(matrixFunction0);
      double double0 = (-2255.7385092);
      columnMajorSparseMatrix0.divide(double0);
      MatrixOperation<RowMajorSparseMatrix> matrixOperation0 = (MatrixOperation<RowMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      columnMajorSparseMatrix0.apply(matrixOperation0);
      Matrix matrix0 = columnMajorSparseMatrix0.copy();
      int int0 = 3384;
      int int1 = 1;
      Matrix.zero(int0, int1);
      int int2 = 2843;
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(int2, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(int0, int0);
      double double0 = 0.2;
      denseMatrix0.divide(double0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(string0);
      rowMajorSparseMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[8];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = (-1639.7455413);
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double double6 = (-1056.9488281217);
      doubleArray0[6] = double6;
      double double7 = 0.0;
      doubleArray0[7] = double7;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      String string0 = "";
      SparseVector sparseVector0 = SparseVector.fromCSV(string0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      int int0 = (-508);
      matrix0.maxInRow(int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1;
      int int1 = 1480;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int1;
      Matrix matrix0 = Matrix.from1DArray(int0, int1, doubleArray0);
      double[][] doubleArray1 = new double[1][5];
      double[] doubleArray2 = new double[2];
      double double0 = 1555.12549;
      doubleArray2[0] = double0;
      double double1 = 1393.5;
      doubleArray2[1] = double1;
      doubleArray1[0] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      columnMajorSparseMatrix0.toMatrixMarket();
      int int2 = (-1234);
      // Undeclared exception!
      try { 
        matrix0.maxInRow(int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1234' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(int0, int0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      int int1 = 0;
      matrix0.copyOfColumns(int1);
      int int2 = 1;
      double double0 = matrix0.minInRow(int2);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      denseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.randomSymmetric(int2, mockRandom0);
      int int3 = (-3767);
      int int4 = 0;
      ColumnMajorSparseMatrix.diagonal(int4, int2);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(int3, int0, double0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 114;
      double double0 = 0.8;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int0, int0, double0);
      // Undeclared exception!
      try { 
        denseMatrix0.minInRow(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(int0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      double double0 = sparseMatrix0.fold(matrixAccumulator0);
      sparseMatrix0.setAll(int0);
      DenseMatrix denseMatrix0 = sparseMatrix0.toDenseMatrix();
      denseMatrix0.multiply((Matrix) sparseMatrix0);
      denseMatrix0.trace();
      denseMatrix0.setAll(double0);
      int int1 = (-389);
      // Undeclared exception!
      try { 
        sparseMatrix0.power(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -389.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 3452;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.foldColumn(int0, vectorAccumulator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3452' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 1110;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int0);
      double double0 = (-3728.51042597836);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.diagonal(int0, double0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1111' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 1148;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int0);
      int int1 = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateAt(int0, int1, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1149
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 2571;
      Matrix matrix0 = Matrix.diagonal(int0, int0);
      matrix0.rowMajorIterator();
      int int1 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(int1);
      matrix0.equals((Object) sparseMatrix0);
      int int2 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.eachInRow(int2, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = (-2884);
      int int1 = 0;
      // Undeclared exception!
      try { 
        Matrix.constant(int0, int1, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 2;
      double double0 = 2507.449208;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(int0, double0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0).when(matrixAccumulator0).accumulate();
      double double1 = denseMatrix0.fold(matrixAccumulator0);
      Integer integer0 = new Integer(int0);
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        denseMatrix0.equals(matrix0, double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = (-667);
      // Undeclared exception!
      try { 
        Matrix.diagonal(int0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(int0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      double double0 = (-15.575237525156677);
      Matrix matrix0 = denseMatrix0.multiply(double0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double double1 = (-3306.95);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int0, double1);
      DenseVector denseVector0 = DenseVector.random(int0, mockRandom0);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
      denseMatrix0.equals((Object) vector0);
      matrix0.diagonalProduct();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(int0, int0);
      sparseMatrix0.manhattanNorm();
      sparseMatrix0.isColumnMajor();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = 6;
      sparseMatrix0.swapRows(int1, int0);
      sparseMatrix0.each(matrixProcedure0);
      sparseMatrix0.hashCode();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 154;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int0);
      int int1 = (-1647);
      int int2 = 0;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.swapRows(int1, int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1647' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[1];
      double double0 = 583.739498;
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = double0;
      doubleArray2[1] = double0;
      double double1 = 771.4171;
      doubleArray2[2] = double1;
      doubleArray2[3] = double0;
      doubleArray2[4] = double0;
      doubleArray2[5] = double0;
      doubleArray2[6] = double0;
      doubleArray2[7] = double0;
      doubleArray2[8] = double0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = double0;
      doubleArray3[1] = double1;
      double double2 = 0.5;
      doubleArray3[2] = double2;
      doubleArray3[3] = double0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = double1;
      doubleArray4[1] = double1;
      double double3 = 1224.484896632847;
      doubleArray4[2] = double3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = double3;
      doubleArray5[1] = double2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = double0;
      doubleArray6[1] = double2;
      doubleArray6[2] = double1;
      doubleArray6[3] = double2;
      doubleArray6[4] = double0;
      doubleArray6[5] = double2;
      doubleArray6[6] = double3;
      doubleArray6[7] = double0;
      doubleArray0[5] = doubleArray6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, denseMatrix0);
      MatrixFunction matrixFunction0 = null;
      // Undeclared exception!
      try { 
        matrix0.update(matrixFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      double double0 = (-1209.39577);
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      DenseMatrix.from1DArray(int0, int0, doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 5;
      double double0 = 0.7;
      MockRandom mockRandom0 = new MockRandom(int0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      DenseMatrix denseMatrix0 = columnMajorSparseMatrix0.toDenseMatrix();
      String string0 = columnMajorSparseMatrix0.toString();
      columnMajorSparseMatrix0.hadamardProduct(denseMatrix0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = columnMajorSparseMatrix0.toRowMajorSparseMatrix();
      rowMajorSparseMatrix0.toBinary();
      denseMatrix0.mkString(string0, string0);
      rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      denseMatrix0.diagonalProduct();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, int0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply((double) int0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.block(matrix0, columnMajorSparseMatrix0, matrix0, matrix0);
      columnMajorSparseMatrix1.toDenseMatrix();
      int int1 = (-1041);
      int int2 = (-1612);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix1.insert((Matrix) columnMajorSparseMatrix0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1041x-1612
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 0;
      Random random0 = null;
      Matrix matrix0 = Matrix.random(int0, int0, random0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int0);
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray1[3] = (double) int0;
      doubleArray1[4] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int0;
      doubleArray2[4] = (double) int0;
      doubleArray2[5] = (double) int0;
      doubleArray2[6] = (double) int0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (double) int0;
      doubleArray4[1] = (double) int0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (double) int0;
      doubleArray5[1] = (double) int0;
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 5 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 1;
      int int1 = 551;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(int0, int1);
      denseMatrix0.rotate();
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(int0, int1, mockRandom0);
      int int2 = (-2575);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 263;
      Matrix matrix0 = Matrix.zero(int0, int0);
      int int1 = (-4371);
      // Undeclared exception!
      try { 
        matrix0.blankOfRows(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -4371x263
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = (-2554);
      // Undeclared exception!
      try { 
        Matrix.zero(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2554x-2554
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(int0);
      sparseMatrix0.euclideanNorm();
      Matrix matrix0 = sparseMatrix0.transpose();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      sparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        matrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 943;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(int0);
      sparseMatrix0.diagonalProduct();
      // Undeclared exception!
      sparseMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
      matrix0.non(matrixPredicate0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      double double0 = 0.0;
      matrix0.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 124;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(int0, int0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Collection<Double> collection0 = null;
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      double double0 = 0.0;
      Matrix matrix0 = denseMatrix0.multiply(double0);
      Vector vector0 = null;
      // Undeclared exception!
      try { 
        matrix0.insertColumn(int0, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 0;
      long long0 = (-1007L);
      MockRandom mockRandom0 = new MockRandom(long0);
      Matrix.randomSymmetric(int0, mockRandom0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        mockRandom0.nextBytes(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 1952;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.randomSymmetric(int0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 767;
      Matrix matrix0 = Matrix.unit(int0, int0);
      int int1 = (-193);
      int int2 = 0;
      int int3 = 0;
      // Undeclared exception!
      try { 
        matrix0.slice(int1, int0, int2, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [-193..0][767..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = (-2255);
      int int1 = 78;
      // Undeclared exception!
      try { 
        Matrix.unit(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(int0);
      Locale locale0 = Locale.CHINA;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      sparseMatrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.columnMajorIterator();
      double double0 = matrix0.manhattanNorm();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 0;
      int int2 = 5505;
      double double1 = 0.0;
      matrix0.rank();
      matrix0.subtract(double1);
      int int3 = 1109;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)int1).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      rowMajorSparseMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      String string0 = "i )";
      int int0 = 258;
      StringBuilder stringBuilder0 = new StringBuilder();
      double double0 = 3021.8034593871894;
      Double double1 = new Double(double0);
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) double1);
      PrivateAccess.callMethod((Class<Matrix>) Matrix.class, matrix0, "indent", (Object) stringBuilder1, (Class<?>) StringBuilder.class, (Object) int0, (Class<?>) int.class);
      StringBuilder stringBuilder2 = stringBuilder1.append(int0);
      StringBuilder stringBuilder3 = stringBuilder2.insert(int0, int0);
      double double2 = 0.0;
      Double.min(double2, double0);
      int int1 = 1;
      // Undeclared exception!
      try { 
        stringBuilder3.delete(int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = 24;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(int0);
      sparseMatrix0.transpose();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      String string0 = "onG)Foe0^okvTi$O";
      sparseMatrix0.toCSV();
      // Undeclared exception!
      try { 
        Matrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = 1110;
      int int1 = 0;
      Matrix matrix0 = Matrix.zero(int0, int1);
      Matrix matrix1 = matrix0.transpose();
      Matrix matrix2 = matrix1.blank();
      Matrix matrix3 = matrix0.multiply(matrix2);
      String string0 = "";
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols0);
      Locale locale0 = Locale.US;
      NumberFormat.getIntegerInstance(locale0);
      double double0 = 1.0;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(matrixAccumulator0).accumulate();
      matrix2.fold(matrixAccumulator0);
      matrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      Matrix.constant(int0, int0, int1);
      matrix2.shuffle();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix3.withInverter(linearAlgebra_InverterFactory0);
      int[] intArray0 = new int[3];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      Matrix matrix4 = matrix0.blankOfColumns(intArray0[0]);
      boolean boolean0 = true;
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix1.non(advancedMatrixPredicate0);
      int int2 = 0;
      int int3 = 867;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int1, int3);
      Vector vector0 = columnMajorSparseMatrix0.getColumn(int1);
      matrix4.insertRow(int2, vector0);
      matrix3.removeFirstRow();
      double double1 = 0.0;
      matrix2.setColumn(intArray0[0], double1);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseVector denseVector0 = mock(DenseVector.class, new ViolatedAssumptionAnswer());
      int int4 = 43;
      matrix4.slice(int2, int2, intArray0[1], int4);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 1110;
      int int1 = 0;
      Matrix matrix0 = Matrix.zero(int0, int1);
      Matrix matrix1 = matrix0.transpose();
      Matrix matrix2 = matrix1.blank();
      Matrix matrix3 = matrix2.blankOfRows(int1);
      Matrix matrix4 = matrix3.multiply(matrix2);
      int int2 = 1;
      String string0 = "";
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      char char0 = 'E';
      decimalFormatSymbols0.setDecimalSeparator(char0);
      DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols0);
      Locale locale0 = Locale.US;
      NumberFormat.getIntegerInstance(locale0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)int1).when(matrixAccumulator0).accumulate();
      matrix2.fold(matrixAccumulator0);
      matrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      Matrix.constant(int0, int2, int1);
      matrix3.shuffle();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix4.withInverter(linearAlgebra_InverterFactory0);
      int[] intArray0 = new int[3];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      int int3 = 704;
      int int4 = (-1328);
      // Undeclared exception!
      try { 
        matrix0.slice(intArray0[2], intArray0[1], int3, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..704][0..-1328].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = 1;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.columnMajorIterator();
      double double0 = matrix0.manhattanNorm();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 0;
      int int2 = 5505;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, int0, int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 5505 cols at 1, 1 in a 1x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.toBinary();
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      int int2 = 1;
      int int3 = 0;
      int int4 = 2965;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, int2, int0, int0, int3, int2, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      int int1 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1);
      NumberFormat numberFormat0 = null;
      VectorFunction vectorFunction0 = null;
      rowMajorSparseMatrix0.updateColumn(int1, vectorFunction0);
      SparseMatrix.identity(int0);
      rowMajorSparseMatrix0.toMatrixMarket(numberFormat0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int2 = 1;
      cRSMatrix0.ensureDimensionsAreCorrect(int0, int2);
      BasicVector basicVector0 = (BasicVector)DenseVector.zero(int1);
      rowMajorSparseMatrix0.setColumn(int0, (Vector) basicVector0);
      boolean boolean0 = false;
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.is(advancedMatrixPredicate0);
      int int3 = (-1463);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeColumn(int3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = ", ";
      SparseVector.fromCSV(string0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(int0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      double double0 = (-15.575237525156677);
      Matrix matrix0 = denseMatrix0.multiply(double0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      RowMajorSparseMatrix.diagonal(int0, long0);
      int int1 = (-3258);
      matrix0.diagonalProduct();
      int int2 = 2170;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(int2, vectorFunction0);
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((MatrixOperation) null).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.DenseMatrix.class));
      // Undeclared exception!
      try { 
        denseMatrix0.apply(matrixMatrixOperation0, matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "org.la4j.iterator.CursorIterator$IteratorState";
      String string1 = "..";
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[5];
      double double0 = 495.9128577187974;
      doubleArray0[0] = double0;
      double double1 = 998.523351897;
      doubleArray0[1] = double1;
      double double2 = 272.7854;
      doubleArray0[2] = double2;
      double double3 = (-593.854);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      String string0 = matrix0.toString();
      matrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
