/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 21:23:41 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.text.ChoiceFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.ForwardBackSubstitutionSolver;
import org.la4j.linear.JacobiSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int0);
      int int1 = 0;
      int int2 = 0;
      int int3 = 0;
      int int4 = 0;
      Matrix matrix0 = rowMajorSparseMatrix0.sliceTopLeft(int3, int4);
      matrix0.columnMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int1, int0, int2);
      Matrix matrix1 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      int int5 = 271;
      Matrix matrix2 = matrix1.power(int5);
      String string0 = "bp:RPp#fC3=";
      SparseVector sparseVector0 = SparseVector.zero(int0, int0);
      StringBuilder stringBuilder0 = null;
      int int6 = (-32);
      PrivateAccess.callMethod((Class<Matrix>) Matrix.class, matrix0, "indent", (Object) stringBuilder0, (Class<?>) StringBuilder.class, (Object) int6, (Class<?>) int.class);
      matrix2.setColumn(int3, (Vector) sparseVector0);
      Matrix matrix3 = matrix1.hadamardProduct(columnMajorSparseMatrix0);
      matrix3.toBinary();
      StringBuilder stringBuilder1 = null;
      PrivateAccess.callMethod((Class<Matrix>) Matrix.class, (Matrix) columnMajorSparseMatrix1, "indent", (Object) stringBuilder1, (Class<?>) StringBuilder.class, (Object) int4, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(int0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      matrix0.equals((Matrix) denseMatrix0, (double) int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int0);
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, doubleArray0[2], (Random) mockRandom0);
      ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(int0, int0, doubleArray0);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      int int1 = (-27);
      int int2 = 25;
      int int3 = 0;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, int1, int0, int2, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -27, 1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, double0);
      int int1 = columnMajorSparseMatrix0.rank();
      Matrix matrix0 = columnMajorSparseMatrix0.sliceTopLeft(int0, int1);
      matrix0.rank();
      int int2 = 0;
      int int3 = (-3640);
      // Undeclared exception!
      try { 
        matrix0.copyOfShape(int2, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-3640
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, double0);
      int int1 = columnMajorSparseMatrix0.rank();
      int int2 = 1588;
      Matrix matrix0 = columnMajorSparseMatrix0.sliceTopLeft(int2, int1);
      matrix0.rank();
      Matrix matrix1 = columnMajorSparseMatrix0.kroneckerProduct(matrix0);
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(charSequence0).length();
      StringBuilder stringBuilder0 = new StringBuilder(charSequence0);
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) matrix1);
      int int3 = (-3025);
      PrivateAccess.callMethod((Class<Matrix>) Matrix.class, matrix1, "indent", (Object) stringBuilder1, (Class<?>) StringBuilder.class, (Object) int3, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = mock(DenseVector.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(denseVector0).length();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = "6%L#Tcj[J[t`F'GR ";
      StringBuilder stringBuilder1 = stringBuilder0.append(string0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuilder0);
      int int0 = 1170;
      StringBuilder stringBuilder3 = stringBuilder2.appendCodePoint(int0);
      char char0 = 'R';
      StringBuilder stringBuilder4 = stringBuilder3.append(char0);
      int int1 = 3137;
      PrivateAccess.callMethod((Class<Matrix>) Matrix.class, matrix0, "indent", (Object) stringBuilder4, (Class<?>) StringBuilder.class, (Object) int1, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 47;
      Matrix matrix0 = Matrix.constant(int0, int0, int0);
      double double0 = (-380.6);
      double double1 = 415.9751824;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, double0, (double)int0, double1).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      Matrix matrix1 = matrix0.add(double1);
      StringBuilder stringBuilder0 = null;
      try { 
        PrivateAccess.callMethod((Class<Matrix>) Matrix.class, matrix1, "indent", (Object) stringBuilder0, (Class<?>) StringBuilder.class, (Object) int0, (Class<?>) int.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      ColumnMajorSparseMatrix.identity(int0);
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(int0, int0, doubleArray0);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      int int1 = 1;
      int int2 = 0;
      int int3 = 0;
      matrix0.insert((Matrix) denseMatrix0, int1, int0, int2, int3);
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = true;
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean0);
      char[] charArray0 = new char[1];
      char char0 = '7';
      charArray0[0] = char0;
      StringBuilder stringBuilder2 = stringBuilder1.insert(int1, charArray0);
      StringBuilder stringBuilder3 = stringBuilder2.append(char0);
      StringBuilder stringBuilder4 = stringBuilder3.insert(int2, (CharSequence) stringBuilder1);
      PrivateAccess.callMethod((Class<Matrix>) Matrix.class, (Matrix) denseMatrix0, "indent", (Object) stringBuilder4, (Class<?>) StringBuilder.class, (Object) int2, (Class<?>) int.class);
      matrix0.norm();
      matrix0.infinityNorm();
      denseMatrix0.equals((Object) ooPlaceMatricesAddition0);
      double double0 = 2876.978;
      // Undeclared exception!
      try { 
        matrix0.set(int1, int0, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int1, int0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int0);
      ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      columnMajorSparseMatrix0.removeFirstColumn();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceKroneckerProduct0.applyCommon(rowMajorSparseMatrix1, rowMajorSparseMatrix1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.block(matrix0, rowMajorSparseMatrix1, rowMajorSparseMatrix1, rowMajorSparseMatrix1);
      // Undeclared exception!
      try { 
        SparseMatrix.block(rowMajorSparseMatrix1, matrix0, matrix0, columnMajorSparseMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 4;
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int0;
      doubleArray2[4] = (double) int0;
      doubleArray2[5] = (double) int0;
      double double0 = (-2955.375234734522);
      doubleArray2[6] = double0;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      ooPlaceMatricesMultiplication0.partiallyApply(denseMatrix0);
      DenseMatrix denseMatrix1 = DenseMatrix.zero(int0, int0);
      NumberFormat numberFormat0 = null;
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix1, denseMatrix1);
      matrix0.iterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      denseMatrix1.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "%%MatrixMarket";
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 0;
      org.evosuite.runtime.Random.setNextRandom(int0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int1 = 46;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(int1, int1);
      int int2 = 47;
      int int3 = 46;
      Matrix.unit(int3, int2);
      MockRandom mockRandom0 = new MockRandom(int2);
      DenseMatrix denseMatrix1 = DenseMatrix.random(int2, int0, mockRandom0);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      ColumnMajorSparseMatrix.identity(int0);
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix.randomSymmetric(int0, doubleArray0[2], (Random) mockRandom0);
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(int0, int0, doubleArray0);
      int int1 = 1;
      int int2 = 0;
      int int3 = 0;
      double double0 = 2876.978;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int2);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, double0);
      int int1 = Double.SIZE;
      Vector vector0 = mock(Vector.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(vector0).length();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(int1, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 1;
      double double0 = 1.594670440485846E-10;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, double0);
      columnMajorSparseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int0, int1);
      double double0 = 3854.13;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int1, int0, double0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
      matrix0.hashCode();
      matrix0.determinant();
      int int2 = 0;
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      int int3 = 0;
      columnMajorSparseMatrix0.insert(matrix0, int3, int1);
      int int4 = (-1);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.slice(int1, int2, int4, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1][0..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int0, int1);
      double double0 = 3854.13;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int0, int0, double0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
      matrix0.hashCode();
      matrix0.determinant();
      int int2 = 0;
      int int3 = 0;
      columnMajorSparseMatrix0.insert(matrix0, int3, int1);
      int int4 = (-1);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.slice(int1, int2, int4, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1][0..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int0, int1);
      double double0 = 3854.13;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int0, int0, double0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
      matrix0.hashCode();
      matrix0.determinant();
      int int2 = 0;
      int int3 = (-1);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, int3, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 47;
      Matrix matrix0 = Matrix.constant(int0, int0, int0);
      double double0 = 0.0;
      double double1 = 0.0;
      double double2 = 1626.9;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        matrix0.foldRow(int1, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 484;
      int int1 = 0;
      int int2 = (-4058);
      int int3 = 0;
      MockRandom mockRandom0 = new MockRandom(int1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(int3, (double) int3, (Random) mockRandom0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(int1);
      columnMajorSparseMatrix0.subtract((Matrix) denseMatrix0);
      int int4 = 2844;
      int int5 = (-152);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Matrix.zero(int4, int5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 47;
      Matrix matrix0 = Matrix.constant(int0, int0, int0);
      double double0 = 0.0;
      double double1 = 1002.425019621876;
      double double2 = (-1433.5);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, double0, (double)int0, double1, double2).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      matrix0.toBinary();
      // Undeclared exception!
      matrix0.rank();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 4;
      int int1 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int1);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int0;
      doubleArray2[4] = (double) int0;
      doubleArray2[5] = (double) int0;
      double double0 = (-2955.375234734522);
      doubleArray2[6] = double0;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      ooPlaceMatricesMultiplication0.partiallyApply(denseMatrix0);
      matrix0.trace();
      DenseMatrix denseMatrix1 = DenseMatrix.zero(int0, int0);
      NumberFormat numberFormat0 = null;
      // Undeclared exception!
      try { 
        denseMatrix1.toCSV(numberFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.identity(int0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)columnMajorSparseMatrix0.kroneckerProduct(cCSMatrix0);
      cCSMatrix0.getRow(int0);
      CCSMatrix cCSMatrix2 = (CCSMatrix)columnMajorSparseMatrix0.insert((Matrix) cCSMatrix1);
      cCSMatrix0.iterator();
      cCSMatrix1.multiply((double) int0);
      Matrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix2, cCSMatrix0);
      int int1 = 251;
      JacobiSolver jacobiSolver0 = new JacobiSolver(cCSMatrix2);
      cCSMatrix1.columnMajorIterator();
      String string0 = null;
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 0;
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(int0, int0, doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      Matrix matrix1 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      matrix1.equals((Object) mockRandom0);
      int int1 = 3;
      Matrix matrix2 = Matrix.zero(int1, int0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix2.is(matrixPredicate0);
      matrix0.norm();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, double0);
      columnMajorSparseMatrix0.rank();
      columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 47;
      Matrix matrix0 = Matrix.constant(int0, int0, int0);
      double double0 = (-380.6);
      double double1 = 415.9751824;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, double0, (double)int0, double1).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      matrix0.add(double1);
      // Undeclared exception!
      matrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      double double0 = 847.8;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) int0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      rowMajorSparseMatrix0.manhattanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = rowMajorSparseMatrix0.transformColumn(int0, vectorFunction0);
      double double1 = (-140.09907842);
      matrix0.divide(double1);
      matrix0.toBinary();
      Matrix matrix1 = rowMajorSparseMatrix0.rotate();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      matrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      matrix1.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int0, int1);
      DenseMatrix.constant(int0, int0, int0);
      int int2 = 0;
      int int3 = 0;
      int int4 = (-1);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.slice(int1, int2, int4, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1][0..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 976;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.clone();
      char char0 = 'r';
      decimalFormatSymbols0.setDecimalSeparator(char0);
      double double0 = (-1886.922819145271);
      Matrix matrix0 = Matrix.diagonal(int0, double0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int2 = 0;
      VectorProcedure vectorProcedure1 = null;
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      matrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray1[3] = (double) int0;
      doubleArray1[4] = (double) int0;
      doubleArray1[5] = (double) int0;
      doubleArray1[6] = (double) int0;
      doubleArray1[7] = (double) int0;
      doubleArray1[8] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int0;
      doubleArray2[4] = (double) int0;
      double double0 = (-1262.045006);
      doubleArray2[5] = double0;
      doubleArray2[6] = (double) int0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) int0;
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      sparseMatrix0.equals((Object) mockRandom0);
      sparseMatrix0.maxInColumn(int0);
      int int1 = 1;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.eachInRow(int1, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 976;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.clone();
      char char0 = 'r';
      decimalFormatSymbols0.setDecimalSeparator(char0);
      double double0 = (-1886.922819145271);
      Matrix matrix0 = Matrix.diagonal(int0, double0);
      int int1 = 0;
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int2 = 0;
      VectorProcedure vectorProcedure0 = null;
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      matrix0.maxInRow(int2);
      // Undeclared exception!
      matrix0.product();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 7;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(int0, int0);
      double double0 = (-512.853397440414);
      double double1 = 0.0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double1, (double)int0, double1, double1).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      denseMatrix0.transform(matrixFunction0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      denseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      int int1 = 1229;
      int int2 = 0;
      denseMatrix0.minInRow(int2);
      Vector vector0 = null;
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(int1, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 47;
      Matrix matrix0 = Matrix.constant(int0, int0, int0);
      double double0 = 0.0;
      double double1 = 0.0;
      double double2 = (-96.82664536);
      double double3 = 0.0;
      double double4 = (-546.41836283);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double1, double2, double3, double4).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      int int1 = 0;
      matrix0.maxInRow(int1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 7;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(int0, int0);
      double double0 = 1509.8;
      double double1 = 1.0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, (double)int0, double0, double1).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = denseMatrix0.transform(matrixFunction0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      denseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      int int1 = 1229;
      int int2 = 1;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.updateRow(int2, vectorFunction0);
      Vector vector0 = null;
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(int1, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      int int1 = (-1343);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 2642;
      double double0 = 1514.0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, double0);
      // Undeclared exception!
      columnMajorSparseMatrix0.power(int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 462;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(int0, int0);
      int int1 = (-2152);
      int int2 = 3;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      sparseMatrix0.is(matrixPredicate0);
      Matrix matrix0 = sparseMatrix0.copyOfShape(int0, int2);
      matrix0.min();
      double double0 = (-2595.679041);
      // Undeclared exception!
      try { 
        Matrix.diagonal(int1, double0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 0;
      double double0 = 847.8;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) int0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      rowMajorSparseMatrix0.manhattanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = rowMajorSparseMatrix0.transformColumn(int0, vectorFunction0);
      double double1 = (-140.09907842);
      matrix0.divide(double1);
      matrix0.toBinary();
      int int1 = 1;
      rowMajorSparseMatrix0.blankOfColumns(int1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(string0);
      int int0 = 0;
      rowMajorSparseMatrix0.blankOfColumns(int0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      int int1 = 1;
      int int2 = 8;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int1, int2, int1);
      MatrixFactory<DenseMatrix> matrixFactory0 = (MatrixFactory<DenseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(denseMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      rowMajorSparseMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 3046;
      double double0 = (-365.718685146184);
      Matrix matrix0 = Matrix.diagonal(int0, double0);
      int int1 = 693;
      int int2 = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.updateAt(int1, int2, matrixFunction0);
      // Undeclared exception!
      matrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 0;
      int int1 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(int0, int1, doubleArray0);
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(int0);
      long long0 = 45L;
      int int2 = 0;
      columnMajorSparseMatrix0.sliceBottomRight(int2, int2);
      mockRandom0.longs(long0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(int0, int0, double0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      int int0 = 2140;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.transformRow(int0, vectorFunction0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = denseMatrix0.toColumnMajorSparseMatrix();
      double double0 = 394.325558;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(int0, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2140
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 7;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(int0, int0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      denseMatrix0.transform(matrixFunction0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      denseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      int int1 = 1229;
      Vector vector0 = null;
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(int1, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 1191;
      DenseVector denseVector0 = DenseVector.unit(int0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      denseVector0.shuffle();
      matrix0.is(matrixPredicate0);
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      String string0 = "!d&j";
      String string1 = null;
      matrix0.mkString(numberFormat0, string0, string1);
      matrix0.toCSV();
      int int1 = 0;
      matrix0.removeRow(int1);
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int1;
      double double0 = 1754.5666154432;
      doubleArray1[2] = double0;
      doubleArray1[3] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = double0;
      doubleArray2[1] = double0;
      doubleArray2[2] = double0;
      doubleArray2[3] = double0;
      doubleArray2[4] = double0;
      doubleArray2[5] = double0;
      doubleArray0[1] = doubleArray2;
      Matrix matrix1 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix1.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseVector0.toColumnMatrix();
      int int1 = (-3082);
      int int2 = (-194);
      basic2DMatrix0.setColumn(int2, (double) int1);
      int int3 = 0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)int2).when(vectorAccumulator0).accumulate();
      basic2DMatrix0.foldRow(int2, vectorAccumulator0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.ensureIndexesAreInBounds(int1, int3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-3082' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(int0, (double) int0, (Random) mockRandom0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      MatrixFactory<SparseMatrix> matrixFactory0 = (MatrixFactory<SparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      SparseMatrix sparseMatrix0 = matrix0.to(matrixFactory0);
      Matrix.block(sparseMatrix0, matrix0, sparseMatrix0, sparseMatrix0);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        matrix0.setRow(int0, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 47;
      Matrix matrix0 = Matrix.constant(int0, int0, int0);
      double double0 = (-380.6);
      double double1 = 415.9751824;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, double0, (double)int0, double1).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      Matrix matrix1 = matrix0.add(double1);
      // Undeclared exception!
      try { 
        matrix1.maxInRow(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      double double0 = 847.8;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) int0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      rowMajorSparseMatrix0.manhattanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = rowMajorSparseMatrix0.transformColumn(int0, vectorFunction0);
      double double1 = (-140.09907842);
      matrix0.divide(double1);
      matrix0.toBinary();
      rowMajorSparseMatrix0.rotate();
      int int1 = (-1822);
      // Undeclared exception!
      try { 
        matrix0.getRow(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1821
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      String string0 = "  ";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(string0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int0 = 0;
      VectorAccumulator vectorAccumulator0 = null;
      // Undeclared exception!
      try { 
        matrix0.foldColumn(int0, vectorAccumulator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      Matrix matrix1 = matrix0.add((Matrix) columnMajorSparseMatrix0);
      matrix1.hashCode();
      matrix0.max();
      matrix0.manhattanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix2 = matrix0.transformRow(int1, vectorFunction0);
      int int2 = (-42);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix2.is(matrixPredicate0);
      matrix0.maxInColumn(int2);
      String string0 = null;
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = (-3950.4961476555227);
      doubleArray0[1] = double1;
      double double2 = 1566.0;
      doubleArray0[2] = double2;
      double double3 = 1.0;
      doubleArray0[3] = double3;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int0 = (-937);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      sparseVector0.non(vectorPredicate0);
      matrix0.iteratorOfColumn(int0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      String string0 = "Illegal row number, must be 0..";
      // Undeclared exception!
      try { 
        SparseVector.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 557;
      int int1 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      double double0 = 143.184010202;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(int0, int1, doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(int0, int0, doubleArray0);
      Matrix matrix0 = rowMajorSparseMatrix0.multiply(doubleArray0[0]);
      int int1 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.max();
      Matrix matrix1 = matrix0.transpose();
      matrix1.rotate();
      boolean boolean0 = true;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.non(matrixPredicate0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      String string0 = "+OS?HFS";
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 957;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int0);
      // Undeclared exception!
      columnMajorSparseMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 3058;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(int0, double0, (Random) mockRandom0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int1 = 5450;
      // Undeclared exception!
      try { 
        matrix0.removeRow(int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3057
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      int int1 = 2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1, int0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix1, (SparseMatrix) rowMajorSparseMatrix1);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      rowMajorSparseMatrix1.withInverter(linearAlgebra_InverterFactory0);
      rowMajorSparseMatrix0.toBinary();
      MatrixMatrixOperation<RowMajorSparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<RowMajorSparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((MatrixOperation) null).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      // Undeclared exception!
      try { 
        matrix0.apply(matrixMatrixOperation0, (Matrix) rowMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(string0);
      int int0 = 0;
      rowMajorSparseMatrix0.blankOfColumns(int0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      MatrixFactory<DenseMatrix> matrixFactory0 = (MatrixFactory<DenseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 7;
      int int1 = 32;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1, int0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      int int2 = 1;
      MockRandom mockRandom0 = new MockRandom(int1);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int2, mockRandom0);
      inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, denseMatrix0);
      double double0 = 0.0;
      matrix0.setAll(double0);
      matrix0.transpose();
      int int3 = 0;
      int int4 = (-94);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.blankOfShape(int3, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-94
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 2;
      MockRandom mockRandom0 = new MockRandom(int0);
      Matrix.randomSymmetric(int0, mockRandom0);
      Matrix.identity(int0);
      int int1 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      double double0 = (-1380.647932);
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int1;
      double double1 = 0.0;
      doubleArray0[6] = double1;
      doubleArray0[7] = (double) int1;
      Matrix.from1DArray(int0, int1, doubleArray0);
      String string0 = ",GfI;n";
      // Undeclared exception!
      try { 
        Matrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int0, int0);
      double double0 = 0.0;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(int0, double0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      matrix0.blankOfRows(int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(int0, (double) int0, (Random) mockRandom0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      MatrixFactory<SparseMatrix> matrixFactory0 = (MatrixFactory<SparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        matrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 0;
      DenseVector denseVector0 = DenseVector.zero(int0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseVector0.toColumnMatrix();
      int int1 = (-3082);
      int int2 = (-194);
      basic2DMatrix0.setColumn(int2, (double) int1);
      int int3 = 0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      basic2DMatrix0.foldRow(int2, vectorAccumulator0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.ensureIndexesAreInBounds(int1, int3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-3082' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      SparseVector sparseVector0 = SparseVector.zero(int0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      double double0 = 1107.3185245143;
      matrix0.setColumn(int0, double0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.unit(int0);
      Matrix matrix1 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.multiply(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 0 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, int0);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateAt(int0, int0, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = (-3794);
      double double0 = (-1778.891);
      // Undeclared exception!
      try { 
        Matrix.constant(int0, int0, double0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      double[][] doubleArray0 = new double[3][0];
      mockRandom0.doubles();
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray1[3] = (double) int0;
      doubleArray1[4] = (double) int0;
      doubleArray1[5] = (double) int0;
      doubleArray1[6] = (double) int0;
      doubleArray1[7] = (double) int0;
      doubleArray1[8] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int0;
      doubleArray2[4] = (double) int0;
      double double0 = (-1262.045006);
      doubleArray2[5] = double0;
      doubleArray2[6] = (double) int0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) int0;
      doubleArray0[2] = doubleArray3;
      Matrix.from2DArray(doubleArray0);
      sparseMatrix0.maxInColumn(int0);
      Matrix matrix0 = Matrix.randomSymmetric(int0, mockRandom0);
      matrix0.divide(doubleArray2[2]);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 128;
      double double0 = 0.0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int0, double0);
      rowMajorSparseMatrix0.divide(int0);
      rowMajorSparseMatrix0.toMatrixMarket();
      int int1 = 0;
      double double1 = (-52.0);
      Random random0 = null;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.random(int0, int1, double1, random0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(int0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "";
      DenseVector denseVector0 = DenseVector.fromCSV(string0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      int int0 = 0;
      matrix0.minInRow(int0);
      ForwardBackSubstitutionSolver forwardBackSubstitutionSolver0 = null;
      try {
        forwardBackSubstitutionSolver0 = new ForwardBackSubstitutionSolver(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[3];
      double double0 = 925.668436145666;
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      double double2 = 0.0;
      doubleArray1[2] = double2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      double double3 = 0.0;
      doubleArray2[0] = double3;
      double double4 = 1.0;
      doubleArray2[1] = double4;
      double double5 = (-1584.731764422083);
      doubleArray2[2] = double5;
      doubleArray2[3] = double2;
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      NumberFormat numberFormat0 = null;
      // Undeclared exception!
      try { 
        matrix0.toMatrixMarket(numberFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 898;
      double double0 = 0.0;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(int0, double0);
      int int1 = (-728);
      // Undeclared exception!
      sparseMatrix0.setAll(int1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1);
      rowMajorSparseMatrix0.subtract((double) int1);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      String string0 = "";
      DenseVector.fromCSV(string0);
      String string1 = "vL;YI.IYSj[~:zM#=";
      // Undeclared exception!
      try { 
        DenseVector.fromCSV(string1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      Matrix matrix0 = Matrix.unit(int0, int0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int1 = 1330;
      int int2 = (-1818);
      // Undeclared exception!
      try { 
        matrix0.copyOfRows(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1818x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 383;
      int int1 = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      SparseMatrix sparseMatrix0 = null;
      int int2 = (-778);
      int int3 = 0;
      Matrix matrix0 = Matrix.unit(int0, int3);
      matrix0.max();
      matrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = (-2079);
      int int1 = (-2569);
      // Undeclared exception!
      try { 
        Matrix.unit(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 2255;
      ColumnMajorSparseMatrix.zero(int0, int0);
      double double0 = 992.800500286;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int1 = 1;
      int int2 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(int1, int2);
      // Undeclared exception!
      try { 
        denseMatrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      ColumnMajorSparseMatrix.block(matrix0, columnMajorSparseMatrix0, matrix0, matrix0);
      int int1 = 26;
      matrix0.blankOfShape(int0, int1);
      int int2 = 0;
      int int3 = (-709);
      mockRandom0.nextGaussian();
      int int4 = (-368);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, int1, int0, int2, int3, int2, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 0x-368
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      DenseMatrix.randomSymmetric(int0, mockRandom0);
      mockRandom0.nextBoolean();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(int0);
      double double0 = 2495.214634665104;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      denseMatrix0.rotate();
      int int1 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(int1);
      sparseMatrix0.nonZeroRowMajorIterator();
      int int2 = 0;
      DenseMatrix.unit(int2, int0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, sparseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = matrix0.toRowMajorSparseMatrix();
      int int3 = 0;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix1.maxInRow(int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.identity(int0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)columnMajorSparseMatrix0.kroneckerProduct(cCSMatrix0);
      cCSMatrix0.getRow(int0);
      CCSMatrix cCSMatrix2 = (CCSMatrix)columnMajorSparseMatrix0.insert((Matrix) cCSMatrix1);
      cCSMatrix0.iterator();
      cCSMatrix1.multiply((double) int0);
      Matrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix2, cCSMatrix0);
      int int1 = 251;
      JacobiSolver jacobiSolver0 = new JacobiSolver(cCSMatrix2);
      cCSMatrix1.columnMajorIterator();
      String string0 = null;
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      Matrix matrix0 = Matrix.constant(int0, int0, double0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.diagonalProduct();
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.random(int0, int0, double0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int1;
      double double0 = 1.0;
      doubleArray0[1] = double0;
      double double1 = 0.0;
      doubleArray0[2] = double1;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(int0, int1, doubleArray0);
      int int2 = (-878);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 0;
      int int1 = 0;
      double double0 = 0.0;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int1, int1, double0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      matrix0.sum();
      DenseMatrix denseMatrix1 = DenseMatrix.diagonal(int0, int0);
      Matrix matrix1 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix1);
      matrix1.sliceTopLeft(int0, int0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int0;
      String[] stringArray0 = new String[7];
      String string0 = "p#9\\218\\m)Nu5H";
      stringArray0[0] = string0;
      String string1 = " does not equal to ";
      stringArray0[1] = string1;
      String string2 = "-)xDo'\\.Zv~-?/x=^";
      stringArray0[2] = string2;
      String string3 = "=<}Tmai[";
      stringArray0[3] = string3;
      String string4 = "";
      stringArray0[4] = string4;
      String string5 = "`D:";
      stringArray0[5] = string5;
      String string6 = "";
      stringArray0[6] = string6;
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      String string0 = "\n";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV(string0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int0 = 1;
      matrix0.swapRows(int0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 1315;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(int0, int0);
      // Undeclared exception!
      sparseMatrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      double double0 = 2502.3731987;
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      mockRandom0.doubles();
      columnMajorSparseMatrix0.nonZeroIteratorOfColumn(int0);
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.add(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      DenseVector denseVector0 = DenseVector.constant(int0, int0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = null;
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(matrix0);
      int int0 = 0;
      int int1 = 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1);
      Matrix matrix1 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      int int2 = 1;
      matrix1.swapColumns(int2, int2);
      // Undeclared exception!
      try { 
        matrix1.subtract(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 0;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, int0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      int int1 = 56;
      // Undeclared exception!
      try { 
        matrix0.swapColumns(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 444;
      Matrix matrix0 = Matrix.identity(int0);
      matrix0.toBinary();
      MockRandom mockRandom0 = new MockRandom(int0);
      // Undeclared exception!
      Matrix.random(int0, int0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 4010;
      int int1 = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(int0, int1, doubleArray0);
      Locale locale0 = Locale.CANADA_FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      sparseMatrix0.toMatrixMarket(numberFormat0);
      int int2 = 0;
      int int3 = 37;
      // Undeclared exception!
      try { 
        sparseMatrix0.getOrElse(int2, int3, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 1;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(int0, int0);
      // Undeclared exception!
      try { 
        sparseMatrix0.setColumn(int0, (double) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 1;
      double double0 = 0.0;
      DenseVector denseVector0 = DenseVector.constant(int0, double0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      denseVector0.toMatrixMarket();
      Matrix matrix1 = ooPlaceKroneckerProduct0.applyCommon(matrix0, matrix0);
      int int1 = 1;
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, int1, int1, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 1 cols at 1, 1 in a 1x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      int int1 = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(int0, int1, doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      int int2 = 0;
      cRSMatrix0.ensureDimensionsAreCorrect(int0, int2);
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(int0, int0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 0;
      int int1 = (-3231);
      // Undeclared exception!
      try { 
        Matrix.zero(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(int0, int0, mockRandom0);
      denseMatrix0.manhattanNorm();
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      int int1 = (-682);
      long long0 = (-644L);
      mockRandom0.setSeed(long0);
      denseMatrix0.blank();
      matrix0.toSparseMatrix();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      matrix0.toMatrixMarket(numberFormat0);
      int int2 = 1379;
      matrix0.minInColumn(int2);
      // Undeclared exception!
      try { 
        matrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 2659;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      double double0 = 0.964;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      Matrix matrix0 = Matrix.from1DArray(int0, int0, doubleArray0);
      int int1 = (-535);
      // Undeclared exception!
      try { 
        matrix0.infinityNorm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 2786;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int0, int1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int int2 = 2736;
      // Undeclared exception!
      columnMajorSparseMatrix0.sliceBottomRight(int1, int2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[7];
      double double0 = 1325.276266023;
      doubleArray1[0] = double0;
      double double1 = 1807.574291411589;
      doubleArray1[1] = double1;
      doubleArray1[2] = double0;
      double double2 = 0.0;
      doubleArray1[3] = double2;
      double double3 = 1040.0;
      doubleArray1[4] = double3;
      double double4 = 644.9059759772086;
      doubleArray1[5] = double4;
      double double5 = (-3572.2016203444473);
      doubleArray1[6] = double5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = double1;
      doubleArray2[1] = double5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = double3;
      doubleArray3[1] = double4;
      doubleArray3[2] = double0;
      doubleArray3[3] = double5;
      doubleArray3[4] = double5;
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      int int0 = 2;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(int0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, sparseMatrix0);
      int int1 = (-3808);
      int int2 = 0;
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(int1, int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-3808' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 346;
      int int1 = (-2666);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int1;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(int0, int1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 346x-2666
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      Matrix.from1DArray(int0, int0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 2833;
      int int1 = 0;
      double[] doubleArray0 = new double[0];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(int0, int1, doubleArray0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      rowMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      int int2 = 1790;
      rowMajorSparseMatrix0.getRow(int2);
      rowMajorSparseMatrix0.rowMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.each(matrixProcedure0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int3 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int3);
      int int4 = 1;
      MockRandom mockRandom0 = new MockRandom();
      ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int4, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.hadamardProduct(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 2833x0 does not equal to 0x1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(int0, int0);
      int int1 = 2443;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      denseMatrix0.euclideanNorm();
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      int int2 = 2430;
      columnMajorSparseMatrix0.removeColumn(int2);
      inPlaceCopyMatrixToMatrix0.apply(denseMatrix1, columnMajorSparseMatrix0);
      denseMatrix0.diagonalProduct();
      inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      int int3 = 5;
      double double0 = 0.0;
      Matrix.constant(int2, int3, double0);
      denseMatrix0.iteratorOfRow(int3);
      int int4 = 2874;
      int int5 = (-1160);
      // Undeclared exception!
      try { 
        denseMatrix1.blankOfShape(int4, int5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 1716;
      int int1 = 123;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(int0, int1);
      double double0 = (-2781.5065);
      denseMatrix0.toColumnVector();
      denseMatrix0.setAll(double0);
      int int2 = 0;
      Matrix matrix0 = Matrix.zero(int2, int1);
      int int3 = 0;
      Matrix.zero(int2, int3);
      matrix0.norm();
      int int4 = (-768);
      int int5 = 0;
      int int6 = 0;
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, int0, int4, int5, int6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 1716, -768
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(int0, int0);
      int[] intArray0 = new int[3];
      sparseMatrix0.euclideanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = sparseMatrix0.transformRow(int0, vectorFunction0);
      matrix0.max();
      matrix0.max();
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      // Undeclared exception!
      try { 
        sparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 0;
      int int1 = 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      int int2 = 1;
      rowMajorSparseMatrix0.euclideanNorm();
      int int3 = (-227);
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(int3, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-227][0..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      RowMajorSparseMatrix.diagonal(int0, int0);
      int int1 = (-3658);
      // Undeclared exception!
      try { 
        Matrix.identity(int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = ". Should be: ";
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 1;
      int int1 = 707;
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(int0, int1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      String string0 = "g{>S52'4E}<h,";
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 1191;
      DenseVector denseVector0 = DenseVector.unit(int0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseVector0.shuffle();
      matrix0.is(matrixPredicate0);
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      String string0 = "!d&j";
      String string1 = null;
      matrix0.mkString(numberFormat0, string0, string1);
      matrix0.toCSV();
      int int1 = 0;
      matrix0.removeRow(int1);
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int1;
      double double0 = 1754.5666154432;
      doubleArray1[2] = double0;
      doubleArray1[3] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = double0;
      doubleArray2[1] = double0;
      doubleArray2[2] = double0;
      doubleArray2[3] = double0;
      doubleArray2[4] = double0;
      doubleArray2[5] = double0;
      doubleArray0[1] = doubleArray2;
      Matrix matrix1 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix1.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 1238;
      int int1 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(int0, int1);
      Matrix matrix0 = sparseMatrix0.copy();
      String string0 = "org.la4j.LinearAlgebra$SolverFactory";
      int int2 = 1;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldRow(int2, vectorAccumulator0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
      matrix0.mkString((NumberFormat) choiceFormat0, string0, string0);
      int int3 = 0;
      // Undeclared exception!
      try { 
        sparseMatrix0.minInColumn(int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1);
      String string0 = null;
      String string1 = "CHOLESKY";
      rowMajorSparseMatrix0.mkString(string0, string1);
      rowMajorSparseMatrix0.product();
      int int2 = (-253);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.blankOfColumns(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-253
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 0;
      int int1 = (-3082);
      int int2 = (-194);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int3 = 0;
      int int4 = 0;
      VectorFunction vectorFunction0 = null;
      int int5 = 1375;
      double double0 = 1.0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int5, double0);
      String string0 = "la4j-0.5.5 (March 2015)";
      String string1 = "SWEEP";
      // Undeclared exception!
      rowMajorSparseMatrix0.mkString(string0, string1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      int int0 = 2140;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.transformRow(int0, vectorFunction0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = denseMatrix0.toColumnMajorSparseMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 0;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int0, int1);
      int int2 = 649;
      double double0 = 3854.13;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int2, int0, double0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
      matrix0.hashCode();
      // Undeclared exception!
      try { 
        matrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 925;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      Matrix matrix1 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(matrix0);
      // Undeclared exception!
      matrix1.determinant();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(string0);
      int int0 = (-561);
      VectorFunction vectorFunction0 = null;
      rowMajorSparseMatrix0.transformColumn(int0, vectorFunction0);
      int int1 = 1192;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      long long0 = 3830L;
      long long1 = (-3489L);
      int int2 = 0;
      int int3 = (-601);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.getOrElse(int2, int3, long1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "";
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV(string0);
      // Undeclared exception!
      try { 
        denseMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 2713;
      RowMajorSparseMatrix.identity(int0);
      int int1 = (-2442);
      MockRandom mockRandom0 = new MockRandom(int0);
      // Undeclared exception!
      try { 
        Matrix.random(int0, int1, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      int int1 = (-580);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray(int0, int1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-580
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, double0);
      columnMajorSparseMatrix0.rank();
      JacobiSolver jacobiSolver0 = null;
      try {
        jacobiSolver0 = new JacobiSolver(columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 1;
      Random random0 = null;
      // Undeclared exception!
      try { 
        Matrix.random(int0, int0, random0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 423;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int0, int0);
      // Undeclared exception!
      rowMajorSparseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 1119;
      double double0 = 0.0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, double0);
      int int1 = 1;
      columnMajorSparseMatrix0.minInColumn(int1);
      columnMajorSparseMatrix0.transpose();
      int int2 = 0;
      int int3 = 3728;
      int int4 = 4228;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.slice(int3, int4, int4, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [3728..4228][4228..1119].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 484;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int0);
      int int1 = 0;
      columnMajorSparseMatrix0.rowMajorIterator();
      Matrix matrix0 = columnMajorSparseMatrix0.copyOfRows(int1);
      int int2 = (-4058);
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(int2, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-4058][0..484].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 3414;
      int int1 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(int0, int1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = sparseMatrix0.transformRow(int0, vectorFunction0);
      sparseMatrix0.rows();
      int int2 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int2;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = sparseVector0.to(vectorFactory0);
      // Undeclared exception!
      try { 
        matrix0.setRow(int2, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      int int0 = 2140;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.transformRow(int0, vectorFunction0);
      denseMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "";
      DenseVector denseVector0 = DenseVector.fromCSV(string0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      int int0 = 0;
      matrix0.setRow(int0, (double) int0);
      int int1 = matrix0.rank();
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) int1;
      doubleArray1[1] = (double) int1;
      doubleArray1[2] = (double) int0;
      doubleArray1[3] = (double) int1;
      doubleArray1[4] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) int1;
      doubleArray2[1] = (double) int1;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int0;
      doubleArray2[4] = (double) int1;
      doubleArray2[5] = (double) int1;
      doubleArray2[6] = (double) int0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) int1;
      doubleArray3[1] = (double) int1;
      doubleArray3[2] = (double) int0;
      doubleArray3[3] = (double) int1;
      doubleArray3[4] = (double) int1;
      doubleArray3[5] = (double) int0;
      doubleArray3[6] = (double) int1;
      doubleArray3[7] = (double) int0;
      doubleArray3[8] = (double) int0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) int0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (double) int0;
      doubleArray5[1] = (double) int1;
      doubleArray5[2] = (double) int0;
      doubleArray5[3] = (double) int1;
      doubleArray5[4] = (double) int1;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = (double) int0;
      doubleArray7[1] = (double) int1;
      doubleArray7[2] = (double) int1;
      doubleArray7[3] = (double) int0;
      doubleArray0[6] = doubleArray7;
      Matrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray1[3] = (double) int0;
      doubleArray1[4] = (double) int0;
      doubleArray1[5] = (double) int0;
      doubleArray1[6] = (double) int0;
      doubleArray1[7] = (double) int0;
      doubleArray1[8] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int0;
      doubleArray2[4] = (double) int0;
      double double0 = (-1262.045006);
      doubleArray2[5] = double0;
      doubleArray2[6] = (double) int0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) int0;
      doubleArray0[2] = doubleArray3;
      Matrix.from2DArray(doubleArray0);
      sparseMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.randomSymmetric(int0, mockRandom0);
      String string0 = "$h~lKlbi+R";
      // Undeclared exception!
      try { 
        basic2DMatrix0.fail(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // $h~lKlbi+R
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      double double0 = 0.0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      double double1 = (-4834.55565);
      doubleArray0[5] = double1;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(int0, int1, doubleArray0);
      int int2 = (-117);
      int int3 = (-639);
      SparseVector sparseVector0 = SparseVector.zero(int0, int3);
      Vector vector0 = sparseVector0.multiply(doubleArray0[5]);
      vector0.min();
      vector0.euclideanNorm();
      // Undeclared exception!
      try { 
        denseMatrix0.multiply(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 1 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[2];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = 637.8330414771738;
      doubleArray1[1] = double1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = double0;
      doubleArray2[1] = double0;
      doubleArray2[2] = double1;
      doubleArray2[3] = double1;
      doubleArray2[4] = double1;
      doubleArray2[5] = double1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = double1;
      doubleArray4[1] = double1;
      doubleArray4[2] = double1;
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.toBinary();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = (-474);
      int int1 = (-2869);
      // Undeclared exception!
      try { 
        Matrix.zero(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -474x-2869
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      double double0 = 350.709421901021;
      doubleArray0[6] = double0;
      doubleArray0[7] = (double) int0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(int0, int0, doubleArray0);
      int int1 = 0;
      denseMatrix0.setRow(int1, doubleArray0[1]);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Map<Integer, Integer> map0 = null;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      int int2 = 1272;
      // Undeclared exception!
      try { 
        DenseVector.fromMap(map0, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 13;
      DenseVector denseVector0 = DenseVector.constant(int0, int0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      matrix0.removeFirstColumn();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      matrix0.removeLastRow();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, double0);
      int int1 = columnMajorSparseMatrix0.rank();
      int int2 = 1588;
      Matrix matrix0 = columnMajorSparseMatrix0.sliceTopLeft(int2, int1);
      matrix0.rank();
      columnMajorSparseMatrix0.kroneckerProduct(matrix0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 4;
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int0;
      doubleArray2[4] = (double) int0;
      doubleArray2[5] = (double) int0;
      double double0 = (-2955.375234734522);
      doubleArray2[6] = double0;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      ooPlaceMatricesMultiplication0.partiallyApply(denseMatrix0);
      DenseMatrix denseMatrix1 = DenseMatrix.zero(int0, int0);
      NumberFormat numberFormat0 = null;
      // Undeclared exception!
      try { 
        denseMatrix1.toCSV(numberFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 0;
      RowMajorSparseMatrix.zero(int1, int0);
      int int2 = (-3820);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.identity(int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int0);
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, doubleArray0[2], (Random) mockRandom0);
      ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(int0, int0, doubleArray0);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      int int1 = 1;
      int int2 = 0;
      int int3 = 0;
      matrix0.insert((Matrix) denseMatrix0, int1, int0, int2, int3);
      matrix0.norm();
      matrix0.infinityNorm();
      denseMatrix0.equals((Object) ooPlaceMatricesAddition0);
      double double0 = 2876.978;
      // Undeclared exception!
      try { 
        matrix0.set(int1, int0, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int0);
      int int1 = 0;
      int int2 = 0;
      int int3 = 0;
      int int4 = 0;
      Matrix matrix0 = rowMajorSparseMatrix0.sliceTopLeft(int3, int4);
      matrix0.columnMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int1, int0, int2);
      Matrix matrix1 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      int int5 = 271;
      matrix1.power(int5);
      String string0 = "bp:RPp#fC3=";
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 47;
      Matrix matrix0 = Matrix.constant(int0, int0, int0);
      double double0 = (-380.6);
      double double1 = 415.9751824;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, double0, (double)int0, double1).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      matrix0.add(double1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[9];
      double double0 = 517.61221189;
      doubleArray1[0] = double0;
      double double1 = 1618.5052334855;
      doubleArray1[1] = double1;
      double double2 = 1165.9968918;
      doubleArray1[2] = double2;
      double double3 = 0.0;
      doubleArray1[3] = double3;
      double double4 = 0.0;
      doubleArray1[4] = double4;
      double double5 = (-2261.62131635215);
      doubleArray1[5] = double5;
      double double6 = 472.57056861;
      doubleArray1[6] = double6;
      double double7 = 0.0;
      doubleArray1[7] = double7;
      double double8 = (-2008.68517371);
      doubleArray1[8] = double8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = double6;
      doubleArray2[1] = double7;
      doubleArray2[2] = double3;
      doubleArray2[3] = double3;
      doubleArray2[4] = double0;
      doubleArray2[5] = double3;
      doubleArray2[6] = double1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = double2;
      doubleArray3[1] = double7;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = double0;
      doubleArray4[1] = double0;
      doubleArray4[2] = double4;
      doubleArray4[3] = double1;
      double double9 = 0.0;
      doubleArray4[4] = double9;
      doubleArray4[5] = double4;
      doubleArray4[6] = double2;
      doubleArray4[7] = double8;
      doubleArray4[8] = double7;
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 905;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      // Undeclared exception!
      matrix0.shuffle();
  }
}
