/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:24:09 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      int int1 = HttpHeaders.skipWhitespace(string0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = ">1<=}wUs.0i.VO";
      stringArray0[0] = string0;
      String string1 = "WBe!'y3";
      stringArray0[1] = string1;
      Headers headers0 = Headers.of(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(headers0);
      assertEquals(1, headers0.size());
      
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, stringArray0[0]);
      assertEquals(2, stringArray0.length);
      assertNotNull(list0);
      assertEquals(1, headers0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "vary";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = stringArray0[0];
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      Headers headers0 = Headers.of(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotNull(headers0);
      assertEquals(4, headers0.size());
      
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(8, stringArray0.length);
      assertNotNull(headers1);
      assertNotSame(headers0, headers1);
      assertNotSame(headers1, headers0);
      assertEquals(4, headers0.size());
      assertEquals(4, headers1.size());
      assertTrue(headers1.equals((Object)headers0));
      
      Headers headers2 = HttpHeaders.varyHeaders(headers0, headers1);
      assertEquals(8, stringArray0.length);
      assertNotNull(headers2);
      assertNotSame(headers0, headers1);
      assertNotSame(headers0, headers2);
      assertNotSame(headers1, headers0);
      assertNotSame(headers1, headers2);
      assertNotSame(headers2, headers0);
      assertNotSame(headers2, headers1);
      assertEquals(4, headers0.size());
      assertEquals(4, headers1.size());
      assertEquals(4, headers2.size());
      assertTrue(headers0.equals((Object)headers1));
      assertTrue(headers1.equals((Object)headers0));
      assertTrue(headers2.equals((Object)headers0));
      assertTrue(headers2.equals((Object)headers1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      assertNotNull(headers0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, headers0.size());
      
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertNotNull(headers1);
      assertNotSame(headers0, headers1);
      assertNotSame(headers1, headers0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, headers0.size());
      assertEquals(0, headers1.size());
      assertTrue(headers1.equals((Object)headers0));
      
      Headers headers2 = HttpHeaders.varyHeaders(headers1, headers0);
      assertNotNull(headers2);
      assertNotSame(headers0, headers1);
      assertNotSame(headers0, headers2);
      assertNotSame(headers1, headers2);
      assertNotSame(headers1, headers0);
      assertNotSame(headers2, headers0);
      assertNotSame(headers2, headers1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, headers0.size());
      assertEquals(0, headers1.size());
      assertEquals(0, headers2.size());
      assertTrue(headers0.equals((Object)headers1));
      assertTrue(headers1.equals((Object)headers0));
      assertTrue(headers2.equals((Object)headers0));
      assertTrue(headers2.equals((Object)headers1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "vary";
      stringArray0[0] = string0;
      String string1 = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      stringArray0[1] = string1;
      Headers headers0 = Headers.of(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(headers0);
      assertEquals(1, headers0.size());
      
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      assertEquals(1, headers0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = (-2852);
      Headers headers0 = mock(Headers.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(headers0).size();
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertNotNull(headers1);
      assertEquals(0, headers1.size());
      assertFalse(headers1.equals((Object)headers0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = null;
      int int0 = (-2218);
      int int1 = HttpHeaders.parseSeconds(string0, int0);
      assertEquals((-2218), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Response response0 = null;
      Headers headers0 = null;
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches(response0, headers0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Headers headers0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders(headers0, headers0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Headers headers0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyFields(headers0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "#6)Qhf>etsz\\bbJa";
      int int0 = (-1158);
      // Undeclared exception!
      try { 
        HttpHeaders.skipWhitespace(string0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = null;
      int int0 = 1893;
      // Undeclared exception!
      try { 
        HttpHeaders.skipWhitespace(string0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "z#c52fL9T <(vmr";
      int int0 = 0;
      String string1 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.skipUntil(string0, int0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpUrl httpUrl0 = null;
      Headers headers0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.receiveHeaders(cookieJar0, httpUrl0, headers0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "1A\"mXJkT8/[q1`Un@1[";
      String string1 = hashMap0.put(string0, string0);
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      assertNotNull(headers0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, headers0.size());
      
      // Undeclared exception!
      try { 
        HttpHeaders.parseChallenges(headers0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Headers headers0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll(headers0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasBody(response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Headers headers0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength(headers0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "vary";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      Headers headers0 = Headers.of(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotNull(headers0);
      assertEquals(4, headers0.size());
      
      Set<String> set0 = HttpHeaders.varyFields(headers0);
      assertEquals(8, stringArray0.length);
      assertNotNull(set0);
      assertTrue(set0.contains(string0));
      assertEquals(4, headers0.size());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "1A\"mXJkT8/[q1`Un@1[";
      String string1 = hashMap0.put(string0, string0);
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      assertNotNull(headers0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, headers0.size());
      
      Set<String> set0 = HttpHeaders.varyFields(headers0);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, headers0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "7";
      int int0 = 1879048192;
      int int1 = HttpHeaders.parseSeconds(string0, int0);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      int int0 = 0;
      int int1 = HttpHeaders.skipWhitespace(string0, int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = " \"'<>#&=";
      int int0 = 2256;
      int int1 = HttpHeaders.skipWhitespace(string0, int0);
      assertEquals(2256, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = ">1<=}wUs.0i.VO";
      int int0 = 0;
      int int1 = HttpHeaders.skipWhitespace(string0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = HttpHeaders.skipUntil(string0, int1, string0);
      assertEquals(0, int2);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "2\\#c-\"k:5<%4 An$,";
      int int0 = 0;
      int int1 = HttpHeaders.parseSeconds(string0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = new String[0];
      Headers headers0 = Headers.of(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(headers0);
      assertEquals(0, headers0.size());
      
      String string1 = headers0.toString();
      assertEquals(0, stringArray0.length);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertEquals(0, headers0.size());
      assertFalse(string1.equals((Object)string0));
      
      int int2 = HttpHeaders.skipUntil(string0, int1, string1);
      assertEquals(0, stringArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(17, int2);
      assertEquals(0, headers0.size());
      assertFalse(string0.equals((Object)string1));
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "*&<T??";
      int int0 = (-316);
      // Undeclared exception!
      try { 
        HttpHeaders.skipUntil(string0, int0, string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "vary";
      int int0 = 277;
      int int1 = HttpHeaders.parseSeconds(string0, int0);
      assertEquals(277, int1);
      assertTrue(int1 == int0);
      
      int int2 = HttpHeaders.skipUntil(string0, int1, string0);
      assertEquals(277, int2);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpUrl httpUrl0 = null;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      assertNotNull(headers0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, headers0.size());
      
      HttpHeaders.receiveHeaders(cookieJar0, httpUrl0, headers0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, headers0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "vary";
      String string1 = "m}^f6P^!Zpa_";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = stringArray0[0];
      stringArray0[4] = string1;
      stringArray0[5] = string1;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      Headers headers0 = Headers.of(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotNull(headers0);
      assertEquals(4, headers0.size());
      
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(8, stringArray0.length);
      assertNotNull(headers1);
      assertNotSame(headers0, headers1);
      assertNotSame(headers1, headers0);
      assertEquals(4, headers0.size());
      assertEquals(3, headers1.size());
      assertFalse(headers1.equals((Object)headers0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "m}^f6P^!Zpa_";
      int int0 = 2147483645;
      int int1 = HttpHeaders.parseSeconds(string0, int0);
      assertEquals(2147483645, int1);
      assertTrue(int1 == int0);
      
      Headers headers0 = mock(Headers.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string0, string0, string0).when(headers0).name(anyInt());
      doReturn(int1).when(headers0).size();
      // Undeclared exception!
      HttpHeaders.varyHeaders(headers0, headers0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      assertNotNull(headers0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, headers0.size());
      
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, headers0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders(response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "!OgqW;$A<IY";
      Headers headers0 = mock(Headers.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(headers0).get(anyString());
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength(response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Response response0 = null;
      try { 
        PrivateAccess.callMethod((Class<HttpHeaders>) HttpHeaders.class, (HttpHeaders) object0, "varyFields", (Object) response0, (Class<?>) Response.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll(response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }
}
