/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 21:00:59 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.MachineInput;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Machine_ESTest extends Machine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      int int0 = 7;
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)79;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-33);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byte byte4 = (byte) (-113);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byteArray0[6] = byteArray0[2];
      byte byte6 = (byte) (-54);
      byteArray0[7] = byte6;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, byte5);
      assertArrayEquals(new byte[] {(byte)79, (byte)0, (byte) (-33), (byte)0, (byte) (-113), (byte)0, (byte) (-33), (byte) (-54)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(byte5 == byte4);
      assertFalse(byte5 == byte2);
      assertFalse(byte5 == byte6);
      assertFalse(byte5 == byte0);
      
      int[] intArray0 = rE2_0.findIndex(string0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      
      MachineInput machineInput0 = MachineInput.fromUTF16(string0);
      assertNotNull(machineInput0);
      
      int int1 = (-2694);
      int int2 = 0;
      int int3 = 2;
      int int4 = machineInput0.index(rE2_0, byteArray0[4]);
      assertEquals(113, int4);
      assertArrayEquals(new byte[] {(byte)79, (byte)0, (byte) (-33), (byte)0, (byte) (-113), (byte)0, (byte) (-33), (byte) (-54)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("", rE2_0.toString());
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      
      boolean boolean1 = machine0.match(machineInput0, int2, int3);
      assertTrue(boolean1);
      assertEquals("", rE2_0.toString());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = machine0.match(machineInput0, int0, int1);
      assertFalse(boolean2);
      assertEquals("", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int5 = (-2317);
      // Undeclared exception!
      try { 
        machine0.init(int5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "<UYd}&i3.$]X3`Q%";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("<UYd}&i3.$]X3`Q%", rE2_0.toString());
      
      MachineInput machineInput0 = MachineInput.fromUTF16(string0);
      assertNotNull(machineInput0);
      
      int int0 = 0;
      String string1 = "";
      boolean boolean0 = RE2.match(string1, string0);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int1 = (-3626);
      int int2 = 0;
      int[] intArray0 = rE2_0.findSubmatchIndex(string0);
      assertNull(intArray0);
      assertEquals("<UYd}&i3.$]X3`Q%", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      int int3 = machineInput0.endPos();
      assertEquals(16, int3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertNotSame(string0, string1);
      
      int int4 = 1;
      int int5 = 0;
      int int6 = 507;
      int int7 = machineInput0.endPos();
      assertEquals(16, int7);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertTrue(int7 == int3);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int1);
      assertNotSame(string0, string1);
      
      int int8 = 0;
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)9;
      byteArray0[2] = byte2;
      byte byte3 = (byte)104;
      byteArray0[3] = byte3;
      byte byte4 = (byte)119;
      byteArray0[4] = byte4;
      byte byte5 = (byte)69;
      byteArray0[5] = byte5;
      String string1 = "RY7f35Xr;FqjIA,G";
      rE2_0.prefix = string1;
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)9, (byte)104, (byte)119, (byte)69}, byteArray0);
      assertEquals(2, intArray0.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      
      int[] intArray1 = machine0.submatches();
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertEquals("", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(string0, string1);
      assertNotSame(intArray1, intArray0);
      
      MachineInput machineInput0 = MachineInput.fromUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)9, (byte)104, (byte)119, (byte)69}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(machineInput0);
      
      int int0 = (-1485);
      // Undeclared exception!
      try { 
        machine0.match(machineInput0, int0, byteArray0[3]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1485
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "com.google.re2j.Machine$1";
      int int0 = 1738;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      
      int int1 = 7;
      boolean boolean1 = rE2_0.match(string0);
      assertTrue(boolean1);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = RE2.match(string0, string0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch(string0, int0);
      assertNotNull(list0);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(int0 == int1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)19;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-52);
      byteArray0[1] = byte1;
      byte byte2 = (byte)16;
      byteArray0[2] = byte2;
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      assertFalse(int0 == int1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      
      int int2 = 1;
      int int3 = 25;
      MachineInput machineInput0 = MachineInput.fromUTF16(string0, int2, int3);
      assertNotNull(machineInput0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      boolean boolean3 = machine0.match(machineInput0, byte2, byteArray0[0]);
      assertFalse(boolean3);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-52), (byte)16}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      
      int[] intArray0 = machine0.submatches();
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "Zem.t8qXg+U99ZWCq(#";
      int int0 = 1459;
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("Zem.t8qXg+U99ZWCq(#", rE2_0.toString());
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("Zem.t8qXg+U99ZWCq(#", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)59;
      MachineInput machineInput0 = MachineInput.fromUTF16(string0);
      assertNotNull(machineInput0);
      
      int int1 = (-2279);
      boolean boolean1 = machine0.match(machineInput0, int0, int1);
      assertFalse(boolean1);
      assertEquals("Zem.t8qXg+U99ZWCq(#", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
      
      int int2 = 2169;
      int int3 = (-172);
      boolean boolean2 = machine0.match(machineInput0, int2, int3);
      assertFalse(boolean2);
      assertEquals("Zem.t8qXg+U99ZWCq(#", rE2_0.toString());
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = "^O+:B\\gU4&V;-MVzba";
      String string2 = rE2_0.find(string1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("Zem.t8qXg+U99ZWCq(#", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      int int4 = (-974);
      boolean boolean3 = true;
      rE2_0.longest = boolean3;
      assertEquals("Zem.t8qXg+U99ZWCq(#", rE2_0.toString());
      
      MachineInput machineInput1 = MachineInput.fromUTF8(byteArray0, byteArray0[0], int4);
      assertArrayEquals(new byte[] {(byte)59, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(machineInput1);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(machineInput1.equals((Object)machineInput0));
      
      int int5 = 0;
      boolean boolean4 = machine0.match(machineInput1, int5, int4);
      assertFalse(boolean4);
      assertArrayEquals(new byte[] {(byte)59, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("Zem.t8qXg+U99ZWCq(#", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int5);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int5);
      assertFalse(int4 == int3);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(machineInput1.equals((Object)machineInput0));
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      int[] intArray0 = machine0.submatches();
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertEquals("Zem.t8qXg+U99ZWCq(#", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int5);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean4);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      boolean boolean5 = machine0.match(machineInput1, int4, byte0);
      assertFalse(boolean5);
      assertArrayEquals(new byte[] {(byte)59, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("Zem.t8qXg+U99ZWCq(#", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int5);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int5);
      assertFalse(int4 == int3);
      assertFalse(boolean0 == boolean4);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(machineInput1.equals((Object)machineInput0));
      assertFalse(byte0 == byte1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ";_3jhbJUVD";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals(";_3jhbJUVD", rE2_0.toString());
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals(";_3jhbJUVD", rE2_0.toString());
      
      int[] intArray0 = machine0.submatches();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertEquals(";_3jhbJUVD", rE2_0.toString());
      
      MachineInput machineInput0 = MachineInput.fromUTF16(string0);
      assertNotNull(machineInput0);
      
      int int0 = (-8);
      int int1 = 1;
      boolean boolean0 = machine0.match(machineInput0, int0, int1);
      assertFalse(boolean0);
      assertEquals(";_3jhbJUVD", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("", rE2_0.toString());
      
      int int0 = 63;
      String string1 = RE2.quoteMeta(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int1 = 1094;
      machine0.init(int1);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      
      MachineInput machineInput0 = MachineInput.fromUTF16(string0, int0, int0);
      assertNotNull(machineInput0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertNotSame(string0, string1);
      
      int int2 = 1022;
      boolean boolean0 = machine0.match(machineInput0, int2, int0);
      assertFalse(boolean0);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(string0, string1);
      
      int int3 = 1;
      boolean boolean1 = machine0.match(machineInput0, int0, int0);
      assertFalse(boolean1);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertTrue(boolean1 == boolean0);
      assertNotSame(string0, string1);
      
      boolean boolean2 = machine0.match(machineInput0, int3, int2);
      assertFalse(boolean2);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(string0, string1);
      
      RE2 rE2_1 = RE2.compile(string1);
      assertNotNull(rE2_1);
      assertEquals("", rE2_1.toString());
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(rE2_1, rE2_0);
      
      int[] intArray0 = machine0.submatches();
      assertEquals(1094, intArray0.length);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string1));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertNotSame(string0, string1);
      assertNotSame(rE2_0, rE2_1);
      
      boolean boolean3 = machine0.match(machineInput0, int0, int2);
      assertFalse(boolean3);
      assertEquals("", rE2_0.toString());
      assertTrue(string0.equals((Object)string1));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNotSame(string0, string1);
      assertNotSame(rE2_0, rE2_1);
      
      int int4 = 0;
      boolean boolean4 = machine0.match(machineInput0, int4, int2);
      assertTrue(boolean4);
      assertEquals("", rE2_0.toString());
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(string0.equals((Object)string1));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertNotSame(string0, string1);
      assertNotSame(rE2_0, rE2_1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "H&XlQd";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("H&XlQd", rE2_0.toString());
      
      boolean boolean0 = false;
      String string1 = "*9/eYS`%\"()7";
      int int0 = 2;
      List<int[]> list0 = rE2_0.findAllSubmatchIndex(string1, int0);
      assertNull(list0);
      assertEquals("H&XlQd", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      rE2_0.prefixComplete = boolean0;
      assertEquals("H&XlQd", rE2_0.toString());
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("H&XlQd", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      
      MachineInput machineInput0 = null;
      boolean boolean1 = machine0.match(machineInput0, int0, int0);
      assertFalse(boolean1);
      assertEquals("H&XlQd", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string0, string1);
      
      MachineInput machineInput1 = MachineInput.fromUTF16(string1);
      assertNotNull(machineInput1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      rE2_0.longest = boolean0;
      assertEquals("H&XlQd", rE2_0.toString());
      
      int int1 = machineInput1.index(rE2_0, int0);
      assertEquals((-1), int1);
      assertEquals("H&XlQd", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "flTft/a:8A^";
      String string3 = rE2_0.find(string2);
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("H&XlQd", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      boolean boolean2 = machineInput1.canCheckPrefix();
      assertTrue(boolean2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      
      int int2 = 1450;
      boolean boolean3 = machine0.match(machineInput1, int0, int2);
      assertFalse(boolean3);
      assertEquals("H&XlQd", rE2_0.toString());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      
      machine0.init(int0);
      assertEquals("H&XlQd", rE2_0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      // Undeclared exception!
      try { 
        machine0.match(machineInput0, int1, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "hpaTk+gv";
      int int0 = 84;
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("hpaTk+gv", rE2_0.toString());
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("hpaTk+gv", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = rE2_0.findSubmatchIndex(string0);
      assertNull(intArray0);
      assertEquals("hpaTk+gv", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "CAPTURE";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("CAPTURE", rE2_0.toString());
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("CAPTURE", rE2_0.toString());
      
      int int0 = 0;
      machine0.init(int0);
      assertEquals("CAPTURE", rE2_0.toString());
      
      MachineInput machineInput0 = MachineInput.fromUTF16(string0);
      assertNotNull(machineInput0);
      
      int int1 = (-827);
      int int2 = 3623;
      // Undeclared exception!
      try { 
        machine0.match(machineInput0, int1, int2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = null;
      Machine machine0 = null;
      try {
        machine0 = new Machine(rE2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "9`QK*VI5|X*lWHE ";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("9`QK*VI5|X*lWHE ", rE2_0.toString());
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("9`QK*VI5|X*lWHE ", rE2_0.toString());
      
      String string1 = "Han";
      String string2 = rE2_0.replaceAll(string0, string1);
      assertEquals("9`QK*VI5|X*Han", string2);
      assertNotNull(string2);
      assertEquals("9`QK*VI5|X*lWHE ", rE2_0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int0 = 582;
      machine0.init(int0);
      assertEquals("9`QK*VI5|X*lWHE ", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      MachineInput machineInput0 = null;
      Machine machine1 = rE2_0.get();
      assertNotNull(machine1);
      assertEquals("9`QK*VI5|X*lWHE ", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(machine1.equals((Object)machine0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(machine1, machine0);
      
      int int1 = 2096;
      rE2_0.put(machine1);
      assertEquals("9`QK*VI5|X*lWHE ", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(machine1.equals((Object)machine0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(machine1, machine0);
      
      int int2 = (-1670);
      // Undeclared exception!
      try { 
        machine0.init(int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "sd^?HeE&qsd4JTF8=";
      RE2 rE2_0 = new RE2(string0);
      assertNotNull(rE2_0);
      assertEquals("sd^?HeE&qsd4JTF8=", rE2_0.toString());
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("sd^?HeE&qsd4JTF8=", rE2_0.toString());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-5);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-86);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)19;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-97);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-95);
      byteArray0[5] = byte5;
      MachineInput machineInput0 = MachineInput.fromUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-86), (byte) (-1), (byte)19, (byte) (-97), (byte) (-95)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(machineInput0);
      
      int int0 = (-1);
      int int1 = 3669;
      // Undeclared exception!
      try { 
        machine0.match(machineInput0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "com.google.re2j.Machine$1";
      int int0 = 1738;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      
      int int1 = 0;
      int int2 = 7;
      boolean boolean1 = rE2_0.match(string0);
      assertTrue(boolean1);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = RE2.match(string0, string0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      machine0.init(int2);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      List<String[]> list0 = rE2_0.findAllSubmatch(string0, int0);
      assertNotNull(list0);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      
      machine0.init(int1);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      int[] intArray0 = machine0.submatches();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      
      int[] intArray1 = machine0.submatches();
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertSame(intArray1, intArray0);
      
      int[] intArray2 = machine0.submatches();
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)19;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-52);
      byteArray0[1] = byte1;
      byte byte2 = (byte)16;
      byteArray0[2] = byte2;
      MachineInput machineInput0 = MachineInput.fromUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-52), (byte)16}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(machineInput0);
      
      boolean boolean3 = machine0.match(machineInput0, byteArray0[2], int0);
      assertFalse(boolean3);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-52), (byte)16}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = ";_3jk.*bJUVD";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals(";_3jk.*bJUVD", rE2_0.toString());
      
      int int0 = 1123;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)35;
      byteArray0[0] = byte0;
      byte byte1 = (byte)7;
      byte byte2 = (byte)65;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[6] = byte4;
      byte byte5 = (byte)11;
      byteArray0[5] = byte5;
      byte byte6 = (byte)6;
      byteArray0[6] = byte6;
      byte byte7 = (byte)36;
      byteArray0[7] = byte7;
      byteArray0[8] = byte7;
      int int1 = 5;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, int1);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)65, (byte)1, (byte)0, (byte)11, (byte)6, (byte)36, (byte)36}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNull(list0);
      assertEquals(";_3jk.*bJUVD", rE2_0.toString());
      assertFalse(int1 == int0);
      
      List<String[]> list1 = rE2_0.findAllSubmatch(string0, int0);
      assertNotNull(list1);
      assertEquals(";_3jk.*bJUVD", rE2_0.toString());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(int0 == int1);
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals(";_3jk.*bJUVD", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "RUNE_ANY";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("RUNE_ANY", rE2_0.toString());
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("RUNE_ANY", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match(string0);
      assertTrue(boolean0);
      assertEquals("RUNE_ANY", rE2_0.toString());
      
      int int0 = (-578);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "_:UVW";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("_:UVW", rE2_0.toString());
      
      String string1 = rE2_0.replaceAll(string0, string0);
      assertEquals("_:UVW", string1);
      assertNotNull(string1);
      assertEquals("_:UVW", rE2_0.toString());
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("_:UVW", rE2_0.toString());
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "_b:JUVW";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("_b:JUVW", rE2_0.toString());
      
      String string1 = rE2_0.replaceAll(string0, string0);
      assertEquals("_b:JUVW", string1);
      assertNotNull(string1);
      assertEquals("_b:JUVW", rE2_0.toString());
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("_b:JUVW", rE2_0.toString());
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "<UYd}&i3.$]X3`Q%";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertNotNull(rE2_0);
      assertEquals("<UYd}&i3.$]X3`Q%", rE2_0.toString());
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("<UYd}&i3.$]X3`Q%", rE2_0.toString());
      
      MachineInput machineInput0 = MachineInput.fromUTF16(string0);
      assertNotNull(machineInput0);
      
      int int0 = 0;
      int int1 = (-3626);
      boolean boolean0 = machine0.match(machineInput0, int0, int1);
      assertFalse(boolean0);
      assertEquals("<UYd}&i3.$]X3`Q%", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 0;
      machine0.init(int2);
      assertEquals("<UYd}&i3.$]X3`Q%", rE2_0.toString());
      assertFalse(int2 == int1);
      
      int[] intArray0 = rE2_0.findSubmatchIndex(string0);
      assertNull(intArray0);
      assertEquals("<UYd}&i3.$]X3`Q%", rE2_0.toString());
      
      int int3 = machineInput0.endPos();
      assertEquals(16, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = 1;
      int int5 = 0;
      int int6 = 507;
      machine0.init(int6);
      assertEquals("<UYd}&i3.$]X3`Q%", rE2_0.toString());
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      
      int int7 = machineInput0.endPos();
      assertEquals(16, int7);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertTrue(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      
      int int8 = 0;
      boolean boolean1 = machine0.match(machineInput0, int8, int5);
      assertFalse(boolean1);
      assertEquals("<UYd}&i3.$]X3`Q%", rE2_0.toString());
      assertFalse(int8 == int7);
      assertFalse(int8 == int3);
      assertFalse(int8 == int6);
      assertFalse(int8 == int4);
      assertFalse(int8 == int1);
      assertTrue(boolean1 == boolean0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int6);
      assertFalse(int5 == int4);
      assertFalse(int5 == int7);
      assertFalse(int5 == int3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "$^g]pm Z]di0Ju";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("$^g]pm Z]di0Ju", rE2_0.toString());
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("$^g]pm Z]di0Ju", rE2_0.toString());
      
      int int0 = 6;
      int int1 = 0;
      MachineInput machineInput0 = MachineInput.fromUTF16(string0, int0, int1);
      assertNotNull(machineInput0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string1 = "'";
      String string2 = "";
      String string3 = rE2_0.replaceFirst(string1, string2);
      assertEquals("'", string3);
      assertNotNull(string3);
      assertEquals("$^g]pm Z]di0Ju", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      boolean boolean0 = rE2_0.match(string3);
      assertFalse(boolean0);
      assertEquals("$^g]pm Z]di0Ju", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      int int2 = (-4594);
      boolean boolean1 = machine0.match(machineInput0, int1, int2);
      assertFalse(boolean1);
      assertEquals("$^g]pm Z]di0Ju", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(boolean1 == boolean0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      
      int int3 = (-15);
      int int4 = 1;
      boolean boolean2 = machine0.match(machineInput0, int3, int4);
      assertFalse(boolean2);
      assertEquals("$^g]pm Z]di0Ju", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      
      int int5 = 0;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[1] = byte0;
      byte byte1 = (byte)15;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-63);
      MachineInput machineInput1 = MachineInput.fromUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(machineInput1);
      assertFalse(machineInput1.equals((Object)machineInput0));
      
      int int6 = (-1);
      // Undeclared exception!
      try { 
        machine0.match(machineInput1, int6, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile(string0);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)32;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-112);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-83);
      byteArray0[3] = byte3;
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-112), (byte)0, (byte) (-83)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertEquals("", rE2_0.toString());
      
      MachineInput machineInput0 = MachineInput.fromUTF16(string0);
      assertNotNull(machineInput0);
      
      int int0 = 0;
      boolean boolean0 = machineInput0.canCheckPrefix();
      assertTrue(boolean0);
      
      boolean boolean1 = machine0.match(machineInput0, int0, int0);
      assertTrue(boolean1);
      assertEquals("", rE2_0.toString());
      assertTrue(boolean1 == boolean0);
      
      int int1 = 0;
      int int2 = (-1721);
      boolean boolean2 = machine0.match(machineInput0, int1, int2);
      assertTrue(boolean2);
      assertEquals("", rE2_0.toString());
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = true;
      rE2_0.longest = boolean3;
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = machine0.submatches();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      
      int int3 = 4;
      machine0.init(int3);
      assertEquals("", rE2_0.toString());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = 0;
      machine0.init(int4);
      assertEquals("", rE2_0.toString());
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      
      int[] intArray1 = machine0.submatches();
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertEquals("", rE2_0.toString());
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "\\x{";
      int int0 = 2;
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("\\x{", rE2_0.toString());
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("\\x{", rE2_0.toString());
      
      int int1 = 0;
      int[] intArray0 = new int[4];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      int int2 = (-22);
      intArray0[3] = int2;
      int int3 = (-1499);
      boolean boolean1 = rE2_0.match(string0, int0, int1, int0, intArray0, int3);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {0, 0, 0, (-22)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("\\x{", rE2_0.toString());
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray1 = machine0.submatches();
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertEquals("\\x{", rE2_0.toString());
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      String string1 = "NOP";
      String string2 = RE2.quoteMeta(string1);
      assertEquals("NOP", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      int[] intArray2 = machine0.submatches();
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertEquals(2, intArray2.length);
      assertNotNull(intArray2);
      assertEquals("\\x{", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      MachineInput machineInput0 = MachineInput.fromUTF16(string0);
      assertNotNull(machineInput0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      int int4 = 970;
      boolean boolean2 = machine0.match(machineInput0, int4, int4);
      assertFalse(boolean2);
      assertEquals("\\x{", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean0 == boolean1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      int int5 = machineInput0.endPos();
      assertEquals(3, int5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      int int6 = 0;
      int int7 = 3;
      MachineInput machineInput1 = MachineInput.fromUTF16(string1, int6, int7);
      assertNotNull(machineInput1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int7);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertTrue(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(machineInput1.equals((Object)machineInput0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(machineInput1, machineInput0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      byte[] byteArray0 = new byte[0];
      MachineInput machineInput2 = MachineInput.fromUTF8(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(machineInput2);
      assertFalse(machineInput2.equals((Object)machineInput0));
      assertFalse(machineInput2.equals((Object)machineInput1));
      
      boolean boolean3 = machine0.match(machineInput0, intArray0[2], int0);
      assertTrue(boolean3);
      assertArrayEquals(new int[] {0, 0, 0, (-22)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("\\x{", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int6);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int7);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int5);
      assertFalse(machineInput0.equals((Object)machineInput1));
      assertFalse(machineInput0.equals((Object)machineInput2));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(machineInput0, machineInput1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      
      int int8 = 668;
      boolean boolean4 = machine0.match(machineInput0, int8, int1);
      assertFalse(boolean4);
      assertEquals("\\x{", rE2_0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int6);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int7);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int5);
      assertFalse(int0 == int8);
      assertFalse(machineInput0.equals((Object)machineInput1));
      assertFalse(machineInput0.equals((Object)machineInput2));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean3);
      assertFalse(int1 == int5);
      assertFalse(int1 == int7);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int8);
      assertFalse(int1 == int4);
      assertFalse(int1 == int0);
      assertFalse(int8 == int2);
      assertFalse(int8 == int5);
      assertFalse(int8 == int3);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int0);
      assertFalse(int8 == int6);
      assertFalse(int8 == int4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(machineInput0, machineInput1);
      
      // Undeclared exception!
      try { 
        machine0.init(intArray0[3]);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "QeUPJl:xvT^C7cPU5;k";
      int int0 = 1969;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertNotNull(rE2_0);
      assertEquals("QeUPJl:xvT^C7cPU5;k", rE2_0.toString());
      
      rE2_0.prefixComplete = boolean0;
      assertEquals("QeUPJl:xvT^C7cPU5;k", rE2_0.toString());
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("QeUPJl:xvT^C7cPU5;k", rE2_0.toString());
      
      MachineInput machineInput0 = MachineInput.fromUTF16(string0);
      assertNotNull(machineInput0);
      
      int int1 = 293;
      int int2 = 0;
      boolean boolean1 = machine0.match(machineInput0, int1, int2);
      assertFalse(boolean1);
      assertEquals("QeUPJl:xvT^C7cPU5;k", rE2_0.toString());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(boolean1 == boolean0);
      
      machine0.init(int0);
      assertEquals("QeUPJl:xvT^C7cPU5;k", rE2_0.toString());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(boolean0 == boolean1);
  }
}
