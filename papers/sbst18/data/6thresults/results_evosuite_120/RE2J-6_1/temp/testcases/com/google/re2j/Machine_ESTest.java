/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:26:07 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.MachineInput;
import com.google.re2j.Prog;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Machine_ESTest extends Machine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int int0 = 0;
      int int1 = 97;
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        rE2_0.match(string0, int0, int0, int1, intArray0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "phP<^J^";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertEquals("phP<^J^", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int int0 = 1;
      Machine machine0 = new Machine(rE2_0);
      assertEquals("phP<^J^", rE2_0.toString());
      assertNotNull(machine0);
      
      byte[] byteArray0 = new byte[1];
      int int1 = 601;
      MachineInput machineInput0 = MachineInput.fromUTF8(byteArray0, int1, int0);
      assertEquals(1, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(machineInput0);
      
      int int2 = machineInput0.step(int0);
      assertEquals(1, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-8), int2);
      
      boolean boolean0 = machine0.match(machineInput0, int2, byteArray0[0]);
      assertEquals(1, byteArray0.length);
      assertEquals("phP<^J^", rE2_0.toString());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)9;
      byteArray0[0] = byte0;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, byteArray0[0]);
      assertEquals(8, byteArray0.length);
      assertEquals("", rE2_0.toString());
      assertEquals(9, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      int int0 = (-2968);
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-112);
      byteArray0[6] = byte0;
      Machine machine0 = new Machine(rE2_0);
      assertEquals("", rE2_0.toString());
      assertNotNull(machine0);
      
      MachineInput machineInput0 = null;
      int int1 = 2;
      boolean boolean1 = machine0.match(machineInput0, byteArray0[6], int1);
      assertEquals(7, byteArray0.length);
      assertEquals("", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-112)}, byteArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      int int0 = (-2968);
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = new Machine(rE2_0);
      assertEquals("", rE2_0.toString());
      assertNotNull(machine0);
      
      int[] intArray0 = machine0.submatches();
      assertEquals(2, intArray0.length);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("", rE2_0.toString());
      assertNotNull(machine0);
      
      int int0 = 0;
      machine0.init(int0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = machine0.submatches();
      assertEquals(0, intArray0.length);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "phP<^J^";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertEquals("phP<^J^", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = new Machine(rE2_0);
      assertEquals("phP<^J^", rE2_0.toString());
      assertNotNull(machine0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)7;
      int int0 = 1087;
      MachineInput machineInput0 = MachineInput.fromUTF16(string0, byte0, int0);
      assertNotNull(machineInput0);
      
      // Undeclared exception!
      try { 
        machine0.match(machineInput0, byteArray0[0], byteArray0[0]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = ":";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertEquals(":", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = rE2_0.get();
      assertEquals(":", rE2_0.toString());
      assertNotNull(machine0);
      
      MachineInput machineInput0 = null;
      int int0 = (-808);
      // Undeclared exception!
      try { 
        machine0.match(machineInput0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "e##BQzE -3I/";
      int int0 = 1;
      boolean boolean0 = true;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertEquals("e##BQzE -3I/", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      Machine machine0 = new Machine(rE2_0);
      assertEquals("e##BQzE -3I/", rE2_0.toString());
      assertNotNull(machine0);
      
      MachineInput machineInput0 = MachineInput.fromUTF8(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(machineInput0);
      
      int int1 = (-172);
      // Undeclared exception!
      try { 
        machine0.match(machineInput0, int1, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -172
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "8u8U%q{jTM";
      RE2 rE2_0 = RE2.compile(string0);
      assertEquals("8u8U%q{jTM", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("8u8U%q{jTM", rE2_0.toString());
      assertNotNull(machine0);
      
      int int0 = (-2100);
      // Undeclared exception!
      try { 
        machine0.init(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = null;
      Machine machine0 = null;
      try {
        machine0 = new Machine(rE2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int int0 = 0;
      int[] intArray0 = new int[2];
      boolean boolean0 = rE2_0.match(string0, int0, int0, int0, intArray0, intArray0[1]);
      assertEquals(2, intArray0.length);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "phP<^J^";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertEquals("phP<^J^", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex(string0);
      assertEquals("phP<^J^", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "O*F,S}poh=_!CMN/l{";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertEquals("O*F,S}poh=_!CMN/l{", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findIndex(string0);
      assertEquals(2, intArray0.length);
      assertEquals("O*F,S}poh=_!CMN/l{", rE2_0.toString());
      assertArrayEquals(new int[] {2, 18}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "W!%\"6Es7V=Hc{n+E";
      int int0 = 2339;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertEquals("W!%\"6Es7V=Hc{n+E", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("W!%\"6Es7V=Hc{n+E", rE2_0.toString());
      assertNotNull(machine0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      MachineInput machineInput0 = MachineInput.fromUTF8(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(machineInput0);
      
      Prog prog0 = new Prog();
      assertNotNull(prog0);
      
      PrivateAccess.setVariable((Class<Machine>) Machine.class, machine0, "prog", (Object) prog0);
      assertEquals("W!%\"6Es7V=Hc{n+E", rE2_0.toString());
      
      boolean boolean1 = machine0.match(machineInput0, byte0, int0);
      assertEquals(4, byteArray0.length);
      assertEquals("W!%\"6Es7V=Hc{n+E", rE2_0.toString());
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "PY";
      RE2 rE2_0 = RE2.compile(string0);
      assertEquals("PY", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = new Machine(rE2_0);
      assertEquals("PY", rE2_0.toString());
      assertNotNull(machine0);
      
      int int0 = 0;
      rE2_0.prefixRune = int0;
      assertEquals("PY", rE2_0.toString());
      
      MachineInput machineInput0 = MachineInput.fromUTF16(string0);
      assertNotNull(machineInput0);
      
      int int1 = 2;
      boolean boolean0 = machine0.match(machineInput0, rE2_0.prefixRune, int1);
      assertEquals("PY", rE2_0.toString());
      assertFalse(int1 == int0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      int int0 = (-2968);
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[7];
      boolean boolean1 = rE2_0.matchUTF8(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("", rE2_0.toString());
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "RUNE";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertEquals("RUNE", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string1 = "QR=mpz";
      String[] stringArray0 = rE2_0.findSubmatch(string1);
      assertEquals("RUNE", rE2_0.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "PY";
      RE2 rE2_0 = RE2.compile(string0);
      assertEquals("PY", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = new Machine(rE2_0);
      assertEquals("PY", rE2_0.toString());
      assertNotNull(machine0);
      
      int int0 = 0;
      MachineInput machineInput0 = MachineInput.fromUTF16(string0);
      assertNotNull(machineInput0);
      
      boolean boolean0 = machine0.match(machineInput0, int0, int0);
      assertEquals("PY", rE2_0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "psd%Gug|&o\"'vY";
      RE2 rE2_0 = RE2.compile(string0);
      assertEquals("psd%Gug|&o\"'vY", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string1 = rE2_0.replaceFirst(string0, string0);
      assertEquals("psd%Gug|&o\"'vY", rE2_0.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("psd%Gug|&o\"'vY|&o\"'vY", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "^\\x00-\\x{10FFFF}";
      int int0 = 313;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertEquals("^\\x00-\\x{10FFFF}", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("^\\x00-\\x{10FFFF}", rE2_0.toString());
      assertNotNull(machine0);
      
      byte[] byteArray0 = new byte[7];
      MachineInput machineInput0 = MachineInput.fromUTF8(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(machineInput0);
      
      boolean boolean1 = machine0.match(machineInput0, byteArray0[2], byteArray0[0]);
      assertEquals(7, byteArray0.length);
      assertEquals("^\\x00-\\x{10FFFF}", rE2_0.toString());
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "W!%\"6Es7V=Hc{n+E";
      int int0 = 2339;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertEquals("W!%\"6Es7V=Hc{n+E", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("W!%\"6Es7V=Hc{n+E", rE2_0.toString());
      assertNotNull(machine0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      MachineInput machineInput0 = MachineInput.fromUTF8(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(machineInput0);
      
      int int1 = 1;
      boolean boolean1 = machine0.match(machineInput0, byte0, int1);
      assertEquals(4, byteArray0.length);
      assertEquals("W!%\"6Es7V=Hc{n+E", rE2_0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "PY";
      RE2 rE2_0 = RE2.compile(string0);
      assertEquals("PY", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = new Machine(rE2_0);
      assertEquals("PY", rE2_0.toString());
      assertNotNull(machine0);
      
      MachineInput machineInput0 = MachineInput.fromUTF16(string0);
      assertNotNull(machineInput0);
      
      int int0 = 2;
      boolean boolean0 = machine0.match(machineInput0, rE2_0.prefixRune, int0);
      assertEquals("PY", rE2_0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = ".h6t";
      RE2 rE2_0 = new RE2(string0);
      assertEquals(".h6t", rE2_0.toString());
      assertNotNull(rE2_0);
      
      Machine machine0 = rE2_0.get();
      assertEquals(".h6t", rE2_0.toString());
      assertNotNull(machine0);
      
      int int0 = 0;
      MachineInput machineInput0 = MachineInput.fromUTF16(string0, int0, int0);
      assertNotNull(machineInput0);
      
      boolean boolean0 = machine0.match(machineInput0, int0, int0);
      assertEquals(".h6t", rE2_0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "O*F,S}poh=_!CMN/l{";
      RE2 rE2_0 = RE2.compilePOSIX(string0);
      assertEquals("O*F,S}poh=_!CMN/l{", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.match(string0);
      assertEquals("O*F,S}poh=_!CMN/l{", rE2_0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "W!%\"6Es7V=Hc{n+E";
      int int0 = 2339;
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl(string0, int0, boolean0);
      assertEquals("W!%\"6Es7V=Hc{n+E", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex(string0, int0);
      assertEquals("W!%\"6Es7V=Hc{n+E", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }
}
