/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 21:35:42 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      String string0 = "[:lower:]";
      int int0 = 2;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse(string0, int0);
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse(string0, int0);
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      
      regexpArray0[4] = regexp4;
      String string1 = "(?P<";
      int int1 = 8;
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "[:^word:]";
      int int1 = 846;
      int int2 = 0;
      Regexp regexp0 = Parser.parse(string0, int2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int1);
      assertNotNull(regexp0);
      assertNotSame(string0, string1);
      
      int int3 = 159;
      Regexp regexp1 = Parser.parse(string0, int3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string0, string1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(string0, string1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      String string2 = "LL]wS#\"AGKkniUaP=";
      Regexp regexp3 = Parser.parse(string2, int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      int int4 = 2821;
      Regexp regexp4 = Parser.parse(string1, int4);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "mergeCharClass", (Object) regexp4, (Class<?>) Regexp.class, (Object) regexp4, (Class<?>) Regexp.class);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNull(object0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      
      Object object1 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "swapVerticalBar");
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertNotNull(object1);
      assertEquals(false, object1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp4;
      regexpArray0[1] = regexp3;
      Regexp regexp5 = null;
      Regexp regexp6 = null;
      try {
        regexp6 = new Regexp(regexp5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "CAPTURE";
      int int0 = 1779;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = null;
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "isValidCaptureName", (Object) string0, (Class<?>) String.class);
      assertNotNull(object0);
      assertEquals(true, object0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      try { 
        PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "collapse", (Object) regexpArray0, (Class<?>) Regexp[].class, (Object) regexp_Op0, (Class<?>) Regexp.Op.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "ETG/t@et9z8M|N\"skC";
      int int0 = (-3616);
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "CS(G7p;#4Ir}";
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "unicodeTable", (Object) string1, (Class<?>) String.class);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(object0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "[:rd:]";
      Regexp regexp0 = Parser.parse(string2, int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(regexp0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int1 = (-206);
      Regexp regexp1 = Parser.parse(string0, int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(regexp1, regexp0);
      
      String string3 = "com.google.re2j.Parser$1";
      int int2 = 10;
      Regexp regexp2 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      int int3 = 3946;
      Regexp regexp4 = Parser.parse(string2, int3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      
      String string4 = "";
      Regexp regexp5 = Parser.parse(string4, int0);
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp3);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      
      String string5 = "3";
      Regexp regexp6 = Parser.parse(string5, int0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp2));
      assertNotNull(regexp6);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp2);
      
      String string6 = "8";
      Regexp regexp7 = Parser.parse(string6, int0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp2));
      assertNotNull(regexp7);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp2);
      
      String string7 = "bVXD#|";
      int int4 = 1;
      Regexp regexp8 = Parser.parse(string7, int4);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp1));
      assertNotNull(regexp8);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp1);
      
      String string8 = "~7/\"]_?%y4,$F;3[";
      int int5 = 0;
      try { 
        Parser.parse(string8, int5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      int int0 = 3783;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "removeLeadingString", (Object) regexp0, (Class<?>) Regexp.class, (Object) int0, (Class<?>) int.class);
      assertNotNull(object0);
      assertSame(regexp0, object0);
      assertSame(object0, regexp0);
      
      String string1 = ";SUCtDE";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)object0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string1, string0);
      assertNotSame(regexp1, object0);
      assertNotSame(regexp1, regexp0);
      
      String string2 = "";
      Regexp regexp2 = Parser.parse(string2, int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)object0));
      assertNotNull(regexp2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, object0);
      
      Regexp regexp3 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)object0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(regexp3, object0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      int int1 = 0;
      Regexp regexp4 = Parser.parse(string0, int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)object0));
      assertTrue(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(regexp4, object0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int1, int1);
      assertFalse(int1 == int0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(0, regexpArray0.length);
      assertEquals(0, regexpArray1.length);
      
      String string3 = "$/x@>z]L'84\\r";
      Regexp regexp5 = Parser.parse(string3, int1);
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)object0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, object0);
      assertNotSame(regexp5, regexp3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      int int2 = 1467;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "jvE8i";
      int int0 = 2;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      int int1 = 169;
      Regexp regexp1 = Parser.parse(string0, int1);
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      int int2 = 3313;
      int int3 = 1799;
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "maybeConcat", (Object) int2, (Class<?>) int.class, (Object) int3, (Class<?>) int.class);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      regexp0.reinit();
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      Object object1 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "alternate");
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(object1.equals((Object)regexp1));
      assertFalse(object1.equals((Object)regexp0));
      assertNotNull(object1);
      assertNotSame(object1, regexp1);
      assertNotSame(object1, regexp0);
      
      String string1 = "@SSG";
      Regexp regexp2 = Parser.parse(string1, int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp2.equals((Object)object1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(string1, string0);
      assertNotSame(regexp2, object1);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      int int4 = 0;
      try { 
        PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "matchRune", (Object) regexp0, (Class<?>) Regexp.class, (Object) int4, (Class<?>) int.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "z${+>bB";
      int int0 = 2086;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "3C?Z^6BltQ;S;";
      int int1 = 632;
      Regexp regexp1 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(string0, string1);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      regexp1.min = int1;
      String string2 = ",j:8kh";
      Regexp regexp3 = Parser.parse(string2, int0);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      int int2 = 0;
      regexp3.flags = int2;
      regexp2.reinit();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string3 = "~JGm7+MkcF{9";
      int int3 = 3;
      Regexp regexp4 = Parser.parse(string3, int3);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      int int4 = 950;
      Regexp regexp5 = Parser.parse(string3, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      String string4 = null;
      Regexp regexp6 = Parser.parse(string3, regexp1.min);
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int1 == int4);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp5));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(regexp6);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(regexp1, regexp6);
      assertNotSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp5);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      // Undeclared exception!
      try { 
        Parser.parse(string4, int4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "vmMeY2{6 5wAW";
      int int0 = (-503);
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "isValidCaptureName", (Object) string0, (Class<?>) String.class);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      String string1 = "missing closing )";
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "ETG/t@et9z8M|N\"skC";
      int int0 = (-3616);
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "\\n";
      int int1 = (-835);
      Regexp regexp0 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotNull(regexp0);
      assertNotSame(string1, string0);
      
      int int2 = (-206);
      Regexp regexp1 = Parser.parse(string0, int2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string0, string1);
      assertNotSame(regexp1, regexp0);
      
      String string2 = "com.google.re2j.Parser$1";
      int int3 = 10;
      Regexp regexp2 = Parser.parse(string2, int3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      Regexp regexp4 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      
      String string3 = "com.google.re2j.UnicodeTables";
      int int4 = 3946;
      Regexp regexp5 = Parser.parse(string3, int4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertNotNull(regexp5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp1);
      
      String string4 = "";
      Regexp regexp6 = Parser.parse(string4, int0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotNull(regexp6);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp1);
      
      String string5 = "3";
      Regexp regexp7 = Parser.parse(string5, int0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp4));
      assertNotNull(regexp7);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp4);
      
      String string6 = "8";
      Regexp regexp8 = Parser.parse(string6, int0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp6));
      assertNotNull(regexp8);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp6);
      
      String string7 = "bVXD#|";
      int int5 = 1;
      Regexp regexp9 = Parser.parse(string7, int5);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp4));
      assertFalse(regexp9.equals((Object)regexp5));
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp8));
      assertNotNull(regexp9);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp4);
      assertNotSame(regexp9, regexp5);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp6);
      assertNotSame(regexp9, regexp8);
      
      String string8 = "~7/\"]_?%y4,$F;3[";
      int int6 = 0;
      try { 
        Parser.parse(string8, int6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "|pO5hwk@?EMC6,w0[e";
      int int0 = (-4146);
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "*";
      String string2 = "C";
      Regexp regexp1 = new Regexp(regexp0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse(string2, int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      int int1 = 0;
      Regexp regexp4 = Parser.parse(string2, int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      String string3 = "[:d:]";
      Regexp regexp5 = Parser.parse(string3, int1);
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertNotNull(regexp5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp5;
      int int2 = 0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int2, int1);
      assertFalse(int2 == int0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertFalse(int1 == int0);
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotSame(regexpArray0, regexpArray1);
      assertEquals(0, regexpArray1.length);
      assertEquals(4, regexpArray0.length);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "#vU:v<Y1S._v\\7\"YN\"";
      int int0 = 0;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      String string1 = "";
      int int1 = 0;
      Regexp regexp0 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(regexp0);
      assertNotSame(string1, string0);
      
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexpArray0[0]);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertEquals(6, regexpArray0.length);
      
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexpArray0[1]);
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertEquals(6, regexpArray0.length);
      
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp4 = new Regexp(regexp_Op1);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertNotNull(regexp4);
      
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      Regexp regexp5 = new Regexp(regexp_Op2);
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertNotNull(regexp5);
      
      regexpArray0[5] = regexp5;
      int int2 = 1;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int2, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(6, regexpArray0.length);
      assertEquals(0, regexpArray1.length);
      
      try { 
        Parser.parse(string0, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\7`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      String string0 = "|}^aYlKf!5;!IU\\}y@S";
      int int0 = 48;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      int int1 = 33;
      int int2 = 65;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "vtoMFXMqV!Gyr,%=qC*";
      int int0 = 0;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      int int1 = 993;
      Regexp regexp1 = Parser.parse(string0, int1);
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      regexpArray0[1] = regexp1;
      String string1 = "(?P<";
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "ETG/t@et9z8M|N\"skC";
      int int0 = (-3616);
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "(?(BYM^syX*a";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "G[f&q1Hg5six\\";
      int int0 = 2189;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      String string0 = "";
      int int0 = 1012;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      String string1 = "\\C";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\C`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "\\zW2|,Uf|R";
      int int0 = 0;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      int int1 = (-3186);
      Regexp regexp0 = Parser.parse(string0, int1);
      assertFalse(int1 == int0);
      assertNotNull(regexp0);
      
      String string1 = "FRX\\xF@0P";
      int int2 = 0;
      try { 
        Parser.parse(string1, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\xF@`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "invalid named capture";
      int int0 = (-2440);
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "\\P";
      int int1 = (-270);
      Parser parser0 = new Parser(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "5ReR?ip7'MJ";
      int int0 = (-1671);
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      int int1 = 26;
      Parser parser0 = new Parser(string0, int1);
      assertFalse(int1 == int0);
      assertNotNull(parser0);
      
      String string1 = "\\pM";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "~/m#$v197R?H0F@4lMD";
      int int0 = 3;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "2^TK@b![`dU{() ";
      int int1 = 1224;
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`dU{() `
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "FYA|.";
      int int0 = 0;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      int int1 = (-193);
      Regexp regexp0 = Parser.parse(string0, int1);
      assertFalse(int1 == int0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(int0 == int1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      int int2 = 1320;
      Regexp regexp2 = Parser.parse(string0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse(string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      
      Regexp regexp4 = Parser.parse(string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      
      int int3 = 391;
      Regexp regexp5 = Parser.parse(string0, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      
      String string1 = "~'gP)zju \">g3%p:'";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "u62iu!";
      int int0 = 2528;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      int int1 = 0;
      Regexp regexp0 = Parser.parse(string0, int1);
      assertFalse(int1 == int0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(int0 == int1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string1 = "Other_Lowercase";
      int int2 = 1282;
      Regexp regexp2 = Parser.parse(string1, int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(string1, string0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string2 = "G+=H]NCA";
      int int3 = 1;
      Regexp regexp3 = Parser.parse(string2, int3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      
      regexp2.cap = int2;
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      
      regexpArray0[0] = regexp4;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp2;
      regexp2.subs = regexpArray0;
      regexpArray0[3] = regexp3;
      regexpArray0[4] = regexp2;
      int int4 = 0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int4, int3);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotSame(regexpArray0, regexpArray1);
      assertEquals(1, regexpArray1.length);
      assertEquals(5, regexpArray0.length);
      
      Regexp regexp5 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertTrue(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp1));
      assertNotNull(regexp5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1282
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "Other_Default_Ignorable_Code_Point";
      int int0 = 0;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "VVBXO|V&6";
      int int1 = 0;
      Regexp regexp0 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(regexp0);
      assertNotSame(string1, string0);
      
      String string2 = "b";
      Regexp regexp1 = Parser.parse(string2, int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      Regexp regexp2 = new Regexp(regexpArray0[2]);
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertEquals(5, regexpArray0.length);
      
      regexpArray0[4] = regexp2;
      int int2 = 8512;
      int int3 = (-1038);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "*5j#@$&d(<~\"kK";
      int int0 = 0;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      int int0 = (-527);
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      int int1 = 0;
      Regexp regexp1 = Parser.parse(string0, int1);
      assertFalse(int1 == int0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse(string0, int0);
      assertFalse(int0 == int1);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse(string0, int0);
      assertFalse(int0 == int1);
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      int int2 = 2015;
      Regexp regexp4 = Parser.parse(string0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      String string1 = "06llWU6{";
      Regexp regexp5 = Parser.parse(string1, int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotNull(regexp5);
      assertNotSame(string1, string0);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      
      Regexp[] regexpArray0 = null;
      int int3 = (-2018);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int3, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "[V%D*RaZ@=p5,D*F%9";
      int int0 = 1329;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[V%D*RaZ@=p5,D*F%9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "h`!9>";
      int int0 = 1;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      int int1 = 1;
      Regexp regexp0 = Parser.parse(string0, int1);
      assertNotNull(regexp0);
      
      int int2 = 9085;
      Regexp regexp1 = Parser.parse(string0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      int int3 = 2251;
      Regexp regexp2 = Parser.parse(string0, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string1 = "";
      regexp2.name = string1;
      String string2 = ".Ya\\B*";
      int int4 = (-3387);
      Regexp regexp3 = Parser.parse(string2, int4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      
      String string3 = "com.google.re2j.Regexp";
      Regexp regexp4 = Parser.parse(string3, int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp2;
      int int5 = 1217;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int5, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "com.google.re2j.Parser$1";
      int int0 = 2472;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "9ky";
      int int1 = 1599;
      Regexp regexp1 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      Parser parser0 = new Parser(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotNull(parser0);
      
      String string2 = "";
      Regexp regexp2 = Parser.parse(string2, int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "t2Z\\T?\"";
      int int0 = (-1460);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\T`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "`R$MDDqG(:Ow=";
      int int0 = 1793;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): ``R$MDDqG(:Ow=`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "";
      int int0 = (-2046);
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      int int1 = 0;
      Regexp regexp1 = Parser.parse(string0, int1);
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string1 = "";
      Parser parser0 = new Parser(string1, int0);
      assertFalse(int0 == int1);
      assertNotNull(parser0);
      
      String string2 = null;
      int int2 = 0;
      // Undeclared exception!
      try { 
        Parser.parse(string2, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "z${+>bB";
      int int0 = 2086;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      int int1 = 632;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "u?\" XhhTVP1Y";
      int int0 = 583;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      String string1 = "7''%\\;{{C#:S#(/";
      int int1 = 23;
      Regexp regexp1 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      regexpArray0[1] = regexp1;
      int int2 = 4065;
      regexp1.min = int2;
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp2 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexp2.flags = int0;
      String string2 = "invalid character class";
      regexp1.name = string2;
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      regexpArray0[3] = regexp3;
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "factor", (Object) regexpArray0, (Class<?>) Regexp[].class, (Object) int0, (Class<?>) int.class);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotNull(object0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(regexpArray0, object0);
      assertEquals(4, regexpArray0.length);
      
      Object object1 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "reuse", (Object) regexpArray0[2], (Class<?>) Regexp.class);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(regexpArray0.equals((Object)object0));
      assertNull(object1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(regexpArray0, object0);
      assertEquals(4, regexpArray0.length);
      
      int int3 = 2574;
      regexp2.flags = int3;
      Object object2 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "isCharClass", (Object) regexp1, (Class<?>) Regexp.class);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertNotNull(object2);
      assertEquals(false, object2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp3);
      
      Object object3 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "isCharClass", (Object) regexpArray0[0], (Class<?>) Regexp.class);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(regexpArray0.equals((Object)object0));
      assertTrue(object3.equals((Object)object2));
      assertNotNull(object3);
      assertEquals(false, object3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(regexpArray0, object0);
      assertEquals(4, regexpArray0.length);
      
      Object object4 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "isCharClass", (Object) regexp0, (Class<?>) Regexp.class);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(object4.equals((Object)object3));
      assertTrue(object4.equals((Object)object2));
      assertNotNull(object4);
      assertEquals(false, object4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp3);
      
      String string3 = ":]";
      int int4 = 48;
      Object object5 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "literalRegexp", (Object) string3, (Class<?>) String.class, (Object) int4, (Class<?>) int.class);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(object5.equals((Object)regexp3));
      assertFalse(object5.equals((Object)regexp2));
      assertFalse(object5.equals((Object)regexp1));
      assertFalse(object5.equals((Object)regexp0));
      assertNotNull(object5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(object5, regexp3);
      assertNotSame(object5, regexp2);
      assertNotSame(object5, regexp1);
      assertNotSame(object5, regexp0);
      
      String string4 = "regexp/syntax: internal error";
      Regexp regexp4 = Parser.parse(string4, int3);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)object5));
      assertFalse(int3 == int1);
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, object5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      
      int int5 = 0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "vmMeY2{6 5wAW";
      int int0 = (-503);
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "8";
      Parser parser0 = new Parser(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(parser0);
      
      String string2 = "missing closing )";
      int int1 = 3159;
      Regexp regexp1 = Parser.parse(string2, int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(regexp1, regexp0);
      
      String string3 = "qUW)8&!m9RO\"fgU<a\\J";
      int int2 = 0;
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      String string0 = "VVBXO|V&6";
      int int1 = 0;
      Regexp regexp0 = Parser.parse(string0, int1);
      assertNotNull(regexp0);
      
      String string1 = "b";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[3] = regexp1;
      Regexp regexp2 = null;
      try {
        regexp2 = new Regexp(regexpArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      String string0 = "[:lower:]";
      int int0 = 2;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexpArray0[0]);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertEquals(9, regexpArray0.length);
      
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse(string0, int0);
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexpArray0[0]);
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertEquals(9, regexpArray0.length);
      
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      
      regexpArray0[4] = regexp4;
      String string1 = "[::]";
      int int1 = 8;
      Regexp regexp5 = Parser.parse(string1, int1);
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(string1, string0);
      
      regexpArray0[5] = regexp5;
      regexp5.min = int1;
      String string2 = ";lUpZ9>h2)dL'%X";
      try { 
        Parser.parse(string2, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "}IR|";
      int int0 = (-3667);
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      int int1 = 121;
      Regexp regexp1 = Parser.parse(string0, int1);
      assertFalse(int1 == int0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = int1;
      intArray0[1] = int1;
      String string1 = regexp0.toString();
      assertFalse(int0 == int1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(?i:\\}IR)|(?:)", string1);
      assertNotSame(string0, string1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(string1, string0);
      
      intArray0[2] = int1;
      intArray0[3] = int1;
      intArray0[4] = int1;
      int int2 = 683;
      intArray0[5] = int2;
      intArray0[6] = int0;
      intArray0[7] = int1;
      regexp1.runes = intArray0;
      String string2 = "eh(BYM^syX*a";
      try { 
        Parser.parse(string2, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `eh(BYM^syX*a`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      String string0 = "l3+acP{CA@nWhgUA";
      int int0 = 0;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      String string1 = "`q#i'o?!5}Po.P";
      int int1 = 9290;
      Regexp regexp3 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(string1, string0);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotNull(regexp5);
      
      regexpArray0[4] = regexp5;
      regexpArray0[5] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp6 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp0));
      assertNotNull(regexp6);
      
      regexpArray0[6] = regexp6;
      Regexp.Op regexp_Op2 = Regexp.Op.ALTERNATE;
      Regexp regexp7 = new Regexp(regexp_Op2);
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp1));
      assertNotNull(regexp7);
      
      regexpArray0[7] = regexp7;
      Regexp regexp8 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op2));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp1));
      assertTrue(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp0));
      assertNotNull(regexp8);
      
      regexpArray0[8] = regexp8;
      int int2 = 1437;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1437
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      String string0 = "4;N=ljCg;:<fj\\(W?";
      int int0 = 1364;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      int int1 = (-2474);
      regexp0.max = int1;
      regexp0.flags = int0;
      regexp0.cap = int0;
      regexpArray0[0] = regexp0;
      int int2 = 0;
      int int3 = 0;
      int int4 = 666;
      String string1 = "Wmb";
      Parser parser0 = new Parser(string1, regexp0.max);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(parser0);
      
      int int5 = 0;
      Regexp regexp1 = Parser.parse(string1, int5);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      int int6 = 0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int2, int6);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(1, regexpArray0.length);
      assertEquals(0, regexpArray1.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "";
      int int0 = 3783;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = ";SUCtDE";
      Regexp regexp0 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(regexp0);
      assertNotSame(string1, string0);
      
      String string2 = "";
      Regexp regexp1 = Parser.parse(string2, int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      int int1 = 0;
      Regexp regexp3 = Parser.parse(string0, int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int1, int1);
      assertFalse(int1 == int0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(0, regexpArray0.length);
      assertEquals(0, regexpArray1.length);
      
      String string3 = "$/x@>z]L'84\\r";
      Regexp regexp4 = Parser.parse(string3, int1);
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      int int2 = 1467;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "ETG/t@et9z8M|N\"skC";
      int int0 = (-3616);
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "[:rd:]";
      Regexp regexp0 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(regexp0);
      assertNotSame(string1, string0);
      
      int int1 = (-206);
      Regexp regexp1 = Parser.parse(string0, int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string0, string1);
      assertNotSame(regexp1, regexp0);
      
      String string2 = "com.google.re2j.Parser$1";
      int int2 = 10;
      Regexp regexp2 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      String string3 = "com.google.re2j.UnicodeTables";
      int int3 = 3946;
      Regexp regexp4 = Parser.parse(string3, int3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      
      String string4 = "";
      Regexp regexp5 = Parser.parse(string4, int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertNotNull(regexp5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      
      String string5 = "3";
      Regexp regexp6 = Parser.parse(string5, int0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertNotNull(regexp6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp0);
      
      String string6 = "8";
      Regexp regexp7 = Parser.parse(string6, int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp0));
      assertNotNull(regexp7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp0);
      
      String string7 = "bVXD#|";
      int int4 = 1;
      Regexp regexp8 = Parser.parse(string7, int4);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp6));
      assertNotNull(regexp8);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp6);
      
      String string8 = "~7/\"]_?%y4,$F;3[";
      int int5 = 0;
      try { 
        Parser.parse(string8, int5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      String string0 = "]kgj+W+h";
      int int0 = 0;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      regexpArray0[2] = regexp3;
      String string1 = "he6Y9Bq{bJ*ttQ^QJ]";
      int int1 = 2349;
      Regexp regexp4 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      assertNotSame(string1, string0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      
      regexpArray0[3] = regexp4;
      String string2 = "\"/O&#H_";
      Regexp regexp5 = Parser.parse(string2, int1);
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      regexpArray0[4] = regexp5;
      String string3 = "M?o@IWS:";
      Regexp regexp6 = Parser.parse(string3, int0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertNotNull(regexp6);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp1);
      
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp_Op0);
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp4));
      assertNotNull(regexp7);
      
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      regexp7.op = regexp_Op1;
      regexpArray0[6] = regexpArray0[2];
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "com.google.re2j.Parser";
      int int0 = 0;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "V4?";
      Parser parser0 = new Parser(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(parser0);
      
      String string2 = "";
      int int1 = 0;
      Regexp regexp1 = Parser.parse(string2, int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp1, regexp0);
      
      String string3 = "";
      Regexp regexp2 = Parser.parse(string3, int0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      String string4 = "";
      Regexp regexp3 = Parser.parse(string4, int0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertSame(string4, string2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      
      Regexp regexp4 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      Regexp regexp5 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertNotNull(regexp5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      
      String string5 = "[:^cntrl:]";
      Regexp regexp6 = Parser.parse(string5, int0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp0));
      assertNotNull(regexp6);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp0);
      
      String string6 = "Lycian";
      int int2 = (-492);
      Regexp regexp7 = Parser.parse(string6, int2);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp6));
      assertNotNull(regexp7);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp6);
      
      Regexp regexp8 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(int0 == int2);
      assertTrue(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp6));
      assertTrue(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp3));
      assertNotNull(regexp8);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp3);
      
      int int3 = 1254;
      Regexp regexp9 = Parser.parse(string0, int3);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp5));
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp4));
      assertNotNull(regexp9);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp5);
      assertNotSame(regexp9, regexp6);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp4);
      
      Regexp[] regexpArray0 = new Regexp[0];
      int int4 = (-1109);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "z${+>bB";
      int int0 = 2086;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "3C?Z^6BltQ;S;";
      int int1 = 632;
      Regexp regexp1 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(string0, string1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      regexp1.min = int1;
      String string2 = "Lt";
      Regexp regexp3 = Parser.parse(string2, int0);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      regexpArray0[1] = regexp3;
      int int2 = 0;
      regexp3.flags = int2;
      regexpArray0[2] = regexp1;
      regexp2.reinit();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp3));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp3);
      
      regexpArray0[3] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "$pO5hwk@?EMC6,w0|e";
      int int0 = 0;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "dC@y!/r7";
      Regexp[] regexpArray0 = new Regexp[4];
      int int1 = 0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int1, int0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(4, regexpArray0.length);
      assertEquals(0, regexpArray1.length);
      
      String string2 = "";
  }
}
