/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 20:01:09 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "B7P~j.<ye/cfjrT(Y";
      int int0 = 1077;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string1 = "&m?##LuoiED7nwE&&";
      int int1 = 2615;
      Parser parser0 = new Parser(string1, int1);
      assertNotNull(parser0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      
      boolean boolean0 = false;
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "removeLeadingRegexp", (Object) regexp0, (Class<?>) Regexp.class, (Object) boolean0, (Class<?>) boolean.class);
      assertNotNull(object0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(object0.equals((Object)regexp0));
      assertNotSame(regexp0, object0);
      assertNotSame(string1, string0);
      assertNotSame(object0, regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)object0));
      
      int int2 = (-1696);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `B7P~j.<ye/cfjrT(Y`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      int int0 = 2111;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "[=$2~~";
      Parser parser0 = new Parser(string1, int0);
      assertNotNull(parser0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "9p&F";
      Regexp regexp1 = Parser.parse(string2, int0);
      assertNotNull(regexp1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(regexp1, regexp0);
      
      int int1 = 891;
      Regexp regexp2 = Parser.parse(string0, int1);
      assertNotNull(regexp2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string3 = "$Zr";
      int int2 = 1485;
      Regexp regexp3 = Parser.parse(string3, int2);
      assertNotNull(regexp3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      int int3 = (-460);
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "matchRune", (Object) regexp2, (Class<?>) Regexp.class, (Object) int3, (Class<?>) int.class);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp3);
      
      Regexp regexp4 = Parser.parse(string2, int0);
      assertNotNull(regexp4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      String string4 = "\\p(~,LOj";
      try { 
        Parser.parse(string4, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `\\p(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = ",@+\\L2q@";
      int int0 = (-798);
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      regexp0.runes = intArray0;
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "mergeCharClass", (Object) regexp0, (Class<?>) Regexp.class, (Object) regexp0, (Class<?>) Regexp.class);
      assertNull(object0);
      
      String string1 = "[:^digit:]";
      int int1 = 8;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\L`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1072;
      String string0 = "P?E";
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "\\p(~,LOj";
      int int1 = (-3276);
      String string2 = "Other_Alphabetic";
      Regexp regexp0 = Parser.parse(string2, int0);
      assertNotNull(regexp0);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(regexp1.equals((Object)regexp0));
      
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "swapVerticalBar");
      assertEquals(false, object0);
      assertNotNull(object0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      try { 
        PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "mergeCharClass", (Object) regexp1, (Class<?>) Regexp.class, (Object) regexp2, (Class<?>) Regexp.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "\\P(~,LOj";
      int int0 = 3162;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "reuse", (Object) regexp1, (Class<?>) Regexp.class);
      assertNull(object0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      Object object1 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "isCharClass", (Object) regexp0, (Class<?>) Regexp.class);
      assertEquals(false, object1);
      assertNotNull(object1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      Regexp[] regexpArray0 = new Regexp[1];
      int int1 = 5;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "Rxw^F";
      int int0 = (-598);
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      int int1 = 1;
      Regexp regexp0 = Parser.parse(string0, int1);
      assertNotNull(regexp0);
      assertFalse(int1 == int0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertFalse(int1 == int0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      boolean boolean0 = true;
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "removeLeadingRegexp", (Object) regexp1, (Class<?>) Regexp.class, (Object) boolean0, (Class<?>) boolean.class);
      assertNotNull(object0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(object0.equals((Object)regexp0));
      assertNotSame(regexp0, object0);
      assertNotSame(regexp0, regexp1);
      assertSame(regexp1, object0);
      assertNotSame(regexp1, regexp0);
      assertNotSame(object0, regexp0);
      assertSame(object0, regexp1);
      
      Object object1 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "concat");
      assertNotNull(object1);
      assertFalse(int0 == int1);
      assertFalse(object1.equals((Object)regexp0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)regexp1));
      assertNotSame(object1, regexp0);
      assertNotSame(object1, object0);
      assertNotSame(object1, regexp1);
      
      int int2 = 1642;
      Regexp regexp2 = Parser.parse(string0, int2);
      assertNotNull(regexp2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp2.equals((Object)object1));
      assertFalse(regexp2.equals((Object)object0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, object1);
      assertNotSame(regexp2, object0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string1 = "J5yt9+$0!|#l8a?P{ki";
      Regexp regexp3 = Parser.parse(string1, int0);
      assertNotNull(regexp3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)object0));
      assertFalse(regexp3.equals((Object)object1));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(string1, string0);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, object0);
      assertNotSame(regexp3, object1);
      assertNotSame(regexp3, regexp1);
      
      String string2 = "";
      Regexp regexp4 = Parser.parse(string2, int0);
      assertNotNull(regexp4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)object1));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)object0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, object1);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, object0);
      
      String string3 = "u*B2^/01-Hy83:F|\"]";
      int int3 = 697;
      Regexp regexp5 = Parser.parse(string3, int3);
      assertNotNull(regexp5);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(regexp5.equals((Object)object0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)object1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(regexp5, object0);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, object1);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      int int4 = (-1252);
      Regexp regexp6 = Parser.parse(string0, int4);
      assertNotNull(regexp6);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)object0));
      assertFalse(regexp6.equals((Object)object1));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, object0);
      assertNotSame(regexp6, object1);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp5);
      
      String string4 = ")}}+B%SvRoWV!_XaYQD";
      int int5 = (-383);
      Regexp regexp7 = Parser.parse(string4, int0);
      assertNotNull(regexp7);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)object0));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)object1));
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, object0);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, object1);
      
      Regexp regexp8 = Parser.parse(string0, int0);
      assertNotNull(regexp8);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(regexp8.equals((Object)regexp5));
      assertTrue(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)object0));
      assertFalse(regexp8.equals((Object)object1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, object0);
      assertNotSame(regexp8, object1);
      
      int int6 = (-1197);
      Regexp regexp9 = Parser.parse(string0, int6);
      assertNotNull(regexp9);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)object1));
      assertFalse(regexp9.equals((Object)regexp5));
      assertFalse(regexp9.equals((Object)object0));
      assertTrue(regexp9.equals((Object)regexp2));
      assertTrue(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp4));
      assertFalse(regexp9.equals((Object)regexp1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, object1);
      assertNotSame(regexp9, regexp5);
      assertNotSame(regexp9, object0);
      assertNotSame(regexp9, regexp6);
      assertNotSame(regexp9, regexp4);
      assertNotSame(regexp9, regexp1);
      
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotNull(regexpArray1);
      assertFalse(int0 == int6);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(0, regexpArray0.length);
      assertEquals(0, regexpArray1.length);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int0, int6);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      int int0 = 2111;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "[=oQ$2~T~";
      Parser parser0 = new Parser(string1, int0);
      assertNotNull(parser0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = true;
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "removeLeadingRegexp", (Object) regexp0, (Class<?>) Regexp.class, (Object) boolean0, (Class<?>) boolean.class);
      assertNotNull(object0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(object0.equals((Object)regexp0));
      assertNotSame(string0, string1);
      assertNotSame(regexp0, object0);
      assertNotSame(string1, string0);
      assertNotSame(object0, regexp0);
      
      String string2 = "$Zr";
      int int1 = 1485;
      Regexp regexp1 = Parser.parse(string2, int1);
      assertNotNull(regexp1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)object0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(regexp1, object0);
      assertNotSame(regexp1, regexp0);
      
      int int2 = 0;
      try { 
        Parser.parse(string1, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[=oQ$2~T~`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "E{D.d8C,Ssm";
      int int0 = 1072;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "P?E";
      Parser parser0 = new Parser(string1, int0);
      assertNotNull(parser0);
      assertFalse(string1.equals((Object)string0));
      
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "alternate");
      assertNotNull(object0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(object0.equals((Object)regexp0));
      assertNotSame(string1, string0);
      assertNotSame(object0, regexp0);
      
      String string2 = "\\p(~,LOj";
      int int1 = (-3276);
      try { 
        Parser.parse(string2, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      int int0 = 2111;
      String string1 = "[=oQ$2~T~";
      Parser parser0 = new Parser(string1, int0);
      assertNotNull(parser0);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = (-3942);
      Regexp regexp0 = Parser.parse(string1, int1);
      assertNotNull(regexp0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string1, string0);
      
      String string2 = "$Zr";
      int int2 = 1485;
      Regexp regexp1 = Parser.parse(string2, int2);
      assertNotNull(regexp1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp1, regexp0);
      
      int int3 = 0;
      String string3 = "|o6+F\"EAg0";
      int int4 = 5;
      Regexp regexp2 = Parser.parse(string3, int4);
      assertNotNull(regexp2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse(string0, int0);
      assertNotNull(regexp3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      regexp3.flags = int0;
      int int5 = (-613);
      int[] intArray0 = new int[8];
      intArray0[0] = int3;
      intArray0[1] = regexp3.flags;
      intArray0[2] = int5;
      intArray0[3] = int5;
      intArray0[4] = int0;
      intArray0[5] = int2;
      intArray0[6] = regexp3.flags;
      intArray0[7] = int3;
      regexp3.runes = intArray0;
      Regexp regexp4 = Parser.parse(string1, int5);
      assertNotNull(regexp4);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp3;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      int int0 = (-12);
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(0, regexpArray0.length);
      assertEquals(0, regexpArray1.length);
      
      int int1 = 4;
      String string0 = "6J?pVF<0Ub=O5I{h";
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      assertFalse(int0 == int1);
      
      String string1 = "\\D";
      Regexp regexp0 = Parser.parse(string1, int0);
      assertNotNull(regexp0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = "xBE#'O50";
      int int2 = 2;
      Regexp regexp1 = Parser.parse(string2, int2);
      assertNotNull(regexp1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp1, regexp0);
      
      int int3 = 0;
      String string3 = "Ll\"VzeKc`O";
      Regexp regexp2 = Parser.parse(string3, int0);
      assertNotNull(regexp2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse(string0, int0);
      assertNotNull(regexp3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      Regexp regexp4 = Parser.parse(string0, int0);
      assertNotNull(regexp4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      
      String string4 = "$67";
      int int4 = (-398);
      Regexp regexp5 = Parser.parse(string4, int4);
      assertNotNull(regexp5);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      
      int int5 = 43187;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int5, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "rRf0:Z!A9dmF,|";
      int int0 = 4;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      String string1 = "nu";
      Regexp regexp2 = Parser.parse(string1, int0);
      assertNotNull(regexp2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(string1, string0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp1;
      Regexp regexp3 = new Regexp(regexp1);
      assertNotNull(regexp3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      
      regexpArray0[1] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      
      regexpArray0[2] = regexp4;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp2;
      regexpArray0[8] = regexp1;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray1, regexpArray0);
      assertNotSame(regexpArray0, regexpArray1);
      assertEquals(0, regexpArray1.length);
      assertEquals(9, regexpArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = " jt#N\\";
      int int0 = 2017;
      String string1 = "yQrDT";
      String string2 = "\\P";
      // Undeclared exception!
      try { 
        Parser.parse(string2, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "\\C]MD";
      int int0 = 64;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "invalid character class range";
      Regexp regexp0 = Parser.parse(string1, int0);
      assertNotNull(regexp0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      int int1 = 1884;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int1, int1);
      assertNotNull(regexpArray1);
      assertFalse(int1 == int0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(5, regexpArray0.length);
      assertEquals(0, regexpArray1.length);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\C`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "X51E<e5++";
      int int0 = 589;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `++`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexpArray0[0]);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertEquals(7, regexpArray0.length);
      
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexpArray0[1]);
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertEquals(7, regexpArray0.length);
      
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      
      regexpArray0[3] = regexp3;
      int int0 = (-1);
      regexp3.max = int0;
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertNotNull(regexp4);
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      
      regexpArray0[4] = regexp4;
      String string0 = "L-W%7A<9XiK\\z!mvX";
      int int1 = 108;
      Regexp regexp5 = Parser.parse(string0, int1);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(int1 == int0);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      
      regexpArray0[5] = regexp5;
      int int2 = 267;
      Regexp regexp6 = Parser.parse(string0, int2);
      assertNotNull(regexp6);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp3));
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp3);
      
      regexpArray0[6] = regexp6;
      int int3 = 1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int3, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      String string0 = "[:]{}^$";
      int int0 = 1;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      assertNotNull(regexp3);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp2));
      
      regexpArray0[3] = regexp3;
      int int1 = 2;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int1);
      assertNotNull(regexpArray1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(4, regexpArray0.length);
      assertEquals(1, regexpArray1.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "(?P<";
      int int0 = 2120;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "/\"MR[__>!Lu>*";
      int int1 = 3;
      Regexp regexp0 = Parser.parse(string1, int1);
      assertNotNull(regexp0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string1, string0);
      
      String string2 = regexp0.toString();
      assertEquals("(?i:/\"MR\\[__>!Lu>\\*)", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = ":]";
      int int2 = (-551);
      Regexp regexp1 = Parser.parse(string3, int2);
      assertNotNull(regexp1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(regexp1, regexp0);
      
      int int3 = (-47);
      int int4 = 94;
      Regexp regexp2 = Parser.parse(string0, int4);
      assertNotNull(regexp2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      try { 
        Parser.parse(string0, int3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "missing closing ]";
      int int0 = 3;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "missing argument to repetition operator";
      Parser parser0 = new Parser(string1, int0);
      assertNotNull(parser0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "(?";
      int int1 = (-1068);
      try { 
        Parser.parse(string2, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "4M";
      int int0 = 2;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "\\.+*?()|[]{}^$";
      int int1 = 0;
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]{}^$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "invalid named capture";
      int int0 = (-804);
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "\\P\\sX#cLfjSLz/";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `\\P\\`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "ce";
      int int0 = (-2330);
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "I\\sX#cLfjSLz/";
      int int1 = 93;
      Regexp regexp1 = Parser.parse(string1, int1);
      assertNotNull(regexp1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int0;
      int int2 = 2;
      intArray0[2] = int2;
      intArray0[3] = int0;
      intArray0[4] = int1;
      intArray0[5] = int0;
      regexp0.runes = intArray0;
      int int3 = (-1264);
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp1.equals(object0);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      int int4 = 12;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexpArray0[1] = regexp0;
      Regexp regexp1 = new Regexp(regexpArray0[1]);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertEquals(8, regexpArray0.length);
      
      regexpArray0[1] = regexp1;
      String string0 = "(?P<";
      int int0 = 0;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "6>&";
      int int0 = 1628;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "vL";
      Regexp regexp0 = Parser.parse(string1, int0);
      assertNotNull(regexp0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = "!kiq8d,.??5$w";
      Regexp regexp1 = Parser.parse(string2, int0);
      assertNotNull(regexp1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp1, regexp0);
      
      String string3 = null;
      int int1 = 0;
      regexp1.reinit();
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      String string0 = "B7P~j.<ye/cfjT(Y";
      int int0 = (-995);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `B7P~j.<ye/cfjT(Y`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "U;I!Hw,lBA+!O|5";
      int int0 = 10;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexpArray0[1] = regexp1;
      int int1 = 0;
      Regexp regexp2 = Parser.parse(string0, int1);
      assertNotNull(regexp2);
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp0);
      assertNotNull(regexp4);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      
      regexpArray0[4] = regexp4;
      int int2 = 1494;
      Regexp regexp5 = Parser.parse(string0, int2);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp1);
      
      regexpArray0[5] = regexp5;
      String string1 = "com.google.re2j.Parser$1";
      Regexp regexp6 = Parser.parse(string1, int0);
      assertNotNull(regexp6);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertNotSame(string1, string0);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp2);
      
      regexpArray0[6] = regexp6;
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "\"|`;%l;D/Qi)YT";
      int int0 = 1;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "!EvH][9_=PX";
      int int0 = 109;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "QCBYIX\\3p";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\3`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "C,A_u{\"]u&On`";
      int int0 = 0;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      String string1 = "Dw9EeSN0KwK[";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "com.google.re2j.Parser$Stack";
      int int0 = 0;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "NG,Ly3'|^CW6?2%'";
      Regexp regexp0 = Parser.parse(string1, int0);
      assertNotNull(regexp0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = "?E3.";
      int int1 = 677;
      try { 
        Parser.parse(string2, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      int int0 = 0;
      String string0 = "=o";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      String string1 = "t>l-\\}^|kAu&m0#";
      int int1 = 1;
      Regexp regexp2 = Parser.parse(string1, int1);
      assertNotNull(regexp2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(string1, string0);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      int int1 = 0;
      regexp0.cap = int1;
      Regexp[] regexpArray0 = new Regexp[6];
      regexp0.max = int1;
      regexp0.subs = regexpArray0;
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int int2 = 0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int2, int0);
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(6, regexpArray0.length);
      assertEquals(0, regexpArray1.length);
      
      String string1 = "NO_MATCH";
      int[] intArray0 = new int[5];
      intArray0[0] = int1;
      int int3 = 0;
      intArray0[1] = int3;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = regexp0.cap;
      regexp0.runes = intArray0;
      int int4 = (-1861);
      Regexp regexp1 = Parser.parse(string1, int4);
      assertNotNull(regexp1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      Parser parser0 = new Parser(string1, regexp0.max);
      assertNotNull(parser0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int4);
      assertFalse(regexp0.equals((Object)regexp1));
      
      String string2 = "wYqP(\\6PS+n0 t";
      try { 
        Parser.parse(string2, intArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\6`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      String string0 = "i\\1ArP";
      int int0 = 1;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\1`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      assertNotNull(regexp3);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      
      regexpArray0[3] = regexp3;
      int int0 = 0;
      int int1 = 1;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int1);
      assertNotNull(regexpArray1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(4, regexpArray0.length);
      assertEquals(1, regexpArray1.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "+9C@9";
      int int0 = 2462;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      int int1 = 0;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "BMGS.J^lvBG)MB";
      int int0 = 0;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      int int0 = 0;
      regexp1.flags = int0;
      int int1 = 0;
      regexp1.max = int1;
      int int2 = (-3351);
      regexp1.flags = int2;
      boolean boolean0 = regexp1.equals(regexp_Op0);
      assertFalse(boolean0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      regexpArray0[0] = regexp1;
      int int3 = 0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int3, int3);
      assertNotNull(regexpArray1);
      assertFalse(int3 == int2);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(1, regexpArray0.length);
      assertEquals(0, regexpArray1.length);
      
      String string0 = "\\Qat_8py^h.vnM";
      int int4 = (-1192);
      Regexp regexp2 = Parser.parse(string0, int4);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string1 = "Nd";
      int int5 = 0;
      Regexp regexp3 = Parser.parse(string1, int5);
      assertNotNull(regexp3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(string1, string0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      regexp1.subs = regexpArray1;
      int int6 = (-3674);
      int int7 = 1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int6, int7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3674
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "eZvGCa-7togtWz\\0l";
      int int0 = 1;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "invalid escape sequence";
      int int1 = (-3152);
      Regexp regexp0 = Parser.parse(string1, int1);
      assertNotNull(regexp0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string1, string0);
      
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotNull(regexp1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string0, string1);
      assertNotSame(regexp1, regexp0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string2, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      int int0 = 565;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      int int1 = 128532;
      Regexp regexp0 = Parser.parse(string0, int1);
      assertNotNull(regexp0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "Any";
      int int0 = 94;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      regexp0.op = regexp_Op0;
      int int1 = 92;
      Regexp regexp1 = Parser.parse(string0, int1);
      assertNotNull(regexp1);
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      regexp1.min = int1;
      regexp0.max = int0;
      Regexp regexp2 = new Regexp(regexp0.op);
      assertNotNull(regexp2);
      assertFalse(int0 == int1);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      int int2 = (-512);
      regexp1.cap = int2;
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "removeLeadingString", (Object) regexp2, (Class<?>) Regexp.class, (Object) regexp0.max, (Class<?>) int.class);
      assertNotNull(object0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(object0.equals((Object)regexp1));
      assertFalse(object0.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, object0);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp2, regexp1);
      assertSame(regexp2, object0);
      assertNotSame(regexp2, regexp0);
      assertNotSame(object0, regexp1);
      assertNotSame(object0, regexp0);
      assertSame(object0, regexp2);
      
      Object object1 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "isCharClass", (Object) regexp1, (Class<?>) Regexp.class);
      assertEquals(false, object1);
      assertNotNull(object1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(regexp1.equals((Object)object0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, object0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      
      String string1 = "missing argument to repetition operator";
      Object object2 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "unicodeTable", (Object) string1, (Class<?>) String.class);
      assertNull(object2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int1, int1);
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(2, regexpArray0.length);
      assertEquals(0, regexpArray1.length);
      
      String string2 = "[^\\x00-\\x{10FFFF}]";
      Regexp regexp3 = Parser.parse(string2, int1);
      assertNotNull(regexp3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)object0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, object0);
      assertNotSame(regexp3, regexp1);
      
      int int3 = (-1);
      Regexp[] regexpArray2 = Parser.subarray(regexpArray1, int3, int3);
      assertNotNull(regexpArray2);
      assertFalse(regexpArray0.equals((Object)regexpArray1));
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray0, regexpArray2);
      assertNotSame(regexpArray1, regexpArray2);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotSame(regexpArray2, regexpArray0);
      assertNotSame(regexpArray2, regexpArray1);
      assertEquals(2, regexpArray0.length);
      assertEquals(0, regexpArray1.length);
      assertEquals(0, regexpArray2.length);
      
      Regexp[] regexpArray3 = Parser.subarray(regexpArray0, int0, int0);
      assertNotNull(regexpArray3);
      assertFalse(regexpArray0.equals((Object)regexpArray1));
      assertFalse(regexpArray0.equals((Object)regexpArray2));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(regexpArray3.equals((Object)regexpArray0));
      assertFalse(regexpArray3.equals((Object)regexpArray1));
      assertFalse(regexpArray3.equals((Object)regexpArray2));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray0, regexpArray2);
      assertNotSame(regexpArray0, regexpArray3);
      assertNotSame(regexpArray3, regexpArray0);
      assertNotSame(regexpArray3, regexpArray1);
      assertNotSame(regexpArray3, regexpArray2);
      assertEquals(2, regexpArray0.length);
      assertEquals(0, regexpArray3.length);
      
      int int4 = 1103;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, regexp1.cap, int4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -512
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "2:CvcKryA)id`mLe[";
      int int0 = 2966;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      int int1 = (-2922);
      Parser parser0 = new Parser(string0, int1);
      assertNotNull(parser0);
      assertFalse(int1 == int0);
      
      String string1 = "3]s5@|oi";
      int int2 = 0;
      Regexp regexp1 = Parser.parse(string1, int2);
      assertNotNull(regexp1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      int int3 = (-300);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      String string0 = "B7P~j.<ye/cfjrT(Y";
      int int0 = 1077;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `B7P~j.<ye/cfjrT(Y`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 64;
      String string0 = "invalid character class range";
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "\\p";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "";
      int int0 = 2111;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "[=$2~~";
      Parser parser0 = new Parser(string1, int0);
      assertNotNull(parser0);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 891;
      Regexp regexp1 = Parser.parse(string0, int1);
      assertNotNull(regexp1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(string0, string1);
      assertNotSame(regexp1, regexp0);
      
      String string2 = "$Zr";
      int int2 = 1485;
      Regexp regexp2 = Parser.parse(string2, int2);
      assertNotNull(regexp2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string3 = "\\p(~,LOj";
      try { 
        Parser.parse(string3, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `\\p(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1793;
      String string0 = "com.google.re2j.CharGroup";
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "";
      int int1 = (-2192);
      Regexp regexp1 = Parser.parse(string1, int1);
      assertNotNull(regexp1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      int int2 = (-1360);
      int int3 = 10;
      String string2 = "[:punct:]";
      int int4 = 0;
      Regexp regexp2 = Parser.parse(string2, int4);
      assertNotNull(regexp2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      int int5 = 0;
      int int6 = 0;
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp2;
      regexpArray0[5] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      
      Regexp regexp4 = new Regexp(regexp3);
      assertNotNull(regexp4);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      
      regexpArray0[6] = regexp4;
      regexpArray0[7] = regexp0;
      String string3 = ":ho*|7?{n9:iMe\\D(";
      try { 
        Parser.parse(string3, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `:ho*|7?{n9:iMe\\D(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1793;
      String string0 = "com.google.re2j.CharGroup";
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "";
      int int1 = (-2192);
      Regexp regexp1 = Parser.parse(string1, int1);
      assertNotNull(regexp1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      int int2 = (-1360);
      int int3 = 10;
      String string2 = "[:punct:]";
      int int4 = 0;
      Regexp regexp2 = Parser.parse(string2, int4);
      assertNotNull(regexp2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      int int5 = 0;
      int int6 = 0;
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[5] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      
      Regexp regexp4 = new Regexp(regexp3);
      assertNotNull(regexp4);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      
      regexpArray0[6] = regexp4;
      String string3 = ":ho*|7?{n9:iMe\\D(";
      try { 
        Parser.parse(string3, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `:ho*|7?{n9:iMe\\D(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp[] regexpArray0 = null;
      int int0 = (-2330);
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotNull(regexpArray1);
      assertEquals(0, regexpArray1.length);
      
      String string0 = "./R>6Jf!s\\(~,LOj";
      int int1 = 3397;
      Parser parser0 = new Parser(string0, int1);
      assertNotNull(parser0);
      assertFalse(int1 == int0);
      
      Object object0 = PrivateAccess.callMethod((Class<Parser>) Parser.class, parser0, "parseInternal");
      assertNotNull(object0);
      assertFalse(int1 == int0);
      
      int int2 = 0;
      Regexp regexp0 = Parser.parse(string0, int2);
      assertNotNull(regexp0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp0.equals((Object)object0));
      assertNotSame(regexp0, object0);
      
      int int3 = 3401;
      int int4 = 0;
      Regexp regexp1 = Parser.parse(string0, int4);
      assertNotNull(regexp1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(regexp1.equals((Object)object0));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, object0);
      assertNotSame(regexp1, regexp0);
      
      int int5 = 0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = " jt#N\\";
      int int0 = 2017;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "E{D.d8C,Ssm";
      int int0 = 1072;
      Regexp regexp0 = Parser.parse(string0, int0);
      assertNotNull(regexp0);
      
      String string1 = "P?E";
      Parser parser0 = new Parser(string1, int0);
      assertNotNull(parser0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "\\p(~,LOj";
      int int1 = (-3276);
      try { 
        Parser.parse(string2, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "MI!8zT{Z+N[a*MI#l";
      int int0 = (-7);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[a*MI#l`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "Rxw^F";
      int int0 = (-598);
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      int int1 = 1642;
      Regexp regexp0 = Parser.parse(string0, int1);
      assertNotNull(regexp0);
      assertFalse(int1 == int0);
      
      String string1 = "J5yt9+$0!|#l8a?P{ki";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertNotNull(regexp1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(string1, string0);
      assertNotSame(regexp1, regexp0);
      
      String string2 = "";
      Regexp regexp2 = Parser.parse(string2, int0);
      assertNotNull(regexp2);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      String string3 = "u*B2^/01-Hy83:F|\"]";
      int int2 = 697;
      Regexp regexp3 = Parser.parse(string3, int2);
      assertNotNull(regexp3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      
      int int3 = (-1252);
      Regexp regexp4 = Parser.parse(string0, int3);
      assertNotNull(regexp4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      
      String string4 = ")}}+B%SvRoWV!_XaYQD";
      int int4 = (-383);
      try { 
        Parser.parse(string4, int4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }
}
