/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:05:51 GMT 2018
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.GaussianSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussianSolver_ESTest extends GaussianSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1083;
      int int1 = 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1, int1);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1083, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      GaussianSolver gaussianSolver0 = null;
      try {
        gaussianSolver0 = new GaussianSolver(rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 30;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int0);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(30, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(30, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(30, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      DenseVector denseVector0 = DenseVector.constant(int0, int0);
      assertEquals(30, denseVector0.length());
      assertNotNull(denseVector0);
      
      GaussianSolver gaussianSolver0 = new GaussianSolver(rowMajorSparseMatrix0);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(30, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(30, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(30, rowMajorSparseMatrix0.rows());
      assertEquals(30, gaussianSolver0.unknowns());
      assertEquals(30, gaussianSolver0.equations());
      assertNotNull(gaussianSolver0);
      
      int int1 = 0;
      gaussianSolver0.unknowns = int1;
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(30, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(30, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(30, rowMajorSparseMatrix0.rows());
      assertEquals(30, gaussianSolver0.equations());
      assertEquals(0, gaussianSolver0.unknowns());
      
      // Undeclared exception!
      gaussianSolver0.solve(denseVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      double double0 = 1.1102230246251565E-14;
      Matrix matrix0 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(matrix0).columns();
      doReturn(double0).when(matrix0).diagonalProduct();
      doReturn(int0, 0).when(matrix0).rows();
      Matrix matrix1 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(matrix1).columns();
      doReturn(matrix0).when(matrix1).copyOfColumns(anyInt());
      doReturn(int0, int0).when(matrix1).rows();
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix1);
      assertEquals(0, gaussianSolver0.unknowns());
      assertEquals(0, gaussianSolver0.equations());
      assertNotNull(gaussianSolver0);
      
      Vector vector0 = mock(Vector.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vector0).blankOfLength(anyInt());
      doReturn(int0).when(vector0).length();
      Vector vector1 = gaussianSolver0.solve(vector0);
      assertEquals(0, gaussianSolver0.unknowns());
      assertEquals(0, gaussianSolver0.equations());
      assertNull(vector1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      GaussianSolver gaussianSolver0 = new GaussianSolver(cRSMatrix0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, gaussianSolver0.unknowns());
      assertEquals(0, gaussianSolver0.equations());
      assertNotNull(gaussianSolver0);
      
      CompressedVector compressedVector0 = (CompressedVector)gaussianSolver0.solve(sparseVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, gaussianSolver0.unknowns());
      assertEquals(0, gaussianSolver0.equations());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertNotSame(sparseVector0, compressedVector0);
      assertNotSame(compressedVector0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(int0, int0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      GaussianSolver gaussianSolver0 = new GaussianSolver(denseMatrix0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, gaussianSolver0.unknowns());
      assertEquals(0, gaussianSolver0.equations());
      assertNotNull(gaussianSolver0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseVector denseVector0 = DenseVector.random(int0, mockRandom0);
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(denseVector0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2746;
      double[] doubleArray0 = new double[1];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.length());
      assertNotNull(sparseVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toRowMatrix();
      assertEquals(1, doubleArray0.length);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.length());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      GaussianSolver gaussianSolver0 = new GaussianSolver(cRSMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.length());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, gaussianSolver0.equations());
      assertEquals(1, gaussianSolver0.unknowns());
      assertNotNull(gaussianSolver0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      gaussianSolver0.unknowns = int0;
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.length());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, gaussianSolver0.equations());
      assertEquals(2746, gaussianSolver0.unknowns());
      
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2746' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Matrix matrix0 = null;
      GaussianSolver gaussianSolver0 = null;
      try {
        gaussianSolver0 = new GaussianSolver(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.GaussianSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      SparseVector sparseVector0 = SparseVector.random(int0, (double) int0, (Random) mockRandom0);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int1 = 1;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, int1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, denseVector0.length());
      assertNotNull(denseVector0);
      assertFalse(int1 == int0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, denseVector0.length());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      GaussianSolver gaussianSolver0 = null;
      try {
        gaussianSolver0 = new GaussianSolver(cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[6];
      doubleArray0[2] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      GaussianSolver gaussianSolver0 = null;
      try {
        gaussianSolver0 = new GaussianSolver(denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int0, int0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      GaussianSolver gaussianSolver0 = new GaussianSolver(rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, gaussianSolver0.equations());
      assertEquals(0, gaussianSolver0.unknowns());
      assertNotNull(gaussianSolver0);
      
      boolean boolean0 = gaussianSolver0.applicableTo(rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, gaussianSolver0.equations());
      assertEquals(0, gaussianSolver0.unknowns());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 2;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(int0, int0);
      assertEquals(2, denseMatrix0.rows());
      assertEquals(2, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      GaussianSolver gaussianSolver0 = new GaussianSolver(denseMatrix0);
      assertEquals(2, denseMatrix0.rows());
      assertEquals(2, denseMatrix0.columns());
      assertEquals(2, gaussianSolver0.unknowns());
      assertEquals(2, gaussianSolver0.equations());
      assertNotNull(gaussianSolver0);
      
      int int1 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int1);
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)columnMajorSparseMatrix0.transpose();
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = gaussianSolver0.applicableTo(cRSMatrix0);
      assertEquals(2, denseMatrix0.rows());
      assertEquals(2, denseMatrix0.columns());
      assertEquals(2, gaussianSolver0.unknowns());
      assertEquals(2, gaussianSolver0.equations());
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int0);
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      DenseVector denseVector0 = DenseVector.constant(int0, int0);
      assertEquals(6, denseVector0.length());
      assertNotNull(denseVector0);
      
      GaussianSolver gaussianSolver0 = new GaussianSolver(rowMajorSparseMatrix0);
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, gaussianSolver0.equations());
      assertEquals(6, gaussianSolver0.unknowns());
      assertNotNull(gaussianSolver0);
      
      Vector vector0 = gaussianSolver0.solve(denseVector0);
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, denseVector0.length());
      assertEquals(6, gaussianSolver0.equations());
      assertEquals(6, gaussianSolver0.unknowns());
      assertEquals(6, vector0.length());
      assertNotNull(vector0);
      assertTrue(vector0.equals((Object)denseVector0));
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      org.evosuite.runtime.Random.setNextRandom(int0);
      double double0 = 128.145543342;
      int int1 = 1;
      Matrix matrix0 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(matrix0).columns();
      doReturn(double0).when(matrix0).diagonalProduct();
      doReturn(int1, 0).when(matrix0).rows();
      Matrix matrix1 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(matrix1).columns();
      doReturn(matrix0).when(matrix1).copyOfColumns(anyInt());
      doReturn(int0, int0).when(matrix1).rows();
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix1);
      assertEquals(0, gaussianSolver0.equations());
      assertEquals(0, gaussianSolver0.unknowns());
      assertNotNull(gaussianSolver0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Vector vector0 = mock(Vector.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vector0).blankOfLength(anyInt());
      doReturn(int0).when(vector0).length();
      Vector vector1 = gaussianSolver0.solve(vector0);
      assertEquals(0, gaussianSolver0.equations());
      assertEquals(0, gaussianSolver0.unknowns());
      assertNull(vector1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 2992;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int0, int0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2992, columnMajorSparseMatrix0.rows());
      assertEquals(2992, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      GaussianSolver gaussianSolver0 = new GaussianSolver(columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2992, columnMajorSparseMatrix0.rows());
      assertEquals(2992, columnMajorSparseMatrix0.columns());
      assertEquals(2992, gaussianSolver0.unknowns());
      assertEquals(2992, gaussianSolver0.equations());
      assertNotNull(gaussianSolver0);
      
      try { 
        PrivateAccess.callMethod((Class<GaussianSolver>) GaussianSolver.class, gaussianSolver0, "triangularizeWithPivoting", (Object) columnMajorSparseMatrix0, (Class<?>) Matrix.class);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can't be solved.
         //
         verifyException("org.la4j.linear.GaussianSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      Matrix matrix0 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrix0).diagonalProduct();
      doReturn(0).when(matrix0).rows();
      Matrix matrix1 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(matrix1).columns();
      doReturn(matrix0).when(matrix1).copyOfColumns(anyInt());
      doReturn(int0, int0).when(matrix1).rows();
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix1);
      assertEquals(0, gaussianSolver0.equations());
      assertEquals(0, gaussianSolver0.unknowns());
      assertNotNull(gaussianSolver0);
      
      Vector vector0 = mock(Vector.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(vector0).length();
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system is singular.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }
}
