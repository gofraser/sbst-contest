/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:59:10 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 0;
      int int1 = 2273;
      int int2 = 0;
      int int3 = 0;
      int int4 = 0;
      int int5 = 0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      String string0 = regexp1.toString();
      regexp1.toString();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      int int6 = 2;
      PrivateAccess.callMethod((Class<Regexp>) Regexp.class, regexp1, "quoteIfHyphen", (Object) stringBuilder0, (Class<?>) StringBuilder.class, (Object) int6, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 2124;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) regexp_Op0);
      PrivateAccess.callMethod((Class<Regexp>) Regexp.class, regexp0, "quoteIfHyphen", (Object) stringBuilder1, (Class<?>) StringBuilder.class, (Object) int0, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      int int0 = 1465;
      regexp0.max = int0;
      Regexp regexp1 = new Regexp(regexp0);
      int int1 = 1;
      int int2 = 1576;
      regexp0.min = int2;
      regexp0.flags = int1;
      int[] intArray0 = new int[3];
      intArray0[0] = regexp0.max;
      intArray0[1] = regexp0.max;
      intArray0[2] = regexp0.max;
      regexp1.runes = intArray0;
      int int3 = 347;
      regexp1.cap = int3;
      regexp1.op = regexp_Op0;
      regexp1.toString();
      regexp0.reinit();
      String string0 = "\"7PeBKNw+\"";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.\"7PeBKNw+\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      String string0 = ";!\"|+)lb]}*X-";
      regexp0.name = string0;
      String string1 = "";
      regexp0.name = string1;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 45;
      regexp0.flags = int0;
      Regexp regexp1 = new Regexp(regexp0);
      Object object0 = new Object();
      regexp1.equals(object0);
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = (-187);
      regexp0.flags = int0;
      regexp0.min = int0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 0;
      regexp0.max = int0;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      regexp0.op = regexp_Op1;
      int[] intArray0 = new int[3];
      int int1 = 0;
      regexp0.runes = intArray0;
      intArray0[0] = int1;
      int int2 = 0;
      intArray0[1] = int2;
      int int3 = 2163;
      intArray0[2] = int3;
      regexp0.runes = intArray0;
      String string0 = "";
      regexp0.name = string0;
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray1 = null;
      regexp1.toString();
      regexp1.runes = intArray1;
      regexp1.reinit();
      int int4 = 0;
      regexp0.min = int4;
      int int5 = (-2017);
      Regexp.Op regexp_Op2 = Regexp.Op.ALTERNATE;
      regexp1.op = regexp_Op2;
      regexp1.flags = int5;
      regexp0.reinit();
      Regexp.Op.values();
      regexp1.reinit();
      Regexp.Op.values();
      regexp1.equals(regexp0);
      Regexp.Op.values();
      regexp0.reinit();
      regexp0.reinit();
      regexp0.reinit();
      regexp1.maxCap();
      regexp1.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = null;
      regexp0.subs = regexpArray0;
      int int0 = (-1997);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.equals(regexp1);
      regexp0.max = int0;
      Regexp.Op.values();
      regexp0.maxCap();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op1);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = null;
      regexp1.subs = regexpArray0;
      regexp1.op = regexp_Op1;
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      int int0 = regexp0.maxCap();
      regexp_Op0.isPseudo();
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.cap = int0;
      regexp0.equals(regexp1);
      String string0 = "Vl8Z*\"Y^BcRH,sgt Aa";
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Vl8Z*\"Y^BcRH,sgt Aa
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = regexp1.toString();
      regexp1.equals(regexp0);
      regexp1.maxCap();
      regexp0.reinit();
      regexp_Op0.isPseudo();
      regexp1.maxCap();
      regexp1.maxCap();
      regexp_Op0.isPseudo();
      regexp1.equals(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      int[] intArray0 = new int[0];
      regexp1.runes = intArray0;
      int int0 = 15;
      regexp1.cap = int0;
      String string0 = "[invalid char class]";
      Regexp regexp2 = new Regexp(regexp1);
      regexp0.maxCap();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      regexp1.equals(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp0);
      regexp0.equals(regexp2);
      regexp0.reinit();
      String string0 = regexp2.toString();
      Regexp.Op.values();
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp2;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.\\b
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      regexp0.equals(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.toString();
      int int0 = 0;
      regexp0.min = int0;
      regexp0.toString();
      int int1 = 1408;
      regexp0.flags = int1;
      regexp0.equals(regexp_Op0);
      regexp0.reinit();
      regexp0.maxCap();
      regexp_Op0.isPseudo();
      regexpArray0[2].max = regexp0.min;
      regexp0.reinit();
      int int2 = (-1918);
      regexp0.cap = int2;
      Regexp.Op.values();
      regexpArray0[1].reinit();
      regexp_Op0.isPseudo();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      regexp0.op = regexp_Op1;
      String string0 = "";
      regexp0.name = string0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      Object object0 = new Object();
      regexp1.equals(object0);
      String string1 = regexp0.toString();
      regexp1.equals(string1);
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.\\B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 3006;
      regexp0.cap = int0;
      Regexp regexp1 = new Regexp(regexp0);
      int int1 = 3;
      int int2 = (-1804);
      regexp0.cap = int2;
      int int3 = 467;
      regexp1.max = int3;
      regexp1.flags = int1;
      regexp0.min = int1;
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp1.equals(object0);
      regexp0.maxCap();
      regexp1.reinit();
      regexp0.equals(regexp1);
      String string0 = "2PSROVSrV";
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      int int0 = 43;
      regexp0.min = int0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      int int1 = 299;
      regexp0.flags = int0;
      int int2 = 92;
      String string0 = "Lao";
      int int3 = 1;
      regexp2.flags = int3;
      regexp2.name = string0;
      regexp2.flags = int2;
      regexp2.cap = int1;
      regexp1.equals(regexp2);
      regexp0.reinit();
      regexp_Op0.isPseudo();
      regexp0.reinit();
      regexp1.maxCap();
      regexp_Op0.isPseudo();
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp0.equals(regexp3);
      regexp1.reinit();
      regexp2.maxCap();
      Regexp.Op.values();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int int0 = (-2956);
      regexp1.min = int0;
      regexp1.toString();
      regexp1.equals(regexp0);
      regexp0.reinit();
      int int1 = 0;
      regexp0.flags = int1;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      regexp0.op = regexp_Op1;
      regexp0.flags = int1;
      regexp_Op0.isPseudo();
      regexp0.maxCap();
      regexp0.toString();
      regexp0.toString();
      regexp0.equals(regexp_Op0);
      String string0 = "(>\\N";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(>\\N
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      int int0 = (-164);
      regexp1.flags = int0;
      int int1 = 2949;
      regexp1.cap = int1;
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      String string0 = "VERTICAL_BAR";
      Regexp.Op regexp_Op1 = Regexp.Op.valueOf(string0);
      regexp_Op0.isPseudo();
      String string1 = "WORD_BOUNDARY";
      Regexp.Op.valueOf(string0);
      Regexp.Op.valueOf(string1);
      regexp_Op1.isPseudo();
      Regexp regexp0 = null;
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = "";
      regexp0.name = string0;
      Regexp regexp1 = new Regexp(regexp0);
      String string1 = "kB+}>";
      Regexp regexp2 = new Regexp(regexp1);
      int int0 = 769;
      regexp2.max = int0;
      regexp2.equals(string1);
      regexp1.equals(regexp2);
      regexp1.name = string1;
      regexp1.maxCap();
      regexp1.reinit();
      regexp_Op0.isPseudo();
      regexp1.op = regexp_Op0;
      regexp_Op0.isPseudo();
      regexp1.maxCap();
      Regexp.Op.values();
      regexp1.equals(regexp_Op0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(regexp0.name);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 12;
      regexp0.cap = int0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp_Op0);
      int int1 = 1963;
      regexp0.flags = int1;
      Regexp.Op.values();
      regexp0.maxCap();
      regexp1.reinit();
      regexp0.reinit();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.subs = regexpArray0;
      String string0 = "'O|Xw`D#O%]";
      int int0 = 0;
      // Undeclared exception!
      try { 
        regexpArray0[2].equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      Regexp regexp2 = new Regexp(regexp1);
      int int0 = 3509;
      regexp2.max = int0;
      Object object0 = new Object();
      regexp2.equals(object0);
      regexp0.maxCap();
      regexp0.reinit();
      regexp0.reinit();
      regexp2.equals(regexp1);
      Object object1 = new Object();
      regexp0.equals(object1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 0;
      regexp0.flags = int0;
      int int1 = 1320;
      regexp0.cap = int1;
      regexp0.maxCap();
      regexp_Op0.isPseudo();
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 3;
      regexp0.max = int0;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp1.equals(regexp2);
      regexp1.reinit();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = (-1768);
      regexp0.min = int0;
      regexp0.equals(regexp0);
      regexp_Op0.isPseudo();
      Regexp.Op.values();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "ANY_CHAR";
      Regexp.Op regexp_Op0 = Regexp.Op.valueOf(string0);
      Regexp.Op.values();
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[7];
      int int0 = 984;
      intArray0[0] = int0;
      int int1 = 4;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 1;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp0.op = regexp_Op0;
      regexp0.subs = regexpArray0;
      regexp0.flags = int0;
      regexpArray0[0].equals(regexp0.op);
      Regexp regexp1 = new Regexp(regexp0);
      int int1 = 1;
      regexpArray0[0].cap = int1;
      regexpArray0[0].reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      regexp0.op = regexp_Op1;
      regexp1.op = regexp_Op0;
      regexp1.maxCap();
      regexp1.reinit();
      regexp0.maxCap();
      regexp1.maxCap();
      regexp_Op0.isPseudo();
      regexpArray0[0].max = int1;
      regexp0.toString();
      regexp0.op.isPseudo();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      int int0 = 0;
      regexp0.max = int0;
      regexp0.equals(object0);
      regexp0.maxCap();
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      regexp0.reinit();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = "Buhid";
      regexp0.name = string0;
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = "i441NMQn]{U9/[ki";
      regexp0.name = string0;
      regexp0.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = "Buhid";
      regexp0.name = string0;
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      String string0 = regexp0.toString();
      Regexp.Op.valueOf(string0);
      Regexp.Op.valueOf(string0);
      regexp0.equals(regexp_Op0);
      Regexp.Op.values();
      Regexp.Op.values();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      regexp0.equals(regexp1);
      String string0 = null;
      int[] intArray0 = new int[8];
      int int0 = (-268);
      intArray0[0] = int0;
      int int1 = 379;
      intArray0[1] = int1;
      int int2 = (-1926);
      intArray0[2] = int2;
      int int3 = 1421;
      intArray0[3] = int3;
      int int4 = 365;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = (-2625);
      intArray0[6] = int6;
      int int7 = 1;
      intArray0[7] = int7;
      regexp1.runes = intArray0;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op1);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
      assertNotNull(regexp_OpArray0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp0.maxCap();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      boolean boolean0 = regexp0.equals(regexp_Op0);
      assertFalse(boolean0);
      
      boolean boolean1 = regexp_Op0.isPseudo();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = regexp0.toString();
      assertEquals("$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = 41;
      regexp0.flags = int0;
      regexp0.reinit();
      String string0 = regexp0.toString();
      assertEquals("^", string0);
      assertNotNull(string0);
      
      String string1 = "REPEAT";
      Regexp.Op regexp_Op1 = Regexp.Op.valueOf(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertNotSame(string1, string0);
      assertNotSame(regexp_Op1, regexp_Op0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = 0;
      regexp0.cap = int0;
      int int1 = (-1109);
      regexp0.flags = int1;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      int int2 = regexp1.maxCap();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string0 = regexp1.toString();
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertEquals("(?-s:.)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string0 = regexp1.toString();
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertEquals("\\b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      boolean boolean0 = regexp0.equals(regexp1);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp1, regexp0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp regexp0 = null;
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      String string0 = "";
      int int0 = 9;
      regexp1.max = int0;
      regexp1.name = string0;
      int int1 = 1;
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexp1.subs = regexpArray0;
      regexp0.max = int1;
      boolean boolean0 = regexp1.equals(regexp_Op0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
      assertNotNull(regexp_OpArray0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      regexp0.op = regexp_Op1;
      regexp0.op = regexp_Op1;
      regexp0.reinit();
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertNotSame(regexp_Op0, regexp_Op1);
      
      boolean boolean0 = regexp0.op.isPseudo();
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertFalse(boolean0);
      
      int int0 = regexp0.maxCap();
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertEquals(0, int0);
      
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertFalse(regexp_OpArray1.equals((Object)regexp_OpArray0));
      assertNotSame(regexp_OpArray1, regexp_OpArray0);
      assertEquals(21, regexp_OpArray1.length);
      assertNotNull(regexp_OpArray1);
      
      boolean boolean1 = regexp0.equals(regexp_Op0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertFalse(boolean1);
      
      String string0 = "(?P<";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?P<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int0 = 0;
      regexp0.min = int0;
      String string0 = "AE1m_/S'WZ76/Ek)";
      int[] intArray0 = new int[6];
      intArray0[0] = regexp0.min;
      intArray0[1] = regexp0.min;
      intArray0[2] = int0;
      intArray0[3] = regexp0.min;
      intArray0[5] = regexp0.min;
      regexp1.runes = intArray0;
      regexp1.name = string0;
      String string1 = regexp1.toString();
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(string1, string0);
      assertEquals("\\z", string1);
      assertNotNull(string1);
      
      String string2 = regexp1.toString();
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("\\z", string2);
      assertNotNull(string2);
      
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = regexp1.equals(object0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(boolean1 == boolean0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(boolean1);
      
      int int1 = regexp1.maxCap();
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(int1 == int0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertEquals(0, int1);
      
      String string3 = regexp1.toString();
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("\\z", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
      assertNotNull(regexp_OpArray0);
      
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
      
      String string0 = "T1";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.T1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = ";!\"|+)lb]}*X-";
      regexp0.name = string0;
      String string1 = "";
      regexp0.name = string1;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      
      // Undeclared exception!
      try { 
        regexp1.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 2273;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp0, regexp1);
      assertTrue(boolean0);
      
      String string0 = regexp1.toString();
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp0, regexp1);
      assertEquals("(?:)", string0);
      assertNotNull(string0);
      
      String string1 = regexp1.toString();
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(string1, string0);
      assertEquals("(?:)", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      int int0 = 1465;
      regexp0.max = int0;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int1 = 1;
      int int2 = 1576;
      regexp0.min = int2;
      regexp0.flags = int1;
      int[] intArray0 = new int[3];
      intArray0[0] = regexp0.max;
      intArray0[1] = regexp0.max;
      intArray0[2] = regexp0.max;
      regexp1.runes = intArray0;
      int int3 = 347;
      regexp1.cap = int3;
      regexp1.op = regexp_Op0;
      String string0 = regexp1.toString();
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertEquals("[invalid char class]", string0);
      assertNotNull(string0);
      
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      String string1 = "\"7PeBKNw+\"";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.\"7PeBKNw+\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op1);
      assertNotNull(regexp0);
      
      boolean boolean0 = regexp0.equals(regexp_Op1);
      assertSame(regexp_Op1, regexp_Op0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      int int0 = (-660);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertNotNull(regexp1);
      
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertNotNull(regexp2);
      
      regexp0.max = int0;
      regexpArray0[2] = regexp2;
      String string0 = "";
      regexpArray0[2].name = string0;
      int[] intArray0 = new int[9];
      regexp0.max = int0;
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      int int1 = (-1);
      intArray0[5] = int1;
      intArray0[6] = int0;
      int int2 = 0;
      intArray0[7] = int2;
      intArray0[8] = int0;
      regexpArray0[2].runes = intArray0;
      regexpArray0[3] = regexp0;
      regexpArray0[3].cap = int0;
      regexpArray0[4] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.flags = int0;
      Regexp.Op regexp_Op2 = Regexp.Op.NO_WORD_BOUNDARY;
      regexpArray0[0].op = regexp_Op2;
      regexp0.op = regexp_Op1;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }
}
