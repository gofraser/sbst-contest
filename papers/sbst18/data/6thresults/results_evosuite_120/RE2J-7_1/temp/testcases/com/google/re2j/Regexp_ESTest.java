/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:24:21 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = "";
      Regexp[] regexpArray0 = null;
      regexp0.subs = regexpArray0;
      StringBuilder stringBuilder0 = null;
      int int0 = 17;
      PrivateAccess.callMethod((Class<Regexp>) Regexp.class, regexp0, "quoteIfHyphen", (Object) stringBuilder0, (Class<?>) StringBuilder.class, (Object) int0, (Class<?>) int.class);
      regexp0.name = string0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp regexp1 = new Regexp(regexp0);
      int int0 = 68;
      regexp0.min = int0;
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.reinit();
      Regexp regexp3 = new Regexp(regexp0);
      regexp3.cap = regexp0.min;
      regexp1.equals(regexp3);
      regexp2.op = regexp_Op0;
      regexp1.reinit();
      regexp_Op0.isPseudo();
      regexp2.op.isPseudo();
      regexp2.toString();
      regexp2.reinit();
      regexp1.toString();
      String string0 = "1IrhMB";
      regexp0.op = regexp2.op;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.1IrhMB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = (-1399);
      regexp0.min = int0;
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = "";
      regexp0.name = string0;
      Regexp regexp2 = new Regexp(regexp1);
      String string1 = "CHAR_CLASS";
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      regexp1.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp2;
      regexpArray0[3] = regexp0;
      int int1 = 0;
      regexp0.cap = int1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp2;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      regexp1.subs = regexpArray0;
      Regexp.Op.valueOf(string1);
      regexp2.toString();
      // Undeclared exception!
      try { 
        regexp1.maxCap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 1516;
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      regexp0.runes = intArray0;
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      regexp0.op = regexp_Op1;
      regexp0.cap = int0;
      regexp0.toString();
      regexp0.reinit();
      regexp_Op0.isPseudo();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Object object0 = new Object();
      regexp2.equals(object0);
      regexp1.equals(regexp2);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Object object0 = new Object();
      regexp2.equals(object0);
      regexp1.equals(regexp2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = (-19);
      regexp0.min = int0;
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = "l^h-`zH^f[-4";
      regexp1.name = string0;
      regexp1.equals(regexp0);
      regexp0.maxCap();
      regexp1.equals(regexp0);
      Regexp.Op.values();
      regexp0.equals(regexp_Op0);
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(regexp1.name);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.l^h-`zH^f[-4
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      int int0 = 0;
      int int1 = (-498);
      int int2 = 0;
      regexp_Op0.isPseudo();
      Object object0 = null;
      Regexp.Op.values();
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(object0);
      regexp0.maxCap();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 66368;
      intArray0[3] = int3;
      int int4 = 404;
      intArray0[4] = int4;
      int int5 = 330;
      intArray0[5] = int5;
      int int6 = 1846;
      intArray0[6] = int6;
      regexp1.runes = intArray0;
      regexp1.max = intArray0[4];
      regexp1.equals(regexp0);
      regexp0.toString();
      regexp0.toString();
      regexp_Op0.isPseudo();
      regexp1.reinit();
      String string0 = null;
      regexp0.equals(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 545;
      regexp0.max = int0;
      regexp0.maxCap();
      String string0 = "3R@V`|#";
      regexp0.op = regexp_Op0;
      regexp0.equals(string0);
      String string1 = null;
      regexp0.name = string1;
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.toString();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      regexp1.equals(regexp0);
      regexp1.equals(string0);
      String string1 = regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?s:.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = "L";
      regexp0.name = string0;
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[2];
      int int0 = 22;
      intArray0[0] = int0;
      regexp1.flags = intArray0[0];
      int int1 = 0;
      regexp1.flags = int1;
      int int2 = (-2894);
      intArray0[1] = int2;
      regexp1.runes = intArray0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      String string1 = "&G&W>uD";
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexp2.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.maxCap();
      Regexp[] regexpArray0 = null;
      regexp1.subs = regexpArray0;
      int int0 = 0;
      regexp0.flags = int0;
      regexp0.max = int0;
      regexp1.reinit();
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int int0 = (-3423);
      regexp1.flags = int0;
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 13;
      regexp0.cap = int0;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp1.reinit();
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.flags = int0;
      // Undeclared exception!
      try { 
        regexp1.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = null;
      regexp0.runes = intArray0;
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      regexp0.op = regexp_Op1;
      Regexp regexp1 = new Regexp(regexp0);
      Object object0 = new Object();
      regexp1.equals(object0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.maxCap();
      regexp0.reinit();
      int int0 = 5349;
      regexp0.min = int0;
      regexp0.reinit();
      regexp0.toString();
      String string0 = "LEFT_PAREN";
      regexp0.equals(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string0 = regexp1.toString();
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertEquals("\\A", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      boolean boolean0 = regexp0.equals(regexp1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(boolean0);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = 0;
      regexp0.flags = int0;
      regexp0.reinit();
      String string0 = regexp0.toString();
      assertEquals("(?s:.)", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?s:.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp regexp0 = null;
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = 7;
      regexp0.cap = int0;
      int int1 = regexp0.maxCap();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      boolean boolean0 = regexp0.equals(regexp1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string0 = regexp1.toString();
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertEquals("\\b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
      
      regexp0.reinit();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
      assertNotNull(regexp_OpArray0);
      
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertNotSame(regexp_OpArray1, regexp_OpArray0);
      assertEquals(21, regexp_OpArray1.length);
      assertFalse(regexp_OpArray1.equals((Object)regexp_OpArray0));
      assertNotNull(regexp_OpArray1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "\\>@v=sR:jmCc@";
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int0 = 1985;
      regexp1.name = string0;
      regexp1.flags = int0;
      String string1 = regexp1.toString();
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(string1, string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\B", string1);
      assertNotNull(string1);
      
      int int1 = regexp0.maxCap();
      assertNotSame(regexp0, regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      regexp0.reinit();
      assertNotSame(regexp0, regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      
      int int2 = regexp1.maxCap();
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      regexp0.reinit();
      String string0 = regexp0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      
      regexp0.reinit();
      String string1 = regexp0.toString();
      assertNotSame(string1, string0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      regexp0.reinit();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      boolean boolean0 = regexp_Op0.isPseudo();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = 778;
      regexp0.max = int0;
      regexp0.cap = int0;
      int int1 = 2814;
      regexp0.max = int1;
      int int2 = regexp0.maxCap();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      Regexp regexp1 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      int int0 = (-1868);
      regexp2.min = int0;
      boolean boolean0 = regexp0.equals(regexp2);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(boolean0);
      
      int int1 = regexp0.maxCap();
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = regexp1.maxCap();
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string0 = "CHAR_CLASS";
      Regexp.Op regexp_Op2 = Regexp.Op.valueOf(string0);
      assertNotSame(regexp_Op2, regexp_Op1);
      assertNotSame(regexp_Op2, regexp_Op0);
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
      assertNotNull(regexp_OpArray0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = 0;
      CharSequence charSequence0 = null;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, charSequence0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder1.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("null", stringBuilder2.toString());
      
      try { 
        PrivateAccess.callMethod((Class<Regexp>) Regexp.class, regexp0, "appendTo", (Object) stringBuilder2, (Class<?>) StringBuilder.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = 1;
      String string0 = "";
      regexp0.name = string0;
      regexp0.reinit();
      regexp0.flags = int0;
      regexp0.min = int0;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      boolean boolean0 = regexp1.equals(regexp_Op0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(boolean0);
      
      String string1 = regexp0.toString();
      assertNotSame(regexp0, regexp1);
      assertNotSame(string1, string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\z", string1);
      assertNotNull(string1);
      
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
      assertNotNull(regexp_OpArray0);
      
      int int1 = 2370;
      regexp1.flags = int1;
      int int2 = regexp1.maxCap();
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("VERTICAL_BAR", string0);
      assertNotNull(string0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      int int0 = (-1122);
      regexp0.min = int0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[3].op = regexp_Op0;
      regexpArray0[4].max = int0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.reinit();
      int int1 = (-3244);
      int int2 = 0;
      regexpArray0[0].cap = int2;
      regexpArray0[5].min = int2;
      regexp0.cap = int1;
      int int3 = regexp0.maxCap();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      int[] intArray0 = new int[6];
      intArray0[0] = regexpArray0[4].max;
      intArray0[1] = regexp0.cap;
      intArray0[2] = int1;
      intArray0[3] = regexpArray0[4].max;
      intArray0[4] = int0;
      intArray0[5] = regexp0.cap;
      regexpArray0[6].runes = intArray0;
      int int4 = regexp0.maxCap();
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      
      String string1 = regexpArray0[4].toString();
      assertNotSame(string1, string0);
      assertEquals(7, regexpArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("VERTICAL_BAR", string1);
      assertNotNull(string1);
      
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
      assertNotNull(regexp_OpArray0);
      
      regexp0.reinit();
      boolean boolean0 = regexp_Op0.isPseudo();
      assertTrue(boolean0);
      
      boolean boolean1 = regexp0.equals(regexpArray0[6]);
      assertEquals(7, regexpArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertNotSame(regexp_OpArray1, regexp_OpArray0);
      assertEquals(21, regexp_OpArray1.length);
      assertFalse(regexp_OpArray1.equals((Object)regexp_OpArray0));
      assertNotNull(regexp_OpArray1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = "";
      int[] intArray0 = new int[5];
      int int0 = 4375;
      intArray0[0] = int0;
      int int1 = 2239;
      intArray0[1] = int1;
      int int2 = (-1221);
      intArray0[2] = int2;
      int int3 = 570;
      intArray0[3] = int3;
      int int4 = (-1167);
      intArray0[4] = int4;
      regexp0.runes = intArray0;
      regexp0.name = string0;
      String string1 = "";
      Regexp[] regexpArray0 = null;
      regexp0.subs = regexpArray0;
      regexp0.name = string1;
      String string2 = regexp0.toString();
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\u1117\\x{8bf}\\xfffffb3b\u023A\\xfffffb71", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = "";
      Regexp[] regexpArray0 = null;
      regexp0.subs = regexpArray0;
      regexp0.name = string0;
      String string1 = regexp0.toString();
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(?:)", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      int int0 = (-3423);
      regexp1.flags = int0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      boolean boolean0 = regexp1.equals(regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      int[] intArray0 = new int[4];
      int int0 = (-1731);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 1475;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      regexp0.runes = intArray0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "S%swrz";
      regexp0.name = string0;
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
      assertNotNull(regexp_OpArray0);
      
      boolean boolean0 = regexp1.equals(object0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = (-1399);
      regexp0.min = int0;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string0 = "";
      regexp0.name = string0;
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      String string1 = "CHAR_CLASS";
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      regexp1.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      int int1 = 0;
      regexp0.cap = int1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp2;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      regexp1.subs = regexpArray0;
      Regexp.Op regexp_Op2 = Regexp.Op.valueOf(string1);
      assertNotSame(regexp_Op2, regexp_Op0);
      assertNotSame(regexp_Op2, regexp_Op1);
      assertNotSame(string1, string0);
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = regexp2.toString();
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp_Op0, regexp_Op2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp_Op0.equals((Object)regexp_Op2));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("(?-s:.)", string2);
      assertNotNull(string2);
      
      regexp1.maxCap();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "STAR";
      Regexp.Op regexp_Op0 = Regexp.Op.valueOf(string0);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertNotNull(regexp0);
      
      regexp0.reinit();
      assertNotSame(regexp_Op1, regexp_Op0);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      
      String string1 = regexp0.toString();
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(string1, string0);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      regexp0.reinit();
      assertNotSame(regexp_Op1, regexp_Op0);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      
      Regexp.Op regexp_Op2 = Regexp.Op.valueOf(string0);
      assertNotSame(string0, string1);
      assertSame(regexp_Op2, regexp_Op0);
      assertNotSame(regexp_Op2, regexp_Op1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      
      int int0 = regexp0.maxCap();
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp_Op1, regexp_Op2);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp_Op1.equals((Object)regexp_Op2));
      assertEquals(0, int0);
      
      boolean boolean0 = regexp0.equals(regexp_Op0);
      assertNotSame(string0, string1);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertSame(regexp_Op0, regexp_Op2);
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp_Op1, regexp_Op2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp_Op1.equals((Object)regexp_Op2));
      assertFalse(boolean0);
      
      boolean boolean1 = regexp_Op1.isPseudo();
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp_Op1, regexp_Op2);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp_Op1.equals((Object)regexp_Op2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = regexp_Op0.isPseudo();
      assertNotSame(string0, string1);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertSame(regexp_Op0, regexp_Op2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = regexp0.equals(string1);
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp_Op1, regexp_Op2);
      assertNotSame(string1, string0);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp_Op1.equals((Object)regexp_Op2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = 0;
      regexp0.min = int0;
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string0 = "l^h-`zH^f[-4";
      regexp1.name = string0;
      boolean boolean0 = regexp1.equals(regexp0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(boolean0);
      
      int int1 = regexp0.maxCap();
      assertNotSame(regexp0, regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = regexp1.equals(regexp0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
      assertNotNull(regexp_OpArray0);
      
      boolean boolean2 = regexp0.equals(regexp_Op0);
      assertNotSame(regexp0, regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean3 = regexp1.equals(object0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      regexp0.reinit();
      assertNotSame(regexp0, regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(regexp1.name);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.l^h-`zH^f[-4
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int0 = regexp1.maxCap();
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertEquals(0, int0);
      
      int int1 = regexp1.maxCap();
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      boolean boolean0 = regexp0.equals(regexp2);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(boolean0);
      
      int int2 = regexp2.maxCap();
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string0 = regexp2.toString();
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertEquals("$", string0);
      assertNotNull(string0);
      
      regexp1.cap = int2;
      String string1 = "UAG";
      regexp2.name = string1;
      String string2 = "";
      boolean boolean1 = regexp2.equals(string2);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = regexp1.toString();
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("$", string3);
      assertNotNull(string3);
      
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
      assertNotNull(regexp_OpArray0);
      
      regexp1.reinit();
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      
      boolean boolean2 = regexp1.equals(regexp_Op0);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(boolean2);
      
      boolean boolean3 = regexp_Op0.isPseudo();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      regexp1.reinit();
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int0 = 68;
      regexp0.min = int0;
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexp2.reinit();
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      regexp3.cap = regexp0.min;
      boolean boolean1 = regexp1.equals(regexp3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      regexp2.op = regexp_Op1;
      regexp1.reinit();
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp3);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      
      boolean boolean2 = regexp_Op0.isPseudo();
      assertNotSame(regexp_Op0, regexp_Op1);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = regexp2.op.isPseudo();
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }
}
