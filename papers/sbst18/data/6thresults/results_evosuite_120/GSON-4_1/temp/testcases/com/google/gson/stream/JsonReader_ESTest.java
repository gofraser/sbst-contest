/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 21:15:19 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberInputStream;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringBufferInputStream;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.MalformedInputException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      stringReader0.ready();
      int int0 = (-137);
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader(stringReader0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'a';
      charArray0[0] = char0;
      char char1 = 'c';
      charArray0[1] = char1;
      char char2 = 'U';
      charArray0[2] = char2;
      char char3 = '\'';
      charArray0[3] = char3;
      int int0 = 0;
      int int1 = 1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, int0, int1);
      charArrayReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      charArrayReader0.read();
      int int2 = 7;
      jsonReader0.peeked = int2;
      jsonReader0.isLenient();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was NULL at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = null;
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'M';
      charArray0[0] = char0;
      char char1 = 'd';
      charArray0[1] = char1;
      char char2 = 'l';
      charArray0[2] = char2;
      char char3 = 'a';
      charArray0[3] = char3;
      char char4 = 'b';
      charArray0[4] = char4;
      char char5 = 'I';
      charArray0[5] = char5;
      char char6 = 'A';
      charArray0[6] = char6;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "4T YEqK_";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      char[] charArray1 = new char[6];
      char char0 = '!';
      charArray1[0] = char0;
      char char1 = 'U';
      charArray1[1] = char1;
      char char2 = 'c';
      charArray1[2] = char2;
      int int0 = (-43);
      charArrayReader0.mark(int0);
      char char3 = 'g';
      charArray1[3] = char3;
      char char4 = '0';
      charArray1[4] = char4;
      char char5 = 'L';
      charArray1[5] = char5;
      int int1 = charArrayReader0.read(charArray1);
      charArrayReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.peeked = int1;
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "$VAhUES";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"$VAhUES\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(stringBufferInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "null";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[4];
      char char0 = 'N';
      charArray0[2] = char0;
      char char1 = '_';
      charArray0[1] = char1;
      char char2 = '\'';
      charArray0[3] = char2;
      jsonReader0.hasNext();
      jsonReader0.skipValue();
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.nextName();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reader reader0 = null;
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader(reader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 9;
      PipedReader pipedReader0 = new PipedReader(int0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.getPath();
      boolean boolean0 = false;
      jsonReader0.setLenient(boolean0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "r2Ugg";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "5553}i[.,~,p$67`U\\";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was NUMBER at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "Unterminated comment";
      StringReader stringReader0 = new StringReader(string0);
      int int0 = 8;
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, int0);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1562;
      PipedReader pipedReader0 = new PipedReader(int0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0, charset0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)41;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-120);
      byteArray0[1] = byte1;
      byte byte2 = (byte)39;
      byteArray0[2] = byte2;
      byte byte3 = (byte)10;
      byteArray0[3] = byte3;
      byte byte4 = (byte)32;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-16);
      byteArray0[5] = byte5;
      byte byte6 = (byte)1;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      int int0 = 9;
      sequenceInputStream0.read(byteArray0, int0, (int) byteArray0[2]);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "$VALUES";
      boolean boolean0 = false;
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(stringBufferInputStream0);
      int int0 = 14;
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0, int0);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = '(';
      charArray0[0] = char0;
      char char1 = '\"';
      charArray0[1] = char1;
      char char2 = 'v';
      charArray0[2] = char2;
      char char3 = 's';
      charArray0[3] = char3;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "Expected null but was ";
      StringReader stringReader0 = new StringReader(string0);
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = ',';
      charArray0[0] = char0;
      char char1 = 'I';
      charArray0[1] = char1;
      char char2 = 's';
      charArray0[2] = char2;
      char char3 = 'S';
      charArray0[3] = char3;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "com.google.gson.stream.JsonReader";
      StringReader stringReader0 = new StringReader(string0);
      char[] charArray0 = new char[9];
      char char0 = '~';
      charArray0[0] = char0;
      char char1 = 'a';
      charArray0[1] = char1;
      char char2 = '9';
      charArray0[2] = char2;
      char char3 = '{';
      charArray0[3] = char3;
      char char4 = 'a';
      charArray0[4] = char4;
      char char5 = '=';
      charArray0[5] = char5;
      char char6 = 'K';
      charArray0[6] = char6;
      char char7 = '9';
      charArray0[7] = char7;
      char char8 = 'o';
      charArray0[8] = char8;
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = '\\';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      char char2 = 'm';
      charArray0[2] = char2;
      char char3 = '~';
      charArray0[3] = char3;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      lineNumberReader0.ready();
      int int0 = 1340;
      charArrayReader0.mark(int0);
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = '=';
      charArray0[0] = char0;
      char char1 = '<';
      charArray0[1] = char1;
      char char2 = '\"';
      charArray0[2] = char2;
      char char3 = 'M';
      charArray0[3] = char3;
      char char4 = 'I';
      charArray0[4] = char4;
      char char5 = 'U';
      charArray0[5] = char5;
      char char6 = 'R';
      charArray0[6] = char6;
      char char7 = 'W';
      charArray0[7] = char7;
      char char8 = 'd';
      charArray0[8] = char8;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      boolean boolean0 = false;
      jsonReader0.setLenient(boolean0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-64);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)8;
      byteArray0[2] = byte2;
      byte byte3 = (byte)9;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-108);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-18);
      byteArray0[5] = byte5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0, charsetDecoder0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: MalformedInputException");
      
      } catch(MalformedInputException e) {
         //
         // Input length = 1
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '$';
      charArray0[0] = char0;
      int int0 = 0;
      int int1 = 0;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, int0, int1);
      charArrayReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = ":Uw}EEX&r";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      LineNumberInputStream lineNumberInputStream0 = new LineNumberInputStream(stringBufferInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(lineNumberInputStream0, charsetDecoder0);
      charset0.encode(string0);
      lineNumberInputStream0.reset();
      int int0 = 738;
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0, int0);
      charset0.aliases();
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InputStream inputStream0 = null;
      LineNumberInputStream lineNumberInputStream0 = new LineNumberInputStream(inputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(lineNumberInputStream0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)59;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      int int0 = 0;
      lineNumberInputStream0.read(byteArray0, int0, (int) byte3);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0, charsetDecoder0);
      String string0 = " _,X|p0cL[7uNns.dc|";
      ByteBuffer byteBuffer0 = charset0.encode(string0);
      int int1 = 0;
      float float0 = (-2273.17F);
      byteBuffer0.mark();
      byteBuffer0.putFloat(int1, float0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charset0.encode(charBuffer0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.LineNumberInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      char char0 = '|';
      pipedWriter0.append(char0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "BEGIN_OBJECT";
      StringReader stringReader0 = new StringReader(string0);
      stringReader0.read();
      stringReader0.markSupported();
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.close();
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'b';
      charArray0[0] = char0;
      char char1 = '(';
      charArray0[1] = char1;
      char char2 = '6';
      charArray0[2] = char2;
      char char3 = '&';
      charArray0[3] = char3;
      char char4 = 'Z';
      charArray0[4] = char4;
      char char5 = 'F';
      charArray0[5] = char5;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 2;
      PipedReader pipedReader0 = new PipedReader(int0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'a';
      charArray0[0] = char0;
      char char1 = 'c';
      charArray0[1] = char1;
      char char2 = 'U';
      charArray0[2] = char2;
      char char3 = '\'';
      charArray0[3] = char3;
      int int0 = 0;
      int int1 = 1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, int0, int1);
      charArrayReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.isLenient();
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "null";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[4];
      char char0 = 'N';
      charArray0[0] = char0;
      char char1 = '_';
      charArray0[1] = char1;
      char char2 = 'x';
      charArray0[2] = char2;
      char char3 = '\'';
      charArray0[3] = char3;
      stringReader0.read(charArray0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      PipedWriter pipedWriter0 = new PipedWriter();
      String string0 = "com.google.gson.stream.JsonReader";
      int int0 = 769;
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      long long0 = 0L;
      stringReader0.skip(long0);
      stringReader0.skip(long0);
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '=';
      charArray0[0] = char0;
      char char1 = 'W';
      charArray0[1] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 5;
      PipedReader pipedReader0 = new PipedReader(int0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'n';
      charArray0[0] = char0;
      char char1 = '~';
      charArray0[1] = char1;
      char char2 = 'Q';
      charArray0[2] = char2;
      char char3 = 'J';
      charArray0[3] = char3;
      char char4 = 'i';
      charArray0[4] = char4;
      char char5 = 't';
      charArray0[5] = char5;
      int int0 = 0;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, int0, int0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "Expected value";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      long long0 = (-1635L);
      stringReader0.skip(long0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = 'T';
      charArray0[0] = char0;
      char char1 = '4';
      charArray0[1] = char1;
      char char2 = '\"';
      charArray0[2] = char2;
      char char3 = 'o';
      charArray0[3] = char3;
      charArray0[4] = charArray0[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonReader jsonReader0 = new JsonReader(mockFileReader0);
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1079;
      PipedReader pipedReader0 = new PipedReader(int0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      pipedReader0.close();
      boolean boolean0 = false;
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonReader jsonReader0 = new JsonReader(mockFileReader0);
      // Undeclared exception!
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(stringBufferInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      jsonReader0.toString();
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      char[] charArray0 = new char[4];
      char char0 = '.';
      charArray0[0] = char0;
      char char1 = '[';
      pipedWriter0.write(charArray0);
      pipedReader0.read(charArray0);
      charArray0[1] = char1;
      pipedReader0.ready();
      char char2 = ',';
      charArray0[2] = char2;
      pipedReader0.close();
      char char3 = 'f';
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonReader jsonReader0 = new JsonReader(mockFileReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "null";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[4];
      char char0 = '_';
      charArray0[1] = char0;
      char char1 = '\'';
      charArray0[3] = char1;
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "f<[rI7l";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      LineNumberInputStream lineNumberInputStream0 = new LineNumberInputStream(stringBufferInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(lineNumberInputStream0, charsetDecoder0);
      charset0.encode(string0);
      lineNumberInputStream0.reset();
      int int0 = 738;
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0, int0);
      charset0.aliases();
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "null";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[4];
      char char0 = 'N';
      charArray0[2] = char0;
      char char1 = '_';
      charArray0[1] = char1;
      char char2 = '\'';
      charArray0[3] = char2;
      jsonReader0.hasNext();
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'M';
      char char1 = 'd';
      charArray0[1] = char1;
      char char2 = 'l';
      charArray0[2] = char2;
      char char3 = 'a';
      charArray0[3] = char3;
      char char4 = 'b';
      charArray0[4] = char4;
      char char5 = 'I';
      charArray0[5] = char5;
      char char6 = 'A';
      charArray0[6] = char6;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "{";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(stringBufferInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      InputStream inputStream0 = null;
      LineNumberInputStream lineNumberInputStream0 = new LineNumberInputStream(inputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(lineNumberInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.LineNumberInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = ":Uw}EEX&r";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      LineNumberInputStream lineNumberInputStream0 = new LineNumberInputStream(stringBufferInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(lineNumberInputStream0, charsetDecoder0);
      charset0.encode(string0);
      lineNumberInputStream0.reset();
      int int0 = 738;
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0, int0);
      charset0.aliases();
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      char[] charArray1 = new char[6];
      char char0 = '!';
      charArray1[0] = char0;
      charArray1[1] = charArray1[0];
      char char1 = 'c';
      charArray1[2] = char1;
      int int0 = (-43);
      char char2 = 'g';
      charArray1[3] = char2;
      char char3 = '0';
      charArray1[4] = char3;
      char char4 = 'L';
      charArray1[5] = char4;
      int int1 = charArrayReader0.read(charArray1);
      charArrayReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.peeked = int1;
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      char[] charArray1 = new char[6];
      char char0 = '!';
      charArray1[0] = char0;
      char char1 = 'U';
      charArray1[1] = char1;
      char char2 = 'c';
      charArray1[2] = char2;
      int int0 = (-43);
      charArrayReader0.mark(int0);
      char char3 = 'g';
      charArray1[3] = char3;
      char char4 = '0';
      charArray1[4] = char4;
      char char5 = 'L';
      charArray1[5] = char5;
      int int1 = charArrayReader0.read(charArray1);
      charArrayReader0.markSupported();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.peeked = int0;
      jsonReader0.peeked = int1;
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'V';
      charArray0[0] = char0;
      char char1 = 'd';
      charArray0[1] = char1;
      char char2 = 'l';
      charArray0[2] = char2;
      char char3 = 'a';
      charArray0[3] = char3;
      char char4 = 'b';
      charArray0[4] = char4;
      char char5 = 'I';
      charArray0[5] = char5;
      char char6 = 'A';
      charArray0[6] = char6;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      InputStream inputStream0 = null;
      LineNumberInputStream lineNumberInputStream0 = new LineNumberInputStream(inputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(lineNumberInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.LineNumberInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonReader jsonReader0 = new JsonReader(mockFileReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "";
      int int0 = (-137);
      char[] charArray0 = new char[7];
      char char0 = '`';
      charArray0[0] = char0;
      char char1 = '@';
      charArray0[1] = char1;
      char char2 = '_';
      charArray0[2] = char2;
      char char3 = '6';
      charArray0[3] = char3;
      char char4 = '[';
      charArray0[4] = char4;
      char char5 = 'B';
      charArray0[5] = char5;
      char char6 = '1';
      charArray0[6] = char6;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)76;
      byteArray0[0] = byte0;
      byte byte1 = (byte)6;
      byteArray0[1] = byte1;
      byte byte2 = (byte)32;
      byteArray0[2] = byte2;
      int int1 = 1715;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int1, int1);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      InputStream inputStream0 = null;
      LineNumberInputStream lineNumberInputStream0 = new LineNumberInputStream(inputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(lineNumberInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      // Undeclared exception!
      try { 
        jsonReader0.peek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.LineNumberInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "null";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[4];
      char char0 = 'N';
      charArray0[2] = char0;
      char char1 = '_';
      int int0 = 1773;
      jsonReader0.peeked = int0;
      char char2 = '\'';
      charArray0[3] = char2;
      jsonReader0.skipValue();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = false;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      Reader reader1 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader1).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader1);
      // Undeclared exception!
      jsonReader0.beginArray();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.beginObject();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.getPath();
      // Undeclared exception!
      jsonReader0.nextBoolean();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.endObject();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[3];
      char char0 = '\"';
      charArray0[0] = char0;
      char char1 = 'L';
      charArray0[1] = char1;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.nextLong();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.doPeek();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.peek();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.nextInt();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "nbld~ha ";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      int int0 = (-867);
      PrivateAccess.callMethod((Class<JsonReader>) JsonReader.class, jsonReader0, "fillBuffer", (Object) int0, (Class<?>) int.class);
      jsonReader0.toString();
      int int1 = (-2411);
      PrivateAccess.callMethod((Class<JsonReader>) JsonReader.class, jsonReader0, "push", (Object) int1, (Class<?>) int.class);
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.createFolder(evoSuiteFile1);
      // Undeclared exception!
      jsonReader0.hasNext();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "null";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[4];
      char char0 = 'N';
      charArray0[2] = char0;
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      char[] charArray1 = new char[6];
      char char0 = '\u0011';
      charArray1[0] = char0;
      char char1 = 'U';
      charArray1[1] = char1;
      char char2 = 'c';
      charArray1[2] = char2;
      int int0 = (-43);
      charArrayReader0.mark(int0);
      char char3 = 'g';
      charArray1[3] = char3;
      char char4 = '0';
      charArray1[4] = char4;
      char char5 = 'L';
      charArray1[5] = char5;
      charArrayReader0.read(charArray1);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.peeked = (int) charArray1[1];
      PrivateAccess.callMethod((Class<JsonReader>) JsonReader.class, jsonReader0, "peekNumber");
      PrivateAccess.setVariable((Class<JsonReader>) JsonReader.class, jsonReader0, "lenient", (Object) boolean0);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      boolean boolean1 = true;
      String string0 = "";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.nextString();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "null";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[4];
      char char0 = 'N';
      charArray0[2] = char0;
      char char1 = '_';
      charArray0[1] = char1;
      char char2 = '\'';
      PrivateAccess.callMethod((Class<JsonReader>) JsonReader.class, jsonReader0, "consumeNonExecutePrefix");
      charArray0[3] = char2;
      jsonReader0.hasNext();
      jsonReader0.skipValue();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      boolean boolean0 = false;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = mock(PipedOutputStream.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      CharsetDecoder charsetDecoder0 = mock(CharsetDecoder.class, new ViolatedAssumptionAnswer());
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }
}
