/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:41:03 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringBufferInputStream;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.MalformedInputException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.flush();
      int int0 = 123;
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, int0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      pipedWriter0.write(int0);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(string0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        pipedReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reset() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Reader reader0 = null;
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader(reader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "n&b4";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Reader reader0 = null;
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader(reader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "NAME";
      StringReader stringReader0 = new StringReader(string0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(mockFileInputStream0, charset0);
      int int0 = 1419;
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0, int0);
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      jsonReader0.isLenient();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "Yb.PFF'~~\"c7bw";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      int int0 = (-417);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)46;
      byteArray0[1] = byte1;
      byte byte2 = (byte)65;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-25);
      byteArray0[4] = byte4;
      byte byte5 = (byte)18;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(stringBufferInputStream0, charset0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      boolean boolean0 = true;
      jsonReader0.setLenient(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "pB\\*m8~v>}\\";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      int int0 = 3182;
      jsonReader0.peeked = int0;
      jsonReader0.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      stringReader0.read();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      int int0 = 113;
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, int0);
      long long0 = 1201L;
      bufferedReader0.skip(long0);
      bufferedReader0.markSupported();
      lineNumberReader0.read();
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      lineNumberReader0.readLine();
      bufferedReader0.read();
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.getPath();
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "qWjbha yM";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(stringBufferInputStream0, stringBufferInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1;
      PipedReader pipedReader0 = new PipedReader(int0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 0;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, int0, int0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)58;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)70;
      byteArray0[2] = byte2;
      byte byte3 = (byte)8;
      byteArray0[3] = byte3;
      byte byte4 = (byte)10;
      byteArray0[4] = byte4;
      byte byte5 = (byte)92;
      byteArray0[5] = byte5;
      byte byte6 = (byte)90;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-92);
      byteArray0[7] = byte7;
      byte byte8 = (byte)85;
      byteArray0[8] = byte8;
      int int0 = 1738;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byte1, int0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: MalformedInputException");
      
      } catch(MalformedInputException e) {
         //
         // Input length = 1
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'F';
      charArray0[0] = char0;
      char char1 = 'O';
      charArray0[1] = char1;
      char char2 = 'x';
      charArray0[2] = char2;
      char char3 = 'S';
      charArray0[3] = char3;
      char char4 = 'K';
      charArray0[4] = char4;
      char char5 = 'A';
      charArray0[5] = char5;
      char char6 = ';';
      charArray0[6] = char6;
      char char7 = 'S';
      charArray0[7] = char7;
      char char8 = 'e';
      charArray0[8] = char8;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 2048;
      PipedReader pipedReader0 = new PipedReader(int0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'B';
      charArray0[0] = char0;
      char char1 = 'q';
      charArray0[1] = char1;
      char char2 = 'h';
      charArray0[2] = char2;
      char char3 = 'B';
      charArray0[3] = char3;
      char char4 = 'c';
      charArray0[4] = char4;
      char char5 = 'i';
      charArray0[5] = char5;
      char char6 = '2';
      charArray0[6] = char6;
      char char7 = 'F';
      charArray0[7] = char7;
      char char8 = 'Z';
      charArray0[8] = char8;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = 'R';
      charArray0[0] = char0;
      char char1 = '^';
      charArray0[1] = char1;
      char char2 = '/';
      charArray0[2] = char2;
      char char3 = 'T';
      charArray0[3] = char3;
      char char4 = 'k';
      charArray0[4] = char4;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read();
      Charset charset0 = Charset.defaultCharset();
      String string0 = "NULL";
      ByteBuffer byteBuffer0 = charset0.encode(string0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charArrayReader0.read(charBuffer0);
      charArrayReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '?';
      charArray0[0] = char0;
      char char1 = 't';
      charArray0[1] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "4evME$WU3LG\"IgB2";
      StringReader stringReader0 = new StringReader(string0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      lineNumberReader0.ready();
      char[] charArray0 = new char[0];
      lineNumberReader0.read(charArray0);
      int int0 = 0;
      lineNumberReader0.setLineNumber(int0);
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 4;
      PipedReader pipedReader0 = new PipedReader(int0);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = 'n';
      charArray0[0] = char0;
      char char1 = 'C';
      charArray0[1] = char1;
      char char2 = 'J';
      charArray0[2] = char2;
      char char3 = 'u';
      charArray0[3] = char3;
      char char4 = 'i';
      charArray0[4] = char4;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      int int0 = charArrayReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      charArrayReader0.skip(int0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'W';
      charArray0[0] = char0;
      char char1 = ';';
      charArray0[1] = char1;
      char char2 = 'h';
      charArray0[2] = char2;
      char char3 = ',';
      charArray0[3] = char3;
      char char4 = 'k';
      charArray0[4] = char4;
      char char5 = 'u';
      charArray0[5] = char5;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      charArrayReader0.reset();
      boolean boolean0 = false;
      jsonReader0.setLenient(boolean0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      boolean boolean0 = false;
      jsonReader0.setLenient(boolean0);
      String string0 = "Unterminated escape sequence";
      ByteBuffer byteBuffer0 = charset0.encode(string0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charset0.encode(charBuffer0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'P';
      charArray0[0] = char0;
      char char1 = '\'';
      charArray0[1] = char1;
      char char2 = '?';
      charArray0[2] = char2;
      char char3 = '<';
      charArray0[3] = char3;
      char char4 = '+';
      charArray0[4] = char4;
      char char5 = 'l';
      charArray0[5] = char5;
      char char6 = 'g';
      charArray0[6] = char6;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      long long0 = 0L;
      charArrayReader0.skip(long0);
      charArrayReader0.ready();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charset0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      charset0.aliases();
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "NAME";
      StringReader stringReader0 = new StringReader(string0);
      int int0 = 3;
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, int0);
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      long long0 = 0L;
      stringReader0.skip(long0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      int int0 = (-1375);
      jsonReader0.toString();
      jsonReader0.peeked = int0;
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "OnHf) #a-oVB\\";
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      int int0 = (-38);
      jsonReader0.peeked = int0;
      jsonReader0.close();
      jsonReader0.toString();
      // Undeclared exception!
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "Q";
      StringReader stringReader0 = new StringReader(string0);
      stringReader0.markSupported();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(string0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charBuffer0.codePoints();
      stringReader0.read(charBuffer0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      // Undeclared exception!
      try { 
        jsonReader0.peek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = '0';
      charArray0[0] = char0;
      char char1 = 'v';
      charArray0[1] = char1;
      char char2 = '';
      charArray0[2] = char2;
      char char3 = 'h';
      charArray0[3] = char3;
      char char4 = '.';
      charArray0[4] = char4;
      char char5 = 'C';
      charArray0[5] = char5;
      char char6 = ' ';
      charArray0[6] = char6;
      char char7 = 'T';
      charArray0[7] = char7;
      char char8 = '|';
      charArray0[8] = char8;
      int int0 = 0;
      int int1 = 3;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, int0, int1);
      charArrayReader0.read(charArray0);
      boolean boolean0 = charArrayReader0.ready();
      charArrayReader0.mark(int1);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(boolean0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "%Zvwv\\PHyi=_";
      StringReader stringReader0 = new StringReader(string0);
      int int0 = 0;
      stringReader0.mark(int0);
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "tw/c7uu&";
      StringReader stringReader0 = new StringReader(string0);
      long long0 = 0L;
      stringReader0.skip(long0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.reset();
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1359;
      PipedReader pipedReader0 = new PipedReader(int0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, int0);
      PushbackReader pushbackReader0 = new PushbackReader(lineNumberReader0, int0);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.nextInt();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte)89;
      byteArray0[1] = byte1;
      byte byte2 = (byte)3;
      byteArray0[2] = byte2;
      byte byte3 = (byte)6;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)2;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-44);
      byteArray0[6] = byte6;
      byte byte7 = (byte)4;
      byteArray0[7] = byte7;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.nextBoolean();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = 1498L;
      Charset.defaultCharset();
      String string0 = "";
      String string1 = "}fmyz=2mENEo5:";
      StringReader stringReader0 = new StringReader(string1);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      doReturn(0L).when(reader0).skip(anyLong());
      int int0 = 1277;
      String string0 = "m9;Pk&XuNP8@C)";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      PushbackReader pushbackReader0 = new PushbackReader(reader0, int0);
      int int1 = 1671;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      pushbackReader0.unread(int1);
      pushbackReader0.skip(int0);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      // Undeclared exception!
      jsonReader0.endArray();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "Expected ':'";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Expected ':'/go)OnhqNR d*");
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = true;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.beginObject();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.nextString();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "OnHf) #a-oVB\\";
      int int0 = (-38);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.hasNext();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      jsonReader0.close();
      int int0 = 3;
      PrivateAccess.setVariable((Class<JsonReader>) JsonReader.class, jsonReader0, "peekedNumberLength", (Object) int0);
      PrivateAccess.callMethod((Class<JsonReader>) JsonReader.class, jsonReader0, "skipToEndOfLine");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      PrivateAccess.callMethod((Class<JsonReader>) JsonReader.class, jsonReader0, "skipUnquotedValue");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '^';
      charArray0[0] = char0;
      char char1 = 't';
      charArray0[1] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.close();
      jsonReader0.toString();
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      String string0 = null;
      try { 
        PrivateAccess.callMethod((Class<JsonReader>) JsonReader.class, jsonReader0, "skipTo", (Object) string0, (Class<?>) String.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long long0 = 2964L;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      PipedWriter pipedWriter0 = mock(PipedWriter.class, new ViolatedAssumptionAnswer());
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      int int0 = 8;
      PrivateAccess.callMethod((Class<JsonReader>) JsonReader.class, jsonReader0, "push", (Object) int0, (Class<?>) int.class);
      JsonReader jsonReader1 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader1.beginObject();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "4evME$WU3LG\"IgB2";
      char[] charArray0 = new char[0];
      int int0 = 0;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.doPeek();
  }
}
