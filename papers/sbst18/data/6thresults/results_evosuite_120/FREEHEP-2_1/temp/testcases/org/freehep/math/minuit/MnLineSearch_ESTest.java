/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:42:05 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnFcn;
import org.freehep.math.minuit.MnLineSearch;
import org.freehep.math.minuit.MnMachinePrecision;
import org.freehep.math.minuit.MnParabolaPoint;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnLineSearch_ESTest extends MnLineSearch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 2595.308;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      int int0 = 69;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      double double1 = 0.0;
      MnMachinePrecision mnMachinePrecision0 = new MnMachinePrecision();
      assertNotNull(mnMachinePrecision0);
      
      mnMachinePrecision0.setPrecision(double1);
      assertNotEquals(double1, double0, 0.01);
      
      MnParabolaPoint mnParabolaPoint0 = MnLineSearch.search(mnFcn0, minimumParameters0, mnAlgebraicVector0, double0, mnMachinePrecision0);
      assertNotNull(mnParabolaPoint0);
      assertNotEquals(double0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double double0 = 4468.83827547897;
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      MnAlgebraicVector mnAlgebraicVector0 = null;
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MnMachinePrecision mnMachinePrecision0 = null;
      // Undeclared exception!
      try { 
        MnLineSearch.search(mnFcn0, minimumParameters0, mnAlgebraicVector0, double0, mnMachinePrecision0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnLineSearch", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 0.9250000000000003;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MnMachinePrecision mnMachinePrecision0 = new MnMachinePrecision();
      assertNotNull(mnMachinePrecision0);
      
      mnMachinePrecision0.setPrecision(mnFcn0.theNumCall);
      MnParabolaPoint mnParabolaPoint0 = MnLineSearch.search(mnFcn0, minimumParameters0, mnAlgebraicVector0, double0, mnMachinePrecision0);
      assertNotNull(mnParabolaPoint0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = (-200.82);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MnMachinePrecision mnMachinePrecision0 = new MnMachinePrecision();
      assertNotNull(mnMachinePrecision0);
      
      mnMachinePrecision0.setPrecision(double0);
      MnParabolaPoint mnParabolaPoint0 = MnLineSearch.search(mnFcn0, minimumParameters0, mnAlgebraicVector0, double0, mnMachinePrecision0);
      assertNotNull(mnParabolaPoint0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = 0.5;
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      int int0 = 1022;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MnMachinePrecision mnMachinePrecision0 = new MnMachinePrecision();
      assertNotNull(mnMachinePrecision0);
      
      MnParabolaPoint mnParabolaPoint0 = MnLineSearch.search(mnFcn0, minimumParameters0, mnAlgebraicVector0, double0, mnMachinePrecision0);
      assertNotNull(mnParabolaPoint0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = (-275.28460608911);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      double double1 = 1873.962368;
      MnMachinePrecision mnMachinePrecision0 = new MnMachinePrecision();
      assertNotNull(mnMachinePrecision0);
      
      mnMachinePrecision0.setPrecision(double1);
      assertNotEquals(double1, double0, 0.01);
      
      MnParabolaPoint mnParabolaPoint0 = MnLineSearch.search(mnFcn0, minimumParameters0, mnAlgebraicVector0, double0, mnMachinePrecision0);
      assertNotNull(mnParabolaPoint0);
      assertNotEquals(double0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = (-200.82);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MnMachinePrecision mnMachinePrecision0 = new MnMachinePrecision();
      assertNotNull(mnMachinePrecision0);
      
      double double1 = 4.0E-7;
      MnParabolaPoint mnParabolaPoint0 = MnLineSearch.search(mnFcn0, minimumParameters0, mnAlgebraicVector0, double1, mnMachinePrecision0);
      assertNotNull(mnParabolaPoint0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = 1833.935255764;
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MnMachinePrecision mnMachinePrecision0 = new MnMachinePrecision();
      assertNotNull(mnMachinePrecision0);
      
      MnParabolaPoint mnParabolaPoint0 = MnLineSearch.search(mnFcn0, minimumParameters0, mnAlgebraicVector0, int0, mnMachinePrecision0);
      assertNotNull(mnParabolaPoint0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = 0.5;
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      int int0 = 1022;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MnMachinePrecision mnMachinePrecision0 = new MnMachinePrecision();
      assertNotNull(mnMachinePrecision0);
      
      double double1 = (-72.945523299);
      mnMachinePrecision0.setPrecision(double1);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      MnLineSearch.search(mnFcn0, minimumParameters0, mnAlgebraicVector0, double1, mnMachinePrecision0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double double0 = (-200.82);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MnMachinePrecision mnMachinePrecision0 = new MnMachinePrecision();
      assertNotNull(mnMachinePrecision0);
      
      mnMachinePrecision0.setPrecision(double0);
      int int1 = 2114;
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(int1);
      assertNotNull(mnAlgebraicVector1);
      assertFalse(int1 == int0);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      
      // Undeclared exception!
      try { 
        MnLineSearch.search(mnFcn0, minimumParameters0, mnAlgebraicVector1, double0, mnMachinePrecision0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = (-200.82);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      double double1 = mnFcn0.valueOf(mnAlgebraicVector0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MnMachinePrecision mnMachinePrecision0 = new MnMachinePrecision();
      assertNotNull(mnMachinePrecision0);
      
      int int1 = 2114;
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(int1);
      assertNotNull(mnAlgebraicVector1);
      assertFalse(int1 == int0);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      
      // Undeclared exception!
      try { 
        MnLineSearch.search(mnFcn0, minimumParameters0, mnAlgebraicVector1, double1, mnMachinePrecision0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incompatible vectors
         //
         verifyException("org.freehep.math.minuit.MnUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = (-200.82);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MnMachinePrecision mnMachinePrecision0 = new MnMachinePrecision();
      assertNotNull(mnMachinePrecision0);
      
      MnParabolaPoint mnParabolaPoint0 = MnLineSearch.search(mnFcn0, minimumParameters0, mnAlgebraicVector0, int0, mnMachinePrecision0);
      assertNotNull(mnParabolaPoint0);
  }
}
