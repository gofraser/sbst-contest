/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:13:40 GMT 2018
 */

package org.apache.commons.imaging.formats.bmp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.ScrollPane;
import java.awt.TextField;
import java.awt.image.BufferedImage;
import java.awt.image.Kernel;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringBufferInputStream;
import java.net.URI;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Function;
import javax.swing.JLayer;
import javax.swing.JPanel;
import org.apache.commons.imaging.FormatCompliance;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.ImageFormats;
import org.apache.commons.imaging.ImageParser;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.bmp.BmpImageParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BmpImageParser_ESTest extends BmpImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      int int0 = 70;
      int int1 = 2172;
      int int2 = 0;
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int1, int1, int0, int2).when(inputStream0).read();
      int int3 = (-1);
      PrivateAccess.callMethod((Class<BmpImageParser>) BmpImageParser.class, bmpImageParser0, "getRLEBytes", (Object) inputStream0, (Class<?>) InputStream.class, (Object) int3, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSource byteSource0 = null;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      byte byte0 = (byte) (-13);
      byteArray0[1] = byte0;
      byte byte1 = (byte)8;
      byteArray0[2] = byteArray0[1];
      byte byte2 = (byte)4;
      byteArray0[3] = byte2;
      Map<String, Object> map0 = null;
      long long0 = 535L;
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      int int0 = 80;
      BufferedImage bufferedImage0 = new BufferedImage(byte1, byteArray0[3], byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-13), (byte) (-13), (byte)4}, byteArray0);
      assertNotNull(bufferedImage0);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(8, bufferedImage0.getTileWidth());
      assertEquals(8, bufferedImage0.getWidth());
      assertEquals(4, bufferedImage0.getHeight());
      assertEquals(4, bufferedImage0.getTileHeight());
      assertEquals(8, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(4, byteArray0.length);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        bmpImageParser0.writeImage(bufferedImage0, pipedOutputStream0, map0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/evosuite_6th");
      String string0 = "VERBOSE";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      ImageParser[] imageParserArray0 = ImageParser.getAllImageParsers();
      assertNotNull(imageParserArray0);
      assertEquals(15, imageParserArray0.length);
      
      ImageFormat imageFormat0 = mock(ImageFormat.class, new ViolatedAssumptionAnswer());
      File file0 = null;
      int int0 = (-2522);
      int int1 = 399;
      int int2 = 4080;
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(inputStream0).read();
      Object object0 = PrivateAccess.callMethod((Class<BmpImageParser>) BmpImageParser.class, bmpImageParser0, "getBmpTypeDescription", (Object) int1, (Class<?>) int.class, (Object) int2, (Class<?>) int.class);
      assertNotSame(object0, string0);
      assertNotNull(object0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("Unknown", object0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(object0.equals((Object)string0));
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      try { 
        bmpImageParser0.getBufferedImage(inputStream0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "BUFFERED_IMAGE_FACTORY";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      int int0 = 1;
      int int1 = 579;
      Object object0 = PrivateAccess.callMethod((Class<BmpImageParser>) BmpImageParser.class, bmpImageParser0, "getBmpTypeDescription", (Object) int0, (Class<?>) int.class, (Object) int1, (Class<?>) int.class);
      assertNotSame(object0, string0);
      assertNotNull(object0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Unknown", object0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(object0.equals((Object)string0));
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      ImageFormats imageFormats0 = ImageFormats.PAM;
      assertEquals(ImageFormats.PAM, imageFormats0);
      
      int int2 = 0;
      int int3 = 0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) int3;
      floatArray0[1] = (float) int3;
      floatArray0[2] = (float) int3;
      floatArray0[3] = (float) int3;
      floatArray0[4] = (float) int3;
      floatArray0[5] = (float) int2;
      floatArray0[6] = (float) int3;
      floatArray0[7] = (float) int3;
      floatArray0[8] = (float) int3;
      Kernel kernel0 = new Kernel(int2, int3, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(kernel0);
      assertEquals(0, kernel0.getWidth());
      assertEquals(0, kernel0.getHeight());
      assertEquals((-1), kernel0.getXOrigin());
      assertEquals((-1), kernel0.getYOrigin());
      assertEquals(9, floatArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = 577;
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      TextField textField0 = null;
      try {
        textField0 = new TextField();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "Y23DrC\"8#Aw~&8:R";
      Object object0 = hashMap0.put(string0, bmpImageParser0);
      assertNull(object0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      byte byte0 = (byte)11;
      byte byte1 = (byte) (-24);
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      try { 
        bmpImageParser0.getImageSize(byteSource0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: Y23DrC\"8#Aw~&8:R
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      boolean boolean0 = false;
      bmpImageParser0.setDebug(boolean0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String string0 = "!;+:!QX5GT";
      String string1 = "QDGu";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals("QDGu", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/evosuite_6th/!;+:!QX5GT/QDGu", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/!;+:!QX5GT", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      FormatCompliance formatCompliance0 = bmpImageParser0.getFormatCompliance((File) mockFile0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(formatCompliance0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("QDGu", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/evosuite_6th/!;+:!QX5GT/QDGu", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/!;+:!QX5GT", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      Map<String, Object> map1 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = true;
      boolean boolean2 = mockFile0.setExecutable(boolean1, boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(mockFile0.isHidden());
      assertEquals("QDGu", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/evosuite_6th/!;+:!QX5GT/QDGu", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/!;+:!QX5GT", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(boolean2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      BufferedImage bufferedImage0 = bmpImageParser0.getBufferedImage((File) mockFile0, map1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(bufferedImage0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("QDGu", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/evosuite_6th/!;+:!QX5GT/QDGu", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/!;+:!QX5GT", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      BufferedImage bufferedImage1 = bmpImageParser0.getBufferedImage((File) mockFile0, map0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(bufferedImage1);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("QDGu", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/evosuite_6th/!;+:!QX5GT/QDGu", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/!;+:!QX5GT", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = "Pn{h`tQXnVVG%&iRI";
      boolean boolean3 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(boolean3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string3 = bmpImageParser0.getName();
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotNull(string3);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("Bmp-Custom", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      int int0 = 1972;
      int int1 = 0;
      BufferedImage bufferedImage2 = mock(BufferedImage.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(bufferedImage2).getHeight();
      doReturn(0, 0, 0, 0, 0).when(bufferedImage2).getRGB(anyInt() , anyInt());
      doReturn(int0).when(bufferedImage2).getWidth();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Map<String, Object> map2 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(int1).when(map2).size();
      // Undeclared exception!
      bmpImageParser0.writeImage(bufferedImage2, outputStream0, map2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      InputStream inputStream0 = null;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(byteSource0).getInputStream();
      Map<String, Object> map1 = null;
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageSize(byteSource0, map1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      
      String string0 = bmpImageParser0.getName();
      assertNotNull(string0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", string0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(byteSource0).getDescription();
      doReturn(inputStream0).when(byteSource0).getInputStream();
      try { 
        bmpImageParser0.getFormatCompliance(byteSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(byteSource0).getInputStream();
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(map0).size();
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageSize(byteSource0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Im(G&67^tI.aPB^AeE";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(byteSource0).getInputStream();
      // Undeclared exception!
      try { 
        bmpImageParser0.dumpImageFile(printWriter0, byteSource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String string0 = bmpImageParser0.getName();
      assertNotNull(string0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("Bmp-Custom", string0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/evosuite_6th/Bmp-Custom", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals("Bmp-Custom", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th/Bmp-Custom/Bmp-Custom", mockFile0.toString());
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/evosuite_6th/Bmp-Custom", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals("Bmp-Custom", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th/Bmp-Custom/Bmp-Custom", mockFile0.toString());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals("Bmp-Custom", byteSourceFile0.getFilename());
      
      try { 
        bmpImageParser0.dumpImageFile(printWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String string0 = "No p:lette entry was defined for ";
      String string1 = "&*2";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("&*2", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/evosuite_6th/No p:lette entry was defined for ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/evosuite_6th/No p:lette entry was defined for /&*2", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      OutputStream outputStream0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      byte[] byteArray0 = new byte[6];
      String string2 = "VERBOSE";
      JLayer<Dialog> jLayer0 = new JLayer<Dialog>();
      assertNotNull(jLayer0);
      assertTrue(jLayer0.getFocusTraversalKeysEnabled());
      assertFalse(jLayer0.getIgnoreRepaint());
      assertFalse(jLayer0.isFocusTraversalPolicySet());
      assertFalse(jLayer0.isFocusTraversalPolicyProvider());
      assertFalse(jLayer0.isFocusCycleRoot());
      
      String string3 = bmpImageParser0.getName();
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotNull(string3);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("Bmp-Custom", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      JPanel jPanel0 = jLayer0.createGlassPane();
      assertNotNull(jPanel0);
      assertTrue(jLayer0.getFocusTraversalKeysEnabled());
      assertFalse(jLayer0.getIgnoreRepaint());
      assertFalse(jLayer0.isFocusTraversalPolicySet());
      assertFalse(jLayer0.isFocusTraversalPolicyProvider());
      assertFalse(jLayer0.isFocusCycleRoot());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      
      Object object0 = hashMap0.put(string2, jPanel0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNull(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(jLayer0.getFocusTraversalKeysEnabled());
      assertFalse(jLayer0.getIgnoreRepaint());
      assertFalse(jLayer0.isFocusTraversalPolicySet());
      assertFalse(jLayer0.isFocusTraversalPolicyProvider());
      assertFalse(jLayer0.isFocusCycleRoot());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      
      byte byte0 = (byte)29;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-50);
      byteArray0[1] = byte1;
      byte byte2 = (byte)110;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-4);
      byteArray0[3] = byte3;
      byte byte4 = (byte)90;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-24);
      byteArray0[5] = byte5;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertArrayEquals(new byte[] {(byte)29, (byte) (-50), (byte)110, (byte) (-4), (byte)90, (byte) (-24)}, byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFilename());
      assertEquals(6L, byteSourceArray0.getLength());
      assertEquals(6, byteArray0.length);
      
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(byteSource0).getInputStream();
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(map0).size();
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageInfo(byteSource0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String string0 = bmpImageParser0.getName();
      assertNotNull(string0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("Bmp-Custom", string0);
      
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(byteSource0).getDescription();
      doReturn((InputStream) null).when(byteSource0).getInputStream();
      // Undeclared exception!
      try { 
        bmpImageParser0.getFormatCompliance(byteSource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "VERBOSE";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String string1 = "VERBOSE";
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)5;
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(byteSource0).getInputStream();
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(map0).size();
      // Undeclared exception!
      try { 
        bmpImageParser0.getBufferedImage(byteSource0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFilename());
      assertEquals(1L, byteSourceArray0.getLength());
      assertEquals(1, byteArray0.length);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "'";
      Object object0 = hashMap0.put(string0, string0);
      assertNull(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: '
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      String string0 = null;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      ByteSource byteSource0 = null;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      String string1 = "VERBOSE";
      Object object0 = hashtable0.put(string1, string1);
      assertNull(object0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageSize(byteSource0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      InputStream inputStream0 = null;
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        bmpImageParser0.getBufferedImage(inputStream0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = false;
      bmpImageParser0.setDebug(boolean0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      String string0 = "VERBOSE";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("VERBOSE", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("VERBOSE", mockFile0.getName());
      
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      assertNotNull(mockFile1);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("VERBOSE", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("VERBOSE", mockFile0.getName());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.exists());
      assertEquals("VERBOSE", mockFile1.getName());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals("/home/evosuite_6th/VERBOSE/VERBOSE", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/evosuite_6th/VERBOSE", mockFile1.getParent());
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      List<BufferedImage> list0 = bmpImageParser0.getAllBufferedImages((File) mockFile1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNull(list0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("VERBOSE", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("VERBOSE", mockFile0.getName());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.exists());
      assertEquals("VERBOSE", mockFile1.getName());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals("/home/evosuite_6th/VERBOSE/VERBOSE", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/evosuite_6th/VERBOSE", mockFile1.getParent());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)49;
      byteArray0[3] = byte3;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)49}, byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals(4L, byteSourceArray0.getLength());
      assertNull(byteSourceArray0.getFilename());
      assertEquals(4, byteArray0.length);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      String string1 = "6L";
      Object object0 = hashtable0.put(string1, bmpImageParser0);
      assertNotSame(string1, string0);
      assertNull(object0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertFalse(string1.equals((Object)string0));
      
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: 6L
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      String string0 = "ColorSpaceBlueY";
      URI uRI0 = MockURI.create(string0);
      assertNotNull(uRI0);
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("ColorSpaceBlueY", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertEquals("ColorSpaceBlueY", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getScheme());
      
      URI uRI1 = MockURI.resolve(uRI0, string0);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertNotNull(uRI1);
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("ColorSpaceBlueY", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertEquals("ColorSpaceBlueY", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getScheme());
      assertNull(uRI1.getRawAuthority());
      assertEquals("ColorSpaceBlueY", uRI1.toString());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isAbsolute());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawQuery());
      assertEquals("ColorSpaceBlueY", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.equals((Object)uRI0));
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-70);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-104);
      byteArray0[2] = byte2;
      Vector<BufferedImage> vector0 = new Vector<BufferedImage>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      String string1 = "Invalid WBMP File";
      MockFile mockFile0 = new MockFile(string1);
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Invalid WBMP File", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Invalid WBMP File", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(string1.equals((Object)string0));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Invalid WBMP File", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Invalid WBMP File", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals("Invalid WBMP File", byteSourceFile0.getFilename());
      assertFalse(string1.equals((Object)string0));
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      String string0 = "LQq*+]T6V,59?E@YM_b";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      assertEquals("LQq*+]T6V,59?E@YM_b", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("LQq*+]T6V,59?E@YM_b", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      assertNotNull(mockFile1);
      assertEquals("LQq*+]T6V,59?E@YM_b", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("LQq*+]T6V,59?E@YM_b", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/evosuite_6th/LQq*+]T6V,59?E@YM_b", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/evosuite_6th/LQq*+]T6V,59?E@YM_b/LQq*+]T6V,59?E@YM_b", mockFile1.toString());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertEquals("LQq*+]T6V,59?E@YM_b", mockFile1.getName());
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile1);
      assertNotNull(byteSourceFile0);
      assertEquals("LQq*+]T6V,59?E@YM_b", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("LQq*+]T6V,59?E@YM_b", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/evosuite_6th/LQq*+]T6V,59?E@YM_b", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/evosuite_6th/LQq*+]T6V,59?E@YM_b/LQq*+]T6V,59?E@YM_b", mockFile1.toString());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertEquals("LQq*+]T6V,59?E@YM_b", mockFile1.getName());
      assertEquals("LQq*+]T6V,59?E@YM_b", byteSourceFile0.getFilename());
      assertEquals(0L, byteSourceFile0.getLength());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = mockFile1.setExecutable(boolean0, boolean1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals("LQq*+]T6V,59?E@YM_b", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("LQq*+]T6V,59?E@YM_b", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/evosuite_6th/LQq*+]T6V,59?E@YM_b", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/evosuite_6th/LQq*+]T6V,59?E@YM_b/LQq*+]T6V,59?E@YM_b", mockFile1.toString());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertEquals("LQq*+]T6V,59?E@YM_b", mockFile1.getName());
      assertFalse(boolean2);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = true;
      boolean boolean4 = mockFile0.setExecutable(boolean3, boolean0);
      assertNotSame(mockFile0, mockFile1);
      assertEquals("LQq*+]T6V,59?E@YM_b", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("LQq*+]T6V,59?E@YM_b", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(boolean4);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(boolean0 == boolean3);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String string0 = "US-ASCII";
      byte[] byteArray0 = null;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(string0, byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals("US-ASCII", byteSourceArray0.getFilename());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String[] stringArray0 = bmpImageParser0.getAcceptedExtensions();
      assertNotNull(stringArray0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(1, stringArray0.length);
      
      String string0 = "RZ&kCBfaE<BdxIM";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      assertEquals("RZ&kCBfaE<BdxIM", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("RZ&kCBfaE<BdxIM", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals("RZ&kCBfaE<BdxIM", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("RZ&kCBfaE<BdxIM", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("RZ&kCBfaE<BdxIM", byteSourceFile0.getFilename());
      assertEquals(0L, byteSourceFile0.getLength());
      
      Map<String, Object> map0 = null;
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, map0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      
      String string0 = ",[Hp[+qy:V3A(";
      String string1 = "-?.o";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotNull(mockFile0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(/-?.o", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals("-?.o", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      MockFile mockFile1 = new MockFile(mockFile0, string1);
      assertNotNull(mockFile1);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(/-?.o", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals("-?.o", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("-?.o", mockFile1.getName());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(/-?.o", mockFile1.getParent());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(/-?.o/-?.o", mockFile1.toString());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      assertNotNull(mockFileOutputStream0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(/-?.o", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("-?.o", mockFile0.getName());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("-?.o", mockFile1.getName());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(/-?.o", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(/-?.o/-?.o", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      int int0 = 3;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, int0);
      assertNotNull(bufferedOutputStream0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(/-?.o", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("-?.o", mockFile0.getName());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("-?.o", mockFile1.getName());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(/-?.o", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(/-?.o/-?.o", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      assertNotNull(mockPrintWriter0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(/-?.o", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("-?.o", mockFile0.getName());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("-?.o", mockFile1.getName());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(/-?.o", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/evosuite_6th/,[Hp[+qy:V3A(/-?.o/-?.o", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      byte[] byteArray0 = null;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(string0, byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals(",[Hp[+qy:V3A(", byteSourceArray0.getFilename());
      assertFalse(string0.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      
      String string0 = "2:q!+>@~W /";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("2:q!+>@~W ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("2:q!+>@~W ", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setReadable(boolean0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("2:q!+>@~W ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("2:q!+>@~W ", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Dimension dimension0 = bmpImageParser0.getImageSize((File) mockFile0);
      assertNull(dimension0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("2:q!+>@~W ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("2:q!+>@~W ", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      String string1 = bmpImageParser0.getDefaultExtension();
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", string1);
      assertFalse(string1.equals((Object)string0));
      
      ByteSource byteSource0 = null;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Function<Object, ScrollPane> function0 = (Function<Object, ScrollPane>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Object object0 = hashtable0.computeIfAbsent(string1, function0);
      assertNotSame(string1, string0);
      assertNull(object0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = ": ";
      Object object1 = hashtable0.put(string2, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNull(object1);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getBufferedImage(byteSource0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      
      File file0 = null;
      String string0 = "JPEG";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("JPEG", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("JPEG", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setExecutable(boolean0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("JPEG", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("JPEG", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = false;
      boolean boolean3 = mockFile0.setExecutable(boolean2);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("JPEG", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("JPEG", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(boolean3);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = mockFile0.mkdir();
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("JPEG", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("JPEG", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      ImageMetadata imageMetadata0 = bmpImageParser0.getMetadata((File) mockFile0);
      assertNull(imageMetadata0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("JPEG", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("JPEG", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      ByteSource byteSource0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-45);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-111);
      byteArray0[1] = byte1;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      ImageMetadata imageMetadata1 = bmpImageParser0.getMetadata(byteArray0, (Map<String, Object>) hashtable0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-111)}, byteArray0);
      assertNull(imageMetadata1);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(2, byteArray0.length);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getFormatCompliance(byteSource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String string0 = "Fak6An";
      byte[] byteArray0 = null;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(string0, byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals("Fak6An", byteSourceArray0.getFilename());
      
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String string0 = "dIgDHA3T&7qM{j5";
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(string0, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals(1L, byteSourceArray0.getLength());
      assertEquals("dIgDHA3T&7qM{j5", byteSourceArray0.getFilename());
      assertEquals(1, byteArray0.length);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      
      ByteSource byteSource0 = null;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageSize(byteSource0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      String string0 = "5)m+byLtM&Do=,=jz ";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("5)m+byLtM&Do=,=jz ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/evosuite_6th/5)m+byLtM&Do=,=jz /5)m+byLtM&Do=,=jz ", mockFile0.toString());
      assertEquals("/home/evosuite_6th/5)m+byLtM&Do=,=jz ", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("5)m+byLtM&Do=,=jz ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/evosuite_6th/5)m+byLtM&Do=,=jz /5)m+byLtM&Do=,=jz ", mockFile0.toString());
      assertEquals("/home/evosuite_6th/5)m+byLtM&Do=,=jz ", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("5)m+byLtM&Do=,=jz ", byteSourceFile0.getFilename());
      assertEquals(0L, byteSourceFile0.getLength());
      
      try { 
        bmpImageParser0.getFormatCompliance((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String string0 = null;
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals("", byteSourceFile0.getFilename());
      assertEquals(0L, byteSourceFile0.getLength());
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      String string2 = bmpImageParser0.getXmpXml(byteSourceFile0, hashtable0);
      assertNull(string2);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals("", byteSourceFile0.getFilename());
      assertEquals(0L, byteSourceFile0.getLength());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      String string0 = "ColorTable";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(10, stringBufferInputStream0.available());
      
      Map<String, Object> map0 = null;
      try { 
        bmpImageParser0.getBufferedImage((InputStream) stringBufferInputStream0, map0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      String string0 = "";
      String string1 = "P[K[spE `i>'G]M?'";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("/P[K[spE `i>'G]M?'", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("P[K[spE `i>'G]M?'", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("/P[K[spE `i>'G]M?'", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("P[K[spE `i>'G]M?'", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("P[K[spE `i>'G]M?'", byteSourceFile0.getFilename());
      assertEquals(0L, byteSourceFile0.getLength());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      byte[] byteArray0 = bmpImageParser0.getICCProfileBytes((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(byteArray0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("/P[K[spE `i>'G]M?'", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("P[K[spE `i>'G]M?'", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("P[K[spE `i>'G]M?'", byteSourceFile0.getFilename());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String string0 = bmpImageParser0.getName();
      assertNotNull(string0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("Bmp-Custom", string0);
      
      String string1 = "BUFFERED_IMAGE_FACTORY";
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "CIolorTable";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(11, stringBufferInputStream0.available());
      
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-1);
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(string0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals(1L, byteSourceArray0.getLength());
      assertEquals("CIolorTable", byteSourceArray0.getFilename());
      assertEquals(1, byteArray0.length);
      
      ImageFormat[] imageFormatArray0 = bmpImageParser0.getAcceptedTypes();
      assertNotNull(imageFormatArray0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(1, imageFormatArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      String string0 = "AIo^_+E_=]4#suiq";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("AIo^_+E_=]4#suiq", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("AIo^_+E_=]4#suiq", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("AIo^_+E_=]4#suiq", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("AIo^_+E_=]4#suiq", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      assertNotNull(filterOutputStream0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("AIo^_+E_=]4#suiq", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("AIo^_+E_=]4#suiq", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(filterOutputStream0, charset0);
      assertNotNull(outputStreamWriter0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("AIo^_+E_=]4#suiq", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("AIo^_+E_=]4#suiq", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      assertNotNull(mockPrintWriter0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("AIo^_+E_=]4#suiq", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("AIo^_+E_=]4#suiq", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("AIo^_+E_=]4#suiq", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("AIo^_+E_=]4#suiq", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("AIo^_+E_=]4#suiq", byteSourceFile0.getFilename());
      assertEquals(0L, byteSourceFile0.getLength());
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      int int0 = 2;
      Object object0 = PrivateAccess.callMethod((Class<BmpImageParser>) BmpImageParser.class, bmpImageParser0, "getBmpTypeDescription", (Object) int0, (Class<?>) int.class, (Object) int0, (Class<?>) int.class);
      assertNotNull(object0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Unknown", object0);
      
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      InputStream inputStream0 = null;
      FormatCompliance formatCompliance0 = mock(FormatCompliance.class, new ViolatedAssumptionAnswer());
      try { 
        PrivateAccess.callMethod((Class<BmpImageParser>) BmpImageParser.class, bmpImageParser0, "readImageContents", (Object) inputStream0, (Class<?>) InputStream.class, (Object) formatCompliance0, (Class<?>) FormatCompliance.class, (Object) boolean1, (Class<?>) boolean.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      int int0 = (-1);
      PrivateAccess.callMethod((Class<BmpImageParser>) BmpImageParser.class, bmpImageParser0, "getRLEBytes", (Object) inputStream0, (Class<?>) InputStream.class, (Object) int0, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-21);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)95;
      byteArray0[2] = byte2;
      byte[] byteArray1 = bmpImageParser0.getICCProfileBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-1), (byte)95}, byteArray0);
      assertNull(byteArray1);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(3, byteArray0.length);
      
      String string0 = "5)m+byLtM&Do=,=jz ";
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSource byteSource0 = null;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      byte byte0 = (byte) (-13);
      byteArray0[1] = byte0;
      byte byte1 = (byte)8;
      byteArray0[2] = byte1;
      byte byte2 = (byte)4;
      byteArray0[3] = byte2;
      Map<String, Object> map0 = null;
      long long0 = 535L;
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      int int0 = 80;
      BufferedImage bufferedImage0 = new BufferedImage(byte1, byteArray0[3], byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-13), (byte)8, (byte)4}, byteArray0);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(4, bufferedImage0.getHeight());
      assertEquals(8, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(8, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(8, bufferedImage0.getTileWidth());
      assertEquals(4, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(4, byteArray0.length);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      bmpImageParser0.writeImage(bufferedImage0, outputStream0, map0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-13), (byte)8, (byte)4}, byteArray0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(4, bufferedImage0.getHeight());
      assertEquals(8, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(8, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(8, bufferedImage0.getTileWidth());
      assertEquals(4, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(4, byteArray0.length);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte0);
      
      OutputStream outputStream1 = null;
      Map<String, Object> map1 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(map1).size();
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage(bufferedImage0, outputStream1, map1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String string0 = bmpImageParser0.getDefaultExtension();
      assertNotNull(string0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", string0);
      
      int int0 = 2215;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-116);
      byteArray0[0] = byte0;
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = bmpImageParser0.getICCProfileBytes(byteArray0, map0);
      assertArrayEquals(new byte[] {(byte) (-116)}, byteArray0);
      assertNull(byteArray1);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(1, byteArray0.length);
      
      int int1 = 1138;
      int int2 = 1777;
      int int3 = 1;
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int1, int0, int2, int3).when(inputStream0).read();
      int int4 = 0;
      Map<String, Object> map1 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(int4).when(map1).size();
      try { 
        bmpImageParser0.getBufferedImage(inputStream0, map1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // BMP: Unknown Compression: 16843009
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String[] stringArray0 = bmpImageParser0.getAcceptedExtensions();
      assertNotNull(stringArray0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(1, stringArray0.length);
      
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      int int0 = 2147483645;
      int int1 = (-2804);
      int int2 = (-1879048190);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      String string0 = "Compression";
      String string1 = "XD/&j.CZ";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/evosuite_6th/Compression/XD/&j.CZ", mockFile0.toString());
      assertEquals("&j.CZ", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/Compression/XD", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = false;
      boolean boolean1 = mockFile0.setReadable(boolean0, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/evosuite_6th/Compression/XD/&j.CZ", mockFile0.toString());
      assertEquals("&j.CZ", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/Compression/XD", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = bmpImageParser0.getICCProfileBytes((File) mockFile0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(byteArray0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/evosuite_6th/Compression/XD/&j.CZ", mockFile0.toString());
      assertEquals("&j.CZ", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/Compression/XD", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      InputStream inputStream1 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream1).read();
      int int3 = (-1879048190);
      PrivateAccess.callMethod((Class<BmpImageParser>) BmpImageParser.class, bmpImageParser0, "getRLEBytes", (Object) inputStream1, (Class<?>) InputStream.class, (Object) int3, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "VERBOSE";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String string1 = "VERBOSE";
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)5;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)20;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(string1, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-1), (byte)0}, byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals(3L, byteSourceArray0.getLength());
      assertEquals("VERBOSE", byteSourceArray0.getFilename());
      assertEquals(3, byteArray0.length);
      
      try { 
        bmpImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      byte[] byteArray0 = new byte[2];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "Y23DrC\"8#Aw~&8:R";
      Object object0 = hashMap0.put(string0, bmpImageParser0);
      assertNull(object0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      try { 
        bmpImageParser0.getImageSize(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: Y23DrC\"8#Aw~&8:R
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/evosuite_6th");
      String string0 = "VERBOSE";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      ImageParser[] imageParserArray0 = ImageParser.getAllImageParsers();
      assertNotNull(imageParserArray0);
      assertEquals(15, imageParserArray0.length);
      
      ImageFormat imageFormat0 = mock(ImageFormat.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = bmpImageParser0.canAcceptType(imageFormat0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      File file0 = null;
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      try { 
        bmpImageParser0.getBufferedImage(inputStream0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      String string0 = "No palette entry was defined for ";
      String string1 = "&*2";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("&*2", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/evosuite_6th/No palette entry was defined for ", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/evosuite_6th/No palette entry was defined for /&*2", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      BufferedImage bufferedImage0 = bmpImageParser0.getBufferedImage((File) mockFile0, (Map<String, Object>) hashMap0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(bufferedImage0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("&*2", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/evosuite_6th/No palette entry was defined for ", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/evosuite_6th/No palette entry was defined for /&*2", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      OutputStream outputStream0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage(bufferedImage0, dataOutputStream0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[2] = byte0;
      byte byte1 = (byte) (-81);
      byteArray0[1] = byte1;
      byte byte2 = (byte)31;
      byte byte3 = (byte)91;
      byteArray0[0] = byte3;
      try { 
        bmpImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[2] = byte0;
      byte byte1 = (byte) (-81);
      byteArray0[1] = byte1;
      byte byte2 = (byte)31;
      byteArray0[2] = byte2;
      byte byte3 = (byte)91;
      byteArray0[0] = byte3;
      try { 
        bmpImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      
      InputStream inputStream0 = null;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      String string0 = ";}A*Cg";
      Object object0 = hashtable0.put(string0, bmpImageParser0);
      assertNull(object0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      try { 
        bmpImageParser0.getBufferedImage(inputStream0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: ;}A*Cg
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      InputStream inputStream0 = null;
      String string0 = "YCC";
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(inputStream0, string0);
      assertNotNull(byteSourceInputStream0);
      assertEquals("YCC", byteSourceInputStream0.getFilename());
      
      long long0 = 0L;
      InputStream inputStream1 = byteSourceInputStream0.getInputStream(long0);
      assertNotNull(inputStream1);
      assertEquals("YCC", byteSourceInputStream0.getFilename());
      
      try { 
        bmpImageParser0.getFormatCompliance((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFilename());
      assertEquals(1L, byteSourceArray0.getLength());
      assertEquals(1, byteArray0.length);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      InputStream inputStream0 = null;
      String string0 = "dwRbmjZo[(";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string1);
      assertNotNull(mockFile0);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(string1.equals((Object)string0));
      
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      assertNotNull(mockFile1);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("dwRbmjZo[(", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/evosuite_6th/dwRbmjZo[(", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      List<BufferedImage> list0 = bmpImageParser0.getAllBufferedImages((File) mockFile1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNull(list0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("dwRbmjZo[(", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/evosuite_6th/dwRbmjZo[(", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Map<String, Object> map0 = null;
      String string2 = "I;d|VV3J@P=rQx";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string2);
      assertNotNull(mockPrintWriter0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(string1));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) vector0, locale_FilteringMode0);
      assertNotNull(list1);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(vector0.contains(string1));
      assertFalse(list1.contains(string1));
      
      // Undeclared exception!
      try { 
        ResourceBundle.Control.getNoFallbackControl(list1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      
      String string0 = null;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-128);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)120;
      byteArray0[2] = byte2;
      byteArray0[3] = byte0;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(string0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)0, (byte)120, (byte) (-128)}, byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals(4L, byteSourceArray0.getLength());
      assertNull(byteSourceArray0.getFilename());
      assertEquals(4, byteArray0.length);
      
      Map<String, Object> map0 = null;
      ImageMetadata imageMetadata0 = bmpImageParser0.getMetadata((ByteSource) byteSourceArray0, map0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)0, (byte)120, (byte) (-128)}, byteArray0);
      assertNull(imageMetadata0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(4L, byteSourceArray0.getLength());
      assertNull(byteSourceArray0.getFilename());
      assertEquals(4, byteArray0.length);
      
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, map0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      byte[] byteArray0 = new byte[0];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      try { 
        bmpImageParser0.getImageInfo(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }
}
