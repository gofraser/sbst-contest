/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:48:16 GMT 2018
 */

package org.apache.commons.imaging.formats.bmp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URL;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Map;
import javax.swing.DebugGraphics;
import javax.swing.JComponent;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleConstants;
import org.apache.commons.imaging.FormatCompliance;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.ImageInfo;
import org.apache.commons.imaging.common.ImageBuilder;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.bmp.BmpImageParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BmpImageParser_ESTest extends BmpImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      int int0 = 1;
      int int1 = 59;
      boolean boolean0 = false;
      ImageBuilder imageBuilder0 = new ImageBuilder(int0, int1, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(59, imageBuilder0.getHeight());
      assertNotNull(imageBuilder0);
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(59, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getWidth());
      assertNotNull(bufferedImage0);
      
      String string0 = null;
      String string1 = " />";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(" />", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(">", mockFile0.getName());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(" />", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(">", mockFile0.getName());
      assertNotNull(mockPrintStream0);
      
      String string2 = "U";
      Locale locale0 = new Locale(string2, string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", locale0.getVariant());
      assertEquals("u_U", locale0.toString());
      assertEquals("U", locale0.getCountry());
      assertEquals("u", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string3 = "";
      Object[] objectArray0 = new Object[8];
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      assertNotNull(styleConstants0);
      
      objectArray0[0] = (Object) styleConstants0;
      objectArray0[1] = (Object) bmpImageParser0;
      objectArray0[2] = (Object) bmpImageParser0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) string2;
      objectArray0[5] = (Object) bmpImageParser0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) imageBuilder0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, string3, objectArray0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(" />", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(">", mockFile0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("u_U", locale0.toString());
      assertEquals("U", locale0.getCountry());
      assertEquals("u", locale0.getLanguage());
      assertNotNull(printStream0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      bmpImageParser0.writeImage(bufferedImage0, printStream0, hashMap0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(59, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(" />", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(294L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(">", mockFile0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("u_U", locale0.toString());
      assertEquals("U", locale0.getCountry());
      assertEquals("u", locale0.getLanguage());
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(" />", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(294L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(">", mockFile0.getName());
      assertEquals(294L, byteSourceFile0.getLength());
      assertEquals(">", byteSourceFile0.getFilename());
      assertNotNull(byteSourceFile0);
      
      BufferedImage bufferedImage1 = bmpImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(bufferedImage1, bufferedImage0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(" />", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(294L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(">", mockFile0.getName());
      assertEquals(294L, byteSourceFile0.getLength());
      assertEquals(">", byteSourceFile0.getFilename());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(2, bufferedImage1.getType());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertEquals(59, bufferedImage1.getHeight());
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(1, bufferedImage1.getTileWidth());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(59, bufferedImage1.getTileHeight());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(1, bufferedImage1.getWidth());
      assertNotNull(bufferedImage1);
      
      BufferedImage bufferedImage2 = bmpImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(bufferedImage2.equals((Object)bufferedImage0));
      assertFalse(bufferedImage2.equals((Object)bufferedImage1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(bufferedImage2, bufferedImage0);
      assertNotSame(bufferedImage2, bufferedImage1);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(" />", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(294L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(">", mockFile0.getName());
      assertEquals(294L, byteSourceFile0.getLength());
      assertEquals(">", byteSourceFile0.getFilename());
      assertEquals(1, bufferedImage2.getNumYTiles());
      assertEquals(59, bufferedImage2.getHeight());
      assertTrue(bufferedImage2.hasTileWriters());
      assertEquals(0.5F, bufferedImage2.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage2.isAlphaPremultiplied());
      assertEquals(0, bufferedImage2.getTileGridXOffset());
      assertEquals(1, bufferedImage2.getWidth());
      assertEquals(59, bufferedImage2.getTileHeight());
      assertEquals(0, bufferedImage2.getTileGridYOffset());
      assertEquals(0, bufferedImage2.getMinTileX());
      assertEquals(3, bufferedImage2.getTransparency());
      assertEquals(2, bufferedImage2.getType());
      assertEquals(0, bufferedImage2.getMinTileY());
      assertEquals(0, bufferedImage2.getMinX());
      assertEquals(1, bufferedImage2.getTileWidth());
      assertEquals(0, bufferedImage2.getMinY());
      assertEquals(1, bufferedImage2.getNumXTiles());
      assertNotNull(bufferedImage2);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertNotNull(mockPrintWriter0);
      
      boolean boolean1 = bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(" />", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(294L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(">", mockFile0.getName());
      assertEquals(294L, byteSourceFile0.getLength());
      assertEquals(">", byteSourceFile0.getFilename());
      
      String[] stringArray0 = bmpImageParser0.getAcceptedExtensions();
      assertEquals(1, stringArray0.length);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(stringArray0);
      
      Object object0 = PrivateAccess.callMethod((Class<BmpImageParser>) BmpImageParser.class, bmpImageParser0, "readBmpHeaderInfo", (Object) byteSourceFile0, (Class<?>) ByteSource.class, (Object) boolean1, (Class<?>) boolean.class);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(boolean1 == boolean0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(" />", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(294L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(">", mockFile0.getName());
      assertEquals(294L, byteSourceFile0.getLength());
      assertEquals(">", byteSourceFile0.getFilename());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      int int0 = (-2283);
      int int1 = 4;
      Object object0 = PrivateAccess.callMethod((Class<BmpImageParser>) BmpImageParser.class, bmpImageParser0, "getBmpTypeDescription", (Object) int0, (Class<?>) int.class, (Object) int1, (Class<?>) int.class);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("Unknown", object0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(object0);
      
      byte byte0 = (byte) (-53);
      byte byte1 = (byte)4;
      byte byte2 = (byte)22;
      byte byte3 = (byte) (-49);
      byte byte4 = (byte)3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteSource byteSource0 = null;
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNotNull(bmpImageParser0);
      
      int int0 = 1;
      int int1 = 59;
      boolean boolean0 = false;
      ImageBuilder imageBuilder0 = new ImageBuilder(int0, int1, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(59, imageBuilder0.getHeight());
      assertNotNull(imageBuilder0);
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(59, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertNotNull(bufferedImage0);
      
      String string0 = null;
      String string1 = " / ";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(" / ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(" / ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNotNull(mockPrintStream0);
      
      String string2 = "";
      Locale locale0 = new Locale(string2, string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string3 = "";
      Object[] objectArray0 = new Object[8];
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      assertNotNull(styleConstants0);
      
      objectArray0[0] = (Object) styleConstants0;
      objectArray0[1] = (Object) bmpImageParser0;
      objectArray0[2] = (Object) bmpImageParser0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) string2;
      objectArray0[5] = (Object) bmpImageParser0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) imageBuilder0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, string3, objectArray0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(" / ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(printStream0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string4 = "BUFFERED_IMAGE_FACTORY";
      Object object0 = hashMap0.put(string4, bufferedImage0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(59, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object0);
      
      try { 
        bmpImageParser0.writeImage(bufferedImage0, printStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: BUFFERED_IMAGE_FACTORY
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ByteSource byteSource0 = null;
      String string0 = "uP,t";
      String string1 = "VERBOSE";
      Object object0 = hashMap0.put(string1, byteSource0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object0);
      
      Object object1 = hashMap0.put(string0, string0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(object1);
      
      try { 
        bmpImageParser0.getImageInfo(byteSource0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: uP,t
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      int int0 = 1;
      int int1 = 59;
      boolean boolean0 = false;
      ImageBuilder imageBuilder0 = new ImageBuilder(int0, int1, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(59, imageBuilder0.getHeight());
      assertNotNull(imageBuilder0);
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(1, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(59, bufferedImage0.getHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertNotNull(bufferedImage0);
      
      String string0 = null;
      String string1 = " / ";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(" / ", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(" ", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockPrintStream0);
      
      String string2 = "";
      Locale locale0 = new Locale(string2, string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[8];
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      assertNotNull(styleConstants0);
      
      objectArray0[0] = (Object) styleConstants0;
      objectArray0[1] = (Object) bmpImageParser0;
      objectArray0[2] = (Object) bmpImageParser0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) string2;
      objectArray0[5] = (Object) bmpImageParser0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) imageBuilder0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, string1, objectArray0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string2);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(string2, string1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(3L, mockFile0.length());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(printStream0);
      
      printStream0.print((float) int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string2);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(string2, string1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.getName());
      assertEquals(7L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      bmpImageParser0.writeImage(bufferedImage0, printStream0, hashMap0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string2);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(string2, string1);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(1, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(59, bufferedImage0.getHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(301L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(string1.equals((Object)string2));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(301L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertEquals(301L, byteSourceFile0.getLength());
      assertNotNull(byteSourceFile0);
      
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // BMP: Unknown Compression: 16777216
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)32;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-45);
      byteArray0[1] = byte1;
      byte byte2 = (byte)80;
      byteArray0[2] = byte2;
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = true;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile1, boolean0, boolean1, boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      byte byte3 = (byte)8;
      byteArray0[3] = byte3;
      boolean boolean4 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean4);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-45), (byte)80, (byte)8}, byteArray0);
      
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(byteSource0).getInputStream();
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(map0).size();
      // Undeclared exception!
      try { 
        bmpImageParser0.getBufferedImage(byteSource0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(bmpImageParser0);
      
      ImageFormat[] imageFormatArray0 = bmpImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(imageFormatArray0);
      
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(byteSource0).getInputStream();
      // Undeclared exception!
      try { 
        bmpImageParser0.getAllBufferedImages(byteSource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(bmpImageParser0);
      
      int int0 = 1;
      int int1 = 2027;
      boolean boolean0 = false;
      ImageBuilder imageBuilder0 = new ImageBuilder(int0, int1, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(2027, imageBuilder0.getHeight());
      assertNotNull(imageBuilder0);
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(2027, imageBuilder0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(2027, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2027, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertNotNull(bufferedImage0);
      
      String string0 = null;
      String string1 = "E / ";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(" ", mockFile0.getName());
      assertEquals("E / ", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("E ", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertEquals("E / ", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals("E ", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockPrintStream0);
      
      String string2 = "";
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string3 = "";
      Object[] objectArray0 = new Object[8];
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      assertNotNull(styleConstants0);
      
      objectArray0[0] = (Object) styleConstants0;
      objectArray0[1] = (Object) bmpImageParser0;
      objectArray0[2] = (Object) bmpImageParser0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) string2;
      objectArray0[5] = (Object) bmpImageParser0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) imageBuilder0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, string3, objectArray0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertEquals("E / ", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals("E ", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(printStream0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      bmpImageParser0.writeImage(bufferedImage0, printStream0, hashMap0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(2027, imageBuilder0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(2027, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2027, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8166L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertEquals("E / ", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals("E ", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertEquals(8166L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertEquals("E / ", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals("E ", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(8166L, byteSourceFile0.getLength());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertNotNull(byteSourceFile0);
      
      Dimension dimension0 = bmpImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      assertEquals(1, dimension0.width);
      assertEquals(2027, dimension0.height);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8166L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertEquals("E / ", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals("E ", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(8166L, byteSourceFile0.getLength());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertEquals(1.0, dimension0.getWidth(), 0.01);
      assertEquals(2027.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      // Undeclared exception!
      bmpImageParser0.writeImage(bufferedImage0, printStream0, hashMap0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(bmpImageParser0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(byteSource0).getInputStream();
      // Undeclared exception!
      try { 
        bmpImageParser0.dumpImageFile(printWriter0, byteSource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(byteSource0).getInputStream();
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(map0).size();
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageInfo(byteSource0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "S1(_JL;`=wfsAXR";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(byteSource0).getInputStream();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageSize(byteSource0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(byteSource0).getDescription();
      doReturn((InputStream) null).when(byteSource0).getInputStream();
      // Undeclared exception!
      try { 
        bmpImageParser0.getFormatCompliance(byteSource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      InputStream inputStream0 = null;
      URI uRI0 = MockURI.aFileURI;
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertNotNull(uRI1);
      
      MockFile mockFile0 = new MockFile(uRI1);
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(mockFile0.canWrite());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertNotNull(mockFile0);
      
      ImageMetadata imageMetadata0 = bmpImageParser0.getMetadata((File) mockFile0);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(mockFile0.canWrite());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertNull(imageMetadata0);
      
      boolean boolean0 = false;
      boolean boolean1 = mockFile0.setExecutable(boolean0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(mockFile0.canWrite());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      
      File file0 = mockFile0.getAbsoluteFile();
      assertTrue(file0.equals((Object)mockFile0));
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(mockFile0.canWrite());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("foo.bar", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/foo.bar", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertNotNull(file0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      ImageMetadata imageMetadata1 = bmpImageParser0.getMetadata((File) mockFile0, (Map<String, Object>) hashtable0);
      assertTrue(mockFile0.equals((Object)file0));
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(mockFile0, file0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(mockFile0.canWrite());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(imageMetadata1);
      
      LineNumberInputStream lineNumberInputStream0 = new LineNumberInputStream(inputStream0);
      assertEquals(0, lineNumberInputStream0.getLineNumber());
      assertNotNull(lineNumberInputStream0);
      
      String string0 = null;
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(lineNumberInputStream0, string0);
      assertEquals(0, lineNumberInputStream0.getLineNumber());
      assertNull(byteSourceInputStream0.getFilename());
      assertNotNull(byteSourceInputStream0);
      
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceInputStream0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.LineNumberInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      int int0 = 1;
      int int1 = 59;
      boolean boolean0 = false;
      ImageBuilder imageBuilder0 = new ImageBuilder(int0, int1, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(1, imageBuilder0.getWidth());
      assertNotNull(imageBuilder0);
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(59, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(59, bufferedImage0.getTileHeight());
      assertNotNull(bufferedImage0);
      
      String string0 = null;
      String string1 = " / ";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertEquals(" / ", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertEquals(" / ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockPrintStream0);
      
      String string2 = "";
      Locale locale0 = new Locale(string2, string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[8];
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      assertNotNull(styleConstants0);
      
      objectArray0[0] = (Object) styleConstants0;
      objectArray0[1] = (Object) bmpImageParser0;
      objectArray0[2] = (Object) bmpImageParser0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) string2;
      objectArray0[5] = (Object) bmpImageParser0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) imageBuilder0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, string1, objectArray0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string2);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(string2, string1);
      assertEquals(" / ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(3L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(printStream0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      bmpImageParser0.writeImage(bufferedImage0, printStream0, hashMap0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string2);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(string2, string1);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(59, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(297L, mockFile0.length());
      assertEquals(" / ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(string1.equals((Object)string2));
      assertEquals(297L, mockFile0.length());
      assertEquals(" / ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(" ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertEquals(297L, byteSourceFile0.getLength());
      assertNotNull(byteSourceFile0);
      
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // BMP: Unknown Compression: 256
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)8;
      byteArray0[1] = byte1;
      BufferedImage bufferedImage0 = null;
      PrintStream printStream0 = DebugGraphics.logStream();
      assertNotNull(printStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      assertNotNull(objectOutputStream0);
      
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage(bufferedImage0, objectOutputStream0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      String string0 = bmpImageParser0.getName();
      assertEquals("Bmp-Custom", string0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(string0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Object object0 = hashMap0.put(string0, bmpImageParser0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)101;
      byteArray0[0] = byte0;
      byte byte1 = (byte)4;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte)95;
      byteArray0[3] = byte3;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)4, (byte)1, (byte)95}, byteArray0);
      assertEquals(4L, byteSourceArray0.getLength());
      assertNull(byteSourceArray0.getFilename());
      assertNotNull(byteSourceArray0);
      
      byte[] byteArray1 = bmpImageParser0.getICCProfileBytes((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)4, (byte)1, (byte)95}, byteArray0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(4L, byteSourceArray0.getLength());
      assertNull(byteSourceArray0.getFilename());
      assertNull(byteArray1);
      
      InputStream inputStream0 = null;
      try { 
        bmpImageParser0.getBufferedImage(inputStream0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: Bmp-Custom
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      String string0 = "7d*,+B4$&(\"";
      MockFile mockFile0 = new MockFile(string0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("7d*,+B4$&(\"", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals("7d*,+B4$&(\"", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(mockFile0);
      
      Dimension dimension0 = bmpImageParser0.getImageSize((File) mockFile0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("7d*,+B4$&(\"", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals("7d*,+B4$&(\"", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(dimension0);
      
      ByteSource byteSource0 = null;
      Map<String, Object> map0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        bmpImageParser0.getBufferedImage((InputStream) pipedInputStream0, map0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      ByteSource byteSource0 = null;
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageSize(byteSource0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      ByteSource byteSource0 = null;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ImageMetadata imageMetadata0 = bmpImageParser0.getMetadata(byteSource0, (Map<String, Object>) hashMap0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(imageMetadata0);
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getFormatCompliance(byteSource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNotNull(bmpImageParser0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileInputStream0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      try { 
        bmpImageParser0.getBufferedImage((InputStream) mockFileInputStream0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      String string0 = bmpImageParser0.getName();
      assertEquals("Bmp-Custom", string0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile(string0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Bmp-Custom", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Bmp-Custom", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Bmp-Custom", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Bmp-Custom", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("Bmp-Custom", byteSourceFile0.getFilename());
      assertEquals(0L, byteSourceFile0.getLength());
      assertNotNull(byteSourceFile0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string1 = bmpImageParser0.getXmpXml(byteSourceFile0, hashMap0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Bmp-Custom", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Bmp-Custom", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("Bmp-Custom", byteSourceFile0.getFilename());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string1);
      
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(bmpImageParser0);
      
      PrintStream printStream0 = DebugGraphics.logStream();
      assertNotNull(printStream0);
      
      int int0 = 1355;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0, int0);
      assertNotNull(bufferedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      String string0 = "Channels: ";
      MockFile mockFile0 = new MockFile(string0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Channels: ", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Channels: ", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Channels: ", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Channels: ", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals("Channels: ", byteSourceFile0.getFilename());
      assertNotNull(byteSourceFile0);
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNotNull(bmpImageParser0);
      
      ByteSource byteSource0 = null;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getBufferedImage(byteSource0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      String string0 = "org.apache.commons.imaging.formats.bmp.BmpImageParser";
      MockFile mockFile0 = new MockFile(string0);
      assertFalse(mockFile0.isHidden());
      assertEquals("org.apache.commons.imaging.formats.bmp.BmpImageParser", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("org.apache.commons.imaging.formats.bmp.BmpImageParser", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals("org.apache.commons.imaging.formats.bmp.BmpImageParser", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("org.apache.commons.imaging.formats.bmp.BmpImageParser", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.imaging.formats.bmp.BmpImageParser", byteSourceFile0.getFilename());
      assertEquals(0L, byteSourceFile0.getLength());
      assertNotNull(byteSourceFile0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      ByteSource byteSource0 = null;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageInfo(byteSource0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      String string0 = "Unknown parameter: ";
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)56;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-59);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-27);
      byteArray0[2] = byte2;
      byte byte3 = (byte)2;
      byteArray0[3] = byte3;
      byte byte4 = (byte)16;
      byteArray0[4] = byte4;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(string0, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-59), (byte) (-27), (byte)2, (byte)16}, byteArray0);
      assertEquals(5L, byteSourceArray0.getLength());
      assertEquals("Unknown parameter: ", byteSourceArray0.getFilename());
      assertNotNull(byteSourceArray0);
      
      Map<String, Object> map0 = null;
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceArray0, map0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(bmpImageParser0);
      
      ByteSource byteSource0 = null;
      Map<String, Object> map0 = null;
      ImageMetadata imageMetadata0 = bmpImageParser0.getMetadata(byteSource0, map0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(bmpImageParser0);
      
      ByteSource byteSource0 = null;
      String string0 = "17-c\\C(&Tx</\\[t;!H";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/evosuite_6th/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx<", mockFile0.getParent());
      assertEquals("\\[t;!H", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/evosuite_6th/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx</\\[t;!H", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/evosuite_6th/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx<", mockFile0.getParent());
      assertEquals("\\[t;!H", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/evosuite_6th/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx</\\[t;!H", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile1.exists());
      assertEquals("/home/evosuite_6th/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx</\\[t;!H", mockFile1.toString());
      assertEquals("\\[t;!H", mockFile1.getName());
      assertEquals("/home/evosuite_6th/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx<", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertNotNull(mockFile1);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Dimension dimension0 = bmpImageParser0.getImageSize((File) mockFile1, (Map<String, Object>) hashtable0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/evosuite_6th/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx<", mockFile0.getParent());
      assertEquals("\\[t;!H", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/evosuite_6th/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx</\\[t;!H", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile1.exists());
      assertEquals("/home/evosuite_6th/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx</\\[t;!H", mockFile1.toString());
      assertEquals("\\[t;!H", mockFile1.getName());
      assertEquals("/home/evosuite_6th/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx</\\[t;!H/17-c\\C(&Tx<", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(dimension0);
      
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertNotNull(hashtable1);
      
      byte[] byteArray0 = bmpImageParser0.getICCProfileBytes(byteSource0, (Map<String, Object>) hashtable1);
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertNotSame(hashtable1, hashtable0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertNull(byteArray0);
      
      ImageFormat[] imageFormatArray0 = bmpImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(imageFormatArray0);
      
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        bmpImageParser0.dumpImageFile(printWriter0, byteSource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(bmpImageParser0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileInputStream0);
      
      String string0 = "colorsUsed";
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(mockFileInputStream0, string0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("colorsUsed", byteSourceInputStream0.getFilename());
      assertNotNull(byteSourceInputStream0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      byte[] byteArray0 = bmpImageParser0.getICCProfileBytes((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashtable0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(fileDescriptor0.valid());
      assertEquals("colorsUsed", byteSourceInputStream0.getFilename());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(byteArray0);
      
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      byte[] byteArray0 = new byte[1];
      String string0 = "File Size";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("File Size", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/evosuite_6th/File Size/File Size", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/home/evosuite_6th/File Size", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("File Size", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/evosuite_6th/File Size/File Size", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("/home/evosuite_6th/File Size", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("File Size", byteSourceFile0.getFilename());
      assertEquals(0L, byteSourceFile0.getLength());
      assertNotNull(byteSourceFile0);
      
      Map<String, Object> map0 = null;
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, map0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(bmpImageParser0);
      
      String string0 = "US-ASCII";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) string0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, boolean0);
      assertNotNull(mockPrintWriter0);
      
      MockFile mockFile0 = new MockFile(string0);
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(8L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("US-ASCII", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("US-ASCII", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(8L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(8L, byteSourceFile0.getLength());
      assertEquals("US-ASCII", byteSourceFile0.getFilename());
      assertNotNull(byteSourceFile0);
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(bmpImageParser0);
      
      String string0 = "pHYs";
      MockFile mockFile0 = new MockFile(string0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("pHYs", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("pHYs", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("pHYs", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("pHYs", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("pHYs", byteSourceFile0.getFilename());
      assertEquals(0L, byteSourceFile0.getLength());
      assertNotNull(byteSourceFile0);
      
      try { 
        bmpImageParser0.getFormatCompliance((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNotNull(bmpImageParser0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      int int0 = (-2507);
      PrivateAccess.callMethod((Class<BmpImageParser>) BmpImageParser.class, bmpImageParser0, "getRLEBytes", (Object) inputStream0, (Class<?>) InputStream.class, (Object) int0, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      ImageFormat[] imageFormatArray0 = bmpImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(imageFormatArray0);
      
      InputStream inputStream0 = null;
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(map0).size();
      // Undeclared exception!
      try { 
        bmpImageParser0.getBufferedImage(inputStream0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNotNull(bmpImageParser0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = null;
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      ByteSource byteSource0 = mock(ByteSource.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(byteSource0).getDescription();
      doReturn(inputStream0).when(byteSource0).getInputStream();
      try { 
        bmpImageParser0.getFormatCompliance(byteSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(bmpImageParser0);
      
      int int0 = 1;
      int int1 = 59;
      boolean boolean0 = false;
      ImageBuilder imageBuilder0 = new ImageBuilder(int0, int1, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(1, imageBuilder0.getWidth());
      assertNotNull(imageBuilder0);
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(59, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertNotNull(bufferedImage0);
      
      String string0 = null;
      String string1 = " / ";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(" / ", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(" ", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertNotNull(mockPrintStream0);
      
      String string2 = "";
      Locale locale0 = new Locale(string2, string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string3 = "";
      Object[] objectArray0 = new Object[8];
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      assertNotNull(styleConstants0);
      
      objectArray0[0] = (Object) styleConstants0;
      objectArray0[1] = (Object) bmpImageParser0;
      objectArray0[2] = (Object) bmpImageParser0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) string2;
      objectArray0[5] = (Object) bmpImageParser0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) imageBuilder0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, string3, objectArray0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(printStream0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      bmpImageParser0.writeImage(bufferedImage0, printStream0, hashMap0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(59, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(294L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(294L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertEquals(294L, byteSourceFile0.getLength());
      assertNotNull(byteSourceFile0);
      
      ImageInfo imageInfo0 = bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(294L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertEquals(294L, byteSourceFile0.getLength());
      assertEquals(Float.POSITIVE_INFINITY, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(ImageInfo.CompressionAlgorithm.RLE, imageInfo0.getCompressionAlgorithm());
      assertEquals("image/x-ms-bmp", imageInfo0.getMimeType());
      assertEquals(Float.POSITIVE_INFINITY, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("Bmp (BM: Windows 3.1x, 95, NT,)", imageInfo0.getFormatDetails());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals("BMP Windows Bitmap", imageInfo0.getFormatName());
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertEquals(1, imageInfo0.getWidth());
      assertEquals(59, imageInfo0.getHeight());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-1), imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(1, imageInfo0.getBitsPerPixel());
      assertNotNull(imageInfo0);
      
      byte[] byteArray0 = bmpImageParser0.getICCProfileBytes((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(294L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertEquals(294L, byteSourceFile0.getLength());
      assertNull(byteArray0);
      
      FormatCompliance formatCompliance0 = bmpImageParser0.getFormatCompliance((ByteSource) byteSourceFile0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(294L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertEquals(294L, byteSourceFile0.getLength());
      assertNotNull(formatCompliance0);
      
      String string4 = bmpImageParser0.getXmpXml(byteSourceFile0, hashMap0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(294L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertEquals(294L, byteSourceFile0.getLength());
      assertNull(string4);
      
      ImageFormat[] imageFormatArray0 = bmpImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(imageFormatArray0);
      
      Dimension dimension0 = bmpImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      assertEquals(59, dimension0.height);
      assertEquals(1, dimension0.width);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertEquals(59.0, dimension0.getHeight(), 0.01);
      assertEquals(1.0, dimension0.getWidth(), 0.01);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(294L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(" ", mockFile0.getName());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertEquals(294L, byteSourceFile0.getLength());
      assertNotNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNotNull(bmpImageParser0);
      
      int int0 = 1;
      int int1 = 59;
      boolean boolean0 = false;
      ImageBuilder imageBuilder0 = new ImageBuilder(int0, int1, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(59, imageBuilder0.getHeight());
      assertNotNull(imageBuilder0);
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(59, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertNotNull(bufferedImage0);
      
      String string0 = null;
      String string1 = " / ";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(" / ", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(" ", mockFile0.getName());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(" ", mockFile0.getName());
      assertNotNull(mockPrintStream0);
      
      String string2 = "";
      Locale locale0 = new Locale(string2, string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string3 = "T";
      Object[] objectArray0 = new Object[8];
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      assertNotNull(styleConstants0);
      
      objectArray0[0] = (Object) styleConstants0;
      objectArray0[1] = (Object) bmpImageParser0;
      objectArray0[2] = (Object) bmpImageParser0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) string2;
      objectArray0[5] = (Object) bmpImageParser0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) imageBuilder0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, string3, objectArray0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(" ", mockFile0.getName());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(printStream0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      bmpImageParser0.writeImage(bufferedImage0, printStream0, hashMap0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(59, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(295L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(" ", mockFile0.getName());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(295L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(" / ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" ", mockFile0.getParent());
      assertEquals(" ", mockFile0.getName());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertEquals(295L, byteSourceFile0.getLength());
      assertNotNull(byteSourceFile0);
      
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File count: -1 read: 157 length: 4594
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      int int0 = 1;
      int int1 = 59;
      boolean boolean0 = false;
      ImageBuilder imageBuilder0 = new ImageBuilder(int0, int1, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(1, imageBuilder0.getWidth());
      assertNotNull(imageBuilder0);
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(59, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertNotNull(bufferedImage0);
      
      String string0 = null;
      String string1 = " / ";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" ", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" / ", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(" ", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" / ", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(mockPrintStream0);
      
      String string2 = "";
      Locale locale0 = new Locale(string2, string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[8];
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      assertNotNull(styleConstants0);
      
      objectArray0[0] = (Object) styleConstants0;
      objectArray0[1] = (Object) bmpImageParser0;
      objectArray0[2] = (Object) bmpImageParser0;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)7;
      byteArray0[0] = byte0;
      byte byte1 = (byte)4;
      byteArray0[1] = byte1;
      byte byte2 = (byte)23;
      byteArray0[2] = byte2;
      byte byte3 = (byte)16;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-27);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)2;
      byteArray0[6] = byte6;
      byte byte7 = (byte)8;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-89);
      byteArray0[8] = byte8;
      mockPrintStream0.write(byteArray0);
      assertFalse(string1.equals((Object)string2));
      assertEquals(9, byteArray0.length);
      assertNotSame(string1, string2);
      assertArrayEquals(new byte[] {(byte)7, (byte)4, (byte)23, (byte)16, (byte) (-27), (byte)0, (byte)2, (byte)8, (byte) (-89)}, byteArray0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(" ", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertEquals(9L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" / ", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) string2;
      objectArray0[5] = (Object) bmpImageParser0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) imageBuilder0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, string1, objectArray0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertNotSame(string1, string2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string2, string1);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(" ", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(12L, mockFile0.length());
      assertEquals(" / ", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(printStream0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      bmpImageParser0.writeImage(bufferedImage0, printStream0, hashMap0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertNotSame(string1, string2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string2, string1);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(59, imageBuilder0.getHeight());
      assertEquals(1, imageBuilder0.getWidth());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(59, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(306L, mockFile0.length());
      assertEquals(" ", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" / ", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(string1.equals((Object)string2));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(306L, mockFile0.length());
      assertEquals(" ", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(" / ", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertEquals(306L, byteSourceFile0.getLength());
      assertNotNull(byteSourceFile0);
      
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File count: -1 read: 168 length: 944
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(bmpImageParser0);
      
      ImageFormat[] imageFormatArray0 = bmpImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(imageFormatArray0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)17;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-34);
      byteArray0[1] = byte1;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-34)}, byteArray0);
      assertNull(byteSourceArray0.getFilename());
      assertEquals(2L, byteSourceArray0.getLength());
      assertNotNull(byteSourceArray0);
      
      String string0 = byteSourceArray0.getDescription();
      assertEquals(2, byteArray0.length);
      assertEquals("2 byte array", string0);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-34)}, byteArray0);
      assertNull(byteSourceArray0.getFilename());
      assertEquals(2L, byteSourceArray0.getLength());
      assertNotNull(string0);
      
      InputStream inputStream0 = byteSourceArray0.getInputStream();
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-34)}, byteArray0);
      assertNull(byteSourceArray0.getFilename());
      assertEquals(2L, byteSourceArray0.getLength());
      assertEquals(2, inputStream0.available());
      assertNotNull(inputStream0);
      
      ImageMetadata imageMetadata0 = bmpImageParser0.getMetadata((ByteSource) byteSourceArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-34)}, byteArray0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNull(byteSourceArray0.getFilename());
      assertEquals(2L, byteSourceArray0.getLength());
      assertNull(imageMetadata0);
      
      try { 
        bmpImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      String string0 = "GIF: corrupt GraphicControlExt";
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-82);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)101;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)4;
      byteArray0[4] = byte4;
      byte byte5 = (byte)78;
      byteArray0[5] = byte5;
      byteArray0[6] = byte1;
      byte byte6 = (byte)25;
      byteArray0[7] = byte6;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(string0, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0, (byte)101, (byte)0, (byte)4, (byte)78, (byte)0, (byte)25}, byteArray0);
      assertEquals(8L, byteSourceArray0.getLength());
      assertEquals("GIF: corrupt GraphicControlExt", byteSourceArray0.getFilename());
      assertNotNull(byteSourceArray0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Object object0 = hashtable0.put(string0, string0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNull(object0);
      
      Enumeration<String> enumeration0 = hashtable0.keys();
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNotNull(enumeration0);
      
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: GIF: corrupt GraphicControlExt
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(bmpImageParser0);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      bmpImageParser0.setDebug(boolean0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      
      URL uRL0 = mockFile0.toURL();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      Dimension dimension0 = bmpImageParser0.getImageSize((File) mockFile0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(dimension0);
      
      String string1 = bmpImageParser0.getDefaultExtension();
      assertFalse(string1.equals((Object)string0));
      assertEquals(".bmp", string1);
      assertNotSame(string1, string0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(string1);
      
      String string2 = "";
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-7);
      byteArray0[3] = byte2;
      byte byte3 = (byte) (-126);
      byteArray0[4] = byte3;
      byte byte4 = (byte)0;
      byteArray0[5] = byte4;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(string2, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-7), (byte) (-126), (byte)0}, byteArray0);
      assertEquals(6L, byteSourceArray0.getLength());
      assertEquals("", byteSourceArray0.getFilename());
      assertNotNull(byteSourceArray0);
      
      try { 
        bmpImageParser0.getFormatCompliance((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNotNull(bmpImageParser0);
      
      int int0 = 1;
      int int1 = 2027;
      boolean boolean0 = false;
      ImageBuilder imageBuilder0 = new ImageBuilder(int0, int1, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2027, imageBuilder0.getHeight());
      assertEquals(1, imageBuilder0.getWidth());
      assertNotNull(imageBuilder0);
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2027, imageBuilder0.getHeight());
      assertEquals(1, imageBuilder0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2027, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2027, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertNotNull(bufferedImage0);
      
      String string0 = null;
      String string1 = "E / ";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("E / ", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("E ", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("E / ", mockFile0.toString());
      assertEquals("E ", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(mockPrintStream0);
      
      String string2 = "";
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string3 = "";
      Object[] objectArray0 = new Object[8];
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      assertNotNull(styleConstants0);
      
      objectArray0[0] = (Object) styleConstants0;
      objectArray0[1] = (Object) bmpImageParser0;
      objectArray0[2] = (Object) bmpImageParser0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) string2;
      objectArray0[5] = (Object) bmpImageParser0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) imageBuilder0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, string3, objectArray0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(mockPrintStream0, printStream0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("E / ", mockFile0.toString());
      assertEquals("E ", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(printStream0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      bmpImageParser0.writeImage(bufferedImage0, printStream0, hashMap0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(mockPrintStream0, printStream0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(2027, imageBuilder0.getHeight());
      assertEquals(1, imageBuilder0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2027, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2027, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(8166L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("E / ", mockFile0.toString());
      assertEquals("E ", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(8166L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("E / ", mockFile0.toString());
      assertEquals("E ", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(8166L, byteSourceFile0.getLength());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertNotNull(byteSourceFile0);
      
      Dimension dimension0 = bmpImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      assertEquals(2027, dimension0.height);
      assertEquals(1, dimension0.width);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(8166L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("E / ", mockFile0.toString());
      assertEquals("E ", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(8166L, byteSourceFile0.getLength());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertEquals(1.0, dimension0.getWidth(), 0.01);
      assertEquals(2027.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      int int2 = 66;
      Object object0 = PrivateAccess.callMethod((Class<BmpImageParser>) BmpImageParser.class, bmpImageParser0, "getBmpTypeDescription", (Object) int1, (Class<?>) int.class, (Object) int2, (Class<?>) int.class);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string3));
      assertFalse(object0.equals((Object)string2));
      assertEquals("Unknown", object0);
      assertNotSame(object0, string1);
      assertNotSame(object0, string3);
      assertNotSame(object0, string2);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNotNull(object0);
      
      boolean boolean1 = false;
      Object object1 = PrivateAccess.callMethod((Class<BmpImageParser>) BmpImageParser.class, bmpImageParser0, "readBmpHeaderInfo", (Object) byteSourceFile0, (Class<?>) ByteSource.class, (Object) boolean1, (Class<?>) boolean.class);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)string3));
      assertNotSame(string1, string2);
      assertNotSame(string1, object0);
      assertNotSame(string1, string3);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(8166L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("E / ", mockFile0.toString());
      assertEquals("E ", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(8166L, byteSourceFile0.getLength());
      assertEquals(" ", byteSourceFile0.getFilename());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNotNull(bmpImageParser0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-53);
      byte byte1 = (byte) (-3);
      byteArray0[1] = byte1;
      byte byte2 = (byte)22;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-49);
      byteArray0[3] = byte3;
      byte byte4 = (byte)3;
      byteArray0[4] = byte4;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteSource byteSource0 = null;
      Map<String, Object> map0 = null;
      byte[] byteArray1 = bmpImageParser0.getICCProfileBytes(byteSource0, map0);
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNotNull(bmpImageParser0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)52;
      byteArray0[1] = byte0;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      byte byte1 = (byte)57;
      byteArray0[1] = byte0;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string1 = bmpImageParser0.getName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Bmp-Custom", string1);
      assertNotSame(string1, string0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNotNull(string1);
      
      byte byte2 = (byte)46;
      byte byte3 = (byte)111;
      byte byte4 = (byte) (-27);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byte4, byte4);
      assertFalse(byte4 == byte3);
      assertFalse(byte4 == byte1);
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)52, (byte)0}, byteArray0);
      assertEquals((-27), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byte4 == byte3);
      assertFalse(byte4 == byte1);
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)52, (byte)0}, byteArray0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals((-27), byteArrayInputStream0.available());
      assertEquals("Bmp-Custom", byteSourceInputStream0.getFilename());
      assertNotNull(byteSourceInputStream0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      Object object0 = hashtable0.put(string1, mockJapaneseDate0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNull(object0);
      
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: Bmp-Custom
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImageParser0.getDebug());
      assertNotNull(bmpImageParser0);
      
      String string0 = "*<\"@&<=K7UHE+\"L";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ByteSource byteSource0 = null;
      String string1 = "uP,t";
      Object object0 = hashMap0.put(string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object0);
      
      try { 
        bmpImageParser0.getImageInfo(byteSource0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: uP,t
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNotNull(bmpImageParser0);
      
      InputStream inputStream0 = null;
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertNotNull(mockFile0);
      
      ImageMetadata imageMetadata0 = bmpImageParser0.getMetadata((File) mockFile0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertNull(imageMetadata0);
      
      boolean boolean0 = false;
      boolean boolean1 = mockFile0.setExecutable(boolean0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      ImageMetadata imageMetadata1 = bmpImageParser0.getMetadata((File) mockFile0, (Map<String, Object>) hashtable0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImageParser0.getDebug());
      assertEquals(".bmp", bmpImageParser0.getDefaultExtension());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(imageMetadata1);
      
      LineNumberInputStream lineNumberInputStream0 = new LineNumberInputStream(inputStream0);
      assertEquals(0, lineNumberInputStream0.getLineNumber());
      assertNotNull(lineNumberInputStream0);
      
      String string0 = null;
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(lineNumberInputStream0, string0);
      assertEquals(0, lineNumberInputStream0.getLineNumber());
      assertNull(byteSourceInputStream0.getFilename());
      assertNotNull(byteSourceInputStream0);
      
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceInputStream0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.LineNumberInputStream", e);
      }
  }
}
