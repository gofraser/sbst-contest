/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:16:27 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      int int0 = Integer.MAX_VALUE;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(int0, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      int int0 = 0;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(int0, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      int int0 = Integer.MAX_VALUE;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(int0, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      int int0 = Integer.MAX_VALUE;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(int0, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      int int0 = 0;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(int0, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertNotNull(cacheControl0);
      
      boolean boolean0 = true;
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0.FORCE_CACHE, "isPublic", (Object) boolean0);
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      
      Headers headers0 = mock(Headers.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(headers0).size();
      String string0 = "EEE dd-MMM-yyyy HH-mm-ss z";
      String string1 = cacheControl0.toString();
      assertEquals("no-cache", string1);
      assertNotSame(string1, string0);
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "dj=V2 :0m@^,n7&eb";
      cacheControl0.headerValue = string2;
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      
      cacheControl0.FORCE_NETWORK.headerValue = string0;
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertNotSame(cacheControl1, cacheControl0);
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertNotNull(cacheControl1);
      assertFalse(cacheControl1.equals((Object)cacheControl0));
      
      String string3 = cacheControl0.FORCE_NETWORK.toString();
      assertEquals("EEE dd-MMM-yyyy HH-mm-ss z", string3);
      assertNotSame(cacheControl0, cacheControl1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertNotNull(string3);
      assertFalse(cacheControl0.equals((Object)cacheControl1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Object object0 = PrivateAccess.callMethod((Class<CacheControl>) CacheControl.class, cacheControl0, "headerValue");
      assertEquals("no-cache", object0);
      assertNotSame(cacheControl0, cacheControl1);
      assertNotSame(object0, string2);
      assertNotSame(object0, string0);
      assertNotSame(object0, string1);
      assertNotSame(object0, string3);
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertNotNull(object0);
      assertFalse(cacheControl0.equals((Object)cacheControl1));
      assertTrue(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string2));
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string3));
      
      int int0 = cacheControl1.sMaxAgeSeconds();
      assertEquals((-1), int0);
      assertNotSame(cacheControl1, cacheControl0);
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.equals((Object)cacheControl0));
      
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "maxStaleSeconds", (Object) int0);
      assertNotSame(cacheControl0, cacheControl1);
      assertNotSame(cacheControl1, cacheControl0);
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl0.equals((Object)cacheControl1));
      assertFalse(cacheControl1.equals((Object)cacheControl0));
      
      Headers headers1 = null;
      // Undeclared exception!
      try { 
        CacheControl.parse(headers1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.CacheControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 1L;
      System.setCurrentTimeMillis(long0);
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertNotNull(cacheControl0);
      
      boolean boolean0 = true;
      int int0 = (-3898);
      String string0 = cacheControl0.FORCE_CACHE.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string0);
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertNotNull(string0);
      
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "sMaxAgeSeconds", (Object) int0);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-3898), cacheControl0.sMaxAgeSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      
      int int1 = 0;
      Object object0 = PrivateAccess.callMethod((Class<CacheControl>) CacheControl.class, cacheControl0.FORCE_CACHE, "headerValue");
      assertEquals("s-maxage=-3898, max-stale=2147483647, only-if-cached", object0);
      assertNotSame(object0, string0);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-3898), cacheControl0.sMaxAgeSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertNotNull(object0);
      assertFalse(object0.equals((Object)string0));
      
      int int2 = (-1830);
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "sMaxAgeSeconds", (Object) int2);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "minFreshSeconds", (Object) int1);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      Object object1 = PrivateAccess.callMethod((Class<CacheControl>) CacheControl.class, cacheControl0, "headerValue");
      assertEquals("s-maxage=-1830, max-stale=2147483647, min-fresh=0, only-if-cached", object1);
      assertNotSame(object1, object0);
      assertNotSame(object1, string0);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)string0));
      
      boolean boolean1 = true;
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0.FORCE_CACHE, "isPrivate", (Object) boolean1);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertTrue(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      
      String string1 = cacheControl0.FORCE_CACHE.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string1);
      assertSame(string1, string0);
      assertNotSame(string1, object0);
      assertNotSame(string1, object1);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertTrue(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)object1));
      
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0.FORCE_CACHE, "onlyIfCached", (Object) boolean0);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertTrue(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      
      Object object2 = PrivateAccess.callMethod((Class<CacheControl>) CacheControl.class, cacheControl0, "headerValue");
      assertEquals("s-maxage=-1830, private, max-stale=2147483647, min-fresh=0, only-if-cached", object2);
      assertNotSame(object2, string1);
      assertNotSame(object2, string0);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertTrue(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertNotNull(object2);
      assertFalse(object2.equals((Object)string1));
      assertFalse(object2.equals((Object)string0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      String string2 = "n";
      cacheControl0.headerValue = string2;
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertTrue(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "mustRevalidate", (Object) boolean0);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertTrue(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "maxAgeSeconds", (Object) int1);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertTrue(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      long long1 = 1214L;
      boolean boolean2 = true;
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0.FORCE_NETWORK, "noCache", (Object) boolean2);
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertTrue(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "noTransform", (Object) boolean0);
      assertFalse(cacheControl0.noCache());
      assertTrue(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noTransform());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      
      int int3 = cacheControl0.sMaxAgeSeconds();
      assertEquals((-1830), int3);
      assertFalse(cacheControl0.noCache());
      assertTrue(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noTransform());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "isPrivate", (Object) boolean2);
      assertFalse(cacheControl0.noCache());
      assertTrue(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noTransform());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      
      int int4 = cacheControl0.sMaxAgeSeconds();
      assertEquals((-1830), int4);
      assertFalse(cacheControl0.noCache());
      assertTrue(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noTransform());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "minFreshSeconds", (Object) int0);
      assertFalse(cacheControl0.noCache());
      assertTrue(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertEquals((-3898), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noTransform());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      
      Headers headers0 = mock(Headers.class, new ViolatedAssumptionAnswer());
      doReturn(int4).when(headers0).size();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertNotSame(cacheControl1, cacheControl0);
      assertNotSame(cacheControl0, cacheControl1);
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl0.noCache());
      assertTrue(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertEquals((-3898), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noTransform());
      assertTrue(cacheControl0.onlyIfCached());
      assertNotNull(cacheControl1);
      assertFalse(cacheControl1.equals((Object)cacheControl0));
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      
      String string3 = cacheControl1.FORCE_NETWORK.toString();
      assertEquals("no-cache", string3);
      assertNotSame(cacheControl1, cacheControl0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, object2);
      assertNotSame(string3, object0);
      assertNotSame(string3, string1);
      assertNotSame(string3, object1);
      assertNotSame(cacheControl0, cacheControl1);
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl0.noCache());
      assertTrue(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertEquals((-3898), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noTransform());
      assertTrue(cacheControl0.onlyIfCached());
      assertNotNull(string3);
      assertFalse(cacheControl1.equals((Object)cacheControl0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)object2));
      assertFalse(string3.equals((Object)object0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)object1));
      assertFalse(cacheControl0.equals((Object)cacheControl1));
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      
      boolean boolean3 = false;
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "noCache", (Object) boolean3);
      assertNotSame(cacheControl0, cacheControl1);
      assertFalse(cacheControl0.noCache());
      assertTrue(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertEquals((-3898), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1830), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noTransform());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(cacheControl0.equals((Object)cacheControl1));
      
      int int5 = Integer.MAX_VALUE;
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "sMaxAgeSeconds", (Object) int5);
      assertNotSame(cacheControl0, cacheControl1);
      assertFalse(cacheControl0.noCache());
      assertEquals(Integer.MAX_VALUE, cacheControl0.sMaxAgeSeconds());
      assertTrue(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertEquals((-3898), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noTransform());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.equals((Object)cacheControl1));
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
      
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertTrue(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertNotNull(cacheControl0);
      
      boolean boolean0 = cacheControl0.noStore();
      assertTrue(boolean0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertTrue(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.minFreshSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertNotNull(cacheControl0);
      
      boolean boolean0 = cacheControl0.noCache();
      assertTrue(boolean0);
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = mock(CacheControl.Builder.class, new ViolatedAssumptionAnswer());
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertNotNull(cacheControl0);
      
      boolean boolean0 = true;
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "mustRevalidate", (Object) boolean0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(0, cacheControl0.minFreshSeconds());
      
      boolean boolean1 = cacheControl0.mustRevalidate();
      assertTrue(boolean1);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPrivate());
      assertEquals(0, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.mustRevalidate());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      int int0 = 20;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(int0, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
      
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertNotNull(cacheControl0);
      
      int int1 = cacheControl0.minFreshSeconds();
      assertEquals(0, int1);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      int int0 = 4611;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(int0, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
      
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertEquals(16599600, cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertNotNull(cacheControl0);
      
      int int1 = cacheControl0.minFreshSeconds();
      assertEquals(16599600, int1);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertEquals(16599600, cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      int int0 = 0;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(int0, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
      
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertEquals(0, cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertNotNull(cacheControl0);
      
      int int1 = cacheControl0.maxStaleSeconds();
      assertEquals(0, int1);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertEquals(0, cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      int int0 = 2582;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(int0, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
      
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(2582, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertNotNull(cacheControl0);
      
      int int1 = cacheControl0.maxStaleSeconds();
      assertEquals(2582, int1);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(2582, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      int int0 = 20;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(int0, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
      
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertNotNull(cacheControl0);
      
      int int1 = cacheControl0.maxAgeSeconds();
      assertEquals(0, int1);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      int int0 = 1;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(int0, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
      
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals(1, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPublic());
      assertNotNull(cacheControl0);
      
      int int1 = cacheControl0.maxAgeSeconds();
      assertEquals(1, int1);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals(1, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPublic());
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = null;
      CacheControl cacheControl0 = null;
      try {
        cacheControl0 = new CacheControl(cacheControl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.CacheControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertNotNull(cacheControl0);
      
      String string0 = cacheControl0.toString();
      assertEquals("no-cache", string0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertNotNull(string0);
      
      boolean boolean0 = true;
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0.FORCE_NETWORK, "onlyIfCached", (Object) boolean0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      
      boolean boolean1 = false;
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0.FORCE_CACHE, "isPublic", (Object) boolean1);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = false;
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "isPrivate", (Object) boolean0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      
      String string1 = cacheControl0.FORCE_NETWORK.toString();
      assertEquals("no-cache", string1);
      assertSame(string1, string0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertNotNull(string1);
      
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "isPrivate", (Object) boolean2);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(boolean2 == boolean0);
      
      String string2 = cacheControl0.toString();
      assertEquals("no-cache", string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertNotNull(string2);
      
      int int0 = cacheControl0.sMaxAgeSeconds();
      assertEquals((-1), int0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      
      boolean boolean3 = false;
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "noTransform", (Object) boolean3);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(boolean3 == boolean0);
      
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "isPrivate", (Object) boolean2);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(boolean2 == boolean0);
      
      boolean boolean4 = false;
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "isPublic", (Object) boolean4);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(boolean4 == boolean0);
      
      boolean boolean5 = cacheControl0.mustRevalidate();
      assertFalse(boolean5);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      
      int int1 = 442;
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "maxAgeSeconds", (Object) int1);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals(442, cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(int1 == int0);
      
      int int2 = (-3594);
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "maxAgeSeconds", (Object) int2);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-3594), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Object object0 = PrivateAccess.callMethod((Class<CacheControl>) CacheControl.class, cacheControl0, "headerValue");
      assertEquals("no-cache, max-age=-3594, only-if-cached", object0);
      assertNotSame(object0, string2);
      assertNotSame(object0, string1);
      assertNotSame(object0, string0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-3594), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noTransform());
      assertNotNull(object0);
      assertFalse(object0.equals((Object)string2));
      assertFalse(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string0));
      
      int int3 = (-1178466338);
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl0, "maxAgeSeconds", (Object) int3);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1178466338), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      System.setCurrentTimeMillis(int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      
      CacheControl.Builder cacheControl_Builder0 = mock(CacheControl.Builder.class, new ViolatedAssumptionAnswer());
      CacheControl cacheControl1 = new CacheControl(cacheControl_Builder0);
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals(0, cacheControl1.maxAgeSeconds());
      assertEquals(0, cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.isPrivate());
      assertEquals(0, cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.mustRevalidate());
      assertNotNull(cacheControl1);
      assertFalse(cacheControl1.equals((Object)cacheControl0));
      
      boolean boolean6 = true;
      PrivateAccess.setVariable((Class<CacheControl>) CacheControl.class, cacheControl1, "isPrivate", (Object) boolean6);
      assertNotSame(cacheControl1, cacheControl0);
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertTrue(cacheControl1.isPrivate());
      assertEquals(0, cacheControl1.maxAgeSeconds());
      assertEquals(0, cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPublic());
      assertEquals(0, cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.equals((Object)cacheControl0));
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertNotNull(cacheControl0);
      
      String[] stringArray0 = new String[2];
      String string0 = cacheControl0.FORCE_CACHE.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string0);
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertNotNull(string0);
      
      String string1 = "pragma";
      stringArray0[0] = string1;
      String string2 = "3O5 \\C =@z,9IE4Fe&";
      stringArray0[1] = string0;
      Headers headers0 = Headers.of(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(1, headers0.size());
      assertNotNull(headers0);
      
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertEquals(2, stringArray0.length);
      assertNotSame(cacheControl1, cacheControl0);
      assertEquals(1, headers0.size());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertTrue(cacheControl1.onlyIfCached());
      assertEquals(Integer.MAX_VALUE, cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.isPublic());
      assertNotNull(cacheControl1);
      assertFalse(cacheControl1.equals((Object)cacheControl0));
      
      String string3 = cacheControl1.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string3);
      assertEquals(2, stringArray0.length);
      assertNotSame(cacheControl1, cacheControl0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals(1, headers0.size());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertTrue(cacheControl1.onlyIfCached());
      assertEquals(Integer.MAX_VALUE, cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.isPublic());
      assertNotNull(string3);
      assertFalse(cacheControl1.equals((Object)cacheControl0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = cacheControl1.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string4);
      assertEquals(2, stringArray0.length);
      assertNotSame(cacheControl1, cacheControl0);
      assertSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertEquals(1, headers0.size());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertTrue(cacheControl1.onlyIfCached());
      assertEquals(Integer.MAX_VALUE, cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.isPublic());
      assertNotNull(string4);
      assertFalse(cacheControl1.equals((Object)cacheControl0));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = cacheControl0.sMaxAgeSeconds();
      assertEquals((-1), int0);
      assertNotSame(cacheControl0, cacheControl1);
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.equals((Object)cacheControl1));
      
      boolean boolean0 = cacheControl0.onlyIfCached();
      assertTrue(boolean0);
      assertNotSame(cacheControl0, cacheControl1);
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.equals((Object)cacheControl1));
      
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      assertEquals(2, stringArray0.length);
      assertNotSame(cacheControl2, cacheControl0);
      assertNotSame(cacheControl2, cacheControl1);
      assertEquals(1, headers0.size());
      assertFalse(cacheControl2.noCache());
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertFalse(cacheControl2.mustRevalidate());
      assertFalse(cacheControl2.noTransform());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertEquals(Integer.MAX_VALUE, cacheControl2.maxStaleSeconds());
      assertFalse(cacheControl2.isPrivate());
      assertTrue(cacheControl2.onlyIfCached());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertFalse(cacheControl2.noStore());
      assertFalse(cacheControl2.isPublic());
      assertNotNull(cacheControl2);
      assertFalse(cacheControl2.equals((Object)cacheControl0));
      assertFalse(cacheControl2.equals((Object)cacheControl1));
      
      cacheControl2.FORCE_CACHE.headerValue = string2;
      assertEquals(1, headers0.size());
      assertFalse(cacheControl2.noCache());
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertFalse(cacheControl2.mustRevalidate());
      assertFalse(cacheControl2.noTransform());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertEquals(Integer.MAX_VALUE, cacheControl2.maxStaleSeconds());
      assertFalse(cacheControl2.isPrivate());
      assertTrue(cacheControl2.onlyIfCached());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertFalse(cacheControl2.noStore());
      assertFalse(cacheControl2.isPublic());
      
      CacheControl cacheControl3 = CacheControl.parse(headers0);
      assertEquals(2, stringArray0.length);
      assertNotSame(cacheControl3, cacheControl1);
      assertNotSame(cacheControl3, cacheControl2);
      assertNotSame(cacheControl3, cacheControl0);
      assertEquals(1, headers0.size());
      assertFalse(cacheControl3.mustRevalidate());
      assertEquals((-1), cacheControl3.sMaxAgeSeconds());
      assertFalse(cacheControl3.noStore());
      assertTrue(cacheControl3.onlyIfCached());
      assertFalse(cacheControl3.isPrivate());
      assertFalse(cacheControl3.isPublic());
      assertEquals(Integer.MAX_VALUE, cacheControl3.maxStaleSeconds());
      assertEquals((-1), cacheControl3.minFreshSeconds());
      assertFalse(cacheControl3.noCache());
      assertFalse(cacheControl3.noTransform());
      assertEquals((-1), cacheControl3.maxAgeSeconds());
      assertNotNull(cacheControl3);
      assertFalse(cacheControl3.equals((Object)cacheControl1));
      assertFalse(cacheControl3.equals((Object)cacheControl2));
      assertFalse(cacheControl3.equals((Object)cacheControl0));
      
      String string5 = cacheControl3.FORCE_NETWORK.toString();
      assertEquals("no-cache", string5);
      assertEquals(2, stringArray0.length);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(cacheControl3, cacheControl1);
      assertNotSame(cacheControl3, cacheControl2);
      assertNotSame(cacheControl3, cacheControl0);
      assertEquals(1, headers0.size());
      assertFalse(cacheControl3.mustRevalidate());
      assertEquals((-1), cacheControl3.sMaxAgeSeconds());
      assertFalse(cacheControl3.noStore());
      assertTrue(cacheControl3.onlyIfCached());
      assertFalse(cacheControl3.isPrivate());
      assertFalse(cacheControl3.isPublic());
      assertEquals(Integer.MAX_VALUE, cacheControl3.maxStaleSeconds());
      assertEquals((-1), cacheControl3.minFreshSeconds());
      assertFalse(cacheControl3.noCache());
      assertFalse(cacheControl3.noTransform());
      assertEquals((-1), cacheControl3.maxAgeSeconds());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(cacheControl3.equals((Object)cacheControl1));
      assertFalse(cacheControl3.equals((Object)cacheControl2));
      assertFalse(cacheControl3.equals((Object)cacheControl0));
      
      CacheControl cacheControl4 = CacheControl.parse(headers0);
      assertEquals(2, stringArray0.length);
      assertNotSame(cacheControl4, cacheControl1);
      assertNotSame(cacheControl4, cacheControl3);
      assertNotSame(cacheControl4, cacheControl2);
      assertNotSame(cacheControl4, cacheControl0);
      assertFalse(cacheControl4.mustRevalidate());
      assertFalse(cacheControl4.isPublic());
      assertEquals((-1), cacheControl4.maxAgeSeconds());
      assertEquals((-1), cacheControl4.sMaxAgeSeconds());
      assertFalse(cacheControl4.noStore());
      assertFalse(cacheControl4.isPrivate());
      assertFalse(cacheControl4.noTransform());
      assertEquals(Integer.MAX_VALUE, cacheControl4.maxStaleSeconds());
      assertFalse(cacheControl4.noCache());
      assertTrue(cacheControl4.onlyIfCached());
      assertEquals((-1), cacheControl4.minFreshSeconds());
      assertEquals(1, headers0.size());
      assertNotNull(cacheControl4);
      assertFalse(cacheControl4.equals((Object)cacheControl1));
      assertFalse(cacheControl4.equals((Object)cacheControl3));
      assertFalse(cacheControl4.equals((Object)cacheControl2));
      assertFalse(cacheControl4.equals((Object)cacheControl0));
      
      String string6 = cacheControl3.FORCE_CACHE.toString();
      assertEquals("3O5 \\C =@z,9IE4Fe&", string6);
      assertEquals(2, stringArray0.length);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(cacheControl3, cacheControl4);
      assertNotSame(cacheControl3, cacheControl1);
      assertNotSame(cacheControl3, cacheControl2);
      assertNotSame(cacheControl3, cacheControl0);
      assertEquals(1, headers0.size());
      assertFalse(cacheControl3.mustRevalidate());
      assertEquals((-1), cacheControl3.sMaxAgeSeconds());
      assertFalse(cacheControl3.noStore());
      assertTrue(cacheControl3.onlyIfCached());
      assertFalse(cacheControl3.isPrivate());
      assertFalse(cacheControl3.isPublic());
      assertEquals(Integer.MAX_VALUE, cacheControl3.maxStaleSeconds());
      assertEquals((-1), cacheControl3.minFreshSeconds());
      assertFalse(cacheControl3.noCache());
      assertFalse(cacheControl3.noTransform());
      assertEquals((-1), cacheControl3.maxAgeSeconds());
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(cacheControl3.equals((Object)cacheControl4));
      assertFalse(cacheControl3.equals((Object)cacheControl1));
      assertFalse(cacheControl3.equals((Object)cacheControl2));
      assertFalse(cacheControl3.equals((Object)cacheControl0));
      
      String string7 = cacheControl3.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string7);
      assertEquals(2, stringArray0.length);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(cacheControl3, cacheControl4);
      assertNotSame(cacheControl3, cacheControl1);
      assertNotSame(cacheControl3, cacheControl2);
      assertNotSame(cacheControl3, cacheControl0);
      assertEquals(1, headers0.size());
      assertFalse(cacheControl3.mustRevalidate());
      assertEquals((-1), cacheControl3.sMaxAgeSeconds());
      assertFalse(cacheControl3.noStore());
      assertTrue(cacheControl3.onlyIfCached());
      assertFalse(cacheControl3.isPrivate());
      assertFalse(cacheControl3.isPublic());
      assertEquals(Integer.MAX_VALUE, cacheControl3.maxStaleSeconds());
      assertEquals((-1), cacheControl3.minFreshSeconds());
      assertFalse(cacheControl3.noCache());
      assertFalse(cacheControl3.noTransform());
      assertEquals((-1), cacheControl3.maxAgeSeconds());
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(cacheControl3.equals((Object)cacheControl4));
      assertFalse(cacheControl3.equals((Object)cacheControl1));
      assertFalse(cacheControl3.equals((Object)cacheControl2));
      assertFalse(cacheControl3.equals((Object)cacheControl0));
      
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge(int0, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertNotNull(cacheControl0);
      
      int int0 = cacheControl0.sMaxAgeSeconds();
      assertEquals((-1), int0);
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.minFresh(int0, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      int int0 = Integer.MAX_VALUE;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(int0, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-349);
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxStale(int0, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -349
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = "Cache-Control";
      String string1 = hashMap0.put(string0, string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, headers0.size());
      assertNotNull(headers0);
      
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, headers0.size());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertNotNull(cacheControl0);
      
      cacheControl0.headerValue = string1;
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, headers0.size());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      
      String string2 = cacheControl0.toString();
      assertEquals("", string2);
      assertNotSame(string2, string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, headers0.size());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertNotNull(cacheControl0);
      
      Object object0 = PrivateAccess.callMethod((Class<CacheControl>) CacheControl.class, cacheControl0.FORCE_CACHE, "headerValue");
      assertEquals("max-stale=2147483647, only-if-cached", object0);
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "pragma";
      stringArray0[0] = string0;
      String string1 = "no-transform";
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[3] = stringArray0[1];
      Headers headers0 = Headers.of(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(2, headers0.size());
      assertNotNull(headers0);
      
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertEquals(4, stringArray0.length);
      assertEquals(2, headers0.size());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertNotNull(cacheControl0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      assertNotNull(headers_Builder0);
      
      String string0 = "pragma";
      String string1 = "public";
      Headers.Builder headers_Builder1 = headers_Builder0.add(string0, string1);
      assertSame(headers_Builder0, headers_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(headers_Builder1, headers_Builder0);
      assertNotNull(headers_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Headers headers0 = headers_Builder1.build();
      assertSame(headers_Builder0, headers_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(headers_Builder1, headers_Builder0);
      assertEquals(1, headers0.size());
      assertNotNull(headers0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertSame(headers_Builder0, headers_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(headers_Builder1, headers_Builder0);
      assertEquals(1, headers0.size());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.isPublic());
      assertNotNull(cacheControl0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = cacheControl0.isPublic();
      assertTrue(boolean0);
      assertSame(headers_Builder0, headers_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(headers_Builder1, headers_Builder0);
      assertEquals(1, headers0.size());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertTrue(cacheControl0.isPublic());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = "pragma";
      String string1 = "no-store";
      String string2 = hashMap0.put(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, headers0.size());
      assertNotNull(headers0);
      
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, headers0.size());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noCache());
      assertTrue(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertNotNull(cacheControl0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      assertNotNull(headers_Builder0);
      
      String string0 = "Pragma";
      String string1 = "max-stale=";
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient(string0, string1);
      assertSame(headers_Builder0, headers_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(headers_Builder1, headers_Builder0);
      assertNotNull(headers_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Headers headers0 = headers_Builder0.build();
      assertSame(headers_Builder0, headers_Builder1);
      assertEquals(1, headers0.size());
      assertNotNull(headers0);
      
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertSame(headers_Builder0, headers_Builder1);
      assertEquals(1, headers0.size());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertNotNull(cacheControl0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "pragma";
      stringArray0[0] = string0;
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = stringArray0[0];
      String string1 = "Zd:h(jg&+;W$ :Hri_&";
      stringArray0[3] = string1;
      Headers headers0 = Headers.of(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(2, headers0.size());
      assertNotNull(headers0);
      
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertEquals(4, stringArray0.length);
      assertEquals(2, headers0.size());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertNotNull(cacheControl0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = "&x@HV@L +sqZ4bD0J";
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = stringArray0[1];
      stringArray0[3] = stringArray0[0];
      String string1 = "cache-control";
      stringArray0[4] = string1;
      stringArray0[5] = stringArray0[0];
      stringArray0[6] = stringArray0[0];
      stringArray0[7] = stringArray0[4];
      Headers headers0 = Headers.of(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(4, headers0.size());
      assertNotNull(headers0);
      
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertEquals(8, stringArray0.length);
      assertEquals(4, headers0.size());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertNotNull(cacheControl0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPublic());
      assertNotNull(cacheControl0);
      
      int int0 = cacheControl0.minFreshSeconds();
      assertEquals((-1), int0);
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPublic());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.mustRevalidate());
      assertNotNull(cacheControl0);
      
      boolean boolean0 = cacheControl0.noStore();
      assertFalse(boolean0);
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.mustRevalidate());
      assertNotNull(cacheControl0);
      
      int int0 = cacheControl0.sMaxAgeSeconds();
      assertEquals((-1), int0);
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.mustRevalidate());
      
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge(int0, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      assertNotNull(headers_Builder0);
      
      Headers headers0 = headers_Builder0.build();
      assertEquals(0, headers0.size());
      assertNotNull(headers0);
      
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertEquals(0, headers0.size());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertNotNull(cacheControl0);
      
      boolean boolean0 = cacheControl0.isPublic();
      assertFalse(boolean0);
      assertEquals(0, headers0.size());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertNotNull(cacheControl0);
      
      int int0 = cacheControl0.maxStaleSeconds();
      assertEquals((-1), int0);
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.isPublic());
      assertNotNull(cacheControl0);
      
      int int0 = cacheControl0.maxAgeSeconds();
      assertEquals((-1), int0);
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.noCache());
      assertFalse(cacheControl0.isPublic());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      assertNotNull(cacheControl_Builder0);
      
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertNotNull(cacheControl_Builder1);
      
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertTrue(cacheControl0.noStore());
      assertNotNull(cacheControl0);
      
      String string0 = cacheControl0.toString();
      assertEquals("no-store", string0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertTrue(cacheControl0.noStore());
      assertNotNull(string0);
  }
}
