/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:21:29 GMT 2018
 */

package org.apache.commons.jxpath.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeSet;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.util.BasicTypeConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicTypeConverter_ESTest extends BasicTypeConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-2961);
      List<Boolean> list0 = (List<Boolean>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(list0).size();
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(list0);
      assertNotNull(basicTypeConverter_ValueNodeSet0);
      
      List list1 = basicTypeConverter_ValueNodeSet0.getPointers();
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "false()";
      int int0 = 908;
      Integer integer0 = Integer.getInteger(string0, int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(908, (int)integer0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      Object object0 = basicTypeConverter_ValuePointer0.getValue();
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals(908, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Collection<Pointer> collection0 = null;
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      // Undeclared exception!
      try { 
        basicTypeConverter0.unmodifiableCollection(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convertStringToPrimitive(basicTypeConverter0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        basicTypeConverter0.canCreateCollection(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      String string0 = "";
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        basicTypeConverter0.canConvert(string0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      double double0 = 3339.847601;
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        basicTypeConverter0.allocateNumber(class0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class class1 = (Class)basicTypeConverter0.convert(class0, class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(basicTypeConverter0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertNotNull(string0);
      assertEquals("{object of type org.apache.commons.jxpath.util.BasicTypeConverter}", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(boolean1);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertNotNull(string0);
      assertEquals("false()", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "java.util.Collection";
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(string0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      String string1 = basicTypeConverter_ValuePointer0.asPath();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("'java.util.Collection'", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-40);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-40), (int)integer0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Number> linkedList0 = new LinkedList<Number>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = Float.BYTES;
      assertEquals(4, int0);
      
      boolean boolean0 = linkedList0.add((Number) int0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(linkedList0);
      assertNotNull(basicTypeConverter_ValueNodeSet0);
      assertEquals(1, linkedList0.size());
      
      List list0 = basicTypeConverter_ValueNodeSet0.getPointers();
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getValues();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(list0);
      assertNotNull(basicTypeConverter_ValueNodeSet0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      basicNodeSet0.add((NodeSet) basicTypeConverter_ValueNodeSet0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      basicNodeSet0.add((NodeSet) basicTypeConverter_ValueNodeSet0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      LinkedHashSet<Float> linkedHashSet0 = new LinkedHashSet<Float>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Collection collection0 = basicTypeConverter0.unmodifiableCollection(linkedHashSet0);
      assertNotNull(collection0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(string0);
      assertEquals("true()", string0);
      
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Collection<Integer> collection0 = (Collection<Integer>) mock(Collection.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(collection0).toString();
      Collection collection1 = basicTypeConverter0.unmodifiableCollection(collection0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(collection1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getValues();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Collection collection0 = basicTypeConverter0.unmodifiableCollection(list0);
      assertNotNull(collection0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Collection collection0 = basicTypeConverter0.unmodifiableCollection(treeSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.allocateCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create collection of type: class java.lang.Object; java.lang.Object cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      boolean boolean0 = basicTypeConverter0.canCreateCollection(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      double double0 = 0.0;
      Number number0 = basicTypeConverter0.allocateNumber(class0, double0);
      assertNull(number0);
      
      Number number1 = basicTypeConverter0.allocateNumber(class0, double0);
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      Object object0 = basicTypeConverter0.convertStringToPrimitive(class0, class0);
      assertNull(object0);
      
      Object object1 = basicTypeConverter0.convertStringToPrimitive(class0, class0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      Object object0 = basicTypeConverter0.convertNullToPrimitive(class0);
      assertNull(object0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(object0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertNotNull(string0);
      assertEquals("null()", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      int int0 = (-40);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-40), (int)integer0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert(basicTypeConverter_ValuePointer0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      Object object0 = null;
      Object object1 = basicTypeConverter0.convert(object0, class0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      Object object0 = null;
      boolean boolean0 = basicTypeConverter0.canConvert(object0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(linkedList0);
      assertNotNull(basicTypeConverter_ValueNodeSet0);
      assertEquals(0, linkedList0.size());
      
      Class<Object> class0 = Object.class;
      List list0 = basicTypeConverter_ValueNodeSet0.getValues();
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = basicTypeConverter0.canConvert(list0, class0);
      assertFalse(linkedList0.contains(boolean0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(basicTypeConverter0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      Object object0 = basicTypeConverter_ValuePointer0.getRootNode();
      assertNotNull(object0);
      assertSame(basicTypeConverter0, object0);
      assertSame(object0, basicTypeConverter0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "java.util.Collection";
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(string0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      Object object0 = basicTypeConverter_ValuePointer0.getNode();
      assertNotNull(object0);
      assertSame(string0, object0);
      assertSame(object0, string0);
      assertEquals("java.util.Collection", object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(basicTypeConverter0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      Class<Object> class0 = Object.class;
      Object object0 = basicTypeConverter0.convert(basicTypeConverter_ValuePointer0, class0);
      assertNotNull(object0);
      assertSame(basicTypeConverter0, object0);
      assertSame(object0, basicTypeConverter0);
      
      Object object1 = basicTypeConverter0.convert(basicTypeConverter_ValuePointer0, class0);
      assertNotNull(object1);
      assertSame(basicTypeConverter0, object1);
      assertSame(basicTypeConverter0, object0);
      assertSame(object1, basicTypeConverter0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(object0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      // Undeclared exception!
      try { 
        basicTypeConverter_ValuePointer0.setValue(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter$ValuePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(basicTypeConverter0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      int int0 = basicTypeConverter_ValuePointer0.compareTo(basicNodeSet0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      Object object0 = basicTypeConverter_ValuePointer0.clone();
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(object0);
      assertSame(basicTypeConverter_ValuePointer0, object0);
      assertSame(object0, basicTypeConverter_ValuePointer0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(linkedList0);
      assertNotNull(basicTypeConverter_ValueNodeSet0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = basicTypeConverter0.convert(basicTypeConverter_ValueNodeSet0, class0);
      assertNotNull(object0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getValues();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(list0);
      assertNotNull(basicTypeConverter_ValueNodeSet0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List list1 = basicTypeConverter_ValueNodeSet0.getNodes();
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
  }
}
