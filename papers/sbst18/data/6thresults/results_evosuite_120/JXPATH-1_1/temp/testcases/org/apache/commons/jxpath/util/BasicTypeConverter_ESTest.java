/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:47:52 GMT 2018
 */

package org.apache.commons.jxpath.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeSet;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.util.BasicTypeConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicTypeConverter_ESTest extends BasicTypeConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-678);
      List<BasicTypeConverter.ValuePointer> list0 = (List<BasicTypeConverter.ValuePointer>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(list0).size();
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(list0);
      assertNotNull(basicTypeConverter_ValueNodeSet0);
      
      List list1 = basicTypeConverter_ValueNodeSet0.getPointers();
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        basicTypeConverter0.canCreateCollection(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      int int0 = (-3395);
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        basicTypeConverter0.allocateNumber(class0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        basicTypeConverter0.allocateCollection(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<Pointer> treeSet0 = new TreeSet<Pointer>();
      assertNotNull(treeSet0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(treeSet0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertNotNull(string0);
      assertEquals("{object of type java.util.TreeSet}", string0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer1 = new BasicTypeConverter.ValuePointer(string0);
      assertNotNull(basicTypeConverter_ValuePointer1);
      assertFalse(basicTypeConverter_ValuePointer1.equals((Object)basicTypeConverter_ValuePointer0));
      
      String string1 = basicTypeConverter_ValuePointer1.asPath();
      assertNotNull(string1);
      assertEquals("'{object of type java.util.TreeSet}'", string1);
      assertNotSame(basicTypeConverter_ValuePointer0, basicTypeConverter_ValuePointer1);
      assertNotSame(string0, string1);
      assertNotSame(basicTypeConverter_ValuePointer1, basicTypeConverter_ValuePointer0);
      assertNotSame(string1, string0);
      assertFalse(basicTypeConverter_ValuePointer0.equals((Object)basicTypeConverter_ValuePointer1));
      assertFalse(basicTypeConverter_ValuePointer1.equals((Object)basicTypeConverter_ValuePointer0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(boolean1);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertNotNull(string0);
      assertEquals("false()", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(boolean0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertNotNull(string0);
      assertEquals("true()", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-1095);
      Integer integer0 = new Integer(int0);
      assertNotNull(integer0);
      assertEquals((-1095), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(integer0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertNotNull(string0);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      Object object0 = basicTypeConverter0.convertStringToPrimitive(basicNodeSet0, class0);
      assertNull(object0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(object0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertNotNull(string0);
      assertEquals("null()", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "$QFGB3jp";
      boolean boolean0 = linkedList0.add(string0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(string0));
      
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(linkedList0);
      assertNotNull(basicTypeConverter_ValueNodeSet0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(string0));
      
      List list0 = basicTypeConverter_ValueNodeSet0.getPointers();
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(linkedList0);
      assertNotNull(basicTypeConverter_ValueNodeSet0);
      assertEquals(0, linkedList0.size());
      
      List list0 = basicTypeConverter_ValueNodeSet0.getPointers();
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List list1 = basicTypeConverter_ValueNodeSet0.getPointers();
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      List<Pointer> list0 = null;
      // Undeclared exception!
      try { 
        basicTypeConverter0.unmodifiableCollection(list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      Collection collection0 = basicTypeConverter0.unmodifiableCollection(treeSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getNodes();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Collection collection0 = basicTypeConverter0.unmodifiableCollection(list0);
      assertNotNull(collection0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      LinkedHashSet<Long> linkedHashSet0 = new LinkedHashSet<Long>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Collection collection0 = basicTypeConverter0.unmodifiableCollection(linkedHashSet0);
      assertNotNull(collection0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.allocateCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create collection of type: class java.lang.Object; java.lang.Object cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      boolean boolean0 = basicTypeConverter0.canCreateCollection(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      double double0 = 1660.1592193605;
      Number number0 = basicTypeConverter0.allocateNumber(class0, double0);
      assertNull(number0);
      
      Number number1 = basicTypeConverter0.allocateNumber(class0, double0);
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(class0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      Object object0 = basicTypeConverter0.convertStringToPrimitive(basicNodeSet0, class0);
      assertNull(object0);
      
      int int0 = basicTypeConverter_ValuePointer0.compareTo(object0);
      assertEquals(0, int0);
      
      Number number0 = basicTypeConverter0.allocateNumber(class0, int0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      Object object0 = basicTypeConverter0.convertStringToPrimitive(basicNodeSet0, class0);
      assertNull(object0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(object0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      Object object1 = basicTypeConverter0.convertStringToPrimitive(basicTypeConverter_ValuePointer0, class0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      Object object0 = basicTypeConverter0.convertNullToPrimitive(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(basicNodeSet0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      Object object0 = basicTypeConverter0.convert(basicTypeConverter_ValuePointer0, class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      List<Object> list0 = null;
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(list0);
      assertNotNull(basicTypeConverter_ValueNodeSet0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert(basicTypeConverter_ValueNodeSet0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      Class<Object> class1 = null;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert(class0, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Class<Object> class0 = Object.class;
      Object object0 = basicTypeConverter0.convert(treeSet0, class0);
      assertNotNull(object0);
      
      Object object1 = basicTypeConverter0.convert(treeSet0, class0);
      assertNotNull(object1);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getNodes();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Object object0 = basicTypeConverter0.convert(list0, class0);
      assertNotNull(object0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(object0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Object> class1 = null;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convertStringToPrimitive(basicTypeConverter_ValuePointer0, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      Class<Object> class0 = Object.class;
      Object object0 = null;
      Object object1 = basicTypeConverter0.convert(object0, class0);
      assertNull(object1);
      
      boolean boolean0 = basicTypeConverter0.canConvert(object1, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeSet<Pointer> treeSet0 = new TreeSet<Pointer>();
      assertNotNull(treeSet0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(treeSet0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      Object object0 = basicTypeConverter_ValuePointer0.getRootNode();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(boolean0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      Object object0 = basicTypeConverter_ValuePointer0.getNode();
      assertNotNull(object0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeSet<Pointer> treeSet0 = new TreeSet<Pointer>();
      assertNotNull(treeSet0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(treeSet0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      Object object0 = basicTypeConverter_ValuePointer0.getValue();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(boolean0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      // Undeclared exception!
      try { 
        basicTypeConverter_ValuePointer0.setValue(boolean0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter$ValuePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TreeSet<Pointer> treeSet0 = new TreeSet<Pointer>();
      assertNotNull(treeSet0);
      
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(treeSet0);
      assertNotNull(basicTypeConverter_ValuePointer0);
      
      Object object0 = basicTypeConverter_ValuePointer0.clone();
      assertNotNull(object0);
      assertSame(basicTypeConverter_ValuePointer0, object0);
      assertSame(object0, basicTypeConverter_ValuePointer0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      assertNotNull(basicTypeConverter0);
      
      int int0 = (-3395);
      Integer integer0 = new Integer(int0);
      assertNotNull(integer0);
      assertEquals((-3395), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Class<Object> class0 = Object.class;
      boolean boolean0 = basicTypeConverter0.canConvert(integer0, class0);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getNodes();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(list0);
      assertNotNull(basicTypeConverter_ValueNodeSet0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List list1 = basicTypeConverter_ValueNodeSet0.getValues();
      assertNotNull(list1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getNodes();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(list0);
      assertNotNull(basicTypeConverter_ValueNodeSet0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List list1 = basicTypeConverter_ValueNodeSet0.getNodes();
      assertNotNull(list1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
  }
}
