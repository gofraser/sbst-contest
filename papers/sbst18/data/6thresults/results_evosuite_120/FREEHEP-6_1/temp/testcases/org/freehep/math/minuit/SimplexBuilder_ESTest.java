/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:59:00 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.FunctionMinimum;
import org.freehep.math.minuit.HessianGradientCalculator;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumSeed;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnFcn;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserTransformation;
import org.freehep.math.minuit.Numerical2PGradientCalculator;
import org.freehep.math.minuit.SimplexBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimplexBuilder_ESTest extends SimplexBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      //  // Unstable assertion: assertNotNull(simplexBuilder0);
      
      double double0 = 1.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      //  // Unstable assertion: assertNotNull(mnFcn0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      //  // Unstable assertion: assertNotNull(mnUserTransformation0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertNotNull(mnStrategy0);
      
      HessianGradientCalculator hessianGradientCalculator0 = new HessianGradientCalculator(mnFcn0, mnUserTransformation0, mnStrategy0);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertNotNull(hessianGradientCalculator0);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      //  // Unstable assertion: assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, int0);
      //  // Unstable assertion: assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      //  // Unstable assertion: assertNotNull(minimumState0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      //  // Unstable assertion: assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = simplexBuilder0.minimum(mnFcn0, hessianGradientCalculator0, minimumSeed0, mnStrategy0, int0, double0);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, functionMinimum0.fval(), 0.01);
      //  // Unstable assertion: assertFalse(functionMinimum0.isValid());
      //  // Unstable assertion: assertEquals(4, functionMinimum0.nfcn());
      //  // Unstable assertion: assertEquals(0.0, functionMinimum0.edm(), 0.01);
      //  // Unstable assertion: assertNotNull(functionMinimum0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      double double0 = 1.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertNotNull(mnStrategy0);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FCNBase fCNBase0 = null;
      MnFcn mnFcn0 = new MnFcn(fCNBase0, int0);
      assertNotNull(mnFcn0);
      
      Numerical2PGradientCalculator numerical2PGradientCalculator0 = new Numerical2PGradientCalculator(mnFcn0, mnUserTransformation0, mnStrategy0);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertNotNull(numerical2PGradientCalculator0);
      
      // Undeclared exception!
      try { 
        simplexBuilder0.minimum(mnFcn0, numerical2PGradientCalculator0, minimumSeed0, mnStrategy0, int0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double double0 = 450.596331801;
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      Numerical2PGradientCalculator numerical2PGradientCalculator0 = new Numerical2PGradientCalculator(mnFcn0, mnUserTransformation0, mnStrategy0);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(numerical2PGradientCalculator0);
      
      int int0 = 1;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumError minimumError0 = new MinimumError(int0);
      assertNotNull(minimumError0);
      
      int int1 = 0;
      FunctionGradient functionGradient0 = new FunctionGradient(int1);
      assertFalse(int1 == int0);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, double0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumState0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumSeed0);
      
      // Undeclared exception!
      try { 
        simplexBuilder0.minimum(mnFcn0, numerical2PGradientCalculator0, minimumSeed0, mnStrategy0, int1, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      double double0 = 0.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double1 = (-1.0);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double1);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(mnFcn0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = double1;
      doubleArray0[3] = double1;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(8, doubleArray0.length);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, doubleArray0[0]);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumParameters0);
      assertEquals(8, doubleArray0.length);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotNull(minimumState0);
      assertEquals(8, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(8, doubleArray0.length);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(mnStrategy0);
      
      Numerical2PGradientCalculator numerical2PGradientCalculator0 = new Numerical2PGradientCalculator(mnFcn0, mnUserTransformation0, mnStrategy0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(numerical2PGradientCalculator0);
      assertEquals(8, doubleArray0.length);
      
      int int1 = 331;
      FunctionMinimum functionMinimum0 = simplexBuilder0.minimum(mnFcn0, numerical2PGradientCalculator0, minimumSeed0, mnStrategy0, int1, doubleArray0[3]);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(3, functionMinimum0.nfcn());
      assertEquals((-1.0), functionMinimum0.errorDef(), 0.01);
      assertEquals((-1.0), functionMinimum0.fval(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(functionMinimum0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = (-1891.448);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(mnStrategy0);
      
      HessianGradientCalculator hessianGradientCalculator0 = new HessianGradientCalculator(mnFcn0, mnUserTransformation0, mnStrategy0);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(hessianGradientCalculator0);
      
      int int0 = 1;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      int int1 = 2969;
      // Undeclared exception!
      simplexBuilder0.minimum(mnFcn0, hessianGradientCalculator0, minimumSeed0, mnStrategy0, int1, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = 0.0;
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 12;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      Numerical2PGradientCalculator numerical2PGradientCalculator0 = new Numerical2PGradientCalculator(mnFcn0, mnUserTransformation0, mnStrategy0);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(numerical2PGradientCalculator0);
      
      int int1 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int1);
      assertFalse(int1 == int0);
      assertNotNull(mnAlgebraicVector0);
      
      double double1 = 731.0667;
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double1);
      assertFalse(int1 == int0);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(minimumState0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = simplexBuilder0.minimum(mnFcn0, numerical2PGradientCalculator0, minimumSeed0, mnStrategy0, int0, int0);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertNotNull(functionMinimum0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = (-1891.448);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertNotNull(mnStrategy0);
      
      HessianGradientCalculator hessianGradientCalculator0 = new HessianGradientCalculator(mnFcn0, mnUserTransformation0, mnStrategy0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertNotNull(hessianGradientCalculator0);
      
      int int0 = 1;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = simplexBuilder0.minimum(mnFcn0, hessianGradientCalculator0, minimumSeed0, mnStrategy0, int0, double0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals((-1891.448), functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(4, functionMinimum0.nfcn());
      assertEquals(1891.448, functionMinimum0.edm(), 0.01);
      assertEquals((-1891.448), functionMinimum0.fval(), 0.01);
      assertNotNull(functionMinimum0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = 0.0;
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 12;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      Numerical2PGradientCalculator numerical2PGradientCalculator0 = new Numerical2PGradientCalculator(mnFcn0, mnUserTransformation0, mnStrategy0);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertNotNull(numerical2PGradientCalculator0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = simplexBuilder0.minimum(mnFcn0, numerical2PGradientCalculator0, minimumSeed0, mnStrategy0, int0, int0);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(15, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertNotNull(functionMinimum0);
  }
}
