/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:33:11 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.AnalyticalGradientCalculator;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FCNGradientBase;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.FunctionMinimum;
import org.freehep.math.minuit.GradientCalculator;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumSeed;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnFcn;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserTransformation;
import org.freehep.math.minuit.Numerical2PGradientCalculator;
import org.freehep.math.minuit.SimplexBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimplexBuilder_ESTest extends SimplexBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = 0.0;
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      int int0 = (-1415);
      mnFcn0.theNumCall = int0;
      Numerical2PGradientCalculator numerical2PGradientCalculator0 = new Numerical2PGradientCalculator(mnFcn0, mnUserTransformation0, mnStrategy0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(numerical2PGradientCalculator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      int int1 = 0;
      MinimumState minimumState0 = new MinimumState(int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumState0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertFalse(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      FunctionMinimum functionMinimum0 = simplexBuilder0.minimum(mnFcn0, numerical2PGradientCalculator0, minimumSeed0, mnStrategy0, int1, doubleArray0[0]);
      assertFalse(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals((-1411), functionMinimum0.nfcn());
      assertTrue(functionMinimum0.isValid());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      MnFcn mnFcn0 = null;
      GradientCalculator gradientCalculator0 = null;
      int int0 = 3890;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = null;
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      
      // Undeclared exception!
      try { 
        simplexBuilder0.minimum(mnFcn0, gradientCalculator0, minimumSeed0, mnStrategy0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MinimumSeed", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = (-607.09182);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      double[] doubleArray0 = new double[8];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 2607;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      
      Numerical2PGradientCalculator numerical2PGradientCalculator0 = new Numerical2PGradientCalculator(mnFcn0, mnUserTransformation0, mnStrategy0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(numerical2PGradientCalculator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      int int1 = 3;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int1);
      assertFalse(int1 == int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MinimumError.MnInvertFailed minimumError_MnInvertFailed0 = new MinimumError.MnInvertFailed();
      assertNotNull(minimumError_MnInvertFailed0);
      
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnInvertFailed0);
      assertFalse(int1 == int0);
      assertNotNull(minimumError0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int1);
      assertFalse(int1 == int0);
      assertNotNull(mnAlgebraicVector0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector0, mnAlgebraicVector0);
      assertFalse(int1 == int0);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, doubleArray0[1], int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(minimumState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        simplexBuilder0.minimum(mnFcn0, numerical2PGradientCalculator0, minimumSeed0, mnStrategy0, int1, doubleArray0[7]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      double double0 = 0.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      double[] doubleArray0 = new double[7];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      Numerical2PGradientCalculator numerical2PGradientCalculator0 = new Numerical2PGradientCalculator(mnFcn0, mnUserTransformation0, mnStrategy0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(numerical2PGradientCalculator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      int int0 = 1;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = 1309;
      FunctionMinimum functionMinimum0 = simplexBuilder0.minimum(mnFcn0, numerical2PGradientCalculator0, minimumSeed0, mnStrategy0, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertTrue(functionMinimum0.isValid());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      //  // Unstable assertion: assertNotNull(simplexBuilder0);
      
      double double0 = (-2574.26047796872);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      //  // Unstable assertion: assertNotNull(mnFcn0);
      
      FCNGradientBase fCNGradientBase0 = mock(FCNGradientBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertNotNull(mnUserTransformation0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = false;
      AnalyticalGradientCalculator analyticalGradientCalculator0 = new AnalyticalGradientCalculator(fCNGradientBase0, mnUserTransformation0, boolean0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertNotNull(analyticalGradientCalculator0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      //  // Unstable assertion: assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, double0);
      //  // Unstable assertion: assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      //  // Unstable assertion: assertNotNull(minimumState0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertNotNull(minimumSeed0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      //  // Unstable assertion: assertNotNull(mnStrategy0);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      int int1 = 1305;
      FunctionMinimum functionMinimum0 = simplexBuilder0.minimum(mnFcn0, analyticalGradientCalculator0, minimumSeed0, mnStrategy0, int1, int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertNotNull(functionMinimum0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals((-2574.26047796872), functionMinimum0.errorDef(), 0.01);
      //  // Unstable assertion: assertEquals(2574.26047796872, functionMinimum0.edm(), 0.01);
      //  // Unstable assertion: assertFalse(functionMinimum0.isValid());
      //  // Unstable assertion: assertEquals(1306, functionMinimum0.nfcn());
      //  // Unstable assertion: assertEquals((-2574.26047796872), functionMinimum0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = 3326.177352086;
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      FCNGradientBase fCNGradientBase0 = mock(FCNGradientBase.class, new ViolatedAssumptionAnswer());
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      boolean boolean0 = true;
      AnalyticalGradientCalculator analyticalGradientCalculator0 = new AnalyticalGradientCalculator(fCNGradientBase0, mnUserTransformation0, boolean0);
      assertNotNull(analyticalGradientCalculator0);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MinimumError minimumError0 = null;
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector0, mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int0, int0);
      assertNotNull(minimumState0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      
      FunctionMinimum functionMinimum0 = simplexBuilder0.minimum(mnFcn0, analyticalGradientCalculator0, minimumSeed0, mnStrategy0, int0, int0);
      assertNotNull(functionMinimum0);
      assertFalse(functionMinimum0.isValid());
      assertEquals(3, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(3326.177352086, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      double double0 = 2.8421709430404007E-14;
      double double1 = (-1306.9605177511044);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double1).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(mnFcn0);
      
      FCNGradientBase fCNGradientBase0 = mock(FCNGradientBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = double1;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1306.9605177511044), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = true;
      AnalyticalGradientCalculator analyticalGradientCalculator0 = new AnalyticalGradientCalculator(fCNGradientBase0, mnUserTransformation0, boolean0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(analyticalGradientCalculator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1306.9605177511044), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, doubleArray0[4]);
      assertEquals(8, doubleArray0.length);
      assertNotNull(minimumParameters0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1306.9605177511044), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MinimumError.MnMadePosDef minimumError_MnMadePosDef0 = new MinimumError.MnMadePosDef();
      assertNotNull(minimumError_MnMadePosDef0);
      
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnMadePosDef0);
      assertNotNull(minimumError0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, doubleArray0[4], int0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(minimumState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1306.9605177511044), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1306.9605177511044), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = null;
      FunctionMinimum functionMinimum0 = simplexBuilder0.minimum(mnFcn0, analyticalGradientCalculator0, minimumSeed0, mnStrategy0, int0, doubleArray0[3]);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1306.9605177511044), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(3, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(2.8421709430404007E-14, functionMinimum0.errorDef(), 0.01);
      assertEquals((-1306.9605177511044), functionMinimum0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      double double0 = 0.0;
      double double1 = 2.8421709430404007E-14;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertEquals(double0, double1, 0.01);
      assertNotNull(mnFcn0);
      
      double[] doubleArray0 = new double[7];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      Numerical2PGradientCalculator numerical2PGradientCalculator0 = new Numerical2PGradientCalculator(mnFcn0, mnUserTransformation0, mnStrategy0);
      assertEquals(double0, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(numerical2PGradientCalculator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      int int0 = 1;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, double1);
      assertEquals(double1, double0, 0.01);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, doubleArray0[3], int0);
      assertEquals(double1, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(minimumState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertEquals(double1, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      FunctionMinimum functionMinimum0 = simplexBuilder0.minimum(mnFcn0, numerical2PGradientCalculator0, minimumSeed0, mnStrategy0, int0, int0);
      assertEquals(double0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(4, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimplexBuilder simplexBuilder0 = new SimplexBuilder();
      assertNotNull(simplexBuilder0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = (-607.09182);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      double[] doubleArray0 = new double[8];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 2607;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      
      Numerical2PGradientCalculator numerical2PGradientCalculator0 = new Numerical2PGradientCalculator(mnFcn0, mnUserTransformation0, mnStrategy0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(numerical2PGradientCalculator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MinimumError.MnInvertFailed minimumError_MnInvertFailed0 = new MinimumError.MnInvertFailed();
      assertNotNull(minimumError_MnInvertFailed0);
      
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnInvertFailed0);
      assertNotNull(minimumError0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector0, mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, doubleArray0[2], int0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(minimumState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      simplexBuilder0.minimum(mnFcn0, numerical2PGradientCalculator0, minimumSeed0, mnStrategy0, int0, doubleArray0[7]);
  }
}
