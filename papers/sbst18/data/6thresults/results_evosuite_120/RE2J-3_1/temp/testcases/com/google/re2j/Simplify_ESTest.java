/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:11:44 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[15];
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      int int0 = 1;
      Regexp regexp1 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      try { 
        PrivateAccess.callMethod((Class<Simplify>) Simplify.class, (Simplify) object0, "simplify1", (Object) regexp_Op1, (Class<?>) Regexp.Op.class, (Object) int0, (Class<?>) int.class, (Object) regexp0, (Class<?>) Regexp.class, (Object) regexp1, (Class<?>) Regexp.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      int int0 = 1712;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Object object1 = PrivateAccess.callMethod((Class<Simplify>) Simplify.class, (Simplify) object0, "simplify1", (Object) regexp_Op1, (Class<?>) Regexp.Op.class, (Object) int0, (Class<?>) int.class, (Object) regexp0, (Class<?>) Regexp.class, (Object) regexp0, (Class<?>) Regexp.class);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(object1.equals((Object)regexp0));
      assertNotNull(object1);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, object1);
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(object1, regexp0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Simplify simplify0 = null;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      int int0 = 1274;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = PrivateAccess.callMethod((Class<Simplify>) Simplify.class, simplify0, "simplify1", (Object) regexp_Op0, (Class<?>) Regexp.Op.class, (Object) int0, (Class<?>) int.class, (Object) regexp0, (Class<?>) Regexp.class, (Object) regexp0, (Class<?>) Regexp.class);
      assertNotNull(object0);
      assertSame(regexp0, object0);
      assertSame(object0, regexp0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      int int0 = 1712;
      Object object1 = PrivateAccess.callMethod((Class<Simplify>) Simplify.class, (Simplify) object0, "simplify1", (Object) regexp_Op0, (Class<?>) Regexp.Op.class, (Object) int0, (Class<?>) int.class, (Object) regexp0, (Class<?>) Regexp.class, (Object) regexp0, (Class<?>) Regexp.class);
      assertTrue(object1.equals((Object)regexp0));
      assertNotNull(object1);
      assertNotSame(regexp0, object1);
      assertNotSame(object1, regexp0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = 6;
      regexp0.max = int0;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotNull(regexp1);
      assertSame(regexp0, regexp1);
      assertSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      int int0 = 6;
      regexp1.min = int0;
      regexp1.op = regexp_Op0;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp regexp0 = null;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNull(regexp1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotNull(regexp1);
      assertSame(regexp0, regexp1);
      assertSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      int int0 = 1;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object1 = PrivateAccess.callMethod((Class<Simplify>) Simplify.class, (Simplify) object0, "simplify1", (Object) regexp_Op0, (Class<?>) Regexp.Op.class, (Object) int0, (Class<?>) int.class, (Object) regexp0, (Class<?>) Regexp.class, (Object) regexp0, (Class<?>) Regexp.class);
      assertNotNull(object1);
      assertSame(regexp0, object1);
      assertSame(object1, regexp0);
  }
}
