/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:46:22 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string0 = regexp1.toString();
      assertEquals("(?:)", string0);
      assertNotNull(string0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string1 = "\\A";
      regexp1.name = string1;
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      int int0 = (-686);
      regexp2.max = int0;
      Regexp regexp3 = Simplify.simplify(regexp2);
      assertNotNull(regexp3);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp3);
      assertSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertSame(regexp3, regexp2);
      
      int[] intArray0 = new int[0];
      int int1 = (-843);
      regexp2.max = int1;
      regexp0.runes = intArray0;
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp4 = new Regexp(regexp2);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      regexpArray0[0] = regexp4;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp3;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp2;
      regexp2.subs = regexpArray0;
      Regexp regexp5 = Simplify.simplify(regexp0);
      assertNotNull(regexp5);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp3));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp2);
      
      regexp2.op = regexp_Op0;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp6 = new Regexp(regexp_Op1);
      assertNotNull(regexp6);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp4));
      
      boolean boolean0 = regexp5.equals(regexp6);
      assertFalse(boolean0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp6));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp4));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp6);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp4);
      
      Regexp regexp7 = Simplify.simplify(regexp5);
      assertNotNull(regexp7);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp6));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertTrue(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp6));
      assertTrue(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp0));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp4);
      assertSame(regexp5, regexp7);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp6);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp1);
      assertSame(regexp7, regexp5);
      
      Regexp regexp8 = Simplify.simplify(regexp7);
      assertNotNull(regexp8);
      assertTrue(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp3));
      assertTrue(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp6));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertTrue(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp6));
      assertTrue(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp0));
      assertSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp3);
      assertSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp8);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp4);
      assertSame(regexp5, regexp7);
      assertNotSame(regexp5, regexp3);
      assertSame(regexp5, regexp8);
      assertNotSame(regexp5, regexp6);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertSame(regexp7, regexp8);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp1);
      assertSame(regexp7, regexp5);
      
      Regexp regexp9 = new Regexp(regexp1);
      assertNotNull(regexp9);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp9.equals((Object)regexp4));
      assertTrue(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp6));
      assertTrue(regexp9.equals((Object)regexp1));
      assertTrue(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp2));
      assertTrue(regexp9.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp8));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp8));
      assertTrue(regexp1.equals((Object)regexp7));
      assertTrue(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp5));
      
      regexp9.name = string1;
      Regexp regexp10 = Simplify.simplify(regexp9);
      assertNotNull(regexp10);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp9.equals((Object)regexp4));
      assertTrue(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp6));
      assertTrue(regexp9.equals((Object)regexp1));
      assertTrue(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp2));
      assertTrue(regexp9.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp9));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp8));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp10.equals((Object)regexp6));
      assertTrue(regexp10.equals((Object)regexp1));
      assertTrue(regexp10.equals((Object)regexp5));
      assertTrue(regexp10.equals((Object)regexp4));
      assertTrue(regexp10.equals((Object)regexp8));
      assertFalse(regexp10.equals((Object)regexp0));
      assertFalse(regexp10.equals((Object)regexp3));
      assertTrue(regexp10.equals((Object)regexp7));
      assertFalse(regexp10.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp8));
      assertTrue(regexp1.equals((Object)regexp9));
      assertTrue(regexp1.equals((Object)regexp7));
      assertTrue(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp5));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp9, regexp6);
      assertSame(regexp9, regexp10);
      assertNotSame(regexp9, regexp5);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp4);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp0, regexp9);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp10);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp8);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp10, regexp6);
      assertNotSame(regexp10, regexp0);
      assertSame(regexp10, regexp9);
      assertNotSame(regexp10, regexp1);
      assertNotSame(regexp10, regexp5);
      assertNotSame(regexp10, regexp8);
      assertNotSame(regexp10, regexp3);
      assertNotSame(regexp10, regexp4);
      assertNotSame(regexp10, regexp7);
      assertNotSame(regexp10, regexp2);
      assertNotSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp10);
      assertNotSame(regexp1, regexp5);
      assertNotSame(regexp1, regexp8);
      assertNotSame(regexp1, regexp7);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp6);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp9);
      
      Regexp regexp11 = Simplify.simplify(regexp3);
      assertNotNull(regexp11);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp9));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp10));
      assertFalse(regexp0.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp8));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp8));
      assertTrue(regexp1.equals((Object)regexp9));
      assertTrue(regexp1.equals((Object)regexp7));
      assertTrue(regexp1.equals((Object)regexp10));
      assertTrue(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp5));
      assertFalse(regexp11.equals((Object)regexp6));
      assertFalse(regexp11.equals((Object)regexp9));
      assertFalse(regexp11.equals((Object)regexp1));
      assertFalse(regexp11.equals((Object)regexp5));
      assertFalse(regexp11.equals((Object)regexp8));
      assertFalse(regexp11.equals((Object)regexp3));
      assertFalse(regexp11.equals((Object)regexp7));
      assertFalse(regexp11.equals((Object)regexp4));
      assertFalse(regexp11.equals((Object)regexp2));
      assertFalse(regexp11.equals((Object)regexp0));
      assertFalse(regexp11.equals((Object)regexp10));
      assertFalse(regexp2.equals((Object)regexp10));
      assertFalse(regexp2.equals((Object)regexp4));
      assertFalse(regexp2.equals((Object)regexp6));
      assertFalse(regexp2.equals((Object)regexp9));
      assertFalse(regexp2.equals((Object)regexp7));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp5));
      assertFalse(regexp2.equals((Object)regexp8));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp7));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp9));
      assertFalse(regexp3.equals((Object)regexp4));
      assertFalse(regexp3.equals((Object)regexp10));
      assertFalse(regexp3.equals((Object)regexp8));
      assertFalse(regexp3.equals((Object)regexp6));
      assertFalse(regexp3.equals((Object)regexp5));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp9);
      assertNotSame(regexp0, regexp11);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp10);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp8);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp10);
      assertNotSame(regexp1, regexp5);
      assertNotSame(regexp1, regexp8);
      assertNotSame(regexp1, regexp7);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp6);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp9);
      assertNotSame(regexp1, regexp11);
      assertNotSame(regexp11, regexp6);
      assertNotSame(regexp11, regexp9);
      assertNotSame(regexp11, regexp1);
      assertNotSame(regexp11, regexp5);
      assertNotSame(regexp11, regexp8);
      assertNotSame(regexp11, regexp3);
      assertNotSame(regexp11, regexp7);
      assertNotSame(regexp11, regexp4);
      assertNotSame(regexp11, regexp2);
      assertNotSame(regexp11, regexp0);
      assertNotSame(regexp11, regexp10);
      assertNotSame(regexp2, regexp10);
      assertNotSame(regexp2, regexp4);
      assertNotSame(regexp2, regexp6);
      assertSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp9);
      assertNotSame(regexp2, regexp11);
      assertNotSame(regexp2, regexp7);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp5);
      assertNotSame(regexp2, regexp8);
      assertNotSame(regexp3, regexp11);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp7);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp9);
      assertNotSame(regexp3, regexp4);
      assertNotSame(regexp3, regexp10);
      assertNotSame(regexp3, regexp8);
      assertSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp6);
      assertNotSame(regexp3, regexp5);
      
      Regexp regexp12 = Simplify.simplify(regexp6);
      assertNotNull(regexp12);
      assertFalse(regexp12.equals((Object)regexp11));
      assertFalse(regexp12.equals((Object)regexp0));
      assertFalse(regexp12.equals((Object)regexp10));
      assertFalse(regexp12.equals((Object)regexp9));
      assertFalse(regexp12.equals((Object)regexp7));
      assertFalse(regexp12.equals((Object)regexp1));
      assertFalse(regexp12.equals((Object)regexp2));
      assertFalse(regexp12.equals((Object)regexp4));
      assertFalse(regexp12.equals((Object)regexp8));
      assertFalse(regexp12.equals((Object)regexp3));
      assertFalse(regexp12.equals((Object)regexp5));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp6.equals((Object)regexp8));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp9));
      assertFalse(regexp6.equals((Object)regexp10));
      assertFalse(regexp6.equals((Object)regexp7));
      assertFalse(regexp6.equals((Object)regexp11));
      assertNotSame(regexp12, regexp11);
      assertNotSame(regexp12, regexp0);
      assertNotSame(regexp12, regexp10);
      assertNotSame(regexp12, regexp9);
      assertNotSame(regexp12, regexp7);
      assertNotSame(regexp12, regexp1);
      assertSame(regexp12, regexp6);
      assertNotSame(regexp12, regexp2);
      assertNotSame(regexp12, regexp4);
      assertNotSame(regexp12, regexp8);
      assertNotSame(regexp12, regexp3);
      assertNotSame(regexp12, regexp5);
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp6, regexp8);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp4);
      assertSame(regexp6, regexp12);
      assertNotSame(regexp6, regexp9);
      assertNotSame(regexp6, regexp10);
      assertNotSame(regexp6, regexp7);
      assertNotSame(regexp6, regexp11);
      
      Regexp regexp13 = Simplify.simplify(regexp9);
      assertNotNull(regexp13);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp9.equals((Object)regexp4));
      assertFalse(regexp9.equals((Object)regexp11));
      assertTrue(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp6));
      assertTrue(regexp9.equals((Object)regexp1));
      assertTrue(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp2));
      assertTrue(regexp9.equals((Object)regexp5));
      assertFalse(regexp9.equals((Object)regexp12));
      assertFalse(regexp0.equals((Object)regexp9));
      assertFalse(regexp0.equals((Object)regexp11));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp10));
      assertFalse(regexp0.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp12));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp8));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp8));
      assertTrue(regexp1.equals((Object)regexp9));
      assertTrue(regexp1.equals((Object)regexp7));
      assertTrue(regexp1.equals((Object)regexp10));
      assertTrue(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp11));
      assertFalse(regexp1.equals((Object)regexp12));
      assertTrue(regexp1.equals((Object)regexp5));
      assertTrue(regexp13.equals((Object)regexp4));
      assertFalse(regexp13.equals((Object)regexp6));
      assertTrue(regexp13.equals((Object)regexp5));
      assertTrue(regexp13.equals((Object)regexp8));
      assertFalse(regexp13.equals((Object)regexp12));
      assertFalse(regexp13.equals((Object)regexp11));
      assertFalse(regexp13.equals((Object)regexp3));
      assertTrue(regexp13.equals((Object)regexp7));
      assertTrue(regexp13.equals((Object)regexp1));
      assertFalse(regexp13.equals((Object)regexp0));
      assertFalse(regexp13.equals((Object)regexp2));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp9, regexp3);
      assertSame(regexp9, regexp13);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp11);
      assertNotSame(regexp9, regexp6);
      assertSame(regexp9, regexp10);
      assertNotSame(regexp9, regexp5);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp4);
      assertNotSame(regexp9, regexp12);
      assertNotSame(regexp0, regexp9);
      assertNotSame(regexp0, regexp12);
      assertNotSame(regexp0, regexp8);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp13);
      assertNotSame(regexp0, regexp11);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp10);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp13);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp6);
      assertNotSame(regexp1, regexp12);
      assertNotSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp10);
      assertNotSame(regexp1, regexp5);
      assertNotSame(regexp1, regexp8);
      assertNotSame(regexp1, regexp7);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp9);
      assertNotSame(regexp1, regexp11);
      assertNotSame(regexp13, regexp12);
      assertNotSame(regexp13, regexp4);
      assertNotSame(regexp13, regexp0);
      assertNotSame(regexp13, regexp2);
      assertNotSame(regexp13, regexp8);
      assertSame(regexp13, regexp10);
      assertNotSame(regexp13, regexp7);
      assertNotSame(regexp13, regexp1);
      assertNotSame(regexp13, regexp6);
      assertNotSame(regexp13, regexp11);
      assertNotSame(regexp13, regexp3);
      assertNotSame(regexp13, regexp5);
      assertSame(regexp13, regexp9);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotNull(regexp1);
      assertSame(regexp0, regexp1);
      assertSame(regexp1, regexp0);
      
      int[] intArray0 = null;
      regexp0.runes = intArray0;
      Regexp regexp2 = Simplify.simplify(regexp1);
      assertNotNull(regexp2);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp2);
      assertSame(regexp1, regexp0);
      assertSame(regexp1, regexp2);
      assertSame(regexp2, regexp0);
      assertSame(regexp2, regexp1);
      
      Regexp regexp3 = Simplify.simplify(regexp1);
      assertNotNull(regexp3);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp2);
      assertSame(regexp1, regexp0);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, regexp3);
      assertSame(regexp3, regexp2);
      assertSame(regexp3, regexp1);
      assertSame(regexp3, regexp0);
      
      Regexp regexp4 = Simplify.simplify(regexp2);
      assertNotNull(regexp4);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp2);
      assertSame(regexp0, regexp4);
      assertSame(regexp1, regexp0);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp4);
      assertSame(regexp2, regexp0);
      assertSame(regexp2, regexp1);
      assertSame(regexp2, regexp4);
      assertSame(regexp2, regexp3);
      assertSame(regexp4, regexp1);
      assertSame(regexp4, regexp3);
      assertSame(regexp4, regexp0);
      assertSame(regexp4, regexp2);
      
      Simplify simplify0 = null;
      int int0 = 2436;
      Regexp regexp5 = null;
      Object object1 = PrivateAccess.callMethod((Class<Simplify>) Simplify.class, simplify0, "simplify1", (Object) regexp_Op0, (Class<?>) Regexp.Op.class, (Object) int0, (Class<?>) int.class, (Object) regexp1, (Class<?>) Regexp.class, (Object) regexp5, (Class<?>) Regexp.class);
      assertNotNull(object1);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp2);
      assertSame(regexp0, object1);
      assertSame(regexp0, regexp4);
      assertSame(regexp1, regexp0);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, object1);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp4);
      assertSame(object1, regexp4);
      assertSame(object1, regexp1);
      assertSame(object1, regexp0);
      assertSame(object1, regexp2);
      assertSame(object1, regexp3);
      
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      int int1 = (-4114);
      Object object2 = PrivateAccess.callMethod((Class<Simplify>) Simplify.class, simplify0, "simplify1", (Object) regexp_Op1, (Class<?>) Regexp.Op.class, (Object) int1, (Class<?>) int.class, (Object) regexp2, (Class<?>) Regexp.class, (Object) regexp0, (Class<?>) Regexp.class);
      assertNotNull(object2);
      assertFalse(object2.equals((Object)regexp2));
      assertFalse(object2.equals((Object)regexp0));
      assertFalse(object2.equals((Object)regexp1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)regexp3));
      assertFalse(object2.equals((Object)regexp4));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(int1 == int0);
      assertNotSame(object2, regexp2);
      assertNotSame(object2, regexp0);
      assertNotSame(object2, regexp1);
      assertNotSame(object2, object1);
      assertNotSame(object2, regexp3);
      assertNotSame(object2, regexp4);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp2);
      assertNotSame(regexp0, object2);
      assertSame(regexp0, object1);
      assertSame(regexp0, regexp4);
      assertSame(regexp1, regexp0);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, object1);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp4);
      assertNotSame(regexp1, object2);
      assertSame(regexp2, regexp0);
      assertSame(regexp2, object1);
      assertSame(regexp2, regexp1);
      assertNotSame(regexp2, object2);
      assertSame(regexp2, regexp4);
      assertSame(regexp2, regexp3);
      assertNotSame(regexp_Op1, regexp_Op0);
      
      int int2 = 1052;
      Regexp regexp6 = Simplify.simplify(regexp0);
      assertNotNull(regexp6);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp6.equals((Object)object2));
      assertFalse(regexp0.equals((Object)object2));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertSame(regexp6, regexp0);
      assertSame(regexp6, regexp2);
      assertSame(regexp6, regexp1);
      assertNotSame(regexp6, object2);
      assertSame(regexp6, object1);
      assertSame(regexp6, regexp4);
      assertSame(regexp6, regexp3);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp2);
      assertNotSame(regexp0, object2);
      assertSame(regexp0, regexp6);
      assertSame(regexp0, object1);
      assertSame(regexp0, regexp4);
      
      int int3 = 2837;
      regexp6.cap = int3;
      Regexp regexp7 = new Regexp(regexp6);
      assertNotNull(regexp7);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp6.equals((Object)object2));
      assertFalse(regexp0.equals((Object)object2));
      assertFalse(regexp7.equals((Object)object2));
      assertTrue(regexp7.equals((Object)regexp4));
      assertTrue(regexp7.equals((Object)regexp3));
      assertTrue(regexp7.equals((Object)regexp0));
      assertTrue(regexp7.equals((Object)object1));
      assertTrue(regexp7.equals((Object)regexp6));
      assertTrue(regexp7.equals((Object)regexp1));
      assertTrue(regexp7.equals((Object)regexp2));
      
      int int4 = 839;
      regexp7.cap = int4;
      Object object3 = PrivateAccess.callMethod((Class<Simplify>) Simplify.class, simplify0, "simplify1", (Object) regexp_Op0, (Class<?>) Regexp.Op.class, (Object) int2, (Class<?>) int.class, (Object) regexp2, (Class<?>) Regexp.class, (Object) regexp7, (Class<?>) Regexp.class);
      assertNotNull(object3);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(regexp6.equals((Object)object2));
      assertTrue(regexp6.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)object2));
      assertTrue(regexp0.equals((Object)regexp7));
      assertTrue(regexp1.equals((Object)regexp7));
      assertFalse(regexp1.equals((Object)object2));
      assertFalse(regexp7.equals((Object)object2));
      assertTrue(regexp7.equals((Object)regexp4));
      assertTrue(regexp7.equals((Object)regexp3));
      assertTrue(regexp7.equals((Object)regexp0));
      assertTrue(regexp7.equals((Object)object1));
      assertTrue(regexp7.equals((Object)regexp6));
      assertTrue(regexp7.equals((Object)regexp1));
      assertTrue(regexp7.equals((Object)regexp2));
      assertFalse(regexp2.equals((Object)object2));
      assertTrue(regexp2.equals((Object)regexp7));
      assertTrue(object3.equals((Object)regexp7));
      assertFalse(object3.equals((Object)object2));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertSame(regexp6, regexp0);
      assertSame(regexp6, regexp2);
      assertSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp7);
      assertNotSame(regexp6, object2);
      assertSame(regexp6, object1);
      assertSame(regexp6, regexp4);
      assertSame(regexp6, regexp3);
      assertSame(regexp6, object3);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, object3);
      assertNotSame(regexp0, regexp7);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp2);
      assertNotSame(regexp0, object2);
      assertSame(regexp0, regexp6);
      assertSame(regexp0, object1);
      assertSame(regexp0, regexp4);
      assertSame(regexp1, regexp0);
      assertSame(regexp1, regexp6);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, object1);
      assertNotSame(regexp1, regexp7);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp4);
      assertNotSame(regexp1, object2);
      assertSame(regexp1, object3);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, object2);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, object1);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, object3);
      assertSame(regexp2, regexp6);
      assertSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp7);
      assertSame(regexp2, object1);
      assertSame(regexp2, regexp1);
      assertNotSame(regexp2, object2);
      assertSame(regexp2, regexp4);
      assertSame(regexp2, regexp3);
      assertSame(regexp2, object3);
      assertSame(object3, regexp0);
      assertSame(object3, regexp4);
      assertSame(object3, regexp1);
      assertSame(object3, regexp3);
      assertNotSame(object3, regexp7);
      assertSame(object3, object1);
      assertSame(object3, regexp2);
      assertSame(object3, regexp6);
      assertNotSame(object3, object2);
      
      Regexp regexp8 = Simplify.simplify(regexp7);
      assertNotNull(regexp8);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp6.equals((Object)object2));
      assertTrue(regexp6.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)object2));
      assertTrue(regexp0.equals((Object)regexp7));
      assertFalse(regexp7.equals((Object)object2));
      assertTrue(regexp7.equals((Object)regexp4));
      assertTrue(regexp7.equals((Object)regexp3));
      assertTrue(regexp7.equals((Object)regexp0));
      assertTrue(regexp7.equals((Object)object3));
      assertTrue(regexp7.equals((Object)object1));
      assertTrue(regexp7.equals((Object)regexp6));
      assertTrue(regexp7.equals((Object)regexp1));
      assertTrue(regexp7.equals((Object)regexp2));
      assertTrue(regexp8.equals((Object)regexp6));
      assertTrue(regexp8.equals((Object)object1));
      assertTrue(regexp8.equals((Object)regexp1));
      assertTrue(regexp8.equals((Object)regexp2));
      assertTrue(regexp8.equals((Object)regexp4));
      assertTrue(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)object2));
      assertTrue(regexp8.equals((Object)object3));
      assertTrue(regexp8.equals((Object)regexp0));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertSame(regexp6, regexp0);
      assertSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp8);
      assertSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp7);
      assertNotSame(regexp6, object2);
      assertSame(regexp6, object1);
      assertSame(regexp6, regexp4);
      assertSame(regexp6, regexp3);
      assertSame(regexp6, object3);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, object3);
      assertNotSame(regexp0, regexp7);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp2);
      assertNotSame(regexp0, object2);
      assertSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp8);
      assertSame(regexp0, object1);
      assertSame(regexp0, regexp4);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, object2);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, object1);
      assertSame(regexp7, regexp8);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, object3);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, object3);
      assertNotSame(regexp8, object2);
      assertSame(regexp8, regexp7);
      assertNotSame(regexp8, object1);
      assertNotSame(regexp8, regexp2);
      
      Regexp regexp9 = Simplify.simplify(regexp1);
      assertNotNull(regexp9);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp8));
      assertFalse(regexp0.equals((Object)object2));
      assertTrue(regexp0.equals((Object)regexp7));
      assertTrue(regexp1.equals((Object)regexp8));
      assertTrue(regexp1.equals((Object)regexp7));
      assertFalse(regexp1.equals((Object)object2));
      assertFalse(regexp9.equals((Object)object2));
      assertTrue(regexp9.equals((Object)regexp7));
      assertTrue(regexp9.equals((Object)regexp8));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, object3);
      assertNotSame(regexp0, regexp7);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp2);
      assertNotSame(regexp0, object2);
      assertSame(regexp0, regexp6);
      assertSame(regexp0, regexp9);
      assertNotSame(regexp0, regexp8);
      assertSame(regexp0, object1);
      assertSame(regexp0, regexp4);
      assertNotSame(regexp1, regexp8);
      assertSame(regexp1, regexp0);
      assertSame(regexp1, regexp6);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, object1);
      assertNotSame(regexp1, regexp7);
      assertSame(regexp1, regexp9);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp4);
      assertNotSame(regexp1, object2);
      assertSame(regexp1, object3);
      assertSame(regexp9, object3);
      assertSame(regexp9, regexp2);
      assertSame(regexp9, regexp6);
      assertSame(regexp9, regexp3);
      assertSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, object2);
      assertSame(regexp9, regexp4);
      assertSame(regexp9, object1);
      assertSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp7);
      
      Object object4 = PrivateAccess.callMethod((Class<Simplify>) Simplify.class, simplify0, "simplify1", (Object) regexp_Op1, (Class<?>) Regexp.Op.class, (Object) int2, (Class<?>) int.class, (Object) regexp1, (Class<?>) Regexp.class, (Object) regexp5, (Class<?>) Regexp.class);
      assertNotNull(object4);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertTrue(regexp0.equals((Object)regexp8));
      assertFalse(regexp0.equals((Object)object2));
      assertTrue(regexp0.equals((Object)regexp7));
      assertTrue(regexp1.equals((Object)regexp8));
      assertTrue(regexp1.equals((Object)regexp7));
      assertFalse(regexp1.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)regexp2));
      assertFalse(object4.equals((Object)regexp8));
      assertFalse(object4.equals((Object)regexp4));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)regexp0));
      assertFalse(object4.equals((Object)regexp3));
      assertFalse(object4.equals((Object)regexp9));
      assertFalse(object4.equals((Object)regexp7));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)regexp1));
      assertFalse(object4.equals((Object)regexp6));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp7);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, object3);
      assertSame(regexp0, regexp2);
      assertSame(regexp0, regexp1);
      assertNotSame(regexp0, object2);
      assertSame(regexp0, regexp6);
      assertNotSame(regexp0, object4);
      assertSame(regexp0, regexp9);
      assertNotSame(regexp0, regexp8);
      assertSame(regexp0, object1);
      assertSame(regexp0, regexp4);
      assertNotSame(regexp1, regexp8);
      assertSame(regexp1, regexp0);
      assertSame(regexp1, regexp6);
      assertSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp7);
      assertSame(regexp1, object1);
      assertSame(regexp1, regexp9);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp4);
      assertNotSame(regexp1, object4);
      assertNotSame(regexp1, object2);
      assertSame(regexp1, object3);
      assertNotSame(object4, object3);
      assertNotSame(object4, regexp2);
      assertNotSame(object4, regexp8);
      assertNotSame(object4, regexp4);
      assertNotSame(object4, object2);
      assertNotSame(object4, regexp0);
      assertNotSame(object4, regexp3);
      assertNotSame(object4, regexp9);
      assertNotSame(object4, regexp7);
      assertNotSame(object4, object1);
      assertNotSame(object4, regexp1);
      assertNotSame(object4, regexp6);
      assertNotSame(regexp_Op1, regexp_Op0);
      
      Object object5 = PrivateAccess.callMethod((Class<Simplify>) Simplify.class, simplify0, "simplify1", (Object) regexp_Op0, (Class<?>) Regexp.Op.class, (Object) int2, (Class<?>) int.class, (Object) regexp4, (Class<?>) Regexp.class, (Object) regexp2, (Class<?>) Regexp.class);
      assertNotNull(object5);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertTrue(regexp0.equals((Object)regexp8));
      assertFalse(regexp0.equals((Object)object2));
      assertFalse(regexp0.equals((Object)object4));
      assertTrue(regexp0.equals((Object)regexp7));
      assertTrue(regexp1.equals((Object)regexp8));
      assertFalse(regexp1.equals((Object)object4));
      assertTrue(regexp1.equals((Object)regexp7));
      assertFalse(regexp1.equals((Object)object2));
      assertFalse(regexp2.equals((Object)object4));
      assertTrue(regexp2.equals((Object)regexp8));
      assertFalse(regexp2.equals((Object)object2));
      assertTrue(regexp2.equals((Object)regexp7));
      assertTrue(regexp4.equals((Object)regexp8));
      assertTrue(regexp4.equals((Object)regexp7));
      assertFalse(regexp4.equals((Object)object2));
      assertFalse(regexp4.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertTrue(object5.equals((Object)regexp7));
      assertFalse(object5.equals((Object)object4));
      assertTrue(object5.equals((Object)regexp8));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp7);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, object3);
      assertSame(regexp0, regexp2);
      assertSame(regexp0, regexp1);
      assertNotSame(regexp0, object2);
      assertNotSame(regexp0, regexp8);
      assertSame(regexp0, object1);
      assertSame(regexp0, regexp6);
      assertNotSame(regexp0, object4);
      assertSame(regexp0, object5);
      assertSame(regexp0, regexp9);
      assertSame(regexp0, regexp4);
      assertSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp7);
      assertSame(regexp1, regexp9);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp4);
      assertNotSame(regexp1, object4);
      assertNotSame(regexp1, object2);
      assertNotSame(regexp1, regexp8);
      assertSame(regexp1, regexp0);
      assertSame(regexp1, regexp6);
      assertSame(regexp1, object1);
      assertSame(regexp1, object5);
      assertSame(regexp1, object3);
      assertSame(regexp2, regexp6);
      assertSame(regexp2, regexp0);
      assertNotSame(regexp2, object4);
      assertSame(regexp2, object5);
      assertSame(regexp2, object3);
      assertNotSame(regexp2, regexp8);
      assertNotSame(regexp2, regexp7);
      assertSame(regexp2, regexp9);
      assertSame(regexp2, object1);
      assertSame(regexp2, regexp1);
      assertNotSame(regexp2, object2);
      assertSame(regexp2, regexp4);
      assertSame(regexp2, regexp3);
      assertSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp8);
      assertSame(regexp4, regexp9);
      assertSame(regexp4, regexp6);
      assertSame(regexp4, object5);
      assertSame(regexp4, regexp1);
      assertSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp7);
      assertSame(regexp4, object1);
      assertSame(regexp4, object3);
      assertSame(regexp4, regexp2);
      assertNotSame(regexp4, object2);
      assertNotSame(regexp4, object4);
      assertSame(object5, regexp9);
      assertSame(object5, regexp4);
      assertSame(object5, regexp2);
      assertNotSame(object5, object4);
      assertNotSame(object5, regexp7);
      assertSame(object5, regexp1);
      assertNotSame(object5, object2);
      assertSame(object5, object1);
      assertSame(object5, regexp3);
      assertNotSame(object5, regexp8);
      assertSame(object5, regexp0);
      assertSame(object5, regexp6);
      assertSame(object5, object3);
      
      Regexp.Op regexp_Op2 = Regexp.Op.END_LINE;
      Regexp regexp10 = null;
      try { 
        PrivateAccess.callMethod((Class<Simplify>) Simplify.class, simplify0, "simplify1", (Object) regexp_Op2, (Class<?>) Regexp.Op.class, (Object) int1, (Class<?>) int.class, (Object) regexp10, (Class<?>) Regexp.class, (Object) regexp4, (Class<?>) Regexp.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string0 = regexp1.toString();
      assertEquals("(?:)", string0);
      assertNotNull(string0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string1 = "\\A";
      int int0 = 2828;
      regexp1.cap = int0;
      regexp1.name = string1;
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      int int1 = (-686);
      regexp2.max = int1;
      Regexp regexp3 = Simplify.simplify(regexp2);
      assertNotNull(regexp3);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp3);
      assertSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp3, regexp1);
      assertSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      int[] intArray0 = new int[0];
      int int2 = (-843);
      regexp2.max = int2;
      regexp0.runes = intArray0;
      Regexp regexp4 = Simplify.simplify(regexp0);
      assertNotNull(regexp4);
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      
      regexp2.op = regexp_Op0;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp5 = new Regexp(regexp_Op1);
      assertNotNull(regexp5);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      
      boolean boolean0 = regexp4.equals(regexp5);
      assertFalse(boolean0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp5));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp5);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp1);
      
      Regexp regexp6 = Simplify.simplify(regexp4);
      assertNotNull(regexp6);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp5));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp5);
      assertSame(regexp4, regexp6);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp5);
      assertSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp1);
      
      Regexp regexp7 = Simplify.simplify(regexp6);
      assertNotNull(regexp7);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp5));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertTrue(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp5));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp5);
      assertSame(regexp4, regexp6);
      assertSame(regexp4, regexp7);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp5);
      assertSame(regexp6, regexp7);
      assertSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp7, regexp3);
      assertSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp5);
      assertSame(regexp7, regexp4);
      
      Regexp regexp8 = new Regexp(regexp1);
      assertNotNull(regexp8);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp5));
      assertTrue(regexp1.equals((Object)regexp7));
      assertTrue(regexp1.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp4));
      assertTrue(regexp8.equals((Object)regexp6));
      assertTrue(regexp8.equals((Object)regexp1));
      assertTrue(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp0));
      assertTrue(regexp8.equals((Object)regexp4));
      
      regexp8.name = string1;
      int int3 = 2;
      regexp2.min = int3;
      Regexp regexp9 = Simplify.simplify(regexp8);
      assertNotNull(regexp9);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp8));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp5));
      assertTrue(regexp1.equals((Object)regexp8));
      assertTrue(regexp1.equals((Object)regexp7));
      assertTrue(regexp1.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp4));
      assertTrue(regexp8.equals((Object)regexp6));
      assertTrue(regexp8.equals((Object)regexp1));
      assertTrue(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp0));
      assertTrue(regexp8.equals((Object)regexp4));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp5));
      assertTrue(regexp9.equals((Object)regexp4));
      assertTrue(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp3));
      assertTrue(regexp9.equals((Object)regexp6));
      assertTrue(regexp9.equals((Object)regexp7));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp9);
      assertNotSame(regexp0, regexp8);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp5);
      assertNotSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp9);
      assertNotSame(regexp1, regexp7);
      assertNotSame(regexp1, regexp6);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp8);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp7);
      assertSame(regexp8, regexp9);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp6);
      assertNotSame(regexp9, regexp0);
      assertSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp5);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp4);
      
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotNull(regexp1);
      assertSame(regexp0, regexp1);
      assertSame(regexp1, regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp0.op = regexp_Op1;
      int int0 = 11;
      regexp0.min = int0;
      int int1 = (-463);
      regexp1.min = int1;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Simplify.simplify(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp2, regexp0);
      assertSame(regexp2, regexp1);
      
      int int0 = 0;
      regexp2.flags = int0;
      Regexp regexp3 = Simplify.simplify(regexp2);
      assertNotNull(regexp3);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp0);
      assertSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp0);
      assertSame(regexp2, regexp1);
      assertSame(regexp3, regexp1);
      assertSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      Regexp regexp4 = Simplify.simplify(regexp1);
      assertNotNull(regexp4);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp0);
      assertSame(regexp4, regexp3);
      assertSame(regexp4, regexp1);
      assertSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      
      Regexp regexp5 = Simplify.simplify(regexp4);
      assertNotNull(regexp5);
      assertTrue(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp5);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp5);
      assertSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp0);
      assertSame(regexp4, regexp3);
      assertSame(regexp4, regexp1);
      assertSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertSame(regexp4, regexp5);
      assertSame(regexp5, regexp2);
      assertSame(regexp5, regexp3);
      assertSame(regexp5, regexp1);
      assertSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      
      regexp3.max = int0;
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp3;
      regexpArray0[3] = regexp5;
      regexp2.subs = regexpArray0;
      String string0 = "";
      regexp3.name = string0;
      Regexp regexp6 = Simplify.simplify(regexp3);
      assertNotNull(regexp6);
      assertTrue(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp5));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp5);
      assertSame(regexp6, regexp1);
      assertSame(regexp6, regexp2);
      assertSame(regexp6, regexp3);
      assertSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp0);
      assertSame(regexp6, regexp5);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp5);
      assertSame(regexp1, regexp6);
      assertSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp0);
      assertSame(regexp2, regexp3);
      assertSame(regexp2, regexp5);
      assertNotSame(regexp2, regexp0);
      assertSame(regexp2, regexp1);
      assertSame(regexp2, regexp6);
      assertSame(regexp2, regexp4);
      assertSame(regexp3, regexp1);
      assertSame(regexp3, regexp2);
      assertSame(regexp3, regexp6);
      assertSame(regexp3, regexp5);
      assertNotSame(regexp3, regexp0);
      assertSame(regexp3, regexp4);
      
      Regexp regexp7 = Simplify.simplify(regexp6);
      assertNotNull(regexp7);
      assertTrue(regexp0.equals((Object)regexp6));
      assertTrue(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp5));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp7.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp5);
      assertSame(regexp6, regexp1);
      assertSame(regexp6, regexp2);
      assertSame(regexp6, regexp3);
      assertSame(regexp6, regexp7);
      assertSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp0);
      assertSame(regexp6, regexp5);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp5);
      assertSame(regexp1, regexp6);
      assertSame(regexp1, regexp7);
      assertSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp0);
      assertSame(regexp7, regexp3);
      assertSame(regexp7, regexp1);
      assertSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp0);
      assertSame(regexp7, regexp6);
      assertSame(regexp7, regexp4);
      assertSame(regexp7, regexp5);
      assertSame(regexp2, regexp3);
      assertSame(regexp2, regexp5);
      assertNotSame(regexp2, regexp0);
      assertSame(regexp2, regexp1);
      assertSame(regexp2, regexp7);
      assertSame(regexp2, regexp6);
      assertSame(regexp2, regexp4);
      assertSame(regexp3, regexp1);
      assertSame(regexp3, regexp2);
      assertSame(regexp3, regexp6);
      assertSame(regexp3, regexp5);
      assertSame(regexp3, regexp7);
      assertNotSame(regexp3, regexp0);
      assertSame(regexp3, regexp4);
      
      Regexp regexp8 = Simplify.simplify(regexp7);
      assertNotNull(regexp8);
      assertTrue(regexp0.equals((Object)regexp6));
      assertTrue(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp7));
      assertTrue(regexp0.equals((Object)regexp5));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp7.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp8.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp8);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp5);
      assertSame(regexp6, regexp1);
      assertSame(regexp6, regexp2);
      assertSame(regexp6, regexp3);
      assertSame(regexp6, regexp7);
      assertSame(regexp6, regexp8);
      assertSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp0);
      assertSame(regexp6, regexp5);
      assertSame(regexp1, regexp8);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp5);
      assertSame(regexp1, regexp6);
      assertSame(regexp1, regexp7);
      assertSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp0);
      assertSame(regexp7, regexp3);
      assertSame(regexp7, regexp1);
      assertSame(regexp7, regexp8);
      assertSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp0);
      assertSame(regexp7, regexp6);
      assertSame(regexp7, regexp4);
      assertSame(regexp7, regexp5);
      assertSame(regexp2, regexp3);
      assertSame(regexp2, regexp5);
      assertNotSame(regexp2, regexp0);
      assertSame(regexp2, regexp1);
      assertSame(regexp2, regexp7);
      assertSame(regexp2, regexp8);
      assertSame(regexp2, regexp6);
      assertSame(regexp2, regexp4);
      assertSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp0);
      assertSame(regexp8, regexp4);
      assertSame(regexp8, regexp5);
      assertSame(regexp8, regexp7);
      assertSame(regexp8, regexp1);
      assertSame(regexp8, regexp2);
      assertSame(regexp8, regexp3);
      assertSame(regexp3, regexp1);
      assertSame(regexp3, regexp2);
      assertSame(regexp3, regexp6);
      assertSame(regexp3, regexp5);
      assertSame(regexp3, regexp7);
      assertSame(regexp3, regexp8);
      assertNotSame(regexp3, regexp0);
      assertSame(regexp3, regexp4);
      
      Regexp regexp9 = new Regexp(regexp_Op0);
      assertNotNull(regexp9);
      assertTrue(regexp9.equals((Object)regexp6));
      assertTrue(regexp9.equals((Object)regexp4));
      assertTrue(regexp9.equals((Object)regexp5));
      assertTrue(regexp9.equals((Object)regexp3));
      assertTrue(regexp9.equals((Object)regexp7));
      assertTrue(regexp9.equals((Object)regexp1));
      assertTrue(regexp9.equals((Object)regexp8));
      assertTrue(regexp9.equals((Object)regexp2));
      assertTrue(regexp9.equals((Object)regexp0));
      
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp10 = new Regexp(regexp_Op1);
      assertNotNull(regexp10);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp10.equals((Object)regexp0));
      assertFalse(regexp10.equals((Object)regexp5));
      assertFalse(regexp10.equals((Object)regexp9));
      assertFalse(regexp10.equals((Object)regexp8));
      assertFalse(regexp10.equals((Object)regexp4));
      assertFalse(regexp10.equals((Object)regexp6));
      assertFalse(regexp10.equals((Object)regexp7));
      assertFalse(regexp10.equals((Object)regexp2));
      assertFalse(regexp10.equals((Object)regexp3));
      assertFalse(regexp10.equals((Object)regexp1));
      
      regexp10.reinit();
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp10.equals((Object)regexp0));
      assertFalse(regexp10.equals((Object)regexp5));
      assertFalse(regexp10.equals((Object)regexp9));
      assertFalse(regexp10.equals((Object)regexp8));
      assertFalse(regexp10.equals((Object)regexp4));
      assertFalse(regexp10.equals((Object)regexp6));
      assertFalse(regexp10.equals((Object)regexp7));
      assertFalse(regexp10.equals((Object)regexp2));
      assertFalse(regexp10.equals((Object)regexp3));
      assertFalse(regexp10.equals((Object)regexp1));
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp10, regexp0);
      assertNotSame(regexp10, regexp5);
      assertNotSame(regexp10, regexp9);
      assertNotSame(regexp10, regexp8);
      assertNotSame(regexp10, regexp4);
      assertNotSame(regexp10, regexp6);
      assertNotSame(regexp10, regexp7);
      assertNotSame(regexp10, regexp2);
      assertNotSame(regexp10, regexp3);
      assertNotSame(regexp10, regexp1);
      
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = null;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotNull(regexp1);
      assertSame(regexp0, regexp1);
      assertSame(regexp1, regexp0);
      
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertNotNull(regexp2);
      assertSame(regexp0, regexp2);
      assertSame(regexp0, regexp1);
      assertSame(regexp2, regexp0);
      assertSame(regexp2, regexp1);
      
      Regexp regexp3 = Simplify.simplify(regexp1);
      assertNotNull(regexp3);
      assertSame(regexp0, regexp2);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp3);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, regexp0);
      assertSame(regexp3, regexp2);
      assertSame(regexp3, regexp0);
      assertSame(regexp3, regexp1);
      
      Regexp regexp4 = Simplify.simplify(regexp1);
      assertNotNull(regexp4);
      assertSame(regexp0, regexp4);
      assertSame(regexp0, regexp2);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp3);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp4);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, regexp0);
      assertSame(regexp4, regexp2);
      assertSame(regexp4, regexp1);
      assertSame(regexp4, regexp0);
      assertSame(regexp4, regexp3);
      
      String string0 = "";
      regexp3.name = string0;
      Regexp regexp5 = Simplify.simplify(regexp3);
      assertNotNull(regexp5);
      assertSame(regexp0, regexp4);
      assertSame(regexp0, regexp2);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, regexp5);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp4);
      assertSame(regexp1, regexp5);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, regexp0);
      assertSame(regexp3, regexp5);
      assertSame(regexp3, regexp4);
      assertSame(regexp3, regexp2);
      assertSame(regexp3, regexp0);
      assertSame(regexp3, regexp1);
      assertSame(regexp5, regexp3);
      assertSame(regexp5, regexp4);
      assertSame(regexp5, regexp2);
      assertSame(regexp5, regexp0);
      assertSame(regexp5, regexp1);
      
      Regexp regexp6 = Simplify.simplify(regexp3);
      assertNotNull(regexp6);
      assertSame(regexp0, regexp4);
      assertSame(regexp0, regexp2);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, regexp6);
      assertSame(regexp0, regexp5);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp6);
      assertSame(regexp1, regexp4);
      assertSame(regexp1, regexp5);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, regexp0);
      assertSame(regexp3, regexp6);
      assertSame(regexp3, regexp5);
      assertSame(regexp3, regexp4);
      assertSame(regexp3, regexp2);
      assertSame(regexp3, regexp0);
      assertSame(regexp3, regexp1);
      assertSame(regexp6, regexp3);
      assertSame(regexp6, regexp5);
      assertSame(regexp6, regexp4);
      assertSame(regexp6, regexp1);
      assertSame(regexp6, regexp0);
      assertSame(regexp6, regexp2);
      
      Regexp regexp7 = Simplify.simplify(regexp0);
      assertNotNull(regexp7);
      assertSame(regexp0, regexp4);
      assertSame(regexp0, regexp2);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, regexp6);
      assertSame(regexp0, regexp5);
      assertSame(regexp0, regexp7);
      assertSame(regexp7, regexp0);
      assertSame(regexp7, regexp4);
      assertSame(regexp7, regexp2);
      assertSame(regexp7, regexp3);
      assertSame(regexp7, regexp5);
      assertSame(regexp7, regexp6);
      assertSame(regexp7, regexp1);
      
      Regexp regexp8 = Simplify.simplify(regexp0);
      assertNotNull(regexp8);
      assertSame(regexp0, regexp4);
      assertSame(regexp0, regexp2);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, regexp6);
      assertSame(regexp0, regexp5);
      assertSame(regexp0, regexp8);
      assertSame(regexp0, regexp7);
      assertSame(regexp8, regexp1);
      assertSame(regexp8, regexp0);
      assertSame(regexp8, regexp4);
      assertSame(regexp8, regexp2);
      assertSame(regexp8, regexp5);
      assertSame(regexp8, regexp6);
      assertSame(regexp8, regexp3);
      assertSame(regexp8, regexp7);
      
      Regexp regexp9 = Simplify.simplify(regexp1);
      assertNotNull(regexp9);
      assertSame(regexp0, regexp4);
      assertSame(regexp0, regexp2);
      assertSame(regexp0, regexp1);
      assertSame(regexp0, regexp3);
      assertSame(regexp0, regexp6);
      assertSame(regexp0, regexp9);
      assertSame(regexp0, regexp5);
      assertSame(regexp0, regexp8);
      assertSame(regexp0, regexp7);
      assertSame(regexp1, regexp9);
      assertSame(regexp1, regexp3);
      assertSame(regexp1, regexp6);
      assertSame(regexp1, regexp4);
      assertSame(regexp1, regexp7);
      assertSame(regexp1, regexp8);
      assertSame(regexp1, regexp5);
      assertSame(regexp1, regexp2);
      assertSame(regexp1, regexp0);
      assertSame(regexp9, regexp0);
      assertSame(regexp9, regexp4);
      assertSame(regexp9, regexp2);
      assertSame(regexp9, regexp1);
      assertSame(regexp9, regexp7);
      assertSame(regexp9, regexp8);
      assertSame(regexp9, regexp3);
      assertSame(regexp9, regexp6);
      assertSame(regexp9, regexp5);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Regexp regexp0 = null;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNull(regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertTrue(regexp3.equals((Object)regexp2));
      
      regexp3.reinit();
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp3, regexp2);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      int[] intArray0 = null;
      regexp2.runes = intArray0;
      int int0 = 0;
      regexp3.cap = int0;
      boolean boolean0 = regexp3.equals(object1);
      assertFalse(boolean0);
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp3, regexp2);
      
      Regexp regexp4 = Simplify.simplify(regexp3);
      assertNotNull(regexp4);
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp2));
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp4);
      assertSame(regexp3, regexp4);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp4, regexp2);
      assertSame(regexp4, regexp3);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp2;
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertNotNull(regexp5);
      assertTrue(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp4));
      
      regexpArray0[2] = regexp5;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp3;
      regexpArray0[5] = regexp3;
      regexp4.subs = regexpArray0;
      int int1 = 4;
      regexp2.max = int1;
      Regexp regexp6 = Simplify.simplify(regexp4);
      assertNotNull(regexp6);
      assertTrue(regexp2.equals((Object)regexp5));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp4));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp5));
      assertTrue(regexp6.equals((Object)regexp5));
      assertTrue(regexp6.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp5));
      assertTrue(regexp4.equals((Object)regexp2));
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp4);
      assertNotSame(regexp2, regexp5);
      assertNotSame(regexp2, regexp6);
      assertSame(regexp3, regexp6);
      assertSame(regexp3, regexp4);
      assertNotSame(regexp3, regexp5);
      assertNotSame(regexp3, regexp2);
      assertSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp2);
      assertSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp4, regexp2);
      assertSame(regexp4, regexp6);
      assertNotSame(regexp4, regexp5);
      assertSame(regexp4, regexp3);
      
      Regexp regexp7 = Simplify.simplify(regexp2);
      assertNotNull(regexp7);
      assertTrue(regexp2.equals((Object)regexp5));
      assertTrue(regexp2.equals((Object)regexp6));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp4));
      assertTrue(regexp7.equals((Object)regexp4));
      assertTrue(regexp7.equals((Object)regexp6));
      assertTrue(regexp7.equals((Object)regexp3));
      assertTrue(regexp7.equals((Object)regexp5));
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp4);
      assertNotSame(regexp2, regexp5);
      assertNotSame(regexp2, regexp6);
      assertSame(regexp2, regexp7);
      assertNotSame(regexp7, regexp3);
      assertSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotNull(regexp1);
      assertSame(regexp0, regexp1);
      assertSame(regexp1, regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      regexp0.op = regexp_Op1;
      int int0 = 11;
      regexp0.min = int0;
      int int1 = (-463);
      regexp1.min = int1;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string0 = regexp1.toString();
      assertEquals("(?:)", string0);
      assertNotNull(string0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string1 = "\\A";
      int int0 = 2828;
      regexp1.cap = int0;
      regexp1.name = string1;
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      int int1 = (-686);
      regexp2.max = int1;
      Regexp regexp3 = Simplify.simplify(regexp2);
      assertNotNull(regexp3);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertSame(regexp2, regexp3);
      assertSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      
      int[] intArray0 = new int[0];
      int int2 = (-843);
      regexp2.max = int2;
      Regexp regexp4 = Simplify.simplify(regexp0);
      assertNotNull(regexp4);
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp4);
      
      regexp2.op = regexp_Op0;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp5 = new Regexp(regexp_Op1);
      assertNotNull(regexp5);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      
      boolean boolean0 = regexp4.equals(regexp5);
      assertFalse(boolean0);
      assertFalse(regexp4.equals((Object)regexp5));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp5);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      
      Regexp regexp6 = Simplify.simplify(regexp4);
      assertNotNull(regexp6);
      assertFalse(regexp4.equals((Object)regexp5));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp0));
      assertTrue(regexp6.equals((Object)regexp1));
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp5);
      assertNotSame(regexp4, regexp0);
      assertSame(regexp4, regexp6);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp6);
      assertSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp1);
      
      Regexp regexp7 = Simplify.simplify(regexp6);
      assertNotNull(regexp7);
      assertFalse(regexp4.equals((Object)regexp5));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp0));
      assertTrue(regexp6.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp5));
      assertTrue(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp2));
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp5);
      assertNotSame(regexp4, regexp0);
      assertSame(regexp4, regexp6);
      assertSame(regexp4, regexp7);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp6);
      assertSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp5);
      assertSame(regexp6, regexp7);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp7, regexp0);
      assertSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp3);
      assertSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp2);
      
      Regexp regexp8 = new Regexp(regexp1);
      assertNotNull(regexp8);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp7));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp5));
      assertTrue(regexp1.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp3));
      assertTrue(regexp8.equals((Object)regexp4));
      assertTrue(regexp8.equals((Object)regexp1));
      assertTrue(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp5));
      assertTrue(regexp8.equals((Object)regexp6));
      
      regexp8.name = string1;
      Regexp regexp9 = Simplify.simplify(regexp8);
      assertNotNull(regexp9);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp8));
      assertFalse(regexp0.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp7));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp8));
      assertTrue(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp5));
      assertTrue(regexp1.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp3));
      assertTrue(regexp8.equals((Object)regexp4));
      assertTrue(regexp8.equals((Object)regexp1));
      assertTrue(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp5));
      assertTrue(regexp8.equals((Object)regexp6));
      assertTrue(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp3));
      assertTrue(regexp9.equals((Object)regexp4));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp5));
      assertTrue(regexp9.equals((Object)regexp6));
      assertTrue(regexp9.equals((Object)regexp7));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp9);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp8);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp6);
      assertNotSame(regexp1, regexp7);
      assertNotSame(regexp1, regexp9);
      assertNotSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp8);
      assertNotSame(regexp1, regexp5);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp1);
      assertSame(regexp8, regexp9);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp7);
      assertSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp6);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp4);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp5);
      
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp0.op = regexp_Op1;
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      String string0 = "|BAQdk(-*s[G;=`";
      regexp0.name = string0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexp0.subs = regexpArray0;
      int int0 = (-1463);
      regexp1.cap = int0;
      regexp1.op = regexp_Op0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Simplify.simplify(regexp1);
      assertNotNull(regexp3);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertSame(regexp3, regexp1);
      assertSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      
      boolean boolean0 = regexp0.equals(regexp_Op1);
      assertFalse(boolean0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp_Op1, regexp_Op0);
      
      Regexp regexp4 = Simplify.simplify(regexp3);
      assertNotNull(regexp4);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertSame(regexp3, regexp4);
      assertSame(regexp3, regexp1);
      assertSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertSame(regexp1, regexp4);
      assertSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertSame(regexp4, regexp3);
      
      Regexp regexp5 = Simplify.simplify(regexp4);
      assertNotNull(regexp5);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertSame(regexp3, regexp5);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertSame(regexp3, regexp4);
      assertSame(regexp3, regexp1);
      assertSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertSame(regexp1, regexp5);
      assertSame(regexp1, regexp4);
      assertSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertSame(regexp4, regexp5);
      assertNotSame(regexp4, regexp2);
      assertSame(regexp4, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertSame(regexp5, regexp3);
      assertSame(regexp5, regexp1);
      assertSame(regexp5, regexp4);
      
      Regexp regexp6 = Simplify.simplify(regexp2);
      assertNotNull(regexp6);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp4));
      assertFalse(regexp2.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp3));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp2, regexp1);
      assertSame(regexp2, regexp6);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp4);
      assertNotSame(regexp2, regexp5);
      assertSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp3);
      
      Regexp regexp7 = Simplify.simplify(regexp3);
      assertNotNull(regexp7);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp2));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp7);
      assertSame(regexp3, regexp5);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertSame(regexp3, regexp4);
      assertSame(regexp3, regexp7);
      assertSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp6);
      assertSame(regexp1, regexp7);
      assertSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertSame(regexp1, regexp5);
      assertNotSame(regexp1, regexp6);
      assertSame(regexp1, regexp4);
      assertSame(regexp7, regexp1);
      assertSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp6);
      assertSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp2);
      assertSame(regexp7, regexp5);
      
      Regexp regexp8 = Simplify.simplify(regexpArray0[1]);
      assertNotNull(regexp8);
      assertEquals(6, regexpArray0.length);
      assertTrue(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp3));
      assertTrue(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp1));
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp1);
      
      Regexp regexp9 = Simplify.simplify(regexpArray0[0]);
      assertNotNull(regexp9);
      assertEquals(6, regexpArray0.length);
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp4));
      assertFalse(regexp9.equals((Object)regexp1));
      assertTrue(regexp9.equals((Object)regexp2));
      assertTrue(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp3));
      assertTrue(regexp9.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp5));
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp6);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp4);
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp5);
      
      Regexp regexp10 = Simplify.simplify(regexp8);
      assertNotNull(regexp10);
      assertEquals(6, regexpArray0.length);
      assertTrue(regexp8.equals((Object)regexp6));
      assertTrue(regexp8.equals((Object)regexp9));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp3));
      assertTrue(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp10.equals((Object)regexp0));
      assertFalse(regexp10.equals((Object)regexp3));
      assertFalse(regexp10.equals((Object)regexp5));
      assertFalse(regexp10.equals((Object)regexp7));
      assertTrue(regexp10.equals((Object)regexp2));
      assertTrue(regexp10.equals((Object)regexp9));
      assertFalse(regexp10.equals((Object)regexp4));
      assertFalse(regexp10.equals((Object)regexp1));
      assertTrue(regexp10.equals((Object)regexp6));
      assertNotSame(regexp8, regexp9);
      assertNotSame(regexp8, regexp2);
      assertSame(regexp8, regexp10);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp10, regexp0);
      assertNotSame(regexp10, regexp3);
      assertNotSame(regexp10, regexp5);
      assertNotSame(regexp10, regexp6);
      assertNotSame(regexp10, regexp7);
      assertNotSame(regexp10, regexp4);
      assertNotSame(regexp10, regexp1);
      assertNotSame(regexp10, regexp9);
      assertNotSame(regexp10, regexp2);
      assertSame(regexp10, regexp8);
      
      Regexp regexp11 = Simplify.simplify(regexpArray0[2]);
      assertNotNull(regexp11);
      assertEquals(6, regexpArray0.length);
      assertFalse(regexp11.equals((Object)regexp10));
      assertFalse(regexp11.equals((Object)regexp0));
      assertFalse(regexp11.equals((Object)regexp9));
      assertFalse(regexp11.equals((Object)regexp2));
      assertFalse(regexp11.equals((Object)regexp6));
      assertFalse(regexp11.equals((Object)regexp8));
      assertNotSame(regexp11, regexp10);
      assertSame(regexp11, regexp5);
      assertNotSame(regexp11, regexp0);
      assertNotSame(regexp11, regexp9);
      assertNotSame(regexp11, regexp2);
      assertSame(regexp11, regexp1);
      assertSame(regexp11, regexp7);
      assertSame(regexp11, regexp3);
      assertNotSame(regexp11, regexp6);
      assertSame(regexp11, regexp4);
      assertNotSame(regexp11, regexp8);
      
      Regexp regexp12 = Simplify.simplify(regexp3);
      assertNotNull(regexp12);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp8));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp9));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp10));
      assertFalse(regexp0.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)regexp11));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp9));
      assertFalse(regexp3.equals((Object)regexp10));
      assertFalse(regexp3.equals((Object)regexp8));
      assertFalse(regexp3.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp10));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp9));
      assertFalse(regexp1.equals((Object)regexp8));
      assertFalse(regexp1.equals((Object)regexp6));
      assertFalse(regexp12.equals((Object)regexp6));
      assertFalse(regexp12.equals((Object)regexp8));
      assertFalse(regexp12.equals((Object)regexp10));
      assertFalse(regexp12.equals((Object)regexp2));
      assertFalse(regexp12.equals((Object)regexp0));
      assertFalse(regexp12.equals((Object)regexp9));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp8);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp12);
      assertNotSame(regexp0, regexp9);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp10);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp11);
      assertSame(regexp3, regexp5);
      assertNotSame(regexp3, regexp0);
      assertSame(regexp3, regexp12);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp9);
      assertNotSame(regexp3, regexp10);
      assertSame(regexp3, regexp11);
      assertNotSame(regexp3, regexp8);
      assertSame(regexp3, regexp4);
      assertNotSame(regexp3, regexp6);
      assertSame(regexp3, regexp7);
      assertSame(regexp3, regexp1);
      assertSame(regexp1, regexp7);
      assertSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp10);
      assertSame(regexp1, regexp12);
      assertNotSame(regexp1, regexp8);
      assertSame(regexp1, regexp5);
      assertNotSame(regexp1, regexp9);
      assertSame(regexp1, regexp11);
      assertNotSame(regexp1, regexp6);
      assertSame(regexp1, regexp4);
      assertSame(regexp12, regexp1);
      assertSame(regexp12, regexp7);
      assertNotSame(regexp12, regexp6);
      assertSame(regexp12, regexp11);
      assertSame(regexp12, regexp3);
      assertNotSame(regexp12, regexp8);
      assertNotSame(regexp12, regexp10);
      assertNotSame(regexp12, regexp2);
      assertSame(regexp12, regexp4);
      assertNotSame(regexp12, regexp0);
      assertSame(regexp12, regexp5);
      assertNotSame(regexp12, regexp9);
      
      Regexp regexp13 = Simplify.simplify(regexp12);
      assertNotNull(regexp13);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp8));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp12));
      assertFalse(regexp0.equals((Object)regexp9));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp10));
      assertFalse(regexp0.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)regexp11));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp9));
      assertFalse(regexp3.equals((Object)regexp10));
      assertFalse(regexp3.equals((Object)regexp8));
      assertFalse(regexp3.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp10));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp9));
      assertFalse(regexp1.equals((Object)regexp8));
      assertFalse(regexp1.equals((Object)regexp6));
      assertFalse(regexp12.equals((Object)regexp6));
      assertFalse(regexp12.equals((Object)regexp8));
      assertFalse(regexp12.equals((Object)regexp10));
      assertFalse(regexp12.equals((Object)regexp2));
      assertFalse(regexp12.equals((Object)regexp0));
      assertFalse(regexp12.equals((Object)regexp9));
      assertFalse(regexp13.equals((Object)regexp10));
      assertFalse(regexp13.equals((Object)regexp2));
      assertFalse(regexp13.equals((Object)regexp6));
      assertFalse(regexp13.equals((Object)regexp8));
      assertFalse(regexp13.equals((Object)regexp0));
      assertFalse(regexp13.equals((Object)regexp9));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp13);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp12);
      assertNotSame(regexp0, regexp9);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp10);
      assertNotSame(regexp0, regexp8);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp11);
      assertSame(regexp3, regexp12);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp9);
      assertSame(regexp3, regexp11);
      assertNotSame(regexp3, regexp8);
      assertSame(regexp3, regexp4);
      assertNotSame(regexp3, regexp6);
      assertSame(regexp3, regexp7);
      assertSame(regexp3, regexp5);
      assertNotSame(regexp3, regexp0);
      assertSame(regexp3, regexp13);
      assertNotSame(regexp3, regexp10);
      assertSame(regexp3, regexp1);
      assertSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp10);
      assertNotSame(regexp1, regexp8);
      assertSame(regexp1, regexp5);
      assertNotSame(regexp1, regexp9);
      assertSame(regexp1, regexp11);
      assertNotSame(regexp1, regexp6);
      assertSame(regexp1, regexp4);
      assertSame(regexp1, regexp7);
      assertNotSame(regexp1, regexp2);
      assertSame(regexp1, regexp13);
      assertSame(regexp1, regexp12);
      assertSame(regexp12, regexp1);
      assertSame(regexp12, regexp7);
      assertNotSame(regexp12, regexp6);
      assertSame(regexp12, regexp11);
      assertNotSame(regexp12, regexp10);
      assertNotSame(regexp12, regexp2);
      assertSame(regexp12, regexp4);
      assertSame(regexp12, regexp5);
      assertNotSame(regexp12, regexp9);
      assertSame(regexp12, regexp13);
      assertSame(regexp12, regexp3);
      assertNotSame(regexp12, regexp8);
      assertNotSame(regexp12, regexp0);
      assertNotSame(regexp13, regexp10);
      assertSame(regexp13, regexp3);
      assertSame(regexp13, regexp11);
      assertNotSame(regexp13, regexp8);
      assertSame(regexp13, regexp1);
      assertNotSame(regexp13, regexp0);
      assertSame(regexp13, regexp12);
      assertNotSame(regexp13, regexp2);
      assertNotSame(regexp13, regexp6);
      assertSame(regexp13, regexp7);
      assertSame(regexp13, regexp4);
      assertSame(regexp13, regexp5);
      assertNotSame(regexp13, regexp9);
      
      int int1 = 1191;
      Object object1 = PrivateAccess.callMethod((Class<Simplify>) Simplify.class, (Simplify) object0, "simplify1", (Object) regexp0.op, (Class<?>) Regexp.Op.class, (Object) int1, (Class<?>) int.class, (Object) regexp3, (Class<?>) Regexp.class, (Object) regexp0, (Class<?>) Regexp.class);
      assertNotNull(object1);
      assertFalse(int1 == int0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(object1.equals((Object)regexp2));
      assertFalse(object1.equals((Object)regexp3));
      assertFalse(object1.equals((Object)regexp12));
      assertFalse(object1.equals((Object)regexp0));
      assertFalse(object1.equals((Object)regexp1));
      assertFalse(object1.equals((Object)regexp9));
      assertFalse(object1.equals((Object)regexp8));
      assertFalse(object1.equals((Object)regexp4));
      assertFalse(object1.equals((Object)regexp7));
      assertFalse(object1.equals((Object)regexp11));
      assertFalse(object1.equals((Object)regexp10));
      assertFalse(object1.equals((Object)regexp5));
      assertFalse(object1.equals((Object)regexp6));
      assertFalse(object1.equals((Object)regexp13));
      assertFalse(regexp0.equals((Object)regexp13));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp12));
      assertFalse(regexp0.equals((Object)regexp9));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp10));
      assertFalse(regexp0.equals((Object)regexp8));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)regexp11));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp9));
      assertFalse(regexp3.equals((Object)regexp10));
      assertFalse(regexp3.equals((Object)regexp8));
      assertFalse(regexp3.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp10));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp9));
      assertFalse(regexp1.equals((Object)regexp8));
      assertFalse(regexp1.equals((Object)regexp6));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(object1, regexp2);
      assertNotSame(object1, regexp3);
      assertNotSame(object1, regexp12);
      assertNotSame(object1, regexp0);
      assertNotSame(object1, regexp1);
      assertNotSame(object1, regexp9);
      assertNotSame(object1, regexp8);
      assertNotSame(object1, regexp4);
      assertNotSame(object1, regexp7);
      assertNotSame(object1, regexp11);
      assertNotSame(object1, regexp10);
      assertNotSame(object1, regexp5);
      assertNotSame(object1, regexp6);
      assertNotSame(object1, regexp13);
      assertNotSame(regexp0, regexp13);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp12);
      assertNotSame(regexp0, regexp9);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp10);
      assertNotSame(regexp0, regexp8);
      assertNotSame(regexp0, object1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp11);
      assertSame(regexp3, regexp12);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp9);
      assertNotSame(regexp3, object1);
      assertSame(regexp3, regexp11);
      assertNotSame(regexp3, regexp8);
      assertSame(regexp3, regexp4);
      assertNotSame(regexp3, regexp6);
      assertSame(regexp3, regexp7);
      assertSame(regexp3, regexp5);
      assertNotSame(regexp3, regexp0);
      assertSame(regexp3, regexp13);
      assertNotSame(regexp3, regexp10);
      assertSame(regexp3, regexp1);
      assertSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp10);
      assertNotSame(regexp1, regexp8);
      assertSame(regexp1, regexp5);
      assertNotSame(regexp1, regexp9);
      assertSame(regexp1, regexp11);
      assertNotSame(regexp1, object1);
      assertNotSame(regexp1, regexp6);
      assertSame(regexp1, regexp4);
      assertSame(regexp1, regexp7);
      assertNotSame(regexp1, regexp2);
      assertSame(regexp1, regexp13);
      assertSame(regexp1, regexp12);
      
      int int2 = 5;
      Object object2 = PrivateAccess.callMethod((Class<Simplify>) Simplify.class, (Simplify) object0, "simplify1", (Object) regexp1.op, (Class<?>) Regexp.Op.class, (Object) int2, (Class<?>) int.class, (Object) regexp7, (Class<?>) Regexp.class, (Object) regexp13, (Class<?>) Regexp.class);
      assertNotNull(object2);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp13));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp12));
      assertFalse(regexp0.equals((Object)regexp9));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp10));
      assertFalse(regexp0.equals((Object)regexp8));
      assertFalse(regexp0.equals((Object)object1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp7));
      assertFalse(regexp0.equals((Object)regexp11));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(object2.equals((Object)regexp8));
      assertFalse(object2.equals((Object)regexp0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)regexp6));
      assertFalse(object2.equals((Object)regexp10));
      assertFalse(object2.equals((Object)regexp9));
      assertFalse(object2.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp9));
      assertFalse(regexp3.equals((Object)regexp10));
      assertFalse(regexp3.equals((Object)object1));
      assertFalse(regexp3.equals((Object)regexp8));
      assertFalse(regexp3.equals((Object)regexp6));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp10));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp9));
      assertFalse(regexp1.equals((Object)regexp8));
      assertFalse(regexp1.equals((Object)object1));
      assertFalse(regexp1.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp10));
      assertFalse(regexp7.equals((Object)regexp8));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)object1));
      assertFalse(regexp7.equals((Object)regexp9));
      assertFalse(regexp12.equals((Object)regexp6));
      assertFalse(regexp12.equals((Object)regexp8));
      assertFalse(regexp12.equals((Object)regexp10));
      assertFalse(regexp12.equals((Object)regexp2));
      assertFalse(regexp12.equals((Object)object1));
      assertFalse(regexp12.equals((Object)regexp0));
      assertFalse(regexp12.equals((Object)regexp9));
      assertFalse(regexp13.equals((Object)regexp10));
      assertFalse(regexp13.equals((Object)regexp2));
      assertFalse(regexp13.equals((Object)regexp6));
      assertFalse(regexp13.equals((Object)regexp8));
      assertFalse(regexp13.equals((Object)regexp0));
      assertFalse(regexp13.equals((Object)object1));
      assertFalse(regexp13.equals((Object)regexp9));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp13);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp12);
      assertNotSame(regexp0, object2);
      assertNotSame(regexp0, regexp9);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp10);
      assertNotSame(regexp0, regexp8);
      assertNotSame(regexp0, object1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp7);
      assertNotSame(regexp0, regexp11);
      assertSame(object2, regexp1);
      assertNotSame(object2, regexp8);
      assertSame(object2, regexp7);
      assertSame(object2, regexp11);
      assertSame(object2, regexp4);
      assertNotSame(object2, object1);
      assertNotSame(object2, regexp6);
      assertNotSame(object2, regexp10);
      assertNotSame(object2, regexp2);
      assertSame(object2, regexp5);
      assertNotSame(object2, regexp9);
      assertSame(object2, regexp13);
      assertSame(object2, regexp3);
      assertNotSame(object2, regexp0);
      assertSame(object2, regexp12);
      assertSame(regexp3, regexp12);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp9);
      assertNotSame(regexp3, object1);
      assertSame(regexp3, regexp11);
      assertNotSame(regexp3, regexp8);
      assertSame(regexp3, regexp4);
      assertNotSame(regexp3, regexp6);
      assertSame(regexp3, regexp7);
      assertSame(regexp3, regexp5);
      assertNotSame(regexp3, regexp0);
      assertSame(regexp3, regexp13);
      assertNotSame(regexp3, regexp10);
      assertSame(regexp3, regexp1);
      assertSame(regexp3, object2);
      assertSame(regexp1, object2);
      assertSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp10);
      assertNotSame(regexp1, regexp8);
      assertSame(regexp1, regexp5);
      assertNotSame(regexp1, regexp9);
      assertSame(regexp1, regexp11);
      assertNotSame(regexp1, object1);
      assertNotSame(regexp1, regexp6);
      assertSame(regexp1, regexp4);
      assertSame(regexp1, regexp7);
      assertNotSame(regexp1, regexp2);
      assertSame(regexp1, regexp13);
      assertSame(regexp1, regexp12);
      assertSame(regexp7, object2);
      assertSame(regexp7, regexp13);
      assertNotSame(regexp7, regexp0);
      assertSame(regexp7, regexp12);
      assertSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp10);
      assertSame(regexp7, regexp11);
      assertSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp8);
      assertNotSame(regexp7, regexp6);
      assertSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, object1);
      assertSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp9);
      assertSame(regexp12, regexp1);
      assertSame(regexp12, regexp7);
      assertNotSame(regexp12, regexp6);
      assertSame(regexp12, regexp11);
      assertNotSame(regexp12, regexp10);
      assertNotSame(regexp12, regexp2);
      assertNotSame(regexp12, object1);
      assertSame(regexp12, regexp4);
      assertSame(regexp12, regexp5);
      assertNotSame(regexp12, regexp9);
      assertSame(regexp12, object2);
      assertSame(regexp12, regexp13);
      assertSame(regexp12, regexp3);
      assertNotSame(regexp12, regexp8);
      assertNotSame(regexp12, regexp0);
      assertNotSame(regexp13, regexp10);
      assertSame(regexp13, regexp3);
      assertSame(regexp13, regexp11);
      assertNotSame(regexp13, regexp8);
      assertSame(regexp13, object2);
      assertSame(regexp13, regexp1);
      assertNotSame(regexp13, regexp0);
      assertSame(regexp13, regexp12);
      assertNotSame(regexp13, regexp2);
      assertNotSame(regexp13, regexp6);
      assertSame(regexp13, regexp7);
      assertSame(regexp13, regexp4);
      assertNotSame(regexp13, object1);
      assertSame(regexp13, regexp5);
      assertNotSame(regexp13, regexp9);
      
      Regexp regexp14 = Simplify.simplify(regexp10);
      assertNotNull(regexp14);
      assertEquals(6, regexpArray0.length);
      assertFalse(regexp14.equals((Object)object2));
      assertTrue(regexp14.equals((Object)regexp6));
      assertTrue(regexp14.equals((Object)regexp2));
      assertFalse(regexp14.equals((Object)regexp5));
      assertFalse(regexp14.equals((Object)regexp12));
      assertFalse(regexp14.equals((Object)regexp4));
      assertFalse(regexp14.equals((Object)regexp7));
      assertFalse(regexp14.equals((Object)regexp11));
      assertFalse(regexp14.equals((Object)regexp0));
      assertFalse(regexp14.equals((Object)regexp1));
      assertFalse(regexp14.equals((Object)object1));
      assertTrue(regexp14.equals((Object)regexp9));
      assertFalse(regexp14.equals((Object)regexp13));
      assertFalse(regexp14.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp11));
      assertFalse(regexp8.equals((Object)object1));
      assertTrue(regexp8.equals((Object)regexp9));
      assertFalse(regexp8.equals((Object)regexp12));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp13));
      assertTrue(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)object2));
      assertFalse(regexp8.equals((Object)regexp1));
      assertTrue(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp10.equals((Object)regexp12));
      assertFalse(regexp10.equals((Object)regexp13));
      assertFalse(regexp10.equals((Object)regexp7));
      assertTrue(regexp10.equals((Object)regexp9));
      assertFalse(regexp10.equals((Object)regexp4));
      assertFalse(regexp10.equals((Object)regexp11));
      assertFalse(regexp10.equals((Object)regexp0));
      assertFalse(regexp10.equals((Object)regexp3));
      assertFalse(regexp10.equals((Object)regexp5));
      assertTrue(regexp10.equals((Object)regexp2));
      assertFalse(regexp10.equals((Object)regexp1));
      assertFalse(regexp10.equals((Object)object2));
      assertTrue(regexp10.equals((Object)regexp6));
      assertFalse(regexp10.equals((Object)object1));
      assertNotSame(regexp14, object2);
      assertNotSame(regexp14, regexp5);
      assertNotSame(regexp14, regexp6);
      assertNotSame(regexp14, regexp12);
      assertNotSame(regexp14, regexp4);
      assertNotSame(regexp14, regexp7);
      assertNotSame(regexp14, regexp11);
      assertNotSame(regexp14, regexp0);
      assertNotSame(regexp14, regexp1);
      assertNotSame(regexp14, regexp9);
      assertSame(regexp14, regexp8);
      assertNotSame(regexp14, object1);
      assertSame(regexp14, regexp10);
      assertNotSame(regexp14, regexp13);
      assertNotSame(regexp14, regexp2);
      assertNotSame(regexp14, regexp3);
      assertNotSame(regexp8, regexp11);
      assertNotSame(regexp8, regexp9);
      assertSame(regexp8, regexp10);
      assertNotSame(regexp8, object1);
      assertNotSame(regexp8, regexp12);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp13);
      assertNotSame(regexp8, object2);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp5);
      assertSame(regexp8, regexp14);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp4);
      assertSame(regexp10, regexp14);
      assertNotSame(regexp10, regexp12);
      assertNotSame(regexp10, regexp13);
      assertNotSame(regexp10, regexp6);
      assertNotSame(regexp10, regexp7);
      assertNotSame(regexp10, regexp4);
      assertNotSame(regexp10, regexp11);
      assertNotSame(regexp10, regexp0);
      assertNotSame(regexp10, regexp3);
      assertNotSame(regexp10, regexp5);
      assertNotSame(regexp10, regexp1);
      assertNotSame(regexp10, object2);
      assertNotSame(regexp10, regexp9);
      assertNotSame(regexp10, regexp2);
      assertSame(regexp10, regexp8);
      assertNotSame(regexp10, object1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      int int0 = (-1213);
      regexp0.flags = int0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotNull(regexp1);
      assertSame(regexp0, regexp1);
      assertSame(regexp1, regexp0);
      
      Regexp regexp2 = Simplify.simplify(regexp1);
      assertNotNull(regexp2);
      assertSame(regexp0, regexp2);
      assertSame(regexp0, regexp1);
      assertSame(regexp1, regexp0);
      assertSame(regexp1, regexp2);
      assertSame(regexp2, regexp1);
      assertSame(regexp2, regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      int int1 = (-1);
      regexp2.flags = int1;
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op2 = Regexp.Op.BEGIN_LINE;
      Regexp regexp3 = new Regexp(regexp_Op2);
      assertNotNull(regexp3);
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp1;
      regexp0.subs = regexpArray0;
      regexp2.op = regexp_Op1;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
