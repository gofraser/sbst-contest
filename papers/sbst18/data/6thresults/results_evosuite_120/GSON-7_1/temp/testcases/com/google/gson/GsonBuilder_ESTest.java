/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:37:05 GMT 2018
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.ExclusionStrategy;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.FieldNamingStrategy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.LongSerializationPolicy;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.reflect.TypeToken;
import java.time.chrono.ChronoLocalDate;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GsonBuilder_ESTest extends GsonBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      int int0 = 0;
      int int1 = 1;
      GsonBuilder gsonBuilder1 = gsonBuilder0.setDateFormat(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
      
      Gson gson0 = gsonBuilder1.create();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
      
      Gson gson0 = gsonBuilder0.create();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertTrue(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      ExclusionStrategy[] exclusionStrategyArray0 = null;
      // Undeclared exception!
      try { 
        gsonBuilder0.setExclusionStrategies(exclusionStrategyArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.GsonBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        gsonBuilder0.excludeFieldsWithModifiers(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Excluder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      List<MockMinguoDate> list0 = (List<MockMinguoDate>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn((Object[]) null).when(list0).toArray();
      PrivateAccess.setVariable((Class<GsonBuilder>) GsonBuilder.class, gsonBuilder0, "factories", (Object) list0);
      GsonBuilder gsonBuilder1 = gsonBuilder0.setLongSerializationPolicy(longSerializationPolicy0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
      
      // Undeclared exception!
      try { 
        gsonBuilder1.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      int int0 = (-1);
      GsonBuilder gsonBuilder1 = gsonBuilder0.setDateFormat(int0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
      
      Gson gson0 = gsonBuilder0.create();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      String string0 = "q";
      GsonBuilder gsonBuilder1 = gsonBuilder0.setDateFormat(string0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
      
      // Undeclared exception!
      try { 
        gsonBuilder0.create();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'q'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        gsonBuilder0.registerTypeHierarchyAdapter(class0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      Class<Object> class0 = Object.class;
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.registerTypeHierarchyAdapter(class0, gson_FutureTypeAdapter0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      Class<Object> class0 = Object.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter();
      assertNotNull(defaultDateTypeAdapter0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.registerTypeHierarchyAdapter(class0, defaultDateTypeAdapter0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("float", class0.toString());
      assertNotNull(class0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        gsonBuilder0.registerTypeAdapter(class0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertNotNull(class0);
      
      Gson gson0 = gsonBuilder0.create();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      assertNotNull(typeToken0);
      
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(typeAdapter0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.registerTypeAdapter(class0, typeAdapter0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertNotNull(class0);
      
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter();
      assertNotNull(defaultDateTypeAdapter0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.registerTypeAdapter(class0, defaultDateTypeAdapter0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      ExclusionStrategy[] exclusionStrategyArray0 = new ExclusionStrategy[1];
      GsonBuilder gsonBuilder1 = gsonBuilder0.setExclusionStrategies(exclusionStrategyArray0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertEquals(1, exclusionStrategyArray0.length);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      GsonBuilder gsonBuilder1 = gsonBuilder0.addDeserializationExclusionStrategy(exclusionStrategy0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.generateNonExecutableJson();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.UPPER_CAMEL_CASE;
      GsonBuilder gsonBuilder1 = gsonBuilder0.setFieldNamingStrategy(fieldNamingPolicy0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.disableHtmlEscaping();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
      
      Gson gson0 = gsonBuilder0.create();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertFalse(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      TypeAdapterFactory typeAdapterFactory0 = mock(TypeAdapterFactory.class, new ViolatedAssumptionAnswer());
      GsonBuilder gsonBuilder1 = gsonBuilder0.registerTypeAdapterFactory(typeAdapterFactory0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.serializeSpecialFloatingPointValues();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.setPrettyPrinting();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      GsonBuilder gsonBuilder1 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
      GsonBuilder gsonBuilder1 = gsonBuilder0.setFieldNamingPolicy(fieldNamingPolicy0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      int[] intArray0 = new int[0];
      GsonBuilder gsonBuilder1 = gsonBuilder0.excludeFieldsWithModifiers(intArray0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
      
      GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertNotNull(gsonBuilder2);
      
      Map<String, Excluder> map0 = (Map<String, Excluder>) mock(Map.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<GsonBuilder>) GsonBuilder.class, gsonBuilder0, "instanceCreators", (Object) map0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder2);
      
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      GsonBuilder gsonBuilder3 = gsonBuilder2.setLongSerializationPolicy(longSerializationPolicy0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertNotNull(gsonBuilder3);
      
      ExclusionStrategy[] exclusionStrategyArray0 = new ExclusionStrategy[1];
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      exclusionStrategyArray0[0] = exclusionStrategy0;
      GsonBuilder gsonBuilder4 = gsonBuilder3.setExclusionStrategies(exclusionStrategyArray0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder4, gsonBuilder1);
      assertSame(gsonBuilder4, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder2);
      assertSame(gsonBuilder4, gsonBuilder3);
      assertEquals(1, exclusionStrategyArray0.length);
      assertNotNull(gsonBuilder4);
      
      GsonBuilder gsonBuilder5 = gsonBuilder4.disableHtmlEscaping();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder1);
      assertSame(gsonBuilder4, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder2);
      assertSame(gsonBuilder4, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder3);
      assertSame(gsonBuilder5, gsonBuilder2);
      assertSame(gsonBuilder5, gsonBuilder4);
      assertSame(gsonBuilder5, gsonBuilder0);
      assertSame(gsonBuilder5, gsonBuilder3);
      assertSame(gsonBuilder5, gsonBuilder1);
      assertEquals(1, exclusionStrategyArray0.length);
      assertNotNull(gsonBuilder5);
      
      GsonBuilder gsonBuilder6 = gsonBuilder5.setExclusionStrategies(exclusionStrategyArray0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder2, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder1);
      assertSame(gsonBuilder4, gsonBuilder6);
      assertSame(gsonBuilder4, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder2);
      assertSame(gsonBuilder4, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder3);
      assertSame(gsonBuilder5, gsonBuilder2);
      assertSame(gsonBuilder5, gsonBuilder4);
      assertSame(gsonBuilder5, gsonBuilder0);
      assertSame(gsonBuilder5, gsonBuilder6);
      assertSame(gsonBuilder5, gsonBuilder3);
      assertSame(gsonBuilder5, gsonBuilder1);
      assertSame(gsonBuilder6, gsonBuilder2);
      assertSame(gsonBuilder6, gsonBuilder4);
      assertSame(gsonBuilder6, gsonBuilder5);
      assertSame(gsonBuilder6, gsonBuilder3);
      assertSame(gsonBuilder6, gsonBuilder1);
      assertSame(gsonBuilder6, gsonBuilder0);
      assertEquals(1, exclusionStrategyArray0.length);
      assertNotNull(gsonBuilder6);
      
      double double0 = 0.0;
      GsonBuilder gsonBuilder7 = gsonBuilder5.setVersion(double0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder7);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder7);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder7);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder2, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder3, gsonBuilder7);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder1);
      assertSame(gsonBuilder4, gsonBuilder6);
      assertSame(gsonBuilder4, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder2);
      assertSame(gsonBuilder4, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder7);
      assertSame(gsonBuilder4, gsonBuilder3);
      assertSame(gsonBuilder5, gsonBuilder2);
      assertSame(gsonBuilder5, gsonBuilder7);
      assertSame(gsonBuilder5, gsonBuilder4);
      assertSame(gsonBuilder5, gsonBuilder0);
      assertSame(gsonBuilder5, gsonBuilder6);
      assertSame(gsonBuilder5, gsonBuilder3);
      assertSame(gsonBuilder5, gsonBuilder1);
      assertSame(gsonBuilder7, gsonBuilder0);
      assertSame(gsonBuilder7, gsonBuilder6);
      assertSame(gsonBuilder7, gsonBuilder5);
      assertSame(gsonBuilder7, gsonBuilder3);
      assertSame(gsonBuilder7, gsonBuilder2);
      assertSame(gsonBuilder7, gsonBuilder4);
      assertSame(gsonBuilder7, gsonBuilder1);
      assertEquals(1, exclusionStrategyArray0.length);
      assertNotNull(gsonBuilder7);
      
      GsonBuilder gsonBuilder8 = gsonBuilder1.setVersion(double0);
      assertSame(gsonBuilder0, gsonBuilder8);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder7);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder8);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder7);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder8, gsonBuilder0);
      assertSame(gsonBuilder8, gsonBuilder1);
      assertSame(gsonBuilder8, gsonBuilder6);
      assertSame(gsonBuilder8, gsonBuilder2);
      assertSame(gsonBuilder8, gsonBuilder4);
      assertSame(gsonBuilder8, gsonBuilder5);
      assertSame(gsonBuilder8, gsonBuilder7);
      assertSame(gsonBuilder8, gsonBuilder3);
      assertNotNull(gsonBuilder8);
      
      boolean boolean0 = true;
      PrivateAccess.setVariable((Class<GsonBuilder>) GsonBuilder.class, gsonBuilder8, "generateNonExecutableJson", (Object) boolean0);
      assertSame(gsonBuilder0, gsonBuilder8);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder7);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder8);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder7);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder8, gsonBuilder0);
      assertSame(gsonBuilder8, gsonBuilder1);
      assertSame(gsonBuilder8, gsonBuilder6);
      assertSame(gsonBuilder8, gsonBuilder2);
      assertSame(gsonBuilder8, gsonBuilder4);
      assertSame(gsonBuilder8, gsonBuilder5);
      assertSame(gsonBuilder8, gsonBuilder7);
      assertSame(gsonBuilder8, gsonBuilder3);
      
      GsonBuilder gsonBuilder9 = gsonBuilder4.setPrettyPrinting();
      assertSame(gsonBuilder0, gsonBuilder8);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder7);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder8);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder7);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder9, gsonBuilder5);
      assertSame(gsonBuilder9, gsonBuilder3);
      assertSame(gsonBuilder9, gsonBuilder1);
      assertSame(gsonBuilder9, gsonBuilder4);
      assertSame(gsonBuilder9, gsonBuilder8);
      assertSame(gsonBuilder9, gsonBuilder7);
      assertSame(gsonBuilder9, gsonBuilder2);
      assertSame(gsonBuilder9, gsonBuilder6);
      assertSame(gsonBuilder9, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder7);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder8);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder2, gsonBuilder6);
      assertSame(gsonBuilder2, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder3, gsonBuilder7);
      assertSame(gsonBuilder3, gsonBuilder8);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder1);
      assertSame(gsonBuilder4, gsonBuilder6);
      assertSame(gsonBuilder4, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder2);
      assertSame(gsonBuilder4, gsonBuilder9);
      assertSame(gsonBuilder4, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder7);
      assertSame(gsonBuilder4, gsonBuilder3);
      assertSame(gsonBuilder4, gsonBuilder8);
      assertEquals(1, exclusionStrategyArray0.length);
      assertNotNull(gsonBuilder9);
      
      GsonBuilder gsonBuilder10 = gsonBuilder9.setExclusionStrategies(exclusionStrategyArray0);
      assertSame(gsonBuilder0, gsonBuilder8);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder7);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder10);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder8);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder7);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder10);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder9, gsonBuilder5);
      assertSame(gsonBuilder9, gsonBuilder3);
      assertSame(gsonBuilder9, gsonBuilder1);
      assertSame(gsonBuilder9, gsonBuilder4);
      assertSame(gsonBuilder9, gsonBuilder8);
      assertSame(gsonBuilder9, gsonBuilder7);
      assertSame(gsonBuilder9, gsonBuilder2);
      assertSame(gsonBuilder9, gsonBuilder10);
      assertSame(gsonBuilder9, gsonBuilder6);
      assertSame(gsonBuilder9, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder10);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder7);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder8);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder2, gsonBuilder6);
      assertSame(gsonBuilder2, gsonBuilder9);
      assertSame(gsonBuilder10, gsonBuilder0);
      assertSame(gsonBuilder10, gsonBuilder8);
      assertSame(gsonBuilder10, gsonBuilder2);
      assertSame(gsonBuilder10, gsonBuilder9);
      assertSame(gsonBuilder10, gsonBuilder5);
      assertSame(gsonBuilder10, gsonBuilder4);
      assertSame(gsonBuilder10, gsonBuilder1);
      assertSame(gsonBuilder10, gsonBuilder7);
      assertSame(gsonBuilder10, gsonBuilder3);
      assertSame(gsonBuilder10, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder3, gsonBuilder7);
      assertSame(gsonBuilder3, gsonBuilder8);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder10);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder1);
      assertSame(gsonBuilder4, gsonBuilder6);
      assertSame(gsonBuilder4, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder2);
      assertSame(gsonBuilder4, gsonBuilder9);
      assertSame(gsonBuilder4, gsonBuilder10);
      assertSame(gsonBuilder4, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder7);
      assertSame(gsonBuilder4, gsonBuilder3);
      assertSame(gsonBuilder4, gsonBuilder8);
      assertEquals(1, exclusionStrategyArray0.length);
      assertNotNull(gsonBuilder10);
      
      EvoSuiteFile evoSuiteFile0 = null;
      FieldNamingStrategy fieldNamingStrategy0 = mock(FieldNamingStrategy.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<GsonBuilder>) GsonBuilder.class, gsonBuilder9, "fieldNamingPolicy", (Object) fieldNamingStrategy0);
      assertSame(gsonBuilder0, gsonBuilder8);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder7);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder10);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder8);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder7);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder10);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder9, gsonBuilder5);
      assertSame(gsonBuilder9, gsonBuilder3);
      assertSame(gsonBuilder9, gsonBuilder1);
      assertSame(gsonBuilder9, gsonBuilder4);
      assertSame(gsonBuilder9, gsonBuilder8);
      assertSame(gsonBuilder9, gsonBuilder7);
      assertSame(gsonBuilder9, gsonBuilder2);
      assertSame(gsonBuilder9, gsonBuilder10);
      assertSame(gsonBuilder9, gsonBuilder6);
      assertSame(gsonBuilder9, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder10);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder7);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder8);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder2, gsonBuilder6);
      assertSame(gsonBuilder2, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder3, gsonBuilder7);
      assertSame(gsonBuilder3, gsonBuilder8);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder10);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder1);
      assertSame(gsonBuilder4, gsonBuilder6);
      assertSame(gsonBuilder4, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder2);
      assertSame(gsonBuilder4, gsonBuilder9);
      assertSame(gsonBuilder4, gsonBuilder10);
      assertSame(gsonBuilder4, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder7);
      assertSame(gsonBuilder4, gsonBuilder3);
      assertSame(gsonBuilder4, gsonBuilder8);
      assertEquals(1, exclusionStrategyArray0.length);
      
      Excluder excluder0 = mock(Excluder.class, new ViolatedAssumptionAnswer());
      doReturn((Excluder) null).when(excluder0).withVersion(anyDouble());
      PrivateAccess.setVariable((Class<GsonBuilder>) GsonBuilder.class, gsonBuilder4, "excluder", (Object) excluder0);
      assertSame(gsonBuilder0, gsonBuilder8);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder7);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder10);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder8);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder7);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder10);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder10);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder7);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder8);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder2, gsonBuilder6);
      assertSame(gsonBuilder2, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder3, gsonBuilder7);
      assertSame(gsonBuilder3, gsonBuilder8);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder10);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder1);
      assertSame(gsonBuilder4, gsonBuilder6);
      assertSame(gsonBuilder4, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder2);
      assertSame(gsonBuilder4, gsonBuilder9);
      assertSame(gsonBuilder4, gsonBuilder10);
      assertSame(gsonBuilder4, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder7);
      assertSame(gsonBuilder4, gsonBuilder3);
      assertSame(gsonBuilder4, gsonBuilder8);
      assertEquals(1, exclusionStrategyArray0.length);
      
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean1, boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      double double1 = 653.1782345030639;
      GsonBuilder gsonBuilder11 = gsonBuilder4.setVersion(double1);
      assertNotEquals(double1, double0, 0.01);
      assertSame(gsonBuilder0, gsonBuilder8);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder7);
      assertSame(gsonBuilder0, gsonBuilder11);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder10);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder8);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder7);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder11);
      assertSame(gsonBuilder1, gsonBuilder10);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder10);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder11);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder7);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder8);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder2, gsonBuilder6);
      assertSame(gsonBuilder2, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder3, gsonBuilder7);
      assertSame(gsonBuilder3, gsonBuilder8);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder10);
      assertSame(gsonBuilder3, gsonBuilder11);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder1);
      assertSame(gsonBuilder4, gsonBuilder6);
      assertSame(gsonBuilder4, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder2);
      assertSame(gsonBuilder4, gsonBuilder9);
      assertSame(gsonBuilder4, gsonBuilder10);
      assertSame(gsonBuilder4, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder7);
      assertSame(gsonBuilder4, gsonBuilder3);
      assertSame(gsonBuilder4, gsonBuilder11);
      assertSame(gsonBuilder4, gsonBuilder8);
      assertSame(gsonBuilder11, gsonBuilder5);
      assertSame(gsonBuilder11, gsonBuilder6);
      assertSame(gsonBuilder11, gsonBuilder2);
      assertSame(gsonBuilder11, gsonBuilder9);
      assertSame(gsonBuilder11, gsonBuilder1);
      assertSame(gsonBuilder11, gsonBuilder4);
      assertSame(gsonBuilder11, gsonBuilder7);
      assertSame(gsonBuilder11, gsonBuilder0);
      assertSame(gsonBuilder11, gsonBuilder8);
      assertSame(gsonBuilder11, gsonBuilder3);
      assertSame(gsonBuilder11, gsonBuilder10);
      assertEquals(1, exclusionStrategyArray0.length);
      assertNotNull(gsonBuilder11);
      
      PrivateAccess.setVariable((Class<GsonBuilder>) GsonBuilder.class, gsonBuilder9, "serializeSpecialFloatingPointValues", (Object) boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean3);
      assertSame(gsonBuilder0, gsonBuilder8);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder7);
      assertSame(gsonBuilder0, gsonBuilder11);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder10);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder8);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder7);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder11);
      assertSame(gsonBuilder1, gsonBuilder10);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder9, gsonBuilder5);
      assertSame(gsonBuilder9, gsonBuilder3);
      assertSame(gsonBuilder9, gsonBuilder1);
      assertSame(gsonBuilder9, gsonBuilder4);
      assertSame(gsonBuilder9, gsonBuilder8);
      assertSame(gsonBuilder9, gsonBuilder7);
      assertSame(gsonBuilder9, gsonBuilder11);
      assertSame(gsonBuilder9, gsonBuilder2);
      assertSame(gsonBuilder9, gsonBuilder10);
      assertSame(gsonBuilder9, gsonBuilder6);
      assertSame(gsonBuilder9, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder10);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder11);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder7);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder8);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder2, gsonBuilder6);
      assertSame(gsonBuilder2, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder3, gsonBuilder7);
      assertSame(gsonBuilder3, gsonBuilder8);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder10);
      assertSame(gsonBuilder3, gsonBuilder11);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder1);
      assertSame(gsonBuilder4, gsonBuilder6);
      assertSame(gsonBuilder4, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder2);
      assertSame(gsonBuilder4, gsonBuilder9);
      assertSame(gsonBuilder4, gsonBuilder10);
      assertSame(gsonBuilder4, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder7);
      assertSame(gsonBuilder4, gsonBuilder3);
      assertSame(gsonBuilder4, gsonBuilder11);
      assertSame(gsonBuilder4, gsonBuilder8);
      assertEquals(1, exclusionStrategyArray0.length);
      
      boolean boolean4 = false;
      PrivateAccess.setVariable((Class<GsonBuilder>) GsonBuilder.class, gsonBuilder9, "serializeNulls", (Object) boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertSame(gsonBuilder0, gsonBuilder8);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder7);
      assertSame(gsonBuilder0, gsonBuilder11);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder10);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder8);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder7);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder11);
      assertSame(gsonBuilder1, gsonBuilder10);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder9, gsonBuilder5);
      assertSame(gsonBuilder9, gsonBuilder3);
      assertSame(gsonBuilder9, gsonBuilder1);
      assertSame(gsonBuilder9, gsonBuilder4);
      assertSame(gsonBuilder9, gsonBuilder8);
      assertSame(gsonBuilder9, gsonBuilder7);
      assertSame(gsonBuilder9, gsonBuilder11);
      assertSame(gsonBuilder9, gsonBuilder2);
      assertSame(gsonBuilder9, gsonBuilder10);
      assertSame(gsonBuilder9, gsonBuilder6);
      assertSame(gsonBuilder9, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder10);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder11);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder7);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder8);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder2, gsonBuilder6);
      assertSame(gsonBuilder2, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder3, gsonBuilder7);
      assertSame(gsonBuilder3, gsonBuilder8);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder10);
      assertSame(gsonBuilder3, gsonBuilder11);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder1);
      assertSame(gsonBuilder4, gsonBuilder6);
      assertSame(gsonBuilder4, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder2);
      assertSame(gsonBuilder4, gsonBuilder9);
      assertSame(gsonBuilder4, gsonBuilder10);
      assertSame(gsonBuilder4, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder7);
      assertSame(gsonBuilder4, gsonBuilder3);
      assertSame(gsonBuilder4, gsonBuilder11);
      assertSame(gsonBuilder4, gsonBuilder8);
      assertEquals(1, exclusionStrategyArray0.length);
      
      List<ChronoLocalDate> list0 = (List<ChronoLocalDate>) mock(List.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<GsonBuilder>) GsonBuilder.class, gsonBuilder10, "hierarchyFactories", (Object) list0);
      assertSame(gsonBuilder0, gsonBuilder8);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder7);
      assertSame(gsonBuilder0, gsonBuilder11);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder10);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder8);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder7);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder9);
      assertSame(gsonBuilder1, gsonBuilder11);
      assertSame(gsonBuilder1, gsonBuilder10);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder9, gsonBuilder5);
      assertSame(gsonBuilder9, gsonBuilder3);
      assertSame(gsonBuilder9, gsonBuilder1);
      assertSame(gsonBuilder9, gsonBuilder4);
      assertSame(gsonBuilder9, gsonBuilder8);
      assertSame(gsonBuilder9, gsonBuilder7);
      assertSame(gsonBuilder9, gsonBuilder11);
      assertSame(gsonBuilder9, gsonBuilder2);
      assertSame(gsonBuilder9, gsonBuilder10);
      assertSame(gsonBuilder9, gsonBuilder6);
      assertSame(gsonBuilder9, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder10);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder11);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder7);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder8);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder2, gsonBuilder6);
      assertSame(gsonBuilder2, gsonBuilder9);
      assertSame(gsonBuilder10, gsonBuilder0);
      assertSame(gsonBuilder10, gsonBuilder8);
      assertSame(gsonBuilder10, gsonBuilder2);
      assertSame(gsonBuilder10, gsonBuilder9);
      assertSame(gsonBuilder10, gsonBuilder5);
      assertSame(gsonBuilder10, gsonBuilder4);
      assertSame(gsonBuilder10, gsonBuilder1);
      assertSame(gsonBuilder10, gsonBuilder7);
      assertSame(gsonBuilder10, gsonBuilder11);
      assertSame(gsonBuilder10, gsonBuilder3);
      assertSame(gsonBuilder10, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder3, gsonBuilder7);
      assertSame(gsonBuilder3, gsonBuilder8);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder9);
      assertSame(gsonBuilder3, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder10);
      assertSame(gsonBuilder3, gsonBuilder11);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder1);
      assertSame(gsonBuilder4, gsonBuilder6);
      assertSame(gsonBuilder4, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder2);
      assertSame(gsonBuilder4, gsonBuilder9);
      assertSame(gsonBuilder4, gsonBuilder10);
      assertSame(gsonBuilder4, gsonBuilder5);
      assertSame(gsonBuilder4, gsonBuilder7);
      assertSame(gsonBuilder4, gsonBuilder3);
      assertSame(gsonBuilder4, gsonBuilder11);
      assertSame(gsonBuilder4, gsonBuilder8);
      assertEquals(1, exclusionStrategyArray0.length);
      
      // Undeclared exception!
      try { 
        gsonBuilder11.disableInnerClassSerialization();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.GsonBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      Gson gson0 = gsonBuilder0.create();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(typeAdapter0);
      
      Class<Integer> class1 = null;
      // Undeclared exception!
      try { 
        gsonBuilder0.registerTypeAdapter(class1, typeAdapter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.setLenient();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
      
      GsonBuilder gsonBuilder2 = gsonBuilder1.serializeNulls();
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertNotNull(gsonBuilder2);
      
      TypeAdapterFactory typeAdapterFactory0 = mock(TypeAdapterFactory.class, new ViolatedAssumptionAnswer());
      GsonBuilder gsonBuilder3 = gsonBuilder2.registerTypeAdapterFactory(typeAdapterFactory0);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertNotNull(gsonBuilder3);
      
      double double0 = 1091.772617442473;
      boolean boolean0 = true;
      PrivateAccess.setVariable((Class<GsonBuilder>) GsonBuilder.class, gsonBuilder3, "escapeHtmlChars", (Object) boolean0);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder0);
      
      int[] intArray0 = new int[0];
      GsonBuilder gsonBuilder4 = gsonBuilder3.excludeFieldsWithModifiers(intArray0);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder0);
      assertSame(gsonBuilder4, gsonBuilder3);
      assertSame(gsonBuilder4, gsonBuilder1);
      assertSame(gsonBuilder4, gsonBuilder2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(gsonBuilder4);
      
      GsonBuilder gsonBuilder5 = gsonBuilder3.setVersion(double0);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder5, gsonBuilder0);
      assertSame(gsonBuilder5, gsonBuilder1);
      assertSame(gsonBuilder5, gsonBuilder2);
      assertSame(gsonBuilder5, gsonBuilder3);
      assertSame(gsonBuilder5, gsonBuilder4);
      assertNotNull(gsonBuilder5);
      
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      GsonBuilder gsonBuilder6 = gsonBuilder5.setLongSerializationPolicy(longSerializationPolicy0);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder6);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder5, gsonBuilder0);
      assertSame(gsonBuilder5, gsonBuilder1);
      assertSame(gsonBuilder5, gsonBuilder2);
      assertSame(gsonBuilder5, gsonBuilder6);
      assertSame(gsonBuilder5, gsonBuilder3);
      assertSame(gsonBuilder5, gsonBuilder4);
      assertSame(gsonBuilder6, gsonBuilder2);
      assertSame(gsonBuilder6, gsonBuilder1);
      assertSame(gsonBuilder6, gsonBuilder3);
      assertSame(gsonBuilder6, gsonBuilder0);
      assertSame(gsonBuilder6, gsonBuilder5);
      assertSame(gsonBuilder6, gsonBuilder4);
      assertNotNull(gsonBuilder6);
      
      Excluder excluder0 = mock(Excluder.class, new ViolatedAssumptionAnswer());
      doReturn((Excluder) null).when(excluder0).disableInnerClassSerialization();
      PrivateAccess.setVariable((Class<GsonBuilder>) GsonBuilder.class, gsonBuilder5, "excluder", (Object) excluder0);
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder5);
      assertSame(gsonBuilder2, gsonBuilder4);
      assertSame(gsonBuilder2, gsonBuilder6);
      assertSame(gsonBuilder2, gsonBuilder3);
      assertSame(gsonBuilder2, gsonBuilder0);
      assertSame(gsonBuilder2, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder1);
      assertSame(gsonBuilder3, gsonBuilder2);
      assertSame(gsonBuilder3, gsonBuilder4);
      assertSame(gsonBuilder3, gsonBuilder6);
      assertSame(gsonBuilder3, gsonBuilder5);
      assertSame(gsonBuilder3, gsonBuilder0);
      assertSame(gsonBuilder5, gsonBuilder0);
      assertSame(gsonBuilder5, gsonBuilder1);
      assertSame(gsonBuilder5, gsonBuilder2);
      assertSame(gsonBuilder5, gsonBuilder6);
      assertSame(gsonBuilder5, gsonBuilder3);
      assertSame(gsonBuilder5, gsonBuilder4);
      
      GsonBuilder gsonBuilder7 = gsonBuilder1.disableInnerClassSerialization();
      assertSame(gsonBuilder0, gsonBuilder4);
      assertSame(gsonBuilder0, gsonBuilder5);
      assertSame(gsonBuilder0, gsonBuilder6);
      assertSame(gsonBuilder0, gsonBuilder3);
      assertSame(gsonBuilder0, gsonBuilder2);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder0, gsonBuilder7);
      assertSame(gsonBuilder1, gsonBuilder2);
      assertSame(gsonBuilder1, gsonBuilder3);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertSame(gsonBuilder1, gsonBuilder5);
      assertSame(gsonBuilder1, gsonBuilder6);
      assertSame(gsonBuilder1, gsonBuilder7);
      assertSame(gsonBuilder1, gsonBuilder4);
      assertSame(gsonBuilder7, gsonBuilder2);
      assertSame(gsonBuilder7, gsonBuilder1);
      assertSame(gsonBuilder7, gsonBuilder4);
      assertSame(gsonBuilder7, gsonBuilder5);
      assertSame(gsonBuilder7, gsonBuilder6);
      assertSame(gsonBuilder7, gsonBuilder0);
      assertSame(gsonBuilder7, gsonBuilder3);
      assertNotNull(gsonBuilder7);
      
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        gsonBuilder5.addSerializationExclusionStrategy(exclusionStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.GsonBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      String string0 = "";
      GsonBuilder gsonBuilder1 = gsonBuilder0.setDateFormat(string0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
      
      Gson gson0 = gsonBuilder0.create();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      int int0 = 686;
      GsonBuilder gsonBuilder1 = gsonBuilder0.setDateFormat(int0, int0);
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
      
      // Undeclared exception!
      try { 
        gsonBuilder0.create();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 686
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GsonBuilder gsonBuilder0 = new GsonBuilder();
      assertNotNull(gsonBuilder0);
      
      GsonBuilder gsonBuilder1 = gsonBuilder0.enableComplexMapKeySerialization();
      assertSame(gsonBuilder0, gsonBuilder1);
      assertSame(gsonBuilder1, gsonBuilder0);
      assertNotNull(gsonBuilder1);
  }
}
