/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 21:13:18 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Spliterator;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic2DMatrix_ESTest extends Basic2DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      Basic2DMatrix.zero(int1, int1);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int2 = 1186;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int2, int1);
      int int3 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(int3, (double) int0, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(matrix0, rowMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      int int1 = (-671);
      Matrix matrix0 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn(int1, int0).when(matrix0).rows();
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      Basic2DMatrix.constant(int0, int1, int0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int2 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int2, int1);
      int int3 = 34;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(int3, (double) int0, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(matrix0, rowMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(int0, int1, int0);
      Matrix matrix0 = basic2DMatrix0.transpose();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int2 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int2, int1);
      int int3 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(int3, (double) int0, (Random) mockRandom0);
      Matrix matrix1 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      Basic2DMatrix.block(matrix1, rowMajorSparseMatrix0, matrix1, columnMajorSparseMatrix0);
      Basic2DMatrix.block(basic2DMatrix0, matrix0, rowMajorSparseMatrix0, basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 2328;
      int int1 = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(int0, doubleArray0[2]);
      int int2 = 0;
      basic2DMatrix0.getRow(int2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2328;
      int int1 = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from1DArray(int0, int1, doubleArray0);
      int int2 = 0;
      basic2DMatrix0.getRow(int2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      int int1 = (-572);
      // Undeclared exception!
      try { 
        basic2DMatrix0.blankOfShape(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int int0 = (-1374);
      MatrixFactory<Basic2DMatrix> matrixFactory0 = (MatrixFactory<Basic2DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic2DMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      basic2DMatrix0.to(matrixFactory0);
      String string0 = "$j&3_B";
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 2731;
      int int1 = 1459;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(int0, int1);
      int int2 = 0;
      basic2DMatrix0.get(int2, int2);
      int int3 = 1;
      basic2DMatrix0.copyOfShape(int1, int3);
      basic2DMatrix0.toArray();
      double double0 = 0.0;
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.constant(int1, int0, double0);
      MatrixMatrixOperation<String> matrixMatrixOperation0 = (MatrixMatrixOperation<String>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((MatrixOperation) null).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.DenseMatrix.class));
      // Undeclared exception!
      try { 
        basic2DMatrix0.apply(matrixMatrixOperation0, (Matrix) basic2DMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.foldColumns(vectorAccumulator0);
      basic2DMatrix0.iterator();
      byte[] byteArray0 = basic2DMatrix0.toBinary();
      basic2DMatrix0.toMatrixMarket();
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.fromBinary(byteArray0);
      basic2DMatrix1.toBinary();
      int int0 = (-423);
      // Undeclared exception!
      try { 
        Basic2DMatrix.identity(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 3374;
      int int1 = 1788;
      String string0 = "";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV(string0);
      basic2DMatrix0.blankOfRows(int0);
      double double0 = 1.0;
      Basic2DMatrix.diagonal(int0, double0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)16;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-98);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-74);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-9);
      byteArray0[4] = byte4;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[8];
      double double0 = (-1754.4508046292988);
      doubleArray1[0] = double0;
      double double1 = (-1001.2053714049);
      doubleArray1[1] = double1;
      double double2 = 0.0;
      doubleArray1[2] = double2;
      double double3 = Double.POSITIVE_INFINITY;
      doubleArray1[3] = double3;
      double double4 = 0.0;
      doubleArray1[4] = double4;
      double double5 = 0.0;
      doubleArray1[5] = double5;
      double double6 = 0.0;
      doubleArray1[6] = double6;
      double double7 = 77.159159925226;
      doubleArray1[7] = double7;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      double[][] doubleArray3 = new double[9][4];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray2;
      doubleArray3[5] = doubleArray1;
      doubleArray3[6] = doubleArray2;
      doubleArray3[7] = doubleArray2;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = double3;
      doubleArray4[1] = double4;
      doubleArray4[2] = double7;
      double double8 = (-901.36794);
      doubleArray4[3] = double8;
      doubleArray4[4] = double1;
      double double9 = 0.0;
      doubleArray4[5] = double9;
      doubleArray4[6] = double7;
      doubleArray4[7] = double5;
      doubleArray4[8] = double5;
      doubleArray3[8] = doubleArray4;
      DenseMatrix.from2DArray(doubleArray3);
      // Undeclared exception!
      try { 
        basic2DMatrix0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix.constant(int0, int0, int0);
      int int1 = (-734);
      Random random0 = null;
      // Undeclared exception!
      try { 
        Basic2DMatrix.randomSymmetric(int1, random0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      Basic2DMatrix basic2DMatrix0 = null;
      try {
        basic2DMatrix0 = new Basic2DMatrix(doubleArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[4];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      double double2 = 1.0;
      doubleArray1[2] = double2;
      double double3 = (-1348.0);
      doubleArray1[3] = double3;
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      int int0 = 2220;
      basic2DMatrix0.blankOfShape(int0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from1DArray(int0, int0, doubleArray0);
      basic2DMatrix0.columnMajorIterator();
      int int1 = 145;
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      basic2DMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      int int2 = 595;
      // Undeclared exception!
      try { 
        basic2DMatrix0.set(int1, int2, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        Basic2DMatrix.from1DArray(int0, int1, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-1746);
      // Undeclared exception!
      try { 
        Basic2DMatrix.unit(int0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2179;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(int0);
      int int1 = 2;
      int int2 = 0;
      basic2DMatrix0.copyOfShape(int1, int2);
      int int3 = 1;
      // Undeclared exception!
      try { 
        basic2DMatrix0.swapColumns(int3, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2179
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1552;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1552, basic2DMatrix0.columns());
      assertEquals(1552, basic2DMatrix0.rows());
      
      // Undeclared exception!
      basic2DMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      int int1 = 1389;
      Random random0 = null;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(int0, int1, random0);
      assertNotNull(basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int2 = 1056;
      // Undeclared exception!
      try { 
        Basic2DMatrix.randomSymmetric(int2, random0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      int int0 = (-2180);
      // Undeclared exception!
      try { 
        basic2DMatrix0.copyOfShape(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2180x-2180
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 3706;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(3706, basic2DMatrix0.rows());
      assertEquals(3706, basic2DMatrix0.columns());
      
      int int1 = 0;
      int int2 = 1507;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int3 = 1;
      int int4 = mockRandom0.nextInt(int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.random(int1, int2, mockRandom0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertTrue(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      
      int int5 = 0;
      IntStream intStream0 = mockRandom0.ints((long) int5, int1, int2);
      assertNotNull(intStream0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertTrue(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int2 == int5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix1.swapRows(int5, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 8;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(int0, mockRandom0);
      assertNotNull(basic2DMatrix0);
      assertEquals(8, basic2DMatrix0.rows());
      assertEquals(8, basic2DMatrix0.columns());
      
      String string0 = "This matrix can't grow up.";
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1652;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1652, basic2DMatrix0.columns());
      assertEquals(1652, basic2DMatrix0.rows());
      
      int int1 = (-622);
      int int2 = 0;
      String string0 = "";
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.fromCSV(string0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      int int1 = 8;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = 0L;
      LongStream longStream0 = mockRandom0.longs((long) int1, long0, (long) int1);
      assertNotNull(longStream0);
      assertFalse(int1 == int0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(int0, int1, mockRandom0);
      assertNotNull(basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 467;
      int int1 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(int0, int1);
      assertNotNull(basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(467, basic2DMatrix0.rows());
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.block(basic2DMatrix0, basic2DMatrix0, basic2DMatrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(467, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(934, basic2DMatrix1.rows());
      
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[6];
      double double0 = (-1736.5090658427);
      doubleArray1[0] = double0;
      doubleArray1[1] = (double) int1;
      doubleArray1[2] = (double) int1;
      doubleArray1[3] = (double) int0;
      doubleArray1[4] = (double) int0;
      doubleArray1[5] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) int1;
      doubleArray3[1] = (double) int1;
      doubleArray3[2] = double0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = double0;
      doubleArray4[1] = (double) int0;
      doubleArray4[2] = (double) int1;
      double double1 = 0.0;
      doubleArray4[3] = double1;
      doubleArray4[4] = double0;
      doubleArray4[5] = (double) int1;
      doubleArray4[6] = (double) int0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (double) int0;
      doubleArray5[1] = double0;
      doubleArray5[2] = double0;
      doubleArray5[3] = double0;
      doubleArray5[4] = double0;
      doubleArray5[5] = (double) int0;
      doubleArray5[6] = (double) int0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = double1;
      doubleArray6[1] = (double) int0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = double1;
      doubleArray7[1] = double1;
      doubleArray7[2] = double1;
      doubleArray7[3] = double0;
      doubleArray7[4] = (double) int0;
      doubleArray7[5] = (double) int0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = double0;
      doubleArray8[1] = (double) int0;
      double double2 = 0.0;
      doubleArray8[2] = double2;
      doubleArray8[3] = double1;
      doubleArray8[4] = double1;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      
      doubleArray9[0] = double1;
      doubleArray0[8] = doubleArray9;
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.from2DArray(doubleArray0);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotNull(basic2DMatrix2);
      assertEquals(9, doubleArray0.length);
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertEquals(6, basic2DMatrix2.columns());
      assertEquals(9, basic2DMatrix2.rows());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2800;
      int int1 = 1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(int0, int1);
      assertNotNull(basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2800, basic2DMatrix0.rows());
      assertEquals(1, basic2DMatrix0.columns());
      
      int int2 = 0;
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.unit(int1, int2);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(1, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      
      int int3 = (-1039);
      // Undeclared exception!
      try { 
        Basic2DMatrix.diagonal(int3, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        Basic2DMatrix.zero(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(int0, int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int1 = 0;
      Spliterator<Double> spliterator0 = basic2DMatrix0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = basic2DMatrix0.columnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int2 = 0;
      Matrix matrix0 = basic2DMatrix0.copyOfShape(int1, int2);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      int int3 = 2184;
      double double0 = (-1008.4417);
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.diagonal(int3, double0);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(basic2DMatrix1.equals((Object)matrix0));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(2184, basic2DMatrix1.columns());
      assertEquals(2184, basic2DMatrix1.rows());
      
      basic2DMatrix1.setAll(int3);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(basic2DMatrix1.equals((Object)matrix0));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(2184, basic2DMatrix1.columns());
      assertEquals(2184, basic2DMatrix1.rows());
      
      int int4 = 361;
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.identity(int4);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, matrix0);
      assertNotNull(basic2DMatrix2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertFalse(basic2DMatrix2.equals((Object)matrix0));
      assertEquals(361, basic2DMatrix2.rows());
      assertEquals(361, basic2DMatrix2.columns());
      
      double[][] doubleArray0 = basic2DMatrix0.toArray();
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix0, basic2DMatrix2);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertFalse(basic2DMatrix0.equals((Object)basic2DMatrix2));
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int5 = 1723;
      double double1 = 0.0;
      basic2DMatrix1.set(int5, int4, double1);
      assertNotSame(basic2DMatrix1, basic2DMatrix2);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int5);
      assertFalse(int3 == int1);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix2));
      assertFalse(basic2DMatrix1.equals((Object)matrix0));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int5);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2184, basic2DMatrix1.columns());
      assertEquals(2184, basic2DMatrix1.rows());
      
      int int6 = 0;
      int int7 = (-1364);
      double double2 = 1.0;
      // Undeclared exception!
      try { 
        basic2DMatrix2.set(int6, int7, double2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1364
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.randomSymmetric(int0, mockRandom0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      
      Matrix matrix0 = basic2DMatrix0.hadamardProduct(basic2DMatrix1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(matrix0, basic2DMatrix1);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertTrue(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix1));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      double[][] doubleArray0 = basic2DMatrix0.toArray();
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      int int1 = 0;
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.constant(int0, int1, int1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, matrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotNull(basic2DMatrix2);
      assertTrue(basic2DMatrix2.equals((Object)matrix0));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertEquals(0, basic2DMatrix2.columns());
      assertEquals(0, basic2DMatrix2.rows());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 49;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(49, basic2DMatrix0.rows());
      assertEquals(49, basic2DMatrix0.columns());
      
      Matrix matrix0 = basic2DMatrix0.divide(int0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertEquals(49, basic2DMatrix0.rows());
      assertEquals(49, basic2DMatrix0.columns());
      assertEquals(49, matrix0.columns());
      assertEquals(49, matrix0.rows());
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.unit(int0, int0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix1.equals((Object)matrix0));
      assertEquals(49, basic2DMatrix1.columns());
      assertEquals(49, basic2DMatrix1.rows());
      
      int int1 = 2913;
      Matrix matrix1 = basic2DMatrix1.removeFirstRow();
      assertNotSame(basic2DMatrix1, matrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, basic2DMatrix1);
      assertNotSame(matrix1, basic2DMatrix0);
      assertNotNull(matrix1);
      assertFalse(int0 == int1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)basic2DMatrix1));
      assertFalse(matrix1.equals((Object)basic2DMatrix0));
      assertEquals(49, basic2DMatrix1.columns());
      assertEquals(49, basic2DMatrix1.rows());
      assertEquals(48, matrix1.rows());
      assertEquals(49, matrix1.columns());
      
      // Undeclared exception!
      basic2DMatrix1.power(int1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      int int1 = (-2570);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        basic2DMatrix0.set(int0, int1, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(1, basic2DMatrix0.columns());
      
      double double0 = 696.3860898584461;
      // Undeclared exception!
      try { 
        basic2DMatrix0.set(int0, int0, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 738;
      double double0 = 1292.56;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(int0, int0, double0);
      assertNotNull(basic2DMatrix0);
      assertEquals(738, basic2DMatrix0.rows());
      assertEquals(738, basic2DMatrix0.columns());
      
      int int1 = 3398;
      // Undeclared exception!
      try { 
        basic2DMatrix0.get(int1, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)53;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-99);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-77);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-55);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)1;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic2DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic2DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int0 = (-1306);
      int int1 = (-1374);
      basic2DMatrix0.swapColumns(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      MatrixFactory<Basic2DMatrix> matrixFactory0 = (MatrixFactory<Basic2DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic2DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      int int1 = (-91);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int2 = 0;
      basic2DMatrix0.swapColumns(int2, int0);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-994);
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.random(int0, int0, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[4];
      double double0 = 1.0;
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      double double2 = 0.0;
      doubleArray1[2] = double2;
      double double3 = 1.0;
      doubleArray1[3] = double3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double1;
      doubleArray2[1] = double1;
      doubleArray2[2] = double1;
      doubleArray2[3] = double1;
      doubleArray2[4] = double1;
      doubleArray2[5] = double0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = double3;
      double double4 = (-582.7079067751);
      doubleArray3[1] = double4;
      doubleArray3[2] = double0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = double0;
      doubleArray0[4] = doubleArray5;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, basic2DMatrix0.rows());
      assertEquals(4, basic2DMatrix0.columns());
      
      int int0 = 0;
      int int1 = 3569;
      Matrix matrix0 = Matrix.from1DArray(int0, int1, doubleArray3);
      assertArrayEquals(new double[] {1.0, (-582.7079067751), 1.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotNull(matrix0);
      assertEquals(3, doubleArray3.length);
      assertFalse(int1 == int0);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(int0 == int1);
      assertEquals(0, matrix0.rows());
      assertEquals(3569, matrix0.columns());
      
      int int2 = 0;
      int int3 = 0;
      Matrix matrix1 = basic2DMatrix0.blankOfShape(int2, int3);
      assertNotSame(matrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotNull(matrix1);
      assertEquals(5, doubleArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int3 == int1);
      assertFalse(matrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
      assertEquals(5, basic2DMatrix0.rows());
      assertEquals(4, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1797;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      Basic2DMatrix.random(int0, int0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1330;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        Basic2DMatrix.from1DArray(int0, int0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-2481);
      int int1 = 466;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      // Undeclared exception!
      try { 
        Basic2DMatrix.from1DArray(int0, int1, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-3898);
      Basic2DMatrix basic2DMatrix0 = null;
      try {
        basic2DMatrix0 = new Basic2DMatrix(int0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(int0, int0, mockRandom0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      SparseMatrix sparseMatrix0 = basic2DMatrix0.toSparseMatrix();
      assertNotNull(sparseMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.rows());
      
      double double0 = basic2DMatrix0.trace();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int1 = 3147;
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints(int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[5];
      double double0 = 2389.902412;
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      double double2 = (-245.32550347);
      doubleArray1[2] = double2;
      double double3 = 0.0;
      doubleArray1[3] = double3;
      double double4 = 5583.5843;
      doubleArray1[4] = double4;
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(5, basic2DMatrix0.columns());
      
      int int0 = (-4223);
      // Undeclared exception!
      try { 
        basic2DMatrix0.getRow(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4223
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-2109);
      int int1 = (-1124);
      // Undeclared exception!
      try { 
        Basic2DMatrix.constant(int0, int1, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      double double0 = basic2DMatrix0.diagonalProduct();
      assertEquals(0, doubleArray0.length);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      String string0 = "q/f";
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        Basic2DMatrix.from2DArray(doubleArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 5136;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(5136, basic2DMatrix0.rows());
      assertEquals(5136, basic2DMatrix0.columns());
      
      basic2DMatrix0.setAll(int0);
      assertEquals(5136, basic2DMatrix0.rows());
      assertEquals(5136, basic2DMatrix0.columns());
      
      int int1 = 2569;
      int int2 = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.random(int1, int2, mockRandom0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(2569, basic2DMatrix1.rows());
      assertEquals(1, basic2DMatrix1.columns());
      
      Matrix matrix0 = basic2DMatrix1.copyOfRows(int0);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(matrix0, basic2DMatrix1);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(matrix0.equals((Object)basic2DMatrix1));
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(2569, basic2DMatrix1.rows());
      assertEquals(1, basic2DMatrix1.columns());
      assertEquals(1, matrix0.columns());
      assertEquals(5136, matrix0.rows());
      
      byte[] byteArray0 = basic2DMatrix1.toBinary();
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(byteArray0);
      assertEquals(20561, byteArray0.length);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(basic2DMatrix1.equals((Object)matrix0));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(2569, basic2DMatrix1.rows());
      assertEquals(1, basic2DMatrix1.columns());
      
      long long0 = 3367L;
      IntStream intStream0 = mockRandom0.ints(long0, int2, int0);
      assertNotNull(intStream0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.9, double0, 0.01);
      
      double[][] doubleArray0 = basic2DMatrix0.toArray();
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotNull(doubleArray0);
      assertEquals(5136, doubleArray0.length);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(5136, basic2DMatrix0.rows());
      assertEquals(5136, basic2DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        basic2DMatrix1.get(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 1199;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1199, basic2DMatrix0.columns());
      assertEquals(1199, basic2DMatrix0.rows());
      
      DenseMatrix denseMatrix0 = basic2DMatrix0.toDenseMatrix();
      assertSame(basic2DMatrix0, denseMatrix0);
      assertSame(denseMatrix0, basic2DMatrix0);
      assertNotNull(denseMatrix0);
      assertEquals(1199, basic2DMatrix0.columns());
      assertEquals(1199, basic2DMatrix0.rows());
      assertEquals(1199, denseMatrix0.rows());
      assertEquals(1199, denseMatrix0.columns());
      
      int int1 = 2813;
      // Undeclared exception!
      try { 
        basic2DMatrix0.swapRows(int1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2813
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(int0, int1, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      int int2 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int2, int1);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      
      int int3 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(int3, (double) int0, (Random) mockRandom0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.block(cRSMatrix0, rowMajorSparseMatrix0, cRSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 0;
      int int1 = 2045;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(int0, int1);
      assertNotNull(basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      byte[] byteArray0 = basic2DMatrix0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      double double0 = 1254.6178351;
      MatrixVectorOperation<String> matrixVectorOperation0 = null;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int2 = (-533);
      Integer integer0 = new Integer(int2);
      assertNotNull(integer0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-533), (int)integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertNull(integer1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        DenseVector.fromMap(hashMap0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from1DArray(int0, int1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(basic2DMatrix0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      double double0 = 1.0;
      Matrix matrix0 = basic2DMatrix0.subtract(double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertEquals(6, doubleArray0.length);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      double double1 = 3118.7601304;
      basic2DMatrix0.setAll(double1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(basic2DMatrix0, matrix0);
      assertEquals(6, doubleArray0.length);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        basic2DMatrix0.getRow(int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      String string0 = "l";
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      assertNotNull(decimalFormatSymbols0);
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      
      DecimalFormatSymbols decimalFormatSymbols1 = (DecimalFormatSymbols)decimalFormatSymbols0.clone();
      assertNotSame(decimalFormatSymbols0, decimalFormatSymbols1);
      assertNotSame(decimalFormatSymbols1, decimalFormatSymbols0);
      assertNotNull(decimalFormatSymbols1);
      assertTrue(decimalFormatSymbols1.equals((Object)decimalFormatSymbols0));
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('\u2030', decimalFormatSymbols1.getPerMill());
      assertEquals("\u221E", decimalFormatSymbols1.getInfinity());
      assertEquals("\uFFFD", decimalFormatSymbols1.getNaN());
      assertEquals('%', decimalFormatSymbols1.getPercent());
      assertEquals('.', decimalFormatSymbols1.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols1.getDigit());
      assertEquals('-', decimalFormatSymbols1.getMinusSign());
      assertEquals("E", decimalFormatSymbols1.getExponentSeparator());
      assertEquals(';', decimalFormatSymbols1.getPatternSeparator());
      assertEquals('.', decimalFormatSymbols1.getMonetaryDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols1.getInternationalCurrencySymbol());
      assertEquals('0', decimalFormatSymbols1.getZeroDigit());
      assertEquals(',', decimalFormatSymbols1.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols1.getCurrencySymbol());
      
      DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols0);
      assertNotNull(decimalFormat0);
      assertTrue(decimalFormatSymbols0.equals((Object)decimalFormatSymbols1));
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("l#", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("l", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("-l", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("l#", decimalFormat0.toPattern());
      
      decimalFormat0.setMinimumFractionDigits(int0);
      assertNotSame(decimalFormatSymbols0, decimalFormatSymbols1);
      assertTrue(decimalFormatSymbols0.equals((Object)decimalFormatSymbols1));
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("l#", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("l", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("-l", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("l#", decimalFormat0.toPattern());
      
      String string1 = basic2DMatrix0.toCSV((NumberFormat) decimalFormat0);
      assertNotSame(string0, string1);
      assertNotSame(decimalFormatSymbols0, decimalFormatSymbols1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(decimalFormatSymbols0.equals((Object)decimalFormatSymbols1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("l#", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("l", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("-l", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("l#", decimalFormat0.toPattern());
      
      double[] doubleArray0 = basic2DMatrix0.foldRows(vectorAccumulator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.multiplyByItsTranspose();
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      
      int int1 = 0;
      int int2 = 867;
      Basic2DMatrix basic2DMatrix2 = (Basic2DMatrix)basic2DMatrix1.copyOfShape(int1, int0);
      assertNotSame(basic2DMatrix0, basic2DMatrix2);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix2);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotNull(basic2DMatrix2);
      assertFalse(int0 == int2);
      assertTrue(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(int1 == int2);
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix2.rows());
      assertEquals(0, basic2DMatrix2.columns());
      
      int int3 = 145;
      Basic2DMatrix basic2DMatrix3 = Basic2DMatrix.unit(int3, int0);
      assertNotSame(basic2DMatrix3, basic2DMatrix0);
      assertNotSame(basic2DMatrix3, basic2DMatrix1);
      assertNotSame(basic2DMatrix3, basic2DMatrix2);
      assertNotNull(basic2DMatrix3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(basic2DMatrix3.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix3.equals((Object)basic2DMatrix1));
      assertFalse(basic2DMatrix3.equals((Object)basic2DMatrix2));
      assertEquals(0, basic2DMatrix3.columns());
      assertEquals(145, basic2DMatrix3.rows());
      
      long long0 = (-1L);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      Basic2DMatrix.randomSymmetric(int2, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "<";
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 2582;
      double double0 = (-2277.23070490975);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(int0, double0);
      assertNotNull(basic2DMatrix0);
      assertEquals(2582, basic2DMatrix0.rows());
      assertEquals(2582, basic2DMatrix0.columns());
      
      // Undeclared exception!
      DenseMatrix.block(basic2DMatrix0, basic2DMatrix0, basic2DMatrix0, basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)16;
      byteArray0[2] = byte2;
      byte byte3 = (byte)91;
      byteArray0[3] = byte3;
      byte byte4 = (byte)60;
      byteArray0[4] = byte4;
      byte byte5 = (byte)121;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      int int0 = 0;
      double double0 = 0.0;
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      double double0 = basic2DMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = basic2DMatrix0.rowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.eachInColumn(int0, vectorProcedure0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      double double1 = basic2DMatrix0.product();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      Matrix matrix0 = basic2DMatrix0.copyOfShape(int0, int0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      basic2DMatrix0.swapRows(int0, int0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[3];
      double double2 = 1555.3;
      doubleArray1[0] = double2;
      doubleArray1[1] = double1;
      doubleArray1[2] = double0;
      doubleArray0[0] = doubleArray1;
      int int1 = (-2576);
      // Undeclared exception!
      try { 
        Basic2DMatrix.identity(int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }
}
