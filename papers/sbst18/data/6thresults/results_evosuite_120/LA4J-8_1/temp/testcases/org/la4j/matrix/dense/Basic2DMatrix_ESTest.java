/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:39:02 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.inversion.MatrixInverter;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic2DMatrix_ESTest extends Basic2DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 17;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(int0, mockRandom0);
      assertNotNull(basic2DMatrix0);
      assertEquals(17, basic2DMatrix0.rows());
      assertEquals(17, basic2DMatrix0.columns());
      
      double[][] doubleArray0 = basic2DMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(17, doubleArray0.length);
      assertEquals(17, basic2DMatrix0.rows());
      assertEquals(17, basic2DMatrix0.columns());
      
      Matrix matrix0 = basic2DMatrix0.blankOfShape(int0, int0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(17, basic2DMatrix0.rows());
      assertEquals(17, basic2DMatrix0.columns());
      assertEquals(17, matrix0.columns());
      assertEquals(17, matrix0.rows());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      
      String string0 = matrix0.toCSV((NumberFormat) decimalFormat0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(string0);
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(17, basic2DMatrix0.rows());
      assertEquals(17, basic2DMatrix0.columns());
      assertEquals(17, matrix0.columns());
      assertEquals(17, matrix0.rows());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      
      int int1 = 0;
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = basic2DMatrix0.columnMajorIterator();
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotNull(columnMajorMatrixIterator0);
      assertFalse(int0 == int1);
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(17, basic2DMatrix0.rows());
      assertEquals(17, basic2DMatrix0.columns());
      
      double double0 = 1.0;
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.randomSymmetric(int1, double0, (Random) mockRandom0);
      assertNotNull(cCSMatrix0);
      assertFalse(int1 == int0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Object> matrixMatrixOperation0 = (MatrixMatrixOperation<Object>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      int int2 = 0;
      int int3 = (-1442);
      // Undeclared exception!
      try { 
        basic2DMatrix0.swapColumns(int2, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1442
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 16;
      int int1 = 1822;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)16;
      byteArray0[0] = byte0;
      int int2 = 3162;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(int2);
      assertNotNull(basic2DMatrix0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3162, basic2DMatrix0.rows());
      assertEquals(3162, basic2DMatrix0.columns());
      
      int int3 = 1796;
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(int1, byteArray0[0]);
      assertNotNull(basic2DMatrix1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(3, byteArray0.length);
      assertEquals(16, basic2DMatrix1.columns());
      assertEquals(1822, basic2DMatrix1.rows());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0}, byteArray0);
      
      DenseMatrix denseMatrix0 = basic2DMatrix1.toDenseMatrix();
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertSame(basic2DMatrix1, denseMatrix0);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertSame(denseMatrix0, basic2DMatrix1);
      assertNotNull(denseMatrix0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertEquals(3, byteArray0.length);
      assertEquals(16, basic2DMatrix1.columns());
      assertEquals(1822, basic2DMatrix1.rows());
      assertEquals(1822, denseMatrix0.rows());
      assertEquals(16, denseMatrix0.columns());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(denseMatrix0, denseMatrix0, basic2DMatrix1, basic2DMatrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "8";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV(string0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)16;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-114);
      byteArray0[1] = byte1;
      byte byte2 = (byte)4;
      byteArray0[2] = byte2;
      byte byte3 = (byte)78;
      byteArray0[3] = byte3;
      byte byte4 = (byte)86;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-83);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-111);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-109);
      byteArray0[7] = byte7;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 16;
      int int1 = 1822;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)16;
      byteArray0[0] = byte0;
      int int2 = 3162;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(int2);
      assertNotNull(basic2DMatrix0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3162, basic2DMatrix0.columns());
      assertEquals(3162, basic2DMatrix0.rows());
      
      int int3 = 1796;
      int int4 = 907;
      Vector vector0 = basic2DMatrix0.getColumn(int4);
      assertNotNull(vector0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(3162, basic2DMatrix0.columns());
      assertEquals(3162, basic2DMatrix0.rows());
      assertEquals(3162, vector0.length());
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.unit(int3, int3);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(1796, basic2DMatrix1.rows());
      assertEquals(1796, basic2DMatrix1.columns());
      
      DenseMatrix denseMatrix0 = basic2DMatrix1.toDenseMatrix();
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertSame(basic2DMatrix1, denseMatrix0);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertSame(denseMatrix0, basic2DMatrix1);
      assertNotNull(denseMatrix0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertEquals(1796, basic2DMatrix1.rows());
      assertEquals(1796, basic2DMatrix1.columns());
      assertEquals(1796, denseMatrix0.columns());
      assertEquals(1796, denseMatrix0.rows());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV(string0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      int int0 = 2712;
      int int1 = 0;
      int int2 = 5;
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.diagonal(int2, int2);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(5, basic2DMatrix1.columns());
      assertEquals(5, basic2DMatrix1.rows());
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(basic2DMatrix1, basic2DMatrix1, basic2DMatrix1, basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      int int1 = 2460;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from1DArray(int0, int1, doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertArrayEquals(new double[] {0.0, 2460.0, 0.0, 0.0, 2460.0, 0.0}, doubleArray0, 0.01);
      
      Matrix matrix0 = basic2DMatrix0.blankOfRows(int1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(6, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(2460, matrix0.rows());
      assertArrayEquals(new double[] {0.0, 2460.0, 0.0, 0.0, 2460.0, 0.0}, doubleArray0, 0.01);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      int int2 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int2);
      assertNotNull(rowMajorSparseMatrix0);
      assertFalse(int2 == int1);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertFalse(int2 == int1);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      
      int int3 = 2;
      int int4 = 0;
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)Matrix.constant(int3, int4, doubleArray0[5]);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(basic2DMatrix1.equals((Object)matrix0));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertArrayEquals(new double[] {0.0, 2460.0, 0.0, 0.0, 2460.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(matrix0, cRSMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from1DArray(int0, int0, doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Matrix matrix0 = basic2DMatrix0.blankOfRows(int0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(6, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      int int1 = 5;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int1);
      assertNotNull(rowMajorSparseMatrix0);
      assertFalse(int1 == int0);
      assertEquals(5, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.2, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(5, rowMajorSparseMatrix0.rows());
      assertEquals(5, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertFalse(int1 == int0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(5, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.2, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(5, rowMajorSparseMatrix0.rows());
      assertEquals(5, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.cardinality());
      assertEquals(0.2, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      int int2 = 2;
      int int3 = 0;
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)Matrix.constant(int2, int3, doubleArray0[5]);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix1.equals((Object)matrix0));
      assertEquals(6, doubleArray0.length);
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(2, basic2DMatrix1.rows());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(matrix0, cRSMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      int int1 = 1685;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(int0, int1, doubleArray0);
      assertNotNull(columnMajorSparseMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1685, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertArrayEquals(new double[] {0.0, 1685.0, 1685.0, 1685.0}, doubleArray0, 0.01);
      
      int int2 = 267;
      int int3 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(int2, int3);
      assertNotNull(basic2DMatrix0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(267, basic2DMatrix0.rows());
      
      Matrix matrix0 = basic2DMatrix0.copyOfShape(int0, int1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(267, basic2DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, matrix0, basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      int int1 = 664;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(int0, int1);
      assertNotNull(basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int2 = 0;
      int int3 = 0;
      basic2DMatrix0.swapColumns(int3, int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.randomSymmetric(int0, mockRandom0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int0 == int1);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      
      String string0 = basic2DMatrix1.toCSV();
      assertEquals("", string0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(string0);
      assertFalse(int0 == int1);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      
      Matrix matrix0 = basic2DMatrix1.shuffle();
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(matrix0, basic2DMatrix1);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int1);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix1));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      int int4 = 9;
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.randomSymmetric(int4, mockRandom0);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, matrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotNull(basic2DMatrix2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix2.equals((Object)matrix0));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertEquals(9, basic2DMatrix2.columns());
      assertEquals(9, basic2DMatrix2.rows());
      
      int int5 = 0;
      Basic2DMatrix basic2DMatrix3 = Basic2DMatrix.fromCSV(string0);
      assertNotSame(basic2DMatrix1, basic2DMatrix3);
      assertNotSame(basic2DMatrix1, basic2DMatrix2);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix3, basic2DMatrix1);
      assertNotSame(basic2DMatrix3, basic2DMatrix0);
      assertNotSame(basic2DMatrix3, matrix0);
      assertNotSame(basic2DMatrix3, basic2DMatrix2);
      assertNotNull(basic2DMatrix3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix2));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)matrix0));
      assertTrue(basic2DMatrix3.equals((Object)matrix0));
      assertTrue(basic2DMatrix3.equals((Object)basic2DMatrix1));
      assertFalse(basic2DMatrix3.equals((Object)basic2DMatrix2));
      assertTrue(basic2DMatrix3.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix3.rows());
      assertEquals(0, basic2DMatrix3.columns());
      
      Basic2DMatrix basic2DMatrix4 = Basic2DMatrix.zero(int5, int4);
      assertNotSame(basic2DMatrix4, basic2DMatrix1);
      assertNotSame(basic2DMatrix4, matrix0);
      assertNotSame(basic2DMatrix4, basic2DMatrix2);
      assertNotSame(basic2DMatrix4, basic2DMatrix3);
      assertNotSame(basic2DMatrix4, basic2DMatrix0);
      assertNotNull(basic2DMatrix4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int5);
      assertFalse(int4 == int1);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertTrue(basic2DMatrix4.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix4.equals((Object)basic2DMatrix2));
      assertTrue(basic2DMatrix4.equals((Object)matrix0));
      assertTrue(basic2DMatrix4.equals((Object)basic2DMatrix3));
      assertTrue(basic2DMatrix4.equals((Object)basic2DMatrix1));
      assertEquals(0, basic2DMatrix4.rows());
      assertEquals(0, basic2DMatrix4.columns());
      
      int int6 = 0;
      int int7 = 8;
      basic2DMatrix2.swapRows(int6, int7);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, matrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix4);
      assertNotSame(basic2DMatrix2, basic2DMatrix3);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertFalse(int4 == int3);
      assertFalse(int4 == int7);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int5);
      assertFalse(int4 == int1);
      assertFalse(int4 == int6);
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix2.equals((Object)matrix0));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix4));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix3));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertFalse(int6 == int7);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertEquals(9, basic2DMatrix2.columns());
      assertEquals(9, basic2DMatrix2.rows());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int0 = 8;
      double double0 = basic2DMatrix0.infinityNorm();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.unit(int0, int0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(8, basic2DMatrix1.rows());
      assertEquals(8, basic2DMatrix1.columns());
      
      int int1 = 778;
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.from2DArray(doubleArray0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotNull(basic2DMatrix2);
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, basic2DMatrix2.columns());
      assertEquals(1, basic2DMatrix2.rows());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic2DMatrix2).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix0 = basic2DMatrix2.to(matrixFactory0);
      assertSame(basic2DMatrix2, matrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(matrix0, basic2DMatrix1);
      assertSame(matrix0, basic2DMatrix2);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertFalse(matrix0.equals((Object)basic2DMatrix1));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, basic2DMatrix2.columns());
      assertEquals(1, basic2DMatrix2.rows());
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      MatrixMatrixOperation<Object> matrixMatrixOperation0 = null;
      // Undeclared exception!
      try { 
        basic2DMatrix1.apply(matrixMatrixOperation0, (Matrix) basic2DMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(9, basic2DMatrix0.columns());
      
      int int0 = 8;
      double double0 = basic2DMatrix0.infinityNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(9, basic2DMatrix0.columns());
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.unit(int0, int0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(8, basic2DMatrix1.rows());
      assertEquals(8, basic2DMatrix1.columns());
      
      int int1 = 778;
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.from2DArray(doubleArray0);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotNull(basic2DMatrix2);
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertEquals(1, doubleArray0.length);
      assertEquals(9, basic2DMatrix2.columns());
      assertEquals(1, basic2DMatrix2.rows());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic2DMatrix1).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic2DMatrix2.to(matrixFactory0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 588;
      int int1 = 1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(int0, int1, int1);
      assertNotNull(basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(588, basic2DMatrix0.rows());
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      LinearSystemSolver linearSystemSolver0 = basic2DMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertNotNull(linearSystemSolver0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(588, basic2DMatrix0.rows());
      assertEquals(588, linearSystemSolver0.equations());
      assertEquals(1, linearSystemSolver0.unknowns());
      
      basic2DMatrix0.setRow(int1, (double) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(588, basic2DMatrix0.rows());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic2DMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix0 = basic2DMatrix0.to(matrixFactory0);
      assertSame(basic2DMatrix0, matrix0);
      assertSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(588, basic2DMatrix0.rows());
      assertEquals(1, matrix0.columns());
      assertEquals(588, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      int int0 = 0;
      double[] doubleArray0 = new double[5];
      double double0 = 3427.31316631;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      Matrix matrix0 = Matrix.from1DArray(int0, int0, doubleArray0);
      assertNotNull(matrix0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertArrayEquals(new double[] {3427.31316631, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = matrix0.foldRows(vectorAccumulator0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertArrayEquals(new double[] {3427.31316631, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double1 = 0.0;
      boolean boolean0 = basic2DMatrix0.equals(matrix0, double1);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertArrayEquals(new double[] {3427.31316631, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = 16;
      int int2 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(int1, int2);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotNull(denseMatrix0);
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(16, denseMatrix0.rows());
      
      int int3 = 1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) int3;
      doubleArray2[1] = (double) int3;
      double double2 = Double.POSITIVE_INFINITY;
      doubleArray2[2] = double2;
      doubleArray2[3] = (double) int3;
      doubleArray2[4] = (double) int3;
      doubleArray2[5] = (double) int3;
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.from1DArray(int3, int3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, denseMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix1.equals((Object)denseMatrix0));
      assertEquals(6, doubleArray2.length);
      assertEquals(1, basic2DMatrix1.columns());
      assertEquals(1, basic2DMatrix1.rows());
      assertArrayEquals(new double[] {1.0, 1.0, Double.POSITIVE_INFINITY, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      
      int int4 = 1;
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.identity(int4);
      assertNotSame(basic2DMatrix2, denseMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotNull(basic2DMatrix2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(basic2DMatrix2.equals((Object)denseMatrix0));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertEquals(1, basic2DMatrix2.columns());
      assertEquals(1, basic2DMatrix2.rows());
      
      double double3 = 0.0;
      basic2DMatrix1.set(int2, int0, double3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(basic2DMatrix1, basic2DMatrix2);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, denseMatrix0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix2));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix1.equals((Object)denseMatrix0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertEquals(6, doubleArray2.length);
      assertEquals(1, basic2DMatrix1.columns());
      assertEquals(1, basic2DMatrix1.rows());
      assertArrayEquals(new double[] {1.0, 1.0, Double.POSITIVE_INFINITY, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      
      double[][] doubleArray3 = basic2DMatrix0.toArray();
      assertNotSame(basic2DMatrix0, basic2DMatrix2);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotNull(doubleArray3);
      assertFalse(basic2DMatrix0.equals((Object)basic2DMatrix2));
      assertFalse(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertEquals(0, doubleArray3.length);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.update(matrixFunction0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      int int1 = 0;
      int int2 = 0;
      int int3 = 493;
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.unit(int2, int3);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.identity(int1);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotNull(basic2DMatrix2);
      assertFalse(int1 == int3);
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix2.rows());
      assertEquals(0, basic2DMatrix2.columns());
      
      int int4 = (-1057);
      // Undeclared exception!
      try { 
        basic2DMatrix0.swapRows(int0, int4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 957;
      double double0 = 818.7089;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(int0, int0, double0);
      assertNotNull(basic2DMatrix0);
      assertEquals(957, basic2DMatrix0.columns());
      assertEquals(957, basic2DMatrix0.rows());
      
      int int1 = 0;
      int int2 = 0;
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.constant(int1, int2, int0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[5];
      double double0 = (-1584.636081);
      doubleArray1[0] = double0;
      double double1 = 1965.9339550463812;
      doubleArray1[1] = double1;
      double double2 = 666.5;
      doubleArray1[2] = double2;
      double double3 = (-1137.752168112);
      doubleArray1[3] = double3;
      double double4 = 1.0;
      doubleArray1[4] = double4;
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
      
      int int0 = 0;
      double double5 = basic2DMatrix0.get(int0, int0);
      assertEquals((-1584.636081), double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
      
      int int1 = 114;
      Matrix matrix0 = basic2DMatrix0.copyOfShape(int1, int0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotNull(matrix0);
      assertFalse(int1 == int0);
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertFalse(int0 == int1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, matrix0.columns());
      assertEquals(114, matrix0.rows());
      assertEquals(5, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(int0, int1);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      basic2DMatrix0.setAll(int1);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.zero(int0, int0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      
      Matrix matrix0 = basic2DMatrix1.rotate();
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(matrix0, basic2DMatrix1);
      assertNotNull(matrix0);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix1));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      int int1 = 0;
      Random random0 = null;
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.randomSymmetric(int1, random0);
      assertNotSame(basic2DMatrix2, matrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotNull(basic2DMatrix2);
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix2.equals((Object)matrix0));
      assertEquals(0, basic2DMatrix2.rows());
      assertEquals(0, basic2DMatrix2.columns());
      
      Basic2DMatrix basic2DMatrix3 = Basic2DMatrix.identity(int1);
      assertNotSame(basic2DMatrix3, basic2DMatrix0);
      assertNotSame(basic2DMatrix3, basic2DMatrix1);
      assertNotSame(basic2DMatrix3, matrix0);
      assertNotSame(basic2DMatrix3, basic2DMatrix2);
      assertNotNull(basic2DMatrix3);
      assertTrue(basic2DMatrix3.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix3.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix3.equals((Object)matrix0));
      assertTrue(basic2DMatrix3.equals((Object)basic2DMatrix2));
      assertEquals(0, basic2DMatrix3.columns());
      assertEquals(0, basic2DMatrix3.rows());
      
      String string0 = "N<x4bi";
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      int int1 = 1595;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      assertFalse(int0 == int1);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(int0, int1, mockRandom0);
      assertNotNull(basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      Matrix matrix0 = basic2DMatrix0.power(int1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.block(matrix0, basic2DMatrix0, basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(matrix0, basic2DMatrix1);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)matrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      
      int int2 = 0;
      int int3 = (-529);
      basic2DMatrix1.swapColumns(int2, int3);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(matrix0, basic2DMatrix1);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, matrix0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertTrue(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix1));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)matrix0));
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = basic2DMatrix0.transform(matrixFunction0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.forEach(consumer0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int0 = 1;
      int int1 = (-1569);
      basic2DMatrix0.swapColumns(int0, int1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      Random random0 = null;
      // Undeclared exception!
      try { 
        Basic2DMatrix.random(int0, int0, random0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 16;
      int int1 = 1822;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      assertFalse(int0 == int1);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      Basic2DMatrix.random(int0, int1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic2DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      long long0 = 3340L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(int0, mockRandom0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int1 = (-3110);
      basic2DMatrix0.swapColumns(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        Basic2DMatrix.from2DArray(doubleArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[5];
      double double0 = 2222.9252;
      doubleArray1[0] = double0;
      double double1 = 424.289957203441;
      doubleArray1[1] = double1;
      double double2 = (-1.0);
      doubleArray1[2] = double2;
      double double3 = 1180.364222464871;
      doubleArray1[3] = double3;
      double double4 = (-1869.499844);
      doubleArray1[4] = double4;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double1;
      doubleArray2[1] = double2;
      doubleArray2[2] = double4;
      doubleArray2[3] = double0;
      doubleArray2[4] = double3;
      doubleArray2[5] = double1;
      doubleArray0[1] = doubleArray2;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, basic2DMatrix0.columns());
      assertEquals(2, basic2DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.toBinary();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1134;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1134, basic2DMatrix0.columns());
      assertEquals(1134, basic2DMatrix0.rows());
      
      // Undeclared exception!
      basic2DMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(int0, int1);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      int int2 = 0;
      int int3 = (-183);
      int int4 = 0;
      // Undeclared exception!
      try { 
        basic2DMatrix0.slice(int2, int3, int3, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-183][-183..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)65;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-5);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-20);
      byteArray0[3] = byte3;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic2DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Matrix matrix0 = null;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      String string0 = "";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV(string0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      
      MatrixOperation<Matrix> matrixOperation0 = ooPlaceMatricesMultiplication0.partiallyApply(columnMajorSparseMatrix0);
      assertNotNull(matrixOperation0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(int0, int0, mockRandom0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply((DenseMatrix) basic2DMatrix0, (DenseMatrix) basic2DMatrix0);
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(matrix1, basic2DMatrix0);
      assertNotNull(matrix1);
      assertTrue(matrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = matrix1.toColumnMajorSparseMatrix();
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(matrix1, basic2DMatrix0);
      assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      assertNotNull(columnMajorSparseMatrix1);
      assertTrue(basic2DMatrix0.equals((Object)matrix1));
      assertTrue(matrix1.equals((Object)basic2DMatrix0));
      assertTrue(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
      assertEquals(0, columnMajorSparseMatrix1.columns());
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix1.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(matrix0, matrix0, matrix1, matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      double double0 = basic2DMatrix0.minInRow(int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      Matrix matrix0 = basic2DMatrix0.multiplyByItsTranspose();
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      int int1 = 0;
      int int2 = basic2DMatrix0.rank();
      assertEquals(0, int2);
      assertNotSame(basic2DMatrix0, matrix0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      Matrix matrix1 = basic2DMatrix0.insert(matrix0, int0, int0, int0, int0, int1, int1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, basic2DMatrix0);
      assertNotNull(matrix1);
      assertTrue(int0 == int2);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertTrue(int1 == int2);
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      
      int int3 = (-2042);
      basic2DMatrix0.swapColumns(int0, int3);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, matrix1);
      assertFalse(int0 == int3);
      assertTrue(int0 == int2);
      assertTrue(basic2DMatrix0.equals((Object)matrix1));
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.copyOfShape(int0, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-2042
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(string0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      int int0 = 1780;
      int int1 = 439;
      double double0 = (-2909.0);
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.constant(int0, int1, double0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(439, basic2DMatrix1.columns());
      assertEquals(1780, basic2DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      Matrix matrix0 = basic2DMatrix0.copyOfShape(int0, int0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.random(int0, int0, mockRandom0);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)matrix0));
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int1 = (-3110);
      basic2DMatrix0.swapColumns(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2028);
      double double0 = 1462.349583916882;
      // Undeclared exception!
      try { 
        Basic2DMatrix.constant(int0, int1, double0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-3406);
      // Undeclared exception!
      try { 
        Basic2DMatrix.diagonal(int0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-3014);
      int int1 = 1345;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      // Undeclared exception!
      try { 
        Basic2DMatrix.from1DArray(int0, int1, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from1DArray(int0, int1, doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      DenseMatrix denseMatrix0 = DenseMatrix.zero(int1, int0);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotNull(denseMatrix0);
      assertTrue(denseMatrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      
      Matrix matrix0 = basic2DMatrix0.copyOfRows(int0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotNull(matrix0);
      assertTrue(basic2DMatrix0.equals((Object)denseMatrix0));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int2 = 0;
      Matrix matrix1 = basic2DMatrix0.divide(int2);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, basic2DMatrix0);
      assertNotSame(matrix1, matrix0);
      assertNotNull(matrix1);
      assertTrue(basic2DMatrix0.equals((Object)denseMatrix0));
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)denseMatrix0));
      assertTrue(matrix1.equals((Object)basic2DMatrix0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      basic2DMatrix0.swapRows(int1, int2);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, matrix1);
      assertTrue(basic2DMatrix0.equals((Object)denseMatrix0));
      assertTrue(basic2DMatrix0.equals((Object)matrix1));
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int3 = (-280);
      String string0 = "Nhr'";
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV(string0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.random(int0, int0, mockRandom0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(1, basic2DMatrix1.columns());
      assertEquals(1, basic2DMatrix1.rows());
      
      int int1 = 0;
      double double0 = basic2DMatrix1.get(int1, int1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(int1 == int0);
      assertEquals(1, basic2DMatrix1.columns());
      assertEquals(1, basic2DMatrix1.rows());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      MatrixInverter matrixInverter0 = basic2DMatrix1.withInverter(linearAlgebra_InverterFactory0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(matrixInverter0);
      assertFalse(int0 == int1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(1, basic2DMatrix1.columns());
      assertEquals(1, basic2DMatrix1.rows());
      
      double double1 = 0.0;
      // Undeclared exception!
      try { 
        mockRandom0.doubles((double) int0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 833;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      Basic2DMatrix.random(int0, int0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[4];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      double double2 = 2299.0239;
      doubleArray1[2] = double2;
      double double3 = 0.0;
      doubleArray1[3] = double3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double4 = 1.0;
      doubleArray2[0] = double4;
      doubleArray2[1] = double1;
      doubleArray2[2] = double1;
      doubleArray2[3] = double3;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = double4;
      doubleArray3[1] = double1;
      doubleArray3[2] = double3;
      doubleArray3[3] = double3;
      doubleArray3[4] = double1;
      doubleArray3[5] = double4;
      doubleArray3[6] = double4;
      doubleArray3[7] = double1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = double0;
      double double5 = (-1642.32382251698);
      doubleArray4[1] = double5;
      doubleArray4[2] = double0;
      doubleArray0[3] = doubleArray4;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, basic2DMatrix0.rows());
      assertEquals(4, basic2DMatrix0.columns());
      
      int int0 = 0;
      Vector vector0 = basic2DMatrix0.getRow(int0);
      assertNotNull(vector0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, basic2DMatrix0.rows());
      assertEquals(4, basic2DMatrix0.columns());
      assertEquals(4, vector0.length());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 9;
      int int1 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from1DArray(int0, int1, doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertArrayEquals(new double[] {9.0, 9.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int2 = 0;
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.constant(int2, int1, doubleArray0[3]);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertArrayEquals(new double[] {9.0, 9.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int3 = 1;
      Vector vector0 = basic2DMatrix1.getColumn(int3);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(vector0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, vector0.length());
      assertArrayEquals(new double[] {9.0, 9.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = basic2DMatrix1.sum();
      assertEquals(0.0, double0, 0.01);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertArrayEquals(new double[] {9.0, 9.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      DenseMatrix denseMatrix0 = DenseMatrix.unit(int0, int2);
      assertNotSame(denseMatrix0, basic2DMatrix1);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotNull(denseMatrix0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertTrue(denseMatrix0.equals((Object)basic2DMatrix0));
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix1));
      assertEquals(9, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      double[][] doubleArray1 = new double[3][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.from2DArray(doubleArray1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, denseMatrix0);
      assertNotNull(basic2DMatrix2);
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertFalse(basic2DMatrix2.equals((Object)denseMatrix0));
      assertEquals(3, doubleArray1.length);
      assertEquals(4, basic2DMatrix2.columns());
      assertEquals(3, basic2DMatrix2.rows());
      
      double[][] doubleArray2 = basic2DMatrix1.toArray();
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(basic2DMatrix1, denseMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix2);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(doubleArray2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(basic2DMatrix1.equals((Object)denseMatrix0));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix2));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertArrayEquals(new double[] {9.0, 9.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Vector vector1 = basic2DMatrix0.getRow(int1);
      assertNotSame(vector1, vector0);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix0, basic2DMatrix2);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotNull(vector1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertTrue(vector1.equals((Object)vector0));
      assertFalse(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix0.equals((Object)denseMatrix0));
      assertFalse(basic2DMatrix0.equals((Object)basic2DMatrix2));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, vector1.length());
      assertEquals(9, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertArrayEquals(new double[] {9.0, 9.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      int int1 = (-635);
      // Undeclared exception!
      try { 
        Basic2DMatrix.zero(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)110;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-107);
      byteArray0[1] = byte1;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic2DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      int int1 = 2145;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(int0, int1, int1);
      assertNotNull(basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      double[][] doubleArray0 = basic2DMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      String string0 = "5}2*NQ";
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-2797);
      int int1 = 0;
      // Undeclared exception!
      try { 
        Basic2DMatrix.unit(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-256);
      int int1 = 373;
      long long0 = (-1801L);
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.random(int0, int1, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[4];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = 1562.695551;
      doubleArray1[1] = double1;
      double double2 = (-4467.664636091016);
      doubleArray1[2] = double2;
      double double3 = 0.0;
      doubleArray1[3] = double3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double0;
      doubleArray2[1] = double3;
      doubleArray2[2] = double2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = double1;
      doubleArray3[1] = double3;
      doubleArray3[2] = double3;
      doubleArray3[3] = double0;
      doubleArray3[4] = double0;
      doubleArray3[5] = double1;
      doubleArray3[6] = double0;
      doubleArray3[7] = double0;
      doubleArray3[8] = double3;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = double1;
      doubleArray4[1] = double3;
      doubleArray4[2] = double1;
      doubleArray4[3] = double3;
      doubleArray4[4] = double0;
      doubleArray4[5] = double3;
      doubleArray4[6] = double2;
      doubleArray4[7] = double1;
      doubleArray4[8] = double3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = double2;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      double double4 = (-559.979171471262);
      doubleArray7[0] = double4;
      doubleArray7[1] = double2;
      doubleArray7[2] = double0;
      doubleArray7[3] = double0;
      doubleArray7[4] = double1;
      doubleArray7[5] = double3;
      doubleArray7[6] = double3;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = double4;
      doubleArray8[1] = double3;
      doubleArray8[2] = double1;
      doubleArray8[3] = double3;
      double double5 = 0.0;
      doubleArray8[4] = double5;
      doubleArray8[5] = double2;
      doubleArray8[6] = double2;
      doubleArray0[7] = doubleArray8;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, basic2DMatrix0.rows());
      assertEquals(4, basic2DMatrix0.columns());
      
      int int0 = (-9);
      int int1 = 8;
      // Undeclared exception!
      try { 
        basic2DMatrix0.blankOfShape(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-414);
      int int1 = (-27);
      Basic2DMatrix basic2DMatrix0 = null;
      try {
        basic2DMatrix0 = new Basic2DMatrix(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 1168;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1168, basic2DMatrix0.columns());
      assertEquals(1168, basic2DMatrix0.rows());
      
      double double0 = 0.0;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(int0, double0);
      assertNotNull(cRSMatrix0);
      assertEquals(1168, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(8.561643835616438E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1168, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1168, cRSMatrix0.columns());
      
      VectorIterator vectorIterator0 = basic2DMatrix0.iteratorOfColumn(int0);
      assertNotNull(vectorIterator0);
      assertEquals(1168, basic2DMatrix0.columns());
      assertEquals(1168, basic2DMatrix0.rows());
      
      String string0 = "";
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.fromCSV(string0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      
      int int1 = (-1814);
      // Undeclared exception!
      try { 
        basic2DMatrix1.get(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "CjwmA j{5aB-";
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[5];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = (-2636.0157843277);
      doubleArray1[1] = double1;
      double double2 = 1197.21371;
      doubleArray1[2] = double2;
      double double3 = (-1425.155496);
      doubleArray1[3] = double3;
      double double4 = (-556.2730167235408);
      doubleArray1[4] = double4;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = double1;
      doubleArray3[1] = double0;
      double double5 = 2340.01345;
      doubleArray3[2] = double5;
      doubleArray3[3] = double3;
      doubleArray3[4] = double2;
      doubleArray3[5] = double3;
      doubleArray3[6] = double1;
      doubleArray0[2] = doubleArray3;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, basic2DMatrix0.columns());
      assertEquals(3, basic2DMatrix0.rows());
      
      int int0 = 3023;
      // Undeclared exception!
      try { 
        basic2DMatrix0.copyOfShape(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 3;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(3, basic2DMatrix0.rows());
      assertEquals(3, basic2DMatrix0.columns());
      
      String string0 = "+f3/z3y?T H'{R`)Rij";
      boolean boolean0 = basic2DMatrix0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(3, basic2DMatrix0.rows());
      assertEquals(3, basic2DMatrix0.columns());
      
      Matrix matrix0 = basic2DMatrix0.blank();
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(3, basic2DMatrix0.rows());
      assertEquals(3, basic2DMatrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
      
      int int1 = 367;
      int int2 = 2058;
      Matrix matrix1 = basic2DMatrix0.copyOfShape(int2, int1);
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, basic2DMatrix0);
      assertNotNull(matrix1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)basic2DMatrix0));
      assertEquals(3, basic2DMatrix0.rows());
      assertEquals(3, basic2DMatrix0.columns());
      assertEquals(367, matrix1.columns());
      assertEquals(2058, matrix1.rows());
      
      Matrix matrix2 = basic2DMatrix0.copyOfShape(int0, int1);
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(basic2DMatrix0, matrix2);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, basic2DMatrix0);
      assertNotNull(matrix2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(basic2DMatrix0.equals((Object)matrix1));
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(matrix2.equals((Object)matrix1));
      assertFalse(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)basic2DMatrix0));
      assertEquals(3, basic2DMatrix0.rows());
      assertEquals(3, basic2DMatrix0.columns());
      assertEquals(367, matrix2.columns());
      assertEquals(3, matrix2.rows());
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.swapColumns(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV(string0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int0 = 0;
      int int1 = 1;
      Matrix matrix0 = basic2DMatrix0.copyOfShape(int0, int1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 737;
      int int1 = 1060;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(int0, int1);
      assertNotNull(basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(737, basic2DMatrix0.rows());
      assertEquals(1060, basic2DMatrix0.columns());
      
      double[][] doubleArray0 = new double[0][0];
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.from2DArray(doubleArray0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      
      int int2 = (-3341);
      int int3 = 596;
      // Undeclared exception!
      try { 
        basic2DMatrix0.swapRows(int2, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3341
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV(string0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      int int0 = (-834);
      int int1 = (-3482);
      // Undeclared exception!
      try { 
        basic2DMatrix0.set(int0, int1, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -834
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 399;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(399, basic2DMatrix0.rows());
      assertEquals(399, basic2DMatrix0.columns());
      
      // Undeclared exception!
      basic2DMatrix0.power(int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = (-1970.5502380261423);
      doubleArray2[0] = double0;
      double double1 = (-2455.620562507518);
      doubleArray2[1] = double1;
      double double2 = 2748.88;
      doubleArray2[2] = double2;
      double double3 = 0.0;
      doubleArray2[3] = double3;
      doubleArray0[1] = doubleArray2;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(2, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int0 = 887;
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.identity(int0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(887, basic2DMatrix1.columns());
      assertEquals(887, basic2DMatrix1.rows());
      
      long long0 = 1295L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      Basic2DMatrix.randomSymmetric(int0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      Basic2DMatrix basic2DMatrix0 = null;
      try {
        basic2DMatrix0 = new Basic2DMatrix(doubleArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = (-780);
      // Undeclared exception!
      try { 
        Basic2DMatrix.identity(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 16;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(16, basic2DMatrix0.columns());
      assertEquals(16, basic2DMatrix0.rows());
      
      basic2DMatrix0.swapColumns(int0, int0);
      assertEquals(16, basic2DMatrix0.columns());
      assertEquals(16, basic2DMatrix0.rows());
      
      String string0 = "#/cd)NJ|1!";
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 949;
      int int1 = 738;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      // Undeclared exception!
      try { 
        Basic2DMatrix.from1DArray(int0, int1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 2395;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        Basic2DMatrix.from1DArray(int0, int0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      int int0 = 0;
      basic2DMatrix0.swapColumns(int0, int0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = (-105);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.random(int0, int0, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int0 = 0;
      Matrix matrix0 = basic2DMatrix0.blankOfShape(int0, int0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[2];
      double double0 = (-1971.749);
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double1;
      doubleArray2[1] = double0;
      doubleArray2[2] = double0;
      doubleArray2[3] = double1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = double1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = double1;
      doubleArray4[1] = double1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = double0;
      doubleArray5[1] = double1;
      double double2 = 3755.67238685303;
      doubleArray5[2] = double2;
      doubleArray5[3] = double1;
      doubleArray5[4] = double0;
      double double3 = 0.0;
      doubleArray5[5] = double3;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = double1;
      doubleArray6[1] = double2;
      doubleArray6[2] = double2;
      doubleArray6[3] = double0;
      doubleArray6[4] = double0;
      double double4 = 682.448253262517;
      doubleArray6[5] = double4;
      doubleArray6[6] = double0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = double1;
      doubleArray8[1] = double2;
      doubleArray8[2] = double3;
      doubleArray0[7] = doubleArray8;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, basic2DMatrix0.rows());
      assertEquals(2, basic2DMatrix0.columns());
      
      double double5 = 1.0;
      basic2DMatrix0.setAll(double5);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, basic2DMatrix0.rows());
      assertEquals(2, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 17;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(int0, mockRandom0);
      assertNotNull(basic2DMatrix0);
      assertEquals(17, basic2DMatrix0.rows());
      assertEquals(17, basic2DMatrix0.columns());
      
      double[][] doubleArray0 = basic2DMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(17, doubleArray0.length);
      assertEquals(17, basic2DMatrix0.rows());
      assertEquals(17, basic2DMatrix0.columns());
      
      Matrix matrix0 = basic2DMatrix0.blankOfShape(int0, int0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(17, basic2DMatrix0.rows());
      assertEquals(17, basic2DMatrix0.columns());
      assertEquals(17, matrix0.columns());
      assertEquals(17, matrix0.rows());
      
      int int1 = 0;
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = basic2DMatrix0.columnMajorIterator();
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotNull(columnMajorMatrixIterator0);
      assertFalse(int0 == int1);
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(17, basic2DMatrix0.rows());
      assertEquals(17, basic2DMatrix0.columns());
      
      double double0 = 1.0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(int1, double0, (Random) mockRandom0);
      assertNotNull(columnMajorSparseMatrix0);
      assertFalse(int1 == int0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Object> matrixMatrixOperation0 = (MatrixMatrixOperation<Object>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 3;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(3, basic2DMatrix0.rows());
      assertEquals(3, basic2DMatrix0.columns());
      
      String string0 = "+f3/z3y?T H'{R`)Rij";
      boolean boolean0 = basic2DMatrix0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(3, basic2DMatrix0.rows());
      assertEquals(3, basic2DMatrix0.columns());
      
      int int1 = 367;
      // Undeclared exception!
      try { 
        basic2DMatrix0.swapColumns(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 1;
      org.evosuite.runtime.Random.setNextRandom(int0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(int0, int0, int0);
      assertNotNull(basic2DMatrix0);
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(1, basic2DMatrix0.columns());
      
      int int1 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = basic2DMatrix0.transformColumn(int1, vectorFunction0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(1, matrix0.columns());
      assertEquals(1, matrix0.rows());
      
      Matrix matrix1 = basic2DMatrix0.kroneckerProduct(matrix0);
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, basic2DMatrix0);
      assertNotSame(matrix1, matrix0);
      assertNotNull(matrix1);
      assertFalse(int0 == int1);
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertFalse(int1 == int0);
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertFalse(matrix1.equals((Object)basic2DMatrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(1, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(1, matrix1.columns());
      assertEquals(1, matrix1.rows());
      
      Matrix matrix2 = basic2DMatrix0.removeFirstColumn();
      assertNotSame(basic2DMatrix0, matrix2);
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix2, basic2DMatrix0);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, matrix1);
      assertNotNull(matrix2);
      assertFalse(int0 == int1);
      assertFalse(basic2DMatrix0.equals((Object)matrix1));
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)basic2DMatrix0));
      assertFalse(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(1, matrix2.rows());
      assertEquals(0, matrix2.columns());
      
      byte[] byteArray0 = basic2DMatrix0.toBinary();
      assertNotSame(basic2DMatrix0, matrix2);
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotNull(byteArray0);
      assertFalse(int0 == int1);
      assertFalse(basic2DMatrix0.equals((Object)matrix2));
      assertFalse(basic2DMatrix0.equals((Object)matrix1));
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(17, byteArray0.length);
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(1, basic2DMatrix0.columns());
      
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.zero(int0, int0);
      assertNotSame(basic2DMatrix1, matrix2);
      assertNotSame(basic2DMatrix1, matrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int0 == int1);
      assertTrue(basic2DMatrix1.equals((Object)matrix0));
      assertFalse(basic2DMatrix1.equals((Object)matrix2));
      assertTrue(basic2DMatrix1.equals((Object)matrix1));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(1, basic2DMatrix1.columns());
      assertEquals(1, basic2DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)16;
      byteArray0[0] = byte0;
      byte byte1 = (byte)71;
      byteArray0[1] = byte1;
      byte byte2 = (byte)111;
      byte byte3 = (byte) (-69);
      byteArray0[3] = byte3;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 0;
      double double0 = (-4160.5629);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(int0, int0, double0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int1 = 0;
      Matrix matrix0 = basic2DMatrix0.blankOfShape(int0, int1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      int int2 = 4798;
      int int3 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int2, int3, int1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotNull(denseMatrix0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertEquals(4798, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      int[] intArray0 = new int[3];
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      double double1 = basic2DMatrix0.fold(matrixAccumulator0);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertFalse(int0 == int2);
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      intArray0[0] = int0;
      int int4 = (-392);
      intArray0[1] = int4;
      intArray0[2] = int1;
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(int0, int0, mockRandom0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      double double0 = 1.0;
      basic2DMatrix0.setAll(double0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 0;
      int int1 = 2460;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from1DArray(int0, int1, doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertArrayEquals(new double[] {0.0, 2460.0, 0.0, 0.0, 2460.0, 0.0}, doubleArray0, 0.01);
      
      Matrix matrix0 = basic2DMatrix0.blankOfRows(int0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(6, doubleArray0.length);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertArrayEquals(new double[] {0.0, 2460.0, 0.0, 0.0, 2460.0, 0.0}, doubleArray0, 0.01);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      int int2 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int2);
      assertNotNull(rowMajorSparseMatrix0);
      assertFalse(int2 == int1);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertFalse(int2 == int1);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      int int3 = 2;
      int int4 = 0;
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)Matrix.constant(int3, int4, doubleArray0[5]);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(basic2DMatrix1.equals((Object)matrix0));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertArrayEquals(new double[] {0.0, 2460.0, 0.0, 0.0, 2460.0, 0.0}, doubleArray0, 0.01);
      
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.block(matrix0, cRSMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, matrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, basic2DMatrix2);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(matrix0, basic2DMatrix1);
      assertNotSame(matrix0, basic2DMatrix2);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(basic2DMatrix2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix2.equals((Object)matrix0));
      assertFalse(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)basic2DMatrix1));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(6, doubleArray0.length);
      assertEquals(0, basic2DMatrix2.rows());
      assertEquals(0, basic2DMatrix2.columns());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertArrayEquals(new double[] {0.0, 2460.0, 0.0, 0.0, 2460.0, 0.0}, doubleArray0, 0.01);
      
      int int5 = (-581);
      // Undeclared exception!
      try { 
        basic2DMatrix2.getRow(int5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -581
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV(string0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int0 = 0;
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.unit(int0, int0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix1.update(matrixFunction0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply((DenseMatrix) basic2DMatrix1, (DenseMatrix) basic2DMatrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(matrix0, basic2DMatrix1);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertTrue(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix1));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      int int1 = 2712;
      int int2 = 0;
      // Undeclared exception!
      try { 
        basic2DMatrix1.insert(matrix0, int0, int1, int0, int1, int2, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 2712
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 141;
      double double0 = 358.573549;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      double double1 = (-3256.308);
      String string0 = "";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV(string0);
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int0 = (-1468);
      Vector vector0 = basic2DMatrix0.toColumnVector();
      assertNotNull(vector0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, vector0.length());
      
      VectorIterator vectorIterator0 = basic2DMatrix0.iteratorOfRow(int0);
      assertNotNull(vectorIterator0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      Matrix matrix0 = basic2DMatrix0.transpose();
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      double double0 = matrix0.maxInColumn(int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.diagonal(int0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = (-1538);
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      int int1 = (-202);
      int int2 = mockRandom0.nextInt();
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = mockRandom0.nextInt(int1);
      assertEquals(1, int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.randomSymmetric(int0, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 16;
      int int1 = 1822;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)16;
      byteArray0[0] = byte0;
      int int2 = 3162;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(int2);
      assertNotNull(basic2DMatrix0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3162, basic2DMatrix0.rows());
      assertEquals(3162, basic2DMatrix0.columns());
      
      int int3 = 1796;
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.unit(int3, int3);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(1796, basic2DMatrix1.columns());
      assertEquals(1796, basic2DMatrix1.rows());
      
      DenseMatrix denseMatrix0 = basic2DMatrix1.toDenseMatrix();
      assertSame(basic2DMatrix1, denseMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertSame(denseMatrix0, basic2DMatrix1);
      assertNotNull(denseMatrix0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertEquals(1796, basic2DMatrix1.columns());
      assertEquals(1796, basic2DMatrix1.rows());
      assertEquals(1796, denseMatrix0.columns());
      assertEquals(1796, denseMatrix0.rows());
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(denseMatrix0, denseMatrix0, basic2DMatrix1, basic2DMatrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
