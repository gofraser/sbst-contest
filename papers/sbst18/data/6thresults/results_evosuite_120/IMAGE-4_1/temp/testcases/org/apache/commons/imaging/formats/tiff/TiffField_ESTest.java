/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:22:23 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = (-3038);
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertNotNull(fieldTypeByte0);
      
      long long0 = 4L;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, long0, long0, byteArray0, byteOrder0, int0);
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4L, tiffField0.getCount());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals(4, tiffField0.getOffset());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4L, tiffField0.getCount());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals(4, tiffField0.getOffset());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertNull(tiffElement0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 0;
      String string0 = ")";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertNotNull(tiffField0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      tiffField0.dump((PrintWriter) mockPrintWriter0);
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      FieldType fieldType0 = mock(FieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fieldType0).toString();
      doReturn((Object) null).when(fieldType0).getValue(any(org.apache.commons.imaging.formats.tiff.TiffField.class));
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Object object0 = tiffField0.getValue();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertNull(object0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 0;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = tiffField0.getTag();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(4, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 1247;
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, byteArray0[1]);
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1247L, tiffField0.getCount());
      assertEquals(1247, tiffField0.getTag());
      assertEquals("Undefined", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1247, tiffField0.getOffset());
      assertEquals(1247, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1247, tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = tiffField0.getTag();
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1247L, tiffField0.getCount());
      assertEquals(1247, tiffField0.getTag());
      assertEquals("Undefined", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1247, tiffField0.getOffset());
      assertEquals(1247, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1247, tiffField0.getBytesLength());
      assertEquals(7, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals(1247, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 2033;
      String string0 = "O8*O/1";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals("O8*O/1", fieldTypeAscii0.getName());
      assertEquals(2033, fieldTypeAscii0.getType());
      assertNotNull(fieldTypeAscii0);
      
      byte byte0 = (byte) (-65);
      byte byte1 = (byte)1;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = byte0;
      TiffField tiffField0 = new TiffField(int0, byte1, fieldTypeAscii0, byte1, byte0, byteArray0, byteOrder0, byteArray0[6]);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals("O8*O/1", fieldTypeAscii0.getName());
      assertEquals(2033, fieldTypeAscii0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(2033, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-65), tiffField0.getOffset());
      assertEquals("O8*O/1", tiffField0.getFieldTypeName());
      assertNotNull(tiffField0);
      assertEquals(7, byteArray0.length);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = tiffField0.getStringValue();
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals("O8*O/1", fieldTypeAscii0.getName());
      assertEquals(2033, fieldTypeAscii0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(2033, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-65), tiffField0.getOffset());
      assertEquals("O8*O/1", tiffField0.getFieldTypeName());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(7, byteArray0.length);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\uFFFD", string1);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 2;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(13, fieldTypeLong0.getType());
      assertNotNull(fieldTypeLong0);
      
      byte[] byteArray0 = new byte[2];
      char[] charArray0 = new char[7];
      char char0 = 'M';
      charArray0[1] = char0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000M\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000M\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, charArray0[1]);
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(13, fieldTypeLong0.getType());
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000M\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, tiffField0.getTag());
      assertEquals(2L, tiffField0.getCount());
      assertEquals(2, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getOffset());
      assertEquals(8, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(77, tiffField0.getSortHint());
      assertEquals("IFD", tiffField0.getFieldTypeName());
      assertNotNull(tiffField0);
      assertEquals(2, byteArray0.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'\u0000', 'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int1 = tiffField0.getSortHint();
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(13, fieldTypeLong0.getType());
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000M\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, tiffField0.getTag());
      assertEquals(2L, tiffField0.getCount());
      assertEquals(2, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getOffset());
      assertEquals(8, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(77, tiffField0.getSortHint());
      assertEquals("IFD", tiffField0.getFieldTypeName());
      assertEquals(2, byteArray0.length);
      assertEquals(7, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(77, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'\u0000', 'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 0;
      String string0 = "H*1!lv";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertEquals("H*1!lv", fieldTypeAscii0.getName());
      assertEquals(0, fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertNotNull(fieldTypeAscii0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-95);
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeAscii0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals("H*1!lv", fieldTypeAscii0.getName());
      assertEquals(0, fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-95), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals("H*1!lv", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = tiffField0.getSortHint();
      assertEquals("H*1!lv", fieldTypeAscii0.getName());
      assertEquals(0, fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-95), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals("H*1!lv", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(3, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-95), int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 548;
      int int1 = 0;
      String string0 = ">jkQ&1l5+9";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertEquals(548, fieldTypeAscii0.getType());
      assertEquals(">jkQ&1l5+9", fieldTypeAscii0.getName());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertNotNull(fieldTypeAscii0);
      assertFalse(int0 == int1);
      
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeAscii0, int0, int1, byteArray0, byteOrder0, int1);
      assertEquals(548, fieldTypeAscii0.getType());
      assertEquals(">jkQ&1l5+9", fieldTypeAscii0.getName());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(548L, tiffField0.getCount());
      assertEquals(548, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(548, tiffField0.getBytesLength());
      assertEquals(">jkQ&1l5+9", tiffField0.getFieldTypeName());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int2 = tiffField0.getOffset();
      assertEquals(548, fieldTypeAscii0.getType());
      assertEquals(">jkQ&1l5+9", fieldTypeAscii0.getName());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(548L, tiffField0.getCount());
      assertEquals(548, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(548, tiffField0.getBytesLength());
      assertEquals(">jkQ&1l5+9", tiffField0.getFieldTypeName());
      assertEquals(0, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 548;
      String string0 = "WjkQ&1l5+9";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(548, fieldTypeAscii0.getType());
      assertEquals("WjkQ&1l5+9", fieldTypeAscii0.getName());
      assertNotNull(fieldTypeAscii0);
      
      byte[] byteArray0 = new byte[0];
      long long0 = (-526L);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeAscii0, int0, long0, byteArray0, byteOrder0, int0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(548, fieldTypeAscii0.getType());
      assertEquals("WjkQ&1l5+9", fieldTypeAscii0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-526), tiffField0.getOffset());
      assertEquals(548, tiffField0.getDirectoryType());
      assertEquals(548, tiffField0.getSortHint());
      assertEquals(548, tiffField0.getTag());
      assertEquals("WjkQ&1l5+9", tiffField0.getFieldTypeName());
      assertEquals(548L, tiffField0.getCount());
      assertEquals(548, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = tiffField0.getOffset();
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(548, fieldTypeAscii0.getType());
      assertEquals("WjkQ&1l5+9", fieldTypeAscii0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-526), tiffField0.getOffset());
      assertEquals(548, tiffField0.getDirectoryType());
      assertEquals(548, tiffField0.getSortHint());
      assertEquals(548, tiffField0.getTag());
      assertEquals("WjkQ&1l5+9", tiffField0.getFieldTypeName());
      assertEquals(548L, tiffField0.getCount());
      assertEquals(548, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(0, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-526), int1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 96;
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertNotNull(fieldTypeByte0);
      
      long long0 = 1L;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)7;
      byteArray0[0] = byte0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, long0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(7, tiffField0.getSortHint());
      assertEquals("Undefined", tiffField0.getFieldTypeName());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(96, tiffField0.getOffset());
      assertEquals(96, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(96, tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = tiffField0.getIntValueOrArraySum();
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(7, tiffField0.getSortHint());
      assertEquals("Undefined", tiffField0.getFieldTypeName());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(96, tiffField0.getOffset());
      assertEquals(96, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(96, tiffField0.getTag());
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 50;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertNotNull(fieldTypeShort0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-100);
      byteArray0[3] = byte0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, byteArray0[4]);
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(50, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(100, tiffField0.getBytesLength());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(50L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-100), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = tiffField0.getIntValueOrArraySum();
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(50, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(100, tiffField0.getBytesLength());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(50L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(8, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-25600), int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-100), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)1;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertNotNull(fieldTypeFloat0);
      
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(byteArray0[3], byteArray0[0], fieldTypeFloat0, byte0, byteArray0[2], byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(0, tiffField0.getOffset());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = tiffField0.getIntValue();
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(0, tiffField0.getOffset());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(8, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 96;
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertNotNull(fieldTypeByte0);
      
      long long0 = 1L;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)7;
      byteArray0[0] = byte0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, long0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(96, tiffField0.getOffset());
      assertEquals(7, tiffField0.getSortHint());
      assertEquals(96, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(96, tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      assertEquals("Undefined", tiffField0.getFieldTypeName());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = tiffField0.getIntValue();
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(96, tiffField0.getOffset());
      assertEquals(7, tiffField0.getSortHint());
      assertEquals(96, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(96, tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      assertEquals("Undefined", tiffField0.getFieldTypeName());
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 1;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte) (-114);
      byteArray0[0] = byte0;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getOffset());
      assertNotNull(tiffField0);
      assertEquals(18, byteArray0.length);
      
      int int1 = tiffField0.getIntValue();
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(18, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-114), int1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 2;
      String string0 = null;
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(int0, string0);
      assertNull(fieldTypeFloat0.getName());
      assertEquals(2, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertNotNull(fieldTypeFloat0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, byteArray0[4]);
      assertNull(fieldTypeFloat0.getName());
      assertEquals(2, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(8, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2, tiffField0.getOffset());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(2L, tiffField0.getCount());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(2, tiffField0.getTag());
      assertEquals(2, tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = tiffField0.getFieldTypeName();
      assertNull(fieldTypeFloat0.getName());
      assertEquals(2, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(8, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2, tiffField0.getOffset());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(2L, tiffField0.getCount());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(2, tiffField0.getTag());
      assertEquals(2, tiffField0.getDirectoryType());
      assertNull(string1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 0;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      FieldType fieldType1 = tiffField0.getFieldType();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      assertNull(fieldType1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      String string0 = ")";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(")", fieldTypeRational0.getName());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertNotNull(tiffField0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      FieldType fieldType0 = tiffField0.getFieldType();
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, fieldType0.getType());
      assertEquals(")", fieldType0.getName());
      assertEquals(8, fieldType0.getSize());
      assertNotNull(fieldType0);
      assertSame(fieldTypeRational0, fieldType0);
      assertSame(fieldType0, fieldTypeRational0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = (-4236);
      String string0 = "d(MJqh$F_";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int0, string0);
      assertEquals((-4236), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("d(MJqh$F_", fieldTypeDouble0.getName());
      assertNotNull(fieldTypeDouble0);
      
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeDouble0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals((-4236), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("d(MJqh$F_", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-33888), tiffField0.getBytesLength());
      assertEquals((-4236L), tiffField0.getCount());
      assertEquals((-4236), tiffField0.getOffset());
      assertEquals((-4236), tiffField0.getTag());
      assertEquals("d(MJqh$F_", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-4236), tiffField0.getSortHint());
      assertEquals((-4236), tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      FieldType fieldType0 = tiffField0.getFieldType();
      assertEquals((-4236), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("d(MJqh$F_", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-33888), tiffField0.getBytesLength());
      assertEquals((-4236L), tiffField0.getCount());
      assertEquals((-4236), tiffField0.getOffset());
      assertEquals((-4236), tiffField0.getTag());
      assertEquals("d(MJqh$F_", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-4236), tiffField0.getSortHint());
      assertEquals((-4236), tiffField0.getDirectoryType());
      assertEquals(8, fieldType0.getSize());
      assertEquals((-4236), fieldType0.getType());
      assertEquals("d(MJqh$F_", fieldType0.getName());
      assertNotNull(fieldType0);
      assertSame(fieldTypeDouble0, fieldType0);
      assertSame(fieldType0, fieldTypeDouble0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 96;
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertNotNull(fieldTypeByte0);
      
      long long0 = 1L;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, long0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(96, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("Undefined", tiffField0.getFieldTypeName());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(96, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(96, tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = tiffField0.getDoubleValue();
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(96, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("Undefined", tiffField0.getFieldTypeName());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(96, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(96, tiffField0.getTag());
      assertEquals(4, byteArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)65;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertNotNull(fieldTypeFloat0);
      
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(byteArray0[3], byteArray0[0], fieldTypeFloat0, byte1, byteArray0[2], byteArray0, byteOrder0, byteArray0[2]);
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(4, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(65, tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = tiffField0.getDoubleValue();
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(4, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(65, tiffField0.getDirectoryType());
      assertEquals(8, byteArray0.length);
      assertFalse(byte1 == byte0);
      assertEquals(9.10844001811131E-44, double0, 0.01);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(6, fieldTypeByte0.getType());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-114);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(byteArray0[4], byte0, fieldTypeByte0, byte1, byteArray0[6], byteArray0, byteOrder0, byteArray0[4]);
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(1L, tiffField0.getCount());
      assertEquals("SByte", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getOffset());
      assertEquals((-114), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(7, byteArray0.length);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = tiffField0.getDoubleValue();
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(1L, tiffField0.getCount());
      assertEquals("SByte", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getOffset());
      assertEquals((-114), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(7, byteArray0.length);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((-114.0), double0, 0.01);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 548;
      String string0 = ">jkQ&1l5+9";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertEquals(548, fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(">jkQ&1l5+9", fieldTypeAscii0.getName());
      assertNotNull(fieldTypeAscii0);
      
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeAscii0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(548, fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(">jkQ&1l5+9", fieldTypeAscii0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(548, tiffField0.getOffset());
      assertEquals(">jkQ&1l5+9", tiffField0.getFieldTypeName());
      assertEquals(548, tiffField0.getDirectoryType());
      assertEquals(548, tiffField0.getSortHint());
      assertEquals(548, tiffField0.getBytesLength());
      assertEquals(548L, tiffField0.getCount());
      assertEquals(548, tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = tiffField0.getDirectoryType();
      assertEquals(548, fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(">jkQ&1l5+9", fieldTypeAscii0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(548, tiffField0.getOffset());
      assertEquals(">jkQ&1l5+9", tiffField0.getFieldTypeName());
      assertEquals(548, tiffField0.getDirectoryType());
      assertEquals(548, tiffField0.getSortHint());
      assertEquals(548, tiffField0.getBytesLength());
      assertEquals(548L, tiffField0.getCount());
      assertEquals(548, tiffField0.getTag());
      assertEquals(0, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals(548, int1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 3352;
      int int1 = (-1350);
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("SRational", fieldTypeRational0.getName());
      assertEquals(10, fieldTypeRational0.getType());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string0 = ">";
      ByteBuffer byteBuffer0 = charset0.encode(string0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(1, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.position());
      assertEquals(1, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(">", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.position());
      assertEquals(1, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(">", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeRational0, int0, int1, byteArray0, byteOrder0, int1);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("SRational", fieldTypeRational0.getName());
      assertEquals(10, fieldTypeRational0.getType());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.position());
      assertEquals(1, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(">", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-1350), tiffField0.getDirectoryType());
      assertEquals("SRational", tiffField0.getFieldTypeName());
      assertEquals(3352L, tiffField0.getCount());
      assertEquals((-1350), tiffField0.getSortHint());
      assertEquals((-1350), tiffField0.getOffset());
      assertEquals(3352, tiffField0.getTag());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(26816, tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      assertEquals(7, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int2 = tiffField0.getDirectoryType();
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("SRational", fieldTypeRational0.getName());
      assertEquals(10, fieldTypeRational0.getType());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.position());
      assertEquals(1, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(">", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-1350), tiffField0.getDirectoryType());
      assertEquals("SRational", tiffField0.getFieldTypeName());
      assertEquals(3352L, tiffField0.getCount());
      assertEquals((-1350), tiffField0.getSortHint());
      assertEquals((-1350), tiffField0.getOffset());
      assertEquals(3352, tiffField0.getTag());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(26816, tiffField0.getBytesLength());
      assertEquals(7, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1350), int2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = (-3038);
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertNotNull(fieldTypeByte0);
      
      long long0 = 0L;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, long0, long0, byteArray0, byteOrder0, int0);
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long long1 = tiffField0.getCount();
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, byteArray0.length);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = (-3038);
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertNotNull(fieldTypeByte0);
      
      long long0 = 4L;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, long0, long0, byteArray0, byteOrder0, int0);
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals((-3038), tiffField0.getSortHint());
      assertEquals(4L, tiffField0.getCount());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(4, tiffField0.getOffset());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long long1 = tiffField0.getCount();
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals((-3038), tiffField0.getSortHint());
      assertEquals(4L, tiffField0.getCount());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(4, tiffField0.getOffset());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals(0, byteArray0.length);
      assertTrue(long1 == long0);
      assertEquals(4L, long1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = (-3038);
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertNotNull(fieldTypeByte0);
      
      long long0 = 0L;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, long0, long0, byteArray0, byteOrder0, int0);
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals((-3038), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-3038), tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = tiffField0.getBytesLength();
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals((-3038), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals(0, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = (-11);
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertNotNull(fieldTypeRational0);
      
      long long0 = 1L;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, long0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-11), tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-11), tiffField0.getDirectoryType());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-11), tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = tiffField0.getBytesLength();
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-11), tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-11), tiffField0.getDirectoryType());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-11), tiffField0.getTag());
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 0;
      int int1 = 50;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)38;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeRational0, int1, int0, byteArray0, byteOrder0, byte0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(38, tiffField0.getSortHint());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(400, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray1 = tiffField0.getByteArrayValue();
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(38, tiffField0.getSortHint());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(400, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getDirectoryType());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(18, byteArray0.length);
      assertEquals(18, byteArray1.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      String string0 = ")";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(0, fieldTypeRational0.getType());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertNotNull(tiffField0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      byte[] byteArray1 = tiffField0.getByteArrayValue();
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 15;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-111);
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(15, tiffField0.getOffset());
      assertEquals(15, tiffField0.getDirectoryType());
      assertEquals((-111), tiffField0.getSortHint());
      assertEquals(15L, tiffField0.getCount());
      assertEquals(15, tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 1;
      int int1 = (-2416);
      int int2 = 10;
      FieldType fieldType0 = FieldType.getFieldType(int2);
      assertEquals(10, fieldType0.getType());
      assertEquals(8, fieldType0.getSize());
      assertEquals("SRational", fieldType0.getName());
      assertNotNull(fieldType0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldType0, int1, int2, byteArray0, byteOrder0, byte0);
      assertEquals(10, fieldType0.getType());
      assertEquals(8, fieldType0.getSize());
      assertEquals("SRational", fieldType0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("SRational", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getTag());
      assertEquals((-2416), tiffField0.getDirectoryType());
      assertEquals(10, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-2416L), tiffField0.getCount());
      assertEquals((-19328), tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      assertEquals(1, byteArray0.length);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.toString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = (-2943);
      FieldType fieldType0 = null;
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals((-2943L), tiffField0.getCount());
      assertEquals((-2943), tiffField0.getTag());
      assertEquals((-2943), tiffField0.getOffset());
      assertEquals((-2943), tiffField0.getSortHint());
      assertEquals((-2943), tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      
      // Undeclared exception!
      try { 
        tiffField0.isLocalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 1;
      String string0 = ")";
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(int0, string0);
      assertEquals(")", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(1, fieldTypeFloat0.getType());
      assertNotNull(fieldTypeFloat0);
      
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(")", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(1, fieldTypeFloat0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getSortHint());
      assertNotNull(tiffField0);
      
      // Undeclared exception!
      try { 
        tiffField0.getValueDescription();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      int int1 = (-4466);
      String string0 = "+?:\\|*P\\pV`vKSss(:";
      FieldTypeByte fieldTypeByte0 = new FieldTypeByte(int1, string0);
      assertEquals("+?:\\|*P\\pV`vKSss(:", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals((-4466), fieldTypeByte0.getType());
      assertNotNull(fieldTypeByte0);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeByte0, int1, int0, byteArray0, byteOrder0, byteArray0[3]);
      assertEquals("+?:\\|*P\\pV`vKSss(:", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals((-4466), fieldTypeByte0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-4466), tiffField0.getDirectoryType());
      assertEquals((-4466L), tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-4466), tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals("+?:\\|*P\\pV`vKSss(:", tiffField0.getFieldTypeName());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getValueDescription();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 0;
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertNotNull(fieldTypeByte0);
      
      long long0 = (-1737L);
      byte[] byteArray0 = new byte[4];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      String string0 = "JG\"N4\\+";
      ByteBuffer byteBuffer0 = charset0.encode(string0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(7, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(7, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(7, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=7 lim=7 cap=7]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.limit());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("JG\"N4\\+", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(7, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=7 lim=7 cap=7]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.limit());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("JG\"N4\\+", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, long0, long0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(7, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=7 lim=7 cap=7]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.limit());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("JG\"N4\\+", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-1737), tiffField0.getBytesLength());
      assertEquals("SByte", tiffField0.getFieldTypeName());
      assertEquals((-1737), tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-1737L), tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = (-1);
      String string0 = "";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals((-1), fieldTypeAscii0.getType());
      assertEquals("", fieldTypeAscii0.getName());
      assertNotNull(fieldTypeAscii0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)96;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeAscii0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals((-1), fieldTypeAscii0.getType());
      assertEquals("", fieldTypeAscii0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-1), tiffField0.getOffset());
      assertEquals((-1), tiffField0.getBytesLength());
      assertEquals((-1), tiffField0.getTag());
      assertEquals(96, tiffField0.getSortHint());
      assertEquals((-1), tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("", tiffField0.getFieldTypeName());
      assertEquals((-1L), tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = (-147);
      String string0 = "ProfileCopyright";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertEquals((-147), fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals("ProfileCopyright", fieldTypeAscii0.getName());
      assertNotNull(fieldTypeAscii0);
      
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeAscii0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals((-147), fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals("ProfileCopyright", fieldTypeAscii0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-147), tiffField0.getOffset());
      assertEquals("ProfileCopyright", tiffField0.getFieldTypeName());
      assertEquals((-147L), tiffField0.getCount());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-147), tiffField0.getSortHint());
      assertEquals((-147), tiffField0.getTag());
      assertEquals((-147), tiffField0.getBytesLength());
      assertEquals((-147), tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 8;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(2, fieldTypeAscii0.getType());
      assertEquals("ASCII", fieldTypeAscii0.getName());
      assertNotNull(fieldTypeAscii0);
      
      long long0 = (-410L);
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeAscii0, long0, long0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(2, fieldTypeAscii0.getType());
      assertEquals("ASCII", fieldTypeAscii0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-410), tiffField0.getBytesLength());
      assertEquals((-410L), tiffField0.getCount());
      assertEquals("ASCII", tiffField0.getFieldTypeName());
      assertEquals(8, tiffField0.getDirectoryType());
      assertEquals((-410), tiffField0.getOffset());
      assertEquals(8, tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = (-11);
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertNotNull(fieldTypeRational0);
      
      long long0 = 1L;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, long0, long0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals((-11), tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-11), tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = (-2226);
      String string0 = "[short[]: ";
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      FieldType fieldType0 = mock(FieldType.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(fieldType0).toString();
      doReturn(mockJapaneseDate0).when(fieldType0).getValue(any(org.apache.commons.imaging.formats.tiff.TiffField.class));
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-2226), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-2226L), tiffField0.getCount());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals((-2226), tiffField0.getOffset());
      assertEquals((-2226), tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = 259L;
      String string0 = "&efo5`m";
      int int0 = (-1231);
      FieldTypeByte fieldTypeByte0 = new FieldTypeByte(int0, string0);
      assertEquals("&efo5`m", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals((-1231), fieldTypeByte0.getType());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, long0, long0, byteArray0, byteOrder0, int0);
      assertEquals("&efo5`m", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals((-1231), fieldTypeByte0.getType());
      assertEquals("&efo5`m", tiffField0.getFieldTypeName());
      assertEquals(259, tiffField0.getOffset());
      assertEquals((-1231), tiffField0.getSortHint());
      assertEquals((-1231), tiffField0.getTag());
      assertEquals((-1231), tiffField0.getDirectoryType());
      assertEquals(259, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(259L, tiffField0.getCount());
      assertNotNull(tiffField0);
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = (-1);
      String string0 = "";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals((-1), fieldTypeAscii0.getType());
      assertEquals("", fieldTypeAscii0.getName());
      assertNotNull(fieldTypeAscii0);
      
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeAscii0, int0, int0, byteArray0, byteOrder0, byteArray0[3]);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals((-1), fieldTypeAscii0.getType());
      assertEquals("", fieldTypeAscii0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-1), tiffField0.getOffset());
      assertEquals("", tiffField0.getFieldTypeName());
      assertEquals((-1), tiffField0.getTag());
      assertEquals((-1), tiffField0.getBytesLength());
      assertEquals((-1L), tiffField0.getCount());
      assertEquals((-1), tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 1;
      String string0 = "NBGx)t*^E6X#MX61";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("NBGx)t*^E6X#MX61", fieldTypeRational0.getName());
      assertEquals(1, fieldTypeRational0.getType());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("NBGx)t*^E6X#MX61", fieldTypeRational0.getName());
      assertEquals(1, fieldTypeRational0.getType());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      assertEquals("NBGx)t*^E6X#MX61", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getOffset());
      assertNotNull(tiffField0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 50;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getTag());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(50, tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 0;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertNotNull(fieldTypeByte0);
      
      long long0 = (-91L);
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, long0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals((-91), tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-91L), tiffField0.getCount());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertNotNull(tiffField0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 2555;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("Long", fieldTypeLong0.getName());
      assertNotNull(fieldTypeLong0);
      
      byte byte0 = (byte)70;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int int1 = 1;
      byte[] byteArray0 = new byte[2];
      TiffField tiffField0 = new TiffField(int1, int0, fieldTypeLong0, int1, int0, byteArray0, byteOrder0, byte0);
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(2555, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(2555, tiffField0.getOffset());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(70, tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(2, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 1353;
      FieldType fieldType0 = null;
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1353L, tiffField0.getCount());
      assertEquals(1353, tiffField0.getTag());
      assertEquals(1353, tiffField0.getDirectoryType());
      assertEquals(1353, tiffField0.getSortHint());
      assertEquals(1353, tiffField0.getOffset());
      assertNotNull(tiffField0);
      
      // Undeclared exception!
      try { 
        tiffField0.getFieldTypeName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 1494;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertNotNull(fieldTypeLong0);
      
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1494L, tiffField0.getCount());
      assertEquals(1494, tiffField0.getDirectoryType());
      assertEquals(1494, tiffField0.getSortHint());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1494, tiffField0.getTag());
      assertEquals(5976, tiffField0.getBytesLength());
      assertEquals(1494, tiffField0.getOffset());
      assertNotNull(tiffField0);
      
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = (-2750);
      String string0 = "";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertEquals("", fieldTypeAscii0.getName());
      assertEquals((-2750), fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertNotNull(fieldTypeAscii0);
      
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeAscii0, int0, int0, byteArray0, byteOrder0, byteArray0[1]);
      assertEquals("", fieldTypeAscii0.getName());
      assertEquals((-2750), fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-2750), tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-2750), tiffField0.getTag());
      assertEquals("", tiffField0.getFieldTypeName());
      assertEquals((-2750), tiffField0.getDirectoryType());
      assertEquals((-2750L), tiffField0.getCount());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-2750), tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 1;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertNotNull(fieldTypeShort0);
      
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1L, tiffField0.getCount());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1, tiffField0.getTag());
      assertEquals(2, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals(2, fieldTypeShort0.getSize());
      assertNotNull(fieldTypeShort0);
      
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      
      // Undeclared exception!
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 3134;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertNotNull(fieldTypeLong0);
      
      long long0 = 2147483647L;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, long0, long0, byteArray0, byteOrder0, byteArray0[1]);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(Integer.MAX_VALUE, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2147483647L, tiffField0.getCount());
      assertEquals(3134, tiffField0.getTag());
      assertEquals((-4), tiffField0.getBytesLength());
      assertEquals(3134, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertNotNull(tiffField0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 34954;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertNotNull(fieldTypeLong0);
      
      long long0 = (-659L);
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, long0, long0, byteArray0, byteOrder0, byteArray0[1]);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(34954, tiffField0.getTag());
      assertEquals(34954, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals((-659L), tiffField0.getCount());
      assertEquals((-659), tiffField0.getOffset());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-2636), tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getByteArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = (-1);
      String string0 = null;
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(int0, string0);
      assertEquals((-1), fieldTypeShort0.getType());
      assertEquals(2, fieldTypeShort0.getSize());
      assertNull(fieldTypeShort0.getName());
      assertNotNull(fieldTypeShort0);
      
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals((-1), fieldTypeShort0.getType());
      assertEquals(2, fieldTypeShort0.getSize());
      assertNull(fieldTypeShort0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals((-1), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-2), tiffField0.getBytesLength());
      assertEquals((-1), tiffField0.getTag());
      assertEquals((-1), tiffField0.getOffset());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals((-1L), tiffField0.getCount());
      assertNotNull(tiffField0);
      
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        tiffField0.dump(printWriter0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 296;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      assertEquals("Double", fieldTypeDouble0.getName());
      assertEquals(12, fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertNotNull(fieldTypeDouble0);
      
      long long0 = (-2678L);
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeDouble0, long0, long0, byteArray0, byteOrder0, int0);
      assertEquals("Double", fieldTypeDouble0.getName());
      assertEquals(12, fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-2678), tiffField0.getOffset());
      assertEquals(296, tiffField0.getDirectoryType());
      assertEquals(296, tiffField0.getSortHint());
      assertEquals(296, tiffField0.getTag());
      assertEquals("Double", tiffField0.getFieldTypeName());
      assertEquals((-2678L), tiffField0.getCount());
      assertEquals((-21424), tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      URI uRI0 = MockURI.aFileURI;
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertNotNull(mockPrintWriter0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) mockPrintWriter0, string0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 4894;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertNotNull(fieldTypeLong0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-89);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-89), tiffField0.getSortHint());
      assertEquals(4894, tiffField0.getDirectoryType());
      assertEquals(19576, tiffField0.getBytesLength());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4894L, tiffField0.getCount());
      assertEquals(4894, tiffField0.getTag());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(4894, tiffField0.getOffset());
      assertNotNull(tiffField0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        tiffField0.dump(printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 50741;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertNotNull(fieldTypeLong0);
      
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50741, tiffField0.getOffset());
      assertEquals(202964, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50741, tiffField0.getSortHint());
      assertEquals(50741, tiffField0.getTag());
      assertEquals(50741, tiffField0.getDirectoryType());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(50741L, tiffField0.getCount());
      assertNotNull(tiffField0);
      
      // Undeclared exception!
      try { 
        tiffField0.dump();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 50;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertNotNull(fieldTypeShort0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, byteArray0[4]);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getTag());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(100, tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      tiffField0.dump(printWriter0, string0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getTag());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(100, tiffField0.getBytesLength());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 2;
      String string0 = null;
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(int0, string0);
      assertEquals(2, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertNull(fieldTypeFloat0.getName());
      assertNotNull(fieldTypeFloat0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, byteArray0[6]);
      assertEquals(2, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertNull(fieldTypeFloat0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(2, tiffField0.getDirectoryType());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(2L, tiffField0.getCount());
      assertEquals(8, tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Object object0 = tiffField0.getValue();
      assertEquals(2, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertNull(fieldTypeFloat0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(2, tiffField0.getDirectoryType());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(2L, tiffField0.getCount());
      assertEquals(8, tiffField0.getBytesLength());
      assertNotNull(object0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Object object1 = PrivateAccess.callMethod((Class<TiffField>) TiffField.class, tiffField0, "getValueDescription", object0, (Class<?>) Object.class);
      assertEquals(2, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertNull(fieldTypeFloat0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(2, tiffField0.getDirectoryType());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(2L, tiffField0.getCount());
      assertEquals(8, tiffField0.getBytesLength());
      assertNotNull(object1);
      assertEquals(8, byteArray0.length);
      assertEquals("0.0, 0.0", object1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[18];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertNotNull(tiffField0);
      assertEquals(18, byteArray0.length);
      
      Object object0 = null;
      Object object1 = PrivateAccess.callMethod((Class<TiffField>) TiffField.class, tiffField0, "getValueDescription", object0, (Class<?>) Object.class);
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertNull(object1);
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-3038);
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-3038), tiffField0.getOffset());
      assertEquals((-3038), tiffField0.getBytesLength());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals((-3038L), tiffField0.getCount());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-3038), tiffField0.getOffset());
      assertEquals((-3038), tiffField0.getBytesLength());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals((-3038L), tiffField0.getCount());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 50;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertNotNull(fieldTypeShort0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, byteArray0[4]);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getTag());
      assertEquals(50L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(100, tiffField0.getBytesLength());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getTag());
      assertEquals(50L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(100, tiffField0.getBytesLength());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(10, fieldTypeRational0.getType());
      assertEquals("SRational", fieldTypeRational0.getName());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(10, fieldTypeRational0.getType());
      assertEquals("SRational", fieldTypeRational0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("SRational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ByteOrder byteOrder1 = tiffField0.getByteOrder();
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(10, fieldTypeRational0.getType());
      assertEquals("SRational", fieldTypeRational0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("SRational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getByteArrayValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertNotNull(fieldTypeFloat0);
      
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(byteArray0[3], byteArray0[0], fieldTypeFloat0, byteArray0[0], byteArray0[2], byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      FieldType fieldType0 = tiffField0.getFieldType();
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals("Float", fieldType0.getName());
      assertEquals(4, fieldType0.getSize());
      assertEquals(11, fieldType0.getType());
      assertNotNull(fieldType0);
      assertSame(fieldTypeFloat0, fieldType0);
      assertSame(fieldType0, fieldTypeFloat0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = (-96);
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(13, fieldTypeLong0.getType());
      assertNotNull(fieldTypeLong0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-65);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(13, fieldTypeLong0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-96), tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-96L), tiffField0.getCount());
      assertEquals((-384), tiffField0.getBytesLength());
      assertEquals((-96), tiffField0.getOffset());
      assertEquals((-96), tiffField0.getTag());
      assertEquals("IFD", tiffField0.getFieldTypeName());
      assertEquals((-65), tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      String string0 = "Unknown value: ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(outputStreamWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) mockPrintWriter0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 0;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 548;
      String string0 = ">jkQ&1l5+9";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(">jkQ&1l5+9", fieldTypeAscii0.getName());
      assertEquals(548, fieldTypeAscii0.getType());
      assertNotNull(fieldTypeAscii0);
      
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeAscii0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(">jkQ&1l5+9", fieldTypeAscii0.getName());
      assertEquals(548, fieldTypeAscii0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(548, tiffField0.getOffset());
      assertEquals(">jkQ&1l5+9", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(548, tiffField0.getBytesLength());
      assertEquals(548, tiffField0.getDirectoryType());
      assertEquals(548, tiffField0.getTag());
      assertEquals(548, tiffField0.getSortHint());
      assertEquals(548L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = tiffField0.getOffset();
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(">jkQ&1l5+9", fieldTypeAscii0.getName());
      assertEquals(548, fieldTypeAscii0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(548, tiffField0.getOffset());
      assertEquals(">jkQ&1l5+9", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(548, tiffField0.getBytesLength());
      assertEquals(548, tiffField0.getDirectoryType());
      assertEquals(548, tiffField0.getTag());
      assertEquals(548, tiffField0.getSortHint());
      assertEquals(548L, tiffField0.getCount());
      assertEquals(0, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals(548, int1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 4861;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("Long", fieldTypeLong0.getName());
      assertNotNull(fieldTypeLong0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4861, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(19444, tiffField0.getBytesLength());
      assertEquals(4861, tiffField0.getTag());
      assertEquals(4861, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4861L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      TagInfo tagInfo0 = tiffField0.getTagInfo();
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4861, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(19444, tiffField0.getBytesLength());
      assertEquals(4861, tiffField0.getTag());
      assertEquals(4861, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4861L, tiffField0.getCount());
      assertFalse(tagInfo0.isOffset());
      assertFalse(tagInfo0.isText());
      assertEquals((-1), tagInfo0.length);
      assertEquals((-1), tagInfo0.tag);
      assertEquals((-1), TagInfo.LENGTH_UNKNOWN);
      assertNotNull(tagInfo0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = (-3038);
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-3038), tiffField0.getBytesLength());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals((-3038L), tiffField0.getCount());
      assertEquals((-3038), tiffField0.getOffset());
      assertEquals((-3038), tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = tiffField0.getTag();
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-3038), tiffField0.getBytesLength());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals((-3038L), tiffField0.getCount());
      assertEquals((-3038), tiffField0.getOffset());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals(0, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-3038), int1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-3038);
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-3038L), tiffField0.getCount());
      assertEquals((-3038), tiffField0.getBytesLength());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-3038), tiffField0.getOffset());
      assertEquals((-3038), tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long long0 = tiffField0.getCount();
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-3038L), tiffField0.getCount());
      assertEquals((-3038), tiffField0.getBytesLength());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-3038), tiffField0.getOffset());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals(0, byteArray0.length);
      assertEquals((-3038L), long0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-11);
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-11), tiffField0.getDirectoryType());
      assertEquals((-88), tiffField0.getBytesLength());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals((-11L), tiffField0.getCount());
      assertEquals((-11), tiffField0.getOffset());
      assertEquals((-11), tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = tiffField0.getBytesLength();
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-11), tiffField0.getDirectoryType());
      assertEquals((-88), tiffField0.getBytesLength());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals((-11L), tiffField0.getCount());
      assertEquals((-11), tiffField0.getOffset());
      assertEquals((-11), tiffField0.getTag());
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-88), int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 2033;
      String string0 = "O8*O/1";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(2033, fieldTypeAscii0.getType());
      assertEquals("O8*O/1", fieldTypeAscii0.getName());
      assertNotNull(fieldTypeAscii0);
      
      byte[] byteArray0 = new byte[12];
      byte byte0 = (byte) (-69);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeAscii0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(2033, fieldTypeAscii0.getType());
      assertEquals("O8*O/1", fieldTypeAscii0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("O8*O/1", tiffField0.getFieldTypeName());
      assertEquals(2033, tiffField0.getTag());
      assertEquals(2033L, tiffField0.getCount());
      assertEquals(2033, tiffField0.getOffset());
      assertEquals((-69), tiffField0.getSortHint());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2033, tiffField0.getBytesLength());
      assertEquals(2033, tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      assertEquals(12, byteArray0.length);
      
      TagInfo tagInfo0 = mock(TagInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tagInfo0).getDescription();
      doReturn((Object) null).when(tagInfo0).getValue(any(org.apache.commons.imaging.formats.tiff.TiffField.class));
      doReturn((String) null, (String) null).when(tagInfo0).toString();
      PrivateAccess.setVariable((Class<TiffField>) TiffField.class, tiffField0, "tagInfo", (Object) tagInfo0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(2033, fieldTypeAscii0.getType());
      assertEquals("O8*O/1", fieldTypeAscii0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("O8*O/1", tiffField0.getFieldTypeName());
      assertEquals(2033, tiffField0.getTag());
      assertEquals(2033L, tiffField0.getCount());
      assertEquals(2033, tiffField0.getOffset());
      assertEquals((-69), tiffField0.getSortHint());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2033, tiffField0.getBytesLength());
      assertEquals(2033, tiffField0.getDirectoryType());
      assertEquals(12, byteArray0.length);
      
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value: null
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertNotNull(fieldTypeFloat0);
      
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(byteArray0[3], byteArray0[0], fieldTypeFloat0, byteArray0[1], byteArray0[2], byteArray0, byteOrder0, byteArray0[2]);
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getOffset());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [F cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertNotNull(fieldTypeFloat0);
      
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(byteArray0[3], byteArray0[0], fieldTypeFloat0, byteArray0[0], byteArray0[2], byteArray0, byteOrder0, byteArray0[2]);
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(0L, tiffField0.getCount());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [F cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 4861;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertNotNull(fieldTypeLong0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4861, tiffField0.getTag());
      assertEquals(4861, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(19444, tiffField0.getBytesLength());
      assertEquals(4861, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4861L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = tiffField0.getIntValueOrArraySum();
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4861, tiffField0.getTag());
      assertEquals(4861, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(19444, tiffField0.getBytesLength());
      assertEquals(4861, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4861L, tiffField0.getCount());
      assertEquals(8, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 0;
      int int1 = 50;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[18];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeRational0, int1, int1, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(400, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      String string0 = ")";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertNotNull(tiffField0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int1 = tiffField0.getIntValueOrArraySum();
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(1, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 2;
      String string0 = null;
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(int0, string0);
      assertNull(fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(2, fieldTypeFloat0.getType());
      assertNotNull(fieldTypeFloat0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, byteArray0[1]);
      assertNull(fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(2, fieldTypeFloat0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2, tiffField0.getOffset());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals(2L, tiffField0.getCount());
      assertEquals(2, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@3906ddc for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = (-326);
      String string0 = "A\"%b` ]t";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int0, string0);
      assertEquals((-326), fieldTypeDouble0.getType());
      assertEquals("A\"%b` ]t", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertNotNull(fieldTypeDouble0);
      
      long long0 = 425L;
      byte[] byteArray0 = new byte[8];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode(string0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(8, byteBuffer0.remaining());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("A\"%b` ]t", charBuffer0.toString());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("A\"%b` ]t", charBuffer0.toString());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.limit());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeDouble0, long0, int0, byteArray0, byteOrder0, byteArray0[5]);
      assertEquals((-326), fieldTypeDouble0.getType());
      assertEquals("A\"%b` ]t", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("A\"%b` ]t", charBuffer0.toString());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.limit());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-326), tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(3400, tiffField0.getBytesLength());
      assertEquals((-326), tiffField0.getTag());
      assertEquals("A\"%b` ]t", tiffField0.getFieldTypeName());
      assertEquals((-326), tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(425L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals((-326), fieldTypeDouble0.getType());
      assertEquals("A\"%b` ]t", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("A\"%b` ]t", charBuffer0.toString());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.limit());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-326), tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(3400, tiffField0.getBytesLength());
      assertEquals((-326), tiffField0.getTag());
      assertEquals("A\"%b` ]t", tiffField0.getFieldTypeName());
      assertEquals((-326), tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(425L, tiffField0.getCount());
      assertNotNull(doubleArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = (-3038);
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertNotNull(fieldTypeByte0);
      
      long long0 = 0L;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, long0, long0, byteArray0, byteOrder0, int0);
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getOffset());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-3038), tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@13dc790e for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 4861;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertNotNull(fieldTypeLong0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(4861, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(4861, tiffField0.getDirectoryType());
      assertEquals(4861, tiffField0.getTag());
      assertEquals(19444, tiffField0.getBytesLength());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4861L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(4861, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(4861, tiffField0.getDirectoryType());
      assertEquals(4861, tiffField0.getTag());
      assertEquals(19444, tiffField0.getBytesLength());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4861L, tiffField0.getCount());
      assertNotNull(doubleArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertNotNull(fieldTypeShort0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)8;
      byteArray0[0] = byte0;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(byteArray0[1], byteArray0[1], fieldTypeShort0, byteArray0[0], byteArray0[1], byteArray0, byteOrder0, byteArray0[4]);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(8L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertEquals(16, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(8L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertEquals(16, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertNotNull(doubleArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new double[] {8.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertNotNull(fieldTypeShort0);
      
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(byteArray0[1], byteArray0[1], fieldTypeShort0, byteArray0[0], byteArray0[1], byteArray0, byteOrder0, byteArray0[4]);
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertNotNull(tiffField0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertNotNull(doubleArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 0;
      int int1 = 50;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)38;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeRational0, int1, int1, byteArray0, byteOrder0, byte0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(38, tiffField0.getSortHint());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(400, tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(38, tiffField0.getSortHint());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(400, tiffField0.getBytesLength());
      assertNotNull(doubleArray0);
      assertEquals(18, byteArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 1;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = new byte[18];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(1, tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      assertEquals(18, byteArray0.length);
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(1, tiffField0.getBytesLength());
      assertNotNull(doubleArray0);
      assertEquals(18, byteArray0.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 2;
      String string0 = null;
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(int0, string0);
      assertEquals(2, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertNull(fieldTypeFloat0.getName());
      assertNotNull(fieldTypeFloat0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, byteArray0[3]);
      assertEquals(2, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertNull(fieldTypeFloat0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2L, tiffField0.getCount());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(8, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2, tiffField0.getOffset());
      assertEquals(2, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(2, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertNull(fieldTypeFloat0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2L, tiffField0.getCount());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(8, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2, tiffField0.getOffset());
      assertEquals(2, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getTag());
      assertNotNull(doubleArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 50;
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getOffset());
      assertEquals("SByte", tiffField0.getFieldTypeName());
      assertEquals(50L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@1b44893c for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 50;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertNotNull(fieldTypeShort0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, byteArray0[4]);
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getTag());
      assertEquals(100, tiffField0.getBytesLength());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(50, tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getTag());
      assertEquals(100, tiffField0.getBytesLength());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(50, tiffField0.getDirectoryType());
      assertNotNull(intArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      String string0 = ")";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(0, fieldTypeRational0.getType());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertNotNull(intArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 1;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = new byte[18];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getOffset());
      assertNotNull(tiffField0);
      assertEquals(18, byteArray0.length);
      
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getOffset());
      assertNotNull(intArray0);
      assertEquals(18, byteArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 2033;
      String string0 = "O8*O/1";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertEquals("O8*O/1", fieldTypeAscii0.getName());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(2033, fieldTypeAscii0.getType());
      assertNotNull(fieldTypeAscii0);
      
      byte byte0 = (byte) (-65);
      byte byte1 = (byte)1;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField(int0, byte1, fieldTypeAscii0, byte1, byte0, byteArray0, byteOrder0, byteArray0[6]);
      assertEquals("O8*O/1", fieldTypeAscii0.getName());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(2033, fieldTypeAscii0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(2033, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-65), tiffField0.getOffset());
      assertEquals("O8*O/1", tiffField0.getFieldTypeName());
      assertEquals(1L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(7, byteArray0.length);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = tiffField0.getStringValue();
      assertEquals("O8*O/1", fieldTypeAscii0.getName());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(2033, fieldTypeAscii0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(2033, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-65), tiffField0.getOffset());
      assertEquals("O8*O/1", tiffField0.getFieldTypeName());
      assertEquals(1L, tiffField0.getCount());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(7, byteArray0.length);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      byte byte0 = (byte) (-13);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      FieldType fieldType0 = mock(FieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fieldType0).toString();
      doReturn((Object) null).when(fieldType0).getValue(any(org.apache.commons.imaging.formats.tiff.TiffField.class));
      byte[] byteArray0 = new byte[8];
      TiffField tiffField0 = new TiffField(int0, byte0, fieldType0, int0, byte0, byteArray0, byteOrder0, byte0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-13), tiffField0.getOffset());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-13), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0L, tiffField0.getCount());
      assertEquals((-13), tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = tiffField0.getStringValue();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-13), tiffField0.getOffset());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-13), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0L, tiffField0.getCount());
      assertEquals((-13), tiffField0.getDirectoryType());
      assertNull(string0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 1503;
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(6, fieldTypeByte0.getType());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, byteArray0[7]);
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1503, tiffField0.getTag());
      assertEquals(1503L, tiffField0.getCount());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1503, tiffField0.getBytesLength());
      assertEquals(1503, tiffField0.getDirectoryType());
      assertEquals("SByte", tiffField0.getFieldTypeName());
      assertEquals(1503, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertNotNull(tiffField0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [B@7aba3c3c
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = (-326);
      String string0 = "A\"%b` ]t";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int0, string0);
      assertEquals("A\"%b` ]t", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals((-326), fieldTypeDouble0.getType());
      assertNotNull(fieldTypeDouble0);
      
      byte[] byteArray0 = new byte[24];
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode(string0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(8, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(8, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("A\"%b` ]t", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("A\"%b` ]t", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeDouble0, int0, int0, byteArray0, byteOrder0, byteArray0[5]);
      assertEquals("A\"%b` ]t", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals((-326), fieldTypeDouble0.getType());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("A\"%b` ]t", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-326L), tiffField0.getCount());
      assertEquals("A\"%b` ]t", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-326), tiffField0.getDirectoryType());
      assertEquals((-2608), tiffField0.getBytesLength());
      assertEquals((-326), tiffField0.getOffset());
      assertEquals((-326), tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(24, byteArray0.length);
      
      String string1 = tiffField0.getTagName();
      assertEquals("A\"%b` ]t", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals((-326), fieldTypeDouble0.getType());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("A\"%b` ]t", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-326L), tiffField0.getCount());
      assertEquals("A\"%b` ]t", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-326), tiffField0.getDirectoryType());
      assertEquals((-2608), tiffField0.getBytesLength());
      assertEquals((-326), tiffField0.getOffset());
      assertEquals((-326), tiffField0.getTag());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(24, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Unknown Tag (0xfffffeba)", string1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertNotNull(fieldTypeShort0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)8;
      byte byte1 = (byte) (-58);
      byteArray0[1] = byte1;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(byte0, byteArray0[1], fieldTypeShort0, byteArray0[2], byteArray0[1], byteArray0, byteOrder0, byteArray0[4]);
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-58), tiffField0.getOffset());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-58), tiffField0.getDirectoryType());
      assertEquals(8, tiffField0.getTag());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(6, byteArray0.length);
      assertFalse(byte0 == byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-58), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = tiffField0.getTagName();
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-58), tiffField0.getOffset());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-58), tiffField0.getDirectoryType());
      assertEquals(8, tiffField0.getTag());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertFalse(byte0 == byte1);
      assertEquals("GPSSatellites", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-58), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      String string0 = ")";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getSortHint());
      assertNotNull(tiffField0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Object object0 = PrivateAccess.callMethod((Class<TiffField>) TiffField.class, tiffField0, "getValueDescription", (Object) byteOrder0, (Class<?>) Object.class);
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getSortHint());
      assertNotNull(object0);
      assertNotSame(string0, object0);
      assertNotSame(object0, string0);
      assertEquals(1, byteArray0.length);
      assertFalse(object0.equals((Object)string0));
      assertEquals("Unknown: java.nio.ByteOrder", object0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 1521;
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = new byte[28];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, byteArray0[3]);
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1521, tiffField0.getOffset());
      assertEquals("SByte", tiffField0.getFieldTypeName());
      assertEquals(1521, tiffField0.getDirectoryType());
      assertEquals(1521, tiffField0.getBytesLength());
      assertEquals(1521, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1521L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(28, byteArray0.length);
      
      String string0 = "5O&e";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      tiffField0.dump((PrintWriter) mockPrintWriter0, string0);
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1521, tiffField0.getOffset());
      assertEquals("SByte", tiffField0.getFieldTypeName());
      assertEquals(1521, tiffField0.getDirectoryType());
      assertEquals(1521, tiffField0.getBytesLength());
      assertEquals(1521, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1521L, tiffField0.getCount());
      assertEquals(28, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = (-3038);
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertNotNull(fieldTypeByte0);
      
      long long0 = 0L;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, long0, long0, byteArray0, byteOrder0, int0);
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getOffset());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      tiffField0.dump();
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getOffset());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-326);
      int int1 = 1410;
      String string0 = "A\"%b` ]t";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int1, string0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("A\"%b` ]t", fieldTypeDouble0.getName());
      assertEquals(1410, fieldTypeDouble0.getType());
      assertNotNull(fieldTypeDouble0);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[24];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode(string0);
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(8, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(8, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("A\"%b` ]t", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("A\"%b` ]t", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeDouble0, int1, int0, byteArray0, byteOrder0, byteArray0[5]);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("A\"%b` ]t", fieldTypeDouble0.getName());
      assertEquals(1410, fieldTypeDouble0.getType());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("A\"%b` ]t", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-326), tiffField0.getDirectoryType());
      assertEquals((-326), tiffField0.getTag());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(11280, tiffField0.getBytesLength());
      assertEquals("A\"%b` ]t", tiffField0.getFieldTypeName());
      assertEquals((-326), tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1410L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(24, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string1 = tiffField0.getValueDescription();
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("A\"%b` ]t", fieldTypeDouble0.getName());
      assertEquals(1410, fieldTypeDouble0.getType());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("A\"%b` ]t", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-326), tiffField0.getDirectoryType());
      assertEquals((-326), tiffField0.getTag());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(11280, tiffField0.getBytesLength());
      assertEquals("A\"%b` ]t", tiffField0.getFieldTypeName());
      assertEquals((-326), tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1410L, tiffField0.getCount());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(24, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0, 0.0, 0.0", string1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 4861;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertNotNull(fieldTypeLong0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(4861, tiffField0.getOffset());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4861L, tiffField0.getCount());
      assertEquals(4861, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(19444, tiffField0.getBytesLength());
      assertEquals(4861, tiffField0.getTag());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      tiffField0.dump();
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(4861, tiffField0.getOffset());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4861L, tiffField0.getCount());
      assertEquals(4861, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(19444, tiffField0.getBytesLength());
      assertEquals(4861, tiffField0.getTag());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 50;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertNotNull(fieldTypeShort0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, byteArray0[4]);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(50, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(100, tiffField0.getBytesLength());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = tiffField0.toString();
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(50, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(100, tiffField0.getBytesLength());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50L, tiffField0.getCount());
      assertNotNull(string0);
      assertEquals(8, byteArray0.length);
      assertEquals("50 (0x32: Unknown Tag): 0, 0, 0, 0 (50 SShort)", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 0;
      int int1 = 50;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)38;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeRational0, int1, int0, byteArray0, byteOrder0, byte0);
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertEquals(400, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(38, tiffField0.getSortHint());
      assertEquals(50L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertNotNull(tiffField0);
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string0 = tiffField0.toString();
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertEquals(400, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(38, tiffField0.getSortHint());
      assertEquals(50L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertNotNull(string0);
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      String string0 = ")";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertNotNull(tiffField0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      String string1 = tiffField0.getValueDescription();
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(1, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 2;
      String string0 = null;
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(int0, string0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(2, fieldTypeFloat0.getType());
      assertNull(fieldTypeFloat0.getName());
      assertNotNull(fieldTypeFloat0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-122);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, byteArray0[4]);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(2, fieldTypeFloat0.getType());
      assertNull(fieldTypeFloat0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(2, tiffField0.getTag());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(2L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(8, tiffField0.getBytesLength());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Float float0 = new Float((double) byte0);
      assertNotNull(float0);
      assertEquals((-122.0F), (float)float0, 0.01F);
      
      Object object0 = PrivateAccess.callMethod((Class<TiffField>) TiffField.class, tiffField0, "getValueDescription", (Object) float0, (Class<?>) Object.class);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(2, fieldTypeFloat0.getType());
      assertNull(fieldTypeFloat0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(2, tiffField0.getTag());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(2L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(8, tiffField0.getBytesLength());
      assertNotNull(object0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 4894;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("Long", fieldTypeLong0.getName());
      assertNotNull(fieldTypeLong0);
      
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(19576, tiffField0.getBytesLength());
      assertEquals(4894, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4894L, tiffField0.getCount());
      assertEquals(4894, tiffField0.getTag());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(4894, tiffField0.getOffset());
      assertNotNull(tiffField0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(int0, byteArray0[1]);
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(19576, tiffField0.getBytesLength());
      assertEquals(4894, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4894L, tiffField0.getCount());
      assertEquals(4894, tiffField0.getTag());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(4894, tiffField0.getOffset());
      assertEquals(4894L, tiffField_OversizeValueElement0.offset);
      assertEquals(0, tiffField_OversizeValueElement0.length);
      assertNotNull(tiffField_OversizeValueElement0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = true;
      String string0 = tiffField_OversizeValueElement0.getElementDescription(boolean0);
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(19576, tiffField0.getBytesLength());
      assertEquals(4894, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4894L, tiffField0.getCount());
      assertEquals(4894, tiffField0.getTag());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(4894, tiffField0.getOffset());
      assertEquals(4894L, tiffField_OversizeValueElement0.offset);
      assertEquals(0, tiffField_OversizeValueElement0.length);
      assertNull(string0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 4861;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertNotNull(fieldTypeLong0);
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4861, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(19444, tiffField0.getBytesLength());
      assertEquals(4861, tiffField0.getTag());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4861L, tiffField0.getCount());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(4861, tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(int0, byteArray0[1]);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4861, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(19444, tiffField0.getBytesLength());
      assertEquals(4861, tiffField0.getTag());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4861L, tiffField0.getCount());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(4861, tiffField0.getDirectoryType());
      assertEquals(0, tiffField_OversizeValueElement0.length);
      assertEquals(4861L, tiffField_OversizeValueElement0.offset);
      assertNotNull(tiffField_OversizeValueElement0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = tiffField_OversizeValueElement0.getElementDescription();
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4861, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(19444, tiffField0.getBytesLength());
      assertEquals(4861, tiffField0.getTag());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4861L, tiffField0.getCount());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(4861, tiffField0.getDirectoryType());
      assertEquals(0, tiffField_OversizeValueElement0.length);
      assertEquals(4861L, tiffField_OversizeValueElement0.offset);
      assertNotNull(string0);
      assertEquals(8, byteArray0.length);
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: Long", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Object object0 = PrivateAccess.callMethod((Class<TiffField>) TiffField.class, tiffField0, "getValueDescription", (Object) string0, (Class<?>) Object.class);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4861, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(19444, tiffField0.getBytesLength());
      assertEquals(4861, tiffField0.getTag());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(4861L, tiffField0.getCount());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(4861, tiffField0.getDirectoryType());
      assertEquals(0, tiffField_OversizeValueElement0.length);
      assertEquals(4861L, tiffField_OversizeValueElement0.offset);
      assertNotNull(object0);
      assertNotSame(string0, object0);
      assertNotSame(object0, string0);
      assertEquals(8, byteArray0.length);
      assertFalse(object0.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = (-3038);
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-3038), tiffField0.getOffset());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals((-3038), tiffField0.getBytesLength());
      assertEquals((-3038L), tiffField0.getCount());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string0 = tiffField0.getFieldTypeName();
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-3038), tiffField0.getOffset());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals((-3038), tiffField0.getBytesLength());
      assertEquals((-3038L), tiffField0.getCount());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      assertEquals("Byte", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 0;
      String string0 = ")";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(0, fieldTypeRational0.getType());
      assertNotNull(fieldTypeRational0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertNotNull(tiffField0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int1 = tiffField0.getDirectoryType();
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(")", fieldTypeRational0.getName());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(")", tiffField0.getFieldTypeName());
      assertEquals(1, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      String string0 = "H*1!lv";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(0, fieldTypeAscii0.getType());
      assertEquals("H*1!lv", fieldTypeAscii0.getName());
      assertNotNull(fieldTypeAscii0);
      
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeAscii0, int0, int0, byteArray0, byteOrder0, byteArray0[1]);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(0, fieldTypeAscii0.getType());
      assertEquals("H*1!lv", fieldTypeAscii0.getName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals("H*1!lv", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = tiffField0.getSortHint();
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals(0, fieldTypeAscii0.getType());
      assertEquals("H*1!lv", fieldTypeAscii0.getName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals("H*1!lv", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(3, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 0;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      assertEquals("0 (0x0: Unknown Tag): ", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = (-3038);
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(1, fieldTypeByte0.getType());
      assertNotNull(fieldTypeByte0);
      
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals("Byte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(1, fieldTypeByte0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-3038), tiffField0.getOffset());
      assertEquals((-3038L), tiffField0.getCount());
      assertEquals((-3038), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-3038), tiffField0.getTag());
      assertEquals((-3038), tiffField0.getBytesLength());
      assertEquals("Byte", tiffField0.getFieldTypeName());
      assertEquals((-3038), tiffField0.getDirectoryType());
      assertNotNull(tiffField0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        tiffField0.dump();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 2555;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertNotNull(fieldTypeLong0);
      
      byte byte0 = (byte)70;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      byte[] byteArray0 = new byte[2];
      TiffField tiffField0 = new TiffField(byte0, byte0, fieldTypeLong0, byte0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2555, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(70, tiffField0.getDirectoryType());
      assertEquals(70, tiffField0.getSortHint());
      assertEquals(280, tiffField0.getBytesLength());
      assertEquals(70, tiffField0.getTag());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(70L, tiffField0.getCount());
      assertNotNull(tiffField0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2555, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(70, tiffField0.getDirectoryType());
      assertEquals(70, tiffField0.getSortHint());
      assertEquals(280, tiffField0.getBytesLength());
      assertEquals(70, tiffField0.getTag());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(70L, tiffField0.getCount());
      assertNotNull(intArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = (-11);
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertNotNull(fieldTypeRational0);
      
      long long0 = 1L;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, long0, long0, byteArray0, byteOrder0, int0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals((-11), tiffField0.getTag());
      assertEquals((-11), tiffField0.getDirectoryType());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-11), tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getOffset());
      assertNotNull(tiffField0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals((-11), tiffField0.getTag());
      assertEquals((-11), tiffField0.getDirectoryType());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-11), tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1L, tiffElement0.offset);
      assertEquals(4, tiffElement0.length);
      assertNotNull(tiffElement0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }
}
