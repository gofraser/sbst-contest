/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:57:16 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.constants.TiffDirectoryType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfo;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoByte;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoSRationals;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 0;
      int int1 = 925;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      
      byte[] byteArray0 = new byte[16];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byteArray0[4] = byteArray0[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeRational0, int1, int1, byteArray0, byteOrder0, byteArray0[6]);
      assertEquals(16, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(925, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(925, tiffField0.getOffset());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(7400, tiffField0.getBytesLength());
      assertEquals(925L, tiffField0.getCount());
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 1190;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      
      long long0 = 1L;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-104);
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertNotNull(charBuffer0);
      assertEquals(1190, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1190, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertEquals(1190, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1190, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, long0, long0, byteArray0, byteOrder0, byte0);
      assertEquals(2, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(1190, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1190, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1190, tiffField0.getTag());
      assertEquals((-104), tiffField0.getSortHint());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1190, tiffField0.getDirectoryType());
      
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(1190, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1190, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1190, tiffField0.getTag());
      assertEquals((-104), tiffField0.getSortHint());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1190, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      assertNotNull(fieldTypeLong0);
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(13, fieldTypeLong0.getType());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)90;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(8, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(13, fieldTypeLong0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(90, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("IFD", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      tiffField0.dump((PrintWriter) mockPrintWriter0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(13, fieldTypeLong0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(90, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("IFD", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u001F0 (0x0: Unknown Tag):  (0 IFD)\n", byteArrayOutputStream0.toString());
      assertEquals(37, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 50;
      FieldType fieldType0 = mock(FieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fieldType0).toString();
      doReturn((Object) null).when(fieldType0).getValue(any(org.apache.commons.imaging.formats.tiff.TiffField.class));
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(3, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getTag());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(50L, tiffField0.getCount());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getOffset());
      
      String string0 = tiffField0.getValueDescription();
      assertEquals(3, byteArray0.length);
      assertNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getTag());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(50L, tiffField0.getCount());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = (-953);
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int0, string0);
      assertNotNull(fieldTypeDouble0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      
      long long0 = 1954L;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeDouble0, long0, int0, byteArray0, byteOrder0, int0);
      assertEquals(2, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1954L, tiffField0.getCount());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals((-953), tiffField0.getTag());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-953), tiffField0.getSortHint());
      assertEquals(15632, tiffField0.getBytesLength());
      assertEquals((-953), tiffField0.getDirectoryType());
      
      String string1 = tiffField0.getValueDescription();
      assertEquals(2, byteArray0.length);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1954L, tiffField0.getCount());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals((-953), tiffField0.getTag());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-953), tiffField0.getSortHint());
      assertEquals(15632, tiffField0.getBytesLength());
      assertEquals((-953), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      String string0 = "yyN?XqzzLs~";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(10, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("yyN?XqzzLs~", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0L, tiffField0.getCount());
      
      Object object0 = tiffField0.getValue();
      assertEquals(10, byteArray0.length);
      assertNotNull(object0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("yyN?XqzzLs~", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)95;
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(9, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(95, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      
      int int1 = tiffField0.getTag();
      assertEquals(9, byteArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(95, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 984;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      assertNotNull(fieldTypeShort0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(3, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(984, tiffField0.getOffset());
      assertEquals(1968, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(984, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(984, tiffField0.getTag());
      assertEquals(984L, tiffField0.getCount());
      
      int int1 = tiffField0.getTag();
      assertEquals(3, byteArray0.length);
      assertEquals(984, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(984, tiffField0.getOffset());
      assertEquals(1968, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(984, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(984, tiffField0.getTag());
      assertEquals(984L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 1190;
      int int1 = 0;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      
      byte[] byteArray0 = new byte[2];
      CharBuffer charBuffer0 = CharBuffer.allocate(int1);
      assertFalse(int1 == int0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertFalse(int1 == int0);
      assertNotNull(byteOrder0);
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeFloat0, int1, int1, byteArray0, byteOrder0, int1);
      assertEquals(2, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(1190, tiffField0.getTag());
      
      int int2 = tiffField0.getSortHint();
      assertEquals(2, byteArray0.length);
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(1190, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 1190;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-104);
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(2, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4760, tiffField0.getBytesLength());
      assertEquals((-104), tiffField0.getSortHint());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1190, tiffField0.getOffset());
      assertEquals(1190, tiffField0.getTag());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(1190L, tiffField0.getCount());
      
      int int1 = tiffField0.getSortHint();
      assertEquals(2, byteArray0.length);
      assertEquals((-104), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4760, tiffField0.getBytesLength());
      assertEquals((-104), tiffField0.getSortHint());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1190, tiffField0.getOffset());
      assertEquals(1190, tiffField0.getTag());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(1190L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 35;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      assertNotNull(fieldTypeLong0);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(13, fieldTypeLong0.getType());
      
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(3, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(13, fieldTypeLong0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("IFD", tiffField0.getFieldTypeName());
      assertEquals(35, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(35, tiffField0.getOffset());
      assertEquals(140, tiffField0.getBytesLength());
      assertEquals(35L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(35, tiffField0.getDirectoryType());
      
      int int1 = tiffField0.getOffset();
      assertEquals(3, byteArray0.length);
      assertEquals(35, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(13, fieldTypeLong0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("IFD", tiffField0.getFieldTypeName());
      assertEquals(35, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(35, tiffField0.getOffset());
      assertEquals(140, tiffField0.getBytesLength());
      assertEquals(35L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(35, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 0;
      int int1 = (-235);
      String string0 = "%ogE\"t";
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(int0, string0);
      assertFalse(int0 == int1);
      assertNotNull(fieldTypeFloat0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(0, fieldTypeFloat0.getType());
      assertEquals("%ogE\"t", fieldTypeFloat0.getName());
      
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeFloat0, int0, int1, byteArray0, byteOrder0, byteArray0[4]);
      assertEquals(6, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(0, fieldTypeFloat0.getType());
      assertEquals("%ogE\"t", fieldTypeFloat0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals((-235), tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("%ogE\"t", tiffField0.getFieldTypeName());
      assertEquals((-235), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      
      int int2 = tiffField0.getOffset();
      assertEquals(6, byteArray0.length);
      assertEquals((-235), int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(0, fieldTypeFloat0.getType());
      assertEquals("%ogE\"t", fieldTypeFloat0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals((-235), tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("%ogE\"t", tiffField0.getFieldTypeName());
      assertEquals((-235), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      int int1 = 50780;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      assertNotNull(fieldTypeLong0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(9, fieldTypeLong0.getType());
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)119;
      byteArray0[0] = byte0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeLong0, int1, int1, byteArray0, byteOrder0, int1);
      assertEquals(4, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)119, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50780, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50780L, tiffField0.getCount());
      assertEquals(50780, tiffField0.getDirectoryType());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(203120, tiffField0.getBytesLength());
      assertEquals(50780, tiffField0.getSortHint());
      
      int int2 = tiffField0.getIntValueOrArraySum();
      assertEquals(4, byteArray0.length);
      assertEquals(119, int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new byte[] {(byte)119, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50780, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50780L, tiffField0.getCount());
      assertEquals(50780, tiffField0.getDirectoryType());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(203120, tiffField0.getBytesLength());
      assertEquals(50780, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 2843;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      assertNotNull(fieldTypeShort0);
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals(2, fieldTypeShort0.getSize());
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-51);
      byteArray0[4] = byte0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-51), (byte)0, (byte)0}, byteArray0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(7, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      
      ByteOrder byteOrder0 = byteBuffer0.order();
      assertEquals(7, byteArray0.length);
      assertNotNull(byteOrder0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-51), (byte)0, (byte)0}, byteArray0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(7, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(7, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-51), (byte)0, (byte)0}, byteArray0);
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals(2, fieldTypeShort0.getSize());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(7, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(2843, tiffField0.getOffset());
      assertEquals("Short", tiffField0.getFieldTypeName());
      assertEquals(5686, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2843, tiffField0.getTag());
      assertEquals(2843, tiffField0.getSortHint());
      assertEquals(2843L, tiffField0.getCount());
      assertEquals(2843, tiffField0.getDirectoryType());
      
      int int1 = tiffField0.getIntValueOrArraySum();
      assertEquals(7, byteArray0.length);
      assertEquals((-13056), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-51), (byte)0, (byte)0}, byteArray0);
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals(2, fieldTypeShort0.getSize());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(7, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(2843, tiffField0.getOffset());
      assertEquals("Short", tiffField0.getFieldTypeName());
      assertEquals(5686, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2843, tiffField0.getTag());
      assertEquals(2843, tiffField0.getSortHint());
      assertEquals(2843L, tiffField0.getCount());
      assertEquals(2843, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 187;
      FieldType fieldType0 = mock(FieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fieldType0).toString();
      doReturn((String) null).when(fieldType0).getName();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)22;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(3, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(187, tiffField0.getDirectoryType());
      assertEquals(187, tiffField0.getTag());
      assertEquals(187, tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(22, tiffField0.getSortHint());
      assertEquals(187L, tiffField0.getCount());
      assertTrue(tiffField0.isLocalValue());
      
      String string0 = tiffField0.getFieldTypeName();
      assertEquals(3, byteArray0.length);
      assertNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(187, tiffField0.getDirectoryType());
      assertEquals(187, tiffField0.getTag());
      assertEquals(187, tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(22, tiffField0.getSortHint());
      assertEquals(187L, tiffField0.getCount());
      assertTrue(tiffField0.isLocalValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = (-2404);
      String string0 = "";
      FieldTypeByte fieldTypeByte0 = new FieldTypeByte(int0, string0);
      assertNotNull(fieldTypeByte0);
      assertEquals("", fieldTypeByte0.getName());
      assertEquals((-2404), fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, int0);
      assertNotNull(tiffField0);
      assertEquals("", fieldTypeByte0.getName());
      assertEquals((-2404), fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-2404), tiffField0.getTag());
      assertEquals((-2404), tiffField0.getSortHint());
      assertEquals((-2404), tiffField0.getOffset());
      assertEquals((-2404L), tiffField0.getCount());
      assertEquals("", tiffField0.getFieldTypeName());
      assertEquals((-2404), tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-2404), tiffField0.getDirectoryType());
      
      String string1 = tiffField0.getFieldTypeName();
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", fieldTypeByte0.getName());
      assertEquals((-2404), fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-2404), tiffField0.getTag());
      assertEquals((-2404), tiffField0.getSortHint());
      assertEquals((-2404), tiffField0.getOffset());
      assertEquals((-2404L), tiffField0.getCount());
      assertEquals("", tiffField0.getFieldTypeName());
      assertEquals((-2404), tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-2404), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 0;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byteArray0[6]);
      assertEquals(9, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      
      FieldType fieldType0 = tiffField0.getFieldType();
      assertEquals(9, byteArray0.length);
      assertSame(fieldTypeRational0, fieldType0);
      assertSame(fieldType0, fieldTypeRational0);
      assertNotNull(fieldType0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(8, fieldType0.getSize());
      assertEquals("Rational", fieldType0.getName());
      assertEquals(5, fieldType0.getType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = (-3430);
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int0, string0);
      assertNotNull(fieldTypeDouble0);
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-3430), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(byte0, byte0, fieldTypeDouble0, byte0, int0, byteArray0, byteOrder0, byteArray0[1]);
      assertEquals(2, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-3430), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(400, tiffField0.getBytesLength());
      assertEquals((-3430), tiffField0.getOffset());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(50, tiffField0.getTag());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getSortHint());
      
      FieldType fieldType0 = tiffField0.getFieldType();
      assertEquals(2, byteArray0.length);
      assertSame(fieldTypeDouble0, fieldType0);
      assertSame(fieldType0, fieldTypeDouble0);
      assertNotNull(fieldType0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-3430), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(400, tiffField0.getBytesLength());
      assertEquals((-3430), tiffField0.getOffset());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(50, tiffField0.getTag());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldType0.getName());
      assertEquals((-3430), fieldType0.getType());
      assertEquals(8, fieldType0.getSize());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 0;
      String string0 = "yyN?XqzzLs~";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      assertEquals(0, fieldTypeRational0.getType());
      
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(7, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals("yyN?XqzzLs~", tiffField0.getFieldTypeName());
      
      FieldType fieldType0 = tiffField0.getFieldType();
      assertEquals(7, byteArray0.length);
      assertSame(fieldTypeRational0, fieldType0);
      assertSame(fieldType0, fieldTypeRational0);
      assertNotNull(fieldType0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals("yyN?XqzzLs~", tiffField0.getFieldTypeName());
      assertEquals(0, fieldType0.getType());
      assertEquals(8, fieldType0.getSize());
      assertEquals("yyN?XqzzLs~", fieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-953);
      int int1 = 1;
      String string0 = "b{Q'~mPB::f5QqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int1, string0);
      assertFalse(int1 == int0);
      assertNotNull(fieldTypeDouble0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'~mPB::f5QqYGF}", fieldTypeDouble0.getName());
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)50;
      byteArray0[0] = byte0;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeDouble0, int1, int0, byteArray0, byteOrder0, byte0);
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'~mPB::f5QqYGF}", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-953), tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-953), tiffField0.getTag());
      assertEquals("b{Q'~mPB::f5QqYGF}", tiffField0.getFieldTypeName());
      
      double double0 = tiffField0.getDoubleValue();
      assertEquals(18, byteArray0.length);
      assertEquals(2.47E-322, double0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'~mPB::f5QqYGF}", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-953), tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-953), tiffField0.getTag());
      assertEquals("b{Q'~mPB::f5QqYGF}", tiffField0.getFieldTypeName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)95;
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(9, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(95, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      
      int int1 = tiffField0.getDirectoryType();
      assertEquals(9, byteArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(95, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 1960;
      String string0 = null;
      FieldTypeByte fieldTypeByte0 = new FieldTypeByte(int0, string0);
      assertNotNull(fieldTypeByte0);
      assertEquals(1960, fieldTypeByte0.getType());
      assertNull(fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, int0);
      assertNotNull(tiffField0);
      assertEquals(1960, fieldTypeByte0.getType());
      assertNull(fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1960, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1960, tiffField0.getTag());
      assertEquals(1960, tiffField0.getBytesLength());
      assertEquals(1960, tiffField0.getSortHint());
      assertEquals(1960L, tiffField0.getCount());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(1960, tiffField0.getDirectoryType());
      
      int int1 = tiffField0.getDirectoryType();
      assertEquals(1960, int1);
      assertTrue(int1 == int0);
      assertEquals(1960, fieldTypeByte0.getType());
      assertNull(fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1960, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1960, tiffField0.getTag());
      assertEquals(1960, tiffField0.getBytesLength());
      assertEquals(1960, tiffField0.getSortHint());
      assertEquals(1960L, tiffField0.getCount());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(1960, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byteArray0[5]);
      assertEquals(8, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      
      long long0 = tiffField0.getCount();
      assertEquals(8, byteArray0.length);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 1190;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      
      byte[] byteArray0 = new byte[8];
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertNotNull(charBuffer0);
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(8, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(4760, tiffField0.getBytesLength());
      assertEquals(1190, tiffField0.getTag());
      assertEquals(1190, tiffField0.getSortHint());
      assertEquals(1190, tiffField0.getOffset());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(1190L, tiffField0.getCount());
      
      long long0 = tiffField0.getCount();
      assertEquals(8, byteArray0.length);
      assertEquals(1190L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(4760, tiffField0.getBytesLength());
      assertEquals(1190, tiffField0.getTag());
      assertEquals(1190, tiffField0.getSortHint());
      assertEquals(1190, tiffField0.getOffset());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(1190L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 1190;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      
      long long0 = 0L;
      byte[] byteArray0 = new byte[2];
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, long0, long0, byteArray0, byteOrder0, int0);
      assertEquals(2, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(1190, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertEquals(1190, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      
      int int1 = tiffField0.getBytesLength();
      assertEquals(2, byteArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(1190, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertEquals(1190, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      int int1 = 1275;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-21);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      assertNotNull(fieldTypeShort0);
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      
      TiffField tiffField0 = new TiffField(byte0, int0, fieldTypeShort0, int1, int0, byteArray0, byteOrder0, byteArray0[1]);
      assertEquals(4, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(2550, tiffField0.getBytesLength());
      assertEquals("Short", tiffField0.getFieldTypeName());
      assertEquals((-21), tiffField0.getTag());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1275L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      
      int int2 = tiffField0.getBytesLength();
      assertEquals(4, byteArray0.length);
      assertEquals(2550, int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(2550, tiffField0.getBytesLength());
      assertEquals("Short", tiffField0.getFieldTypeName());
      assertEquals((-21), tiffField0.getTag());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1275L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      assertNotNull(fieldTypeByte0);
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(9, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Undefined", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      
      ByteOrder byteOrder1 = tiffField0.getByteOrder();
      assertEquals(9, byteArray0.length);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, fieldTypeByte0.getType());
      assertEquals("Undefined", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Undefined", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = (-953);
      int int1 = 1;
      String string0 = "b{Q'~mPB::f5QqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int1, string0);
      assertFalse(int1 == int0);
      assertNotNull(fieldTypeDouble0);
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'~mPB::f5QqYGF}", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeDouble0, int1, int1, byteArray0, byteOrder0, byte0);
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'~mPB::f5QqYGF}", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("b{Q'~mPB::f5QqYGF}", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals((-953), tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      
      byte[] byteArray1 = tiffField0.getByteArrayValue();
      assertEquals(18, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'~mPB::f5QqYGF}", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("b{Q'~mPB::f5QqYGF}", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals((-953), tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 0;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(3, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      
      byte[] byteArray1 = tiffField0.getByteArrayValue();
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 2396;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(0, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2396L, tiffField0.getCount());
      assertEquals(2396, tiffField0.getDirectoryType());
      assertEquals(2396, tiffField0.getSortHint());
      assertEquals(2396, tiffField0.getOffset());
      assertEquals(2396, tiffField0.getTag());
      
      // Undeclared exception!
      try { 
        tiffField0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      assertNotNull(fieldTypeLong0);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(13, fieldTypeLong0.getType());
      
      long long0 = (-517L);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-121);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, long0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(2, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(13, fieldTypeLong0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("IFD", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-517L), tiffField0.getCount());
      assertEquals((-121), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals((-2068), tiffField0.getBytesLength());
      
      // Undeclared exception!
      try { 
        tiffField0.toString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 1190;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      
      long long0 = 1L;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-104);
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, long0, long0, byteArray0, byteOrder0, byte0);
      assertEquals(2, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1190, tiffField0.getTag());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-104), tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      
      // Undeclared exception!
      try { 
        tiffField0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = 48L;
      int int0 = (-1308);
      FieldType fieldType0 = null;
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, long0, int0, byteArray0, byteOrder0, int0);
      assertNotNull(tiffField0);
      assertEquals(48L, tiffField0.getCount());
      assertEquals((-1308), tiffField0.getSortHint());
      assertEquals((-1308), tiffField0.getDirectoryType());
      assertEquals((-1308), tiffField0.getOffset());
      assertEquals((-1308), tiffField0.getTag());
      
      // Undeclared exception!
      try { 
        tiffField0.getValueDescription();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = (-1983);
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertNotNull(fieldTypeRational0);
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byteArray0[1]);
      assertEquals(6, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals((-1983L), tiffField0.getCount());
      assertEquals((-1983), tiffField0.getTag());
      assertEquals((-15864), tiffField0.getBytesLength());
      assertEquals((-1983), tiffField0.getDirectoryType());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-1983), tiffField0.getOffset());
      
      // Undeclared exception!
      try { 
        tiffField0.getValueDescription();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = (-953);
      int int1 = 1;
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int0, string0);
      assertFalse(int0 == int1);
      assertNotNull(fieldTypeDouble0);
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeDouble0, int1, int1, byteArray0, byteOrder0, int1);
      assertEquals(2, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getOffset());
      assertEquals((-953), tiffField0.getTag());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(8, tiffField0.getBytesLength());
      
      // Undeclared exception!
      try { 
        tiffField0.getValueDescription();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 1523;
      FieldType fieldType0 = null;
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertNotNull(tiffField0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1523, tiffField0.getOffset());
      assertEquals(1523, tiffField0.getDirectoryType());
      assertEquals(1523L, tiffField0.getCount());
      assertEquals(1523, tiffField0.getTag());
      assertEquals(1523, tiffField0.getSortHint());
      
      // Undeclared exception!
      try { 
        tiffField0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "SeZHXd7;_Q";
      int int0 = 19;
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.TIFF_DIRECTORY_IFD3;
      TagInfoSRationals tagInfoSRationals0 = new TagInfoSRationals(string0, int0, int0, tiffDirectoryType0);
      assertEquals(19, tagInfoSRationals0.tag);
      assertEquals((-1), TagInfo.LENGTH_UNKNOWN);
      assertEquals(19, tagInfoSRationals0.length);
      assertNotNull(tagInfoSRationals0);
      assertFalse(tagInfoSRationals0.isOffset());
      assertFalse(tagInfoSRationals0.isText());
      
      TagInfoByte tagInfoByte0 = new TagInfoByte(tagInfoSRationals0.name, tagInfoSRationals0.length, tagInfoSRationals0.directoryType);
      assertEquals(19, tagInfoSRationals0.tag);
      assertEquals((-1), TagInfo.LENGTH_UNKNOWN);
      assertEquals(19, tagInfoSRationals0.length);
      assertEquals((-1), TagInfo.LENGTH_UNKNOWN);
      assertEquals(19, tagInfoByte0.tag);
      assertEquals(1, tagInfoByte0.length);
      assertNotNull(tagInfoByte0);
      assertFalse(tagInfoSRationals0.isOffset());
      assertFalse(tagInfoSRationals0.isText());
      assertFalse(tagInfoByte0.isOffset());
      assertFalse(tagInfoByte0.isText());
      
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(tagInfoByte0.LENGTH_UNKNOWN, tagInfoSRationals0.name);
      assertEquals(19, tagInfoSRationals0.tag);
      assertEquals((-1), TagInfo.LENGTH_UNKNOWN);
      assertEquals(19, tagInfoSRationals0.length);
      assertEquals((-1), TagInfo.LENGTH_UNKNOWN);
      assertEquals(19, tagInfoByte0.tag);
      assertEquals(1, tagInfoByte0.length);
      assertNotNull(fieldTypeRational0);
      assertFalse(tagInfoSRationals0.isOffset());
      assertFalse(tagInfoSRationals0.isText());
      assertFalse(tagInfoByte0.isOffset());
      assertFalse(tagInfoByte0.isText());
      assertEquals((-1), fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("SeZHXd7;_Q", fieldTypeRational0.getName());
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(tagInfoByte0.tag, tagInfoSRationals0.length, fieldTypeRational0, tagInfoByte0.LENGTH_UNKNOWN, tagInfoByte0.LENGTH_UNKNOWN, byteArray0, byteOrder0, tagInfoByte0.LENGTH_UNKNOWN);
      assertEquals(19, tagInfoSRationals0.tag);
      assertEquals((-1), TagInfo.LENGTH_UNKNOWN);
      assertEquals(19, tagInfoSRationals0.length);
      assertEquals((-1), TagInfo.LENGTH_UNKNOWN);
      assertEquals(19, tagInfoByte0.tag);
      assertEquals(1, tagInfoByte0.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(tagInfoSRationals0.isOffset());
      assertFalse(tagInfoSRationals0.isText());
      assertFalse(tagInfoByte0.isOffset());
      assertFalse(tagInfoByte0.isText());
      assertEquals((-1), fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("SeZHXd7;_Q", fieldTypeRational0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-1), tiffField0.getSortHint());
      assertEquals((-1L), tiffField0.getCount());
      assertEquals(19, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(19, tiffField0.getTag());
      assertEquals((-8), tiffField0.getBytesLength());
      assertEquals("SeZHXd7;_Q", tiffField0.getFieldTypeName());
      assertEquals((-1), tiffField0.getOffset());
      
      // Undeclared exception!
      try { 
        tiffField0.getValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 50;
      String string0 = null;
      FieldTypeByte fieldTypeByte0 = new FieldTypeByte(int0, string0);
      assertNotNull(fieldTypeByte0);
      assertNull(fieldTypeByte0.getName());
      assertEquals(50, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, int0);
      assertNotNull(tiffField0);
      assertNull(fieldTypeByte0.getName());
      assertEquals(50, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50, tiffField0.getTag());
      assertEquals(50, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(50, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(50, tiffField0.getDirectoryType());
      
      // Undeclared exception!
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 2099761789;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      assertNotNull(fieldTypeLong0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(9, fieldTypeLong0.getType());
      
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byteArray0[1]);
      assertEquals(2, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-190887436), tiffField0.getBytesLength());
      assertEquals(2099761789, tiffField0.getTag());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2099761789, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(2099761789, tiffField0.getDirectoryType());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(2099761789L, tiffField0.getCount());
      
      // Undeclared exception!
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 1;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(3, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getOffset());
      
      // Undeclared exception!
      try { 
        tiffField0.getOversizeValueElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 467;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      assertNotNull(fieldTypeShort0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, int0);
      assertNotNull(tiffField0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(467, tiffField0.getDirectoryType());
      assertEquals(934, tiffField0.getBytesLength());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      assertEquals(467L, tiffField0.getCount());
      assertEquals(467, tiffField0.getOffset());
      assertEquals(467, tiffField0.getTag());
      assertEquals(467, tiffField0.getSortHint());
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = (-1983);
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byteArray0[3]);
      assertEquals(6, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals((-1983L), tiffField0.getCount());
      assertEquals((-1983), tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-1983), tiffField0.getTag());
      assertEquals((-15864), tiffField0.getBytesLength());
      assertEquals((-1983), tiffField0.getDirectoryType());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 0;
      FieldType fieldType0 = null;
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertNotNull(tiffField0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = (-1983);
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)55;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(6, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals((-1983), tiffField0.getTag());
      assertEquals((-15864), tiffField0.getBytesLength());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals((-1983), tiffField0.getOffset());
      assertEquals(55, tiffField0.getSortHint());
      assertEquals((-1983), tiffField0.getDirectoryType());
      assertEquals((-1983L), tiffField0.getCount());
      assertTrue(tiffField0.isLocalValue());
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      String string0 = "yyN?XqzzLs~";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertNotNull(fieldTypeRational0);
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(10, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("yyN?XqzzLs~", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0L, tiffField0.getCount());
      
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [Lorg.apache.commons.imaging.common.RationalNumber; cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 2029;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(5, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(2029L, tiffField0.getCount());
      assertEquals(2029, tiffField0.getDirectoryType());
      assertEquals(2029, tiffField0.getOffset());
      assertEquals(2029, tiffField0.getTag());
      assertEquals(2029, tiffField0.getSortHint());
      
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 2345;
      String string0 = "2,%+>+U8#[";
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(int0, string0);
      assertNotNull(fieldTypeShort0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("2,%+>+U8#[", fieldTypeShort0.getName());
      assertEquals(2345, fieldTypeShort0.getType());
      
      long long0 = 2147483647L;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, long0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(5, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("2,%+>+U8#[", fieldTypeShort0.getName());
      assertEquals(2345, fieldTypeShort0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2345, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("2,%+>+U8#[", tiffField0.getFieldTypeName());
      assertEquals(2345, tiffField0.getDirectoryType());
      assertEquals((-2), tiffField0.getBytesLength());
      assertEquals(2345, tiffField0.getTag());
      assertEquals(2147483647L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = (-3812);
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byteArray0[3]);
      assertEquals(7, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-3812), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-3812), tiffField0.getOffset());
      assertEquals((-3812), tiffField0.getTag());
      assertEquals((-3812L), tiffField0.getCount());
      
      // Undeclared exception!
      try { 
        tiffField0.getFieldTypeName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 0;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)84;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(3, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertEquals(84, tiffField0.getSortHint());
      assertEquals(0L, tiffField0.getCount());
      
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-120);
      byteArray0[3] = byte0;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      assertNotNull(fieldTypeShort0);
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(3, fieldTypeShort0.getType());
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(byteArray0[2], byte0, fieldTypeShort0, byteArray0[3], byteArray0[1], byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(5, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-120), (byte)0}, byteArray0);
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals((-240), tiffField0.getBytesLength());
      assertEquals("Short", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-120L), tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals((-120), tiffField0.getDirectoryType());
      
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 1890;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      assertNotNull(fieldTypeDouble0);
      assertEquals(12, fieldTypeDouble0.getType());
      assertEquals("Double", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      
      long long0 = 1L;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeDouble0, long0, int0, byteArray0, byteOrder0, int0);
      assertEquals(0, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(12, fieldTypeDouble0.getType());
      assertEquals("Double", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1890, tiffField0.getDirectoryType());
      assertEquals(1890, tiffField0.getTag());
      assertEquals(1890, tiffField0.getSortHint());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals("Double", tiffField0.getFieldTypeName());
      assertEquals(1890, tiffField0.getOffset());
      
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = (-1983);
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byteArray0[1]);
      assertEquals(8, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals((-1983L), tiffField0.getCount());
      assertEquals((-1983), tiffField0.getOffset());
      assertEquals((-1983), tiffField0.getTag());
      assertEquals((-15864), tiffField0.getBytesLength());
      assertEquals((-1983), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      
      // Undeclared exception!
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = (-953);
      int int1 = 1;
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int1, string0);
      assertFalse(int1 == int0);
      assertNotNull(fieldTypeDouble0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals(1, fieldTypeDouble0.getType());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeDouble0, int1, int1, byteArray0, byteOrder0, byte0);
      assertEquals(2, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-953), tiffField0.getTag());
      assertEquals(8, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getOffset());
      
      // Undeclared exception!
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 2914;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(0, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2914, tiffField0.getDirectoryType());
      assertEquals(2914, tiffField0.getSortHint());
      assertEquals(2914L, tiffField0.getCount());
      assertEquals(2914, tiffField0.getTag());
      assertEquals(2914, tiffField0.getOffset());
      
      // Undeclared exception!
      try { 
        tiffField0.getByteArrayValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = (-1983);
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(6, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals((-1983), tiffField0.getOffset());
      assertEquals((-1983), tiffField0.getTag());
      assertEquals((-15864), tiffField0.getBytesLength());
      assertEquals((-1983L), tiffField0.getCount());
      assertEquals((-1983), tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-1983), tiffField0.getSortHint());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      
      String string0 = " for: ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) mockPrintWriter0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 2153;
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)2;
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(2, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2153L, tiffField0.getCount());
      assertEquals(2153, tiffField0.getTag());
      assertEquals(2, tiffField0.getSortHint());
      assertEquals(2153, tiffField0.getOffset());
      assertEquals(2153, tiffField0.getDirectoryType());
      
      // Undeclared exception!
      try { 
        tiffField0.dump();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 50;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      assertNotNull(fieldTypeLong0);
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("Long", fieldTypeLong0.getName());
      
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, int0);
      assertNotNull(tiffField0);
      assertEquals(4, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("Long", fieldTypeLong0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(200, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals("Long", tiffField0.getFieldTypeName());
      assertEquals(50, tiffField0.getTag());
      
      String string0 = "q9%3D;S} dqANR'";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) mockPrintWriter0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 0;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      assertNotNull(fieldTypeShort0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(3, fieldTypeShort0.getType());
      
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(1, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("Short", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getBytesLength());
      
      Object object0 = PrivateAccess.callMethod((Class<TiffField>) TiffField.class, tiffField0, "getValueDescription", (Object) byteOrder0, (Class<?>) Object.class);
      assertEquals(1, byteArray0.length);
      assertNull(object0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("Short", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 1190;
      int int1 = 0;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      
      byte[] byteArray0 = new byte[2];
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertFalse(int0 == int1);
      assertNotNull(charBuffer0);
      assertEquals(1190, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertFalse(int0 == int1);
      assertNotNull(byteOrder0);
      assertEquals(1190, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeFloat0, int1, int1, byteArray0, byteOrder0, int1);
      assertEquals(2, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(1190, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1190, tiffField0.getTag());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(1190, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1190, tiffField0.getTag());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      String string0 = "yyN?XqzzLs~";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(7, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals("yyN?XqzzLs~", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      
      ByteOrder byteOrder1 = tiffField0.getByteOrder();
      assertEquals(7, byteArray0.length);
      assertNull(byteOrder1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals("yyN?XqzzLs~", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = (-4648);
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      assertNotNull(fieldTypeByte0);
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(5, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-4648), tiffField0.getTag());
      assertEquals((-4648), tiffField0.getBytesLength());
      assertEquals("SByte", tiffField0.getFieldTypeName());
      assertEquals((-4648), tiffField0.getOffset());
      assertEquals((-4648L), tiffField0.getCount());
      assertEquals((-4648), tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      
      // Undeclared exception!
      try { 
        tiffField0.getByteArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-970);
      FieldType fieldType0 = null;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(4, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-970), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-970L), tiffField0.getCount());
      assertEquals((-970), tiffField0.getOffset());
      assertEquals((-970), tiffField0.getTag());
      
      FieldType fieldType1 = tiffField0.getFieldType();
      assertEquals(4, byteArray0.length);
      assertNull(fieldType1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-970), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-970L), tiffField0.getCount());
      assertEquals((-970), tiffField0.getOffset());
      assertEquals((-970), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 3512;
      FieldType fieldType0 = mock(FieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fieldType0).toString();
      doReturn((Object) null).when(fieldType0).getValue(any(org.apache.commons.imaging.formats.tiff.TiffField.class));
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertNotNull(tiffField0);
      assertEquals(3512, tiffField0.getOffset());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(3512L, tiffField0.getCount());
      assertEquals(3512, tiffField0.getTag());
      assertEquals(3512, tiffField0.getSortHint());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(3512, tiffField0.getDirectoryType());
      
      Object object0 = tiffField0.getValue();
      assertNull(object0);
      assertEquals(3512, tiffField0.getOffset());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(3512L, tiffField0.getCount());
      assertEquals(3512, tiffField0.getTag());
      assertEquals(3512, tiffField0.getSortHint());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(3512, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      assertNotNull(fieldTypeShort0);
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("Short", fieldTypeShort0.getName());
      
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(1, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals("Short", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      
      TagInfo tagInfo0 = tiffField0.getTagInfo();
      assertEquals((-1), tagInfo0.tag);
      assertEquals((-1), TagInfo.LENGTH_UNKNOWN);
      assertEquals((-1), tagInfo0.length);
      assertEquals(1, byteArray0.length);
      assertNotNull(tagInfo0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals("Short", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertFalse(tagInfo0.isText());
      assertFalse(tagInfo0.isOffset());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = (-953);
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int0, string0);
      assertNotNull(fieldTypeDouble0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-953), fieldTypeDouble0.getType());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)67;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeDouble0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(2, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(67, tiffField0.getSortHint());
      assertEquals((-953), tiffField0.getOffset());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals((-953), tiffField0.getDirectoryType());
      assertEquals((-953L), tiffField0.getCount());
      assertEquals((-953), tiffField0.getTag());
      assertEquals((-7624), tiffField0.getBytesLength());
      
      int int1 = tiffField0.getTag();
      assertEquals(2, byteArray0.length);
      assertEquals((-953), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(67, tiffField0.getSortHint());
      assertEquals((-953), tiffField0.getOffset());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals((-953), tiffField0.getDirectoryType());
      assertEquals((-953L), tiffField0.getCount());
      assertEquals((-953), tiffField0.getTag());
      assertEquals((-7624), tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = (-1175);
      String string0 = "N8%K6gkm#1 HOQI,yKM";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertNotNull(fieldTypeAscii0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals((-1175), fieldTypeAscii0.getType());
      assertEquals("N8%K6gkm#1 HOQI,yKM", fieldTypeAscii0.getName());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)53;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeAscii0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(3, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals((-1175), fieldTypeAscii0.getType());
      assertEquals("N8%K6gkm#1 HOQI,yKM", fieldTypeAscii0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-1175), tiffField0.getTag());
      assertEquals((-1175), tiffField0.getBytesLength());
      assertEquals((-1175), tiffField0.getDirectoryType());
      assertEquals("N8%K6gkm#1 HOQI,yKM", tiffField0.getFieldTypeName());
      assertEquals(53, tiffField0.getSortHint());
      assertEquals((-1175L), tiffField0.getCount());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-1175), tiffField0.getOffset());
      
      long long0 = tiffField0.getCount();
      assertEquals(3, byteArray0.length);
      assertEquals((-1175L), long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals((-1175), fieldTypeAscii0.getType());
      assertEquals("N8%K6gkm#1 HOQI,yKM", fieldTypeAscii0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-1175), tiffField0.getTag());
      assertEquals((-1175), tiffField0.getBytesLength());
      assertEquals((-1175), tiffField0.getDirectoryType());
      assertEquals("N8%K6gkm#1 HOQI,yKM", tiffField0.getFieldTypeName());
      assertEquals(53, tiffField0.getSortHint());
      assertEquals((-1175L), tiffField0.getCount());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-1175), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = (-4098);
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byteArray0[5]);
      assertEquals(6, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals((-4098), tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-4098L), tiffField0.getCount());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals((-4098), tiffField0.getTag());
      assertEquals((-32784), tiffField0.getBytesLength());
      assertEquals((-4098), tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      
      int int1 = tiffField0.getBytesLength();
      assertEquals(6, byteArray0.length);
      assertEquals((-32784), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals((-4098), tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-4098L), tiffField0.getCount());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals((-4098), tiffField0.getTag());
      assertEquals((-32784), tiffField0.getBytesLength());
      assertEquals((-4098), tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 3512;
      FieldType fieldType0 = mock(FieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fieldType0).toString();
      doReturn((Object) null).when(fieldType0).getValue(any(org.apache.commons.imaging.formats.tiff.TiffField.class));
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertNotNull(tiffField0);
      assertEquals(3512, tiffField0.getDirectoryType());
      assertEquals(3512, tiffField0.getSortHint());
      assertEquals(3512, tiffField0.getTag());
      assertNull(tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(3512, tiffField0.getOffset());
      assertEquals(3512L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 2843;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      assertNotNull(fieldTypeShort0);
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals(2, fieldTypeShort0.getSize());
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(7, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2843, tiffField0.getDirectoryType());
      assertEquals("Short", tiffField0.getFieldTypeName());
      assertEquals(2843L, tiffField0.getCount());
      assertEquals(2843, tiffField0.getOffset());
      assertEquals(5686, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2843, tiffField0.getTag());
      assertEquals(2843, tiffField0.getSortHint());
      
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [S cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 50;
      FieldType fieldType0 = mock(FieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fieldType0).toString();
      doReturn((Object) null).when(fieldType0).getValue(any(org.apache.commons.imaging.formats.tiff.TiffField.class));
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(3, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(tiffField0.isLocalValue());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(50L, tiffField0.getCount());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(50, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getSortHint());
      
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = (-953);
      int int1 = 1;
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int1, string0);
      assertFalse(int1 == int0);
      assertNotNull(fieldTypeDouble0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      
      byte[] byteArray0 = new byte[18];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeDouble0, int1, int0, byteArray0, byteOrder0, int1);
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-953), tiffField0.getTag());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(8, tiffField0.getBytesLength());
      
      int int2 = tiffField0.getIntValue();
      assertEquals(18, byteArray0.length);
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-953), tiffField0.getTag());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(8, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      int int1 = 50780;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      assertNotNull(fieldTypeLong0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)119;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeLong0, int1, int1, byteArray0, byteOrder0, byte0);
      assertEquals(4, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(119, tiffField0.getSortHint());
      assertEquals(50780L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50780, tiffField0.getDirectoryType());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(50780, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(203120, tiffField0.getBytesLength());
      
      int int2 = tiffField0.getIntValueOrArraySum();
      assertEquals(4, byteArray0.length);
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(119, tiffField0.getSortHint());
      assertEquals(50780L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50780, tiffField0.getDirectoryType());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(50780, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(203120, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-953);
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int0, string0);
      assertNotNull(fieldTypeDouble0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      
      long long0 = 327L;
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte) (-123);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeDouble0, long0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(18, byteArray0.length);
      assertNotNull(tiffField0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(327L, tiffField0.getCount());
      assertEquals((-953), tiffField0.getTag());
      assertEquals((-123), tiffField0.getSortHint());
      assertEquals((-953), tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2616, tiffField0.getBytesLength());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [D@51f7ac23 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      String string0 = "yyN?XqzzLs~";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertNotNull(fieldTypeRational0);
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(7, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0L, tiffField0.getCount());
      assertEquals("yyN?XqzzLs~", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      
      int int1 = tiffField0.getIntValueOrArraySum();
      assertEquals(7, byteArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals("yyN?XqzzLs~", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0L, tiffField0.getCount());
      assertEquals("yyN?XqzzLs~", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-953);
      int int1 = 1;
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int0, string0);
      assertFalse(int0 == int1);
      assertNotNull(fieldTypeDouble0);
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      
      byte[] byteArray0 = new byte[18];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeDouble0, int1, int1, byteArray0, byteOrder0, int0);
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals((-953), tiffField0.getTag());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getOffset());
      assertEquals((-953), tiffField0.getSortHint());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      
      int int2 = tiffField0.getIntValueOrArraySum();
      assertEquals(18, byteArray0.length);
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals((-953), tiffField0.getTag());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getOffset());
      assertEquals((-953), tiffField0.getSortHint());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 0;
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      assertNotNull(fieldTypeByte0);
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(9, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals("SByte", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@761d5a02 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = (-1717986917);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)33;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, byte0, int0, byteArray0, byteOrder0, byteArray0[1]);
      assertEquals(7, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-1717986917), tiffField0.getDirectoryType());
      assertEquals(132, tiffField0.getBytesLength());
      assertEquals(33L, tiffField0.getCount());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals((-1717986917), tiffField0.getOffset());
      assertEquals((-1717986917), tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(7, byteArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertFalse(tiffField0.isLocalValue());
      assertEquals((-1717986917), tiffField0.getDirectoryType());
      assertEquals(132, tiffField0.getBytesLength());
      assertEquals(33L, tiffField0.getCount());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals((-1717986917), tiffField0.getOffset());
      assertEquals((-1717986917), tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-953);
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int0, string0);
      assertNotNull(fieldTypeDouble0);
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      
      long long0 = 327L;
      byte[] byteArray0 = new byte[18];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeDouble0, long0, int0, byteArray0, byteOrder0, int0);
      assertEquals(18, byteArray0.length);
      assertNotNull(tiffField0);
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals(327L, tiffField0.getCount());
      assertEquals((-953), tiffField0.getTag());
      assertEquals((-953), tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2616, tiffField0.getBytesLength());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals((-953), tiffField0.getSortHint());
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(18, byteArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals(327L, tiffField0.getCount());
      assertEquals((-953), tiffField0.getTag());
      assertEquals((-953), tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2616, tiffField0.getBytesLength());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals((-953), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      int int1 = 50780;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      assertNotNull(fieldTypeLong0);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)119;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeLong0, int1, int0, byteArray0, byteOrder0, byte0);
      assertEquals(4, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(119, tiffField0.getSortHint());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(50780L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(203120, tiffField0.getBytesLength());
      assertEquals(50780, tiffField0.getDirectoryType());
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(4, byteArray0.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(119, tiffField0.getSortHint());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(50780L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(203120, tiffField0.getBytesLength());
      assertEquals(50780, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-1717986917);
      byte[] byteArray0 = new byte[7];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, byteArray0[4], int0, byteArray0, byteOrder0, byteArray0[5]);
      assertEquals(7, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals((-1717986917), tiffField0.getOffset());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-1717986917), tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-1717986917), tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Float", tiffField0.getFieldTypeName());
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(7, byteArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals((-1717986917), tiffField0.getOffset());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-1717986917), tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-1717986917), tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Float", tiffField0.getFieldTypeName());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 48130;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      assertNotNull(fieldTypeShort0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, byteArray0[4]);
      assertEquals(6, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(48130, tiffField0.getDirectoryType());
      assertEquals(48130L, tiffField0.getCount());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(48130, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(48130, tiffField0.getTag());
      assertEquals(96260, tiffField0.getBytesLength());
      assertEquals("SShort", tiffField0.getFieldTypeName());
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(6, byteArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(8, fieldTypeShort0.getType());
      assertEquals("SShort", fieldTypeShort0.getName());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(48130, tiffField0.getDirectoryType());
      assertEquals(48130L, tiffField0.getCount());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(48130, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(48130, tiffField0.getTag());
      assertEquals(96260, tiffField0.getBytesLength());
      assertEquals("SShort", tiffField0.getFieldTypeName());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = null;
      int int0 = (-953);
      long long0 = 327L;
      byte[] byteArray0 = new byte[30];
      byte byte0 = (byte) (-123);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertNotNull(fieldTypeRational0);
      assertEquals((-953), fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertNull(fieldTypeRational0.getName());
      
      TiffField tiffField0 = new TiffField(int0, byte0, fieldTypeRational0, long0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(30, byteArray0.length);
      assertNotNull(tiffField0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-953), fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertNull(fieldTypeRational0.getName());
      assertEquals((-953), tiffField0.getTag());
      assertEquals((-123), tiffField0.getSortHint());
      assertEquals(327L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2616, tiffField0.getBytesLength());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals((-123), tiffField0.getDirectoryType());
      assertEquals((-953), tiffField0.getOffset());
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(30, byteArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-953), fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertNull(fieldTypeRational0.getName());
      assertEquals((-953), tiffField0.getTag());
      assertEquals((-123), tiffField0.getSortHint());
      assertEquals(327L, tiffField0.getCount());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2616, tiffField0.getBytesLength());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals((-123), tiffField0.getDirectoryType());
      assertEquals((-953), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = (-953);
      int int1 = 1;
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int1, string0);
      assertFalse(int1 == int0);
      assertNotNull(fieldTypeDouble0);
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeDouble0, int1, int0, byteArray0, byteOrder0, byte0);
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals((-953), tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(18, byteArray0.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals((-953), tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 1190;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      
      byte[] byteArray0 = new byte[8];
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(8, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(1190, tiffField0.getOffset());
      assertEquals(1190, tiffField0.getTag());
      assertEquals(4760, tiffField0.getBytesLength());
      assertEquals(1190, tiffField0.getSortHint());
      assertEquals(1190L, tiffField0.getCount());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@4ba78a2d for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 2843;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      assertNotNull(fieldTypeShort0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(3, fieldTypeShort0.getType());
      
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(5, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2843, tiffField0.getOffset());
      assertEquals(2843, tiffField0.getDirectoryType());
      assertEquals(2843, tiffField0.getTag());
      assertEquals(2843L, tiffField0.getCount());
      assertEquals(2843, tiffField0.getSortHint());
      assertEquals(5686, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals("Short", tiffField0.getFieldTypeName());
      
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(5, byteArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2843, tiffField0.getOffset());
      assertEquals(2843, tiffField0.getDirectoryType());
      assertEquals(2843, tiffField0.getTag());
      assertEquals(2843L, tiffField0.getCount());
      assertEquals(2843, tiffField0.getSortHint());
      assertEquals(5686, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      assertEquals("Short", tiffField0.getFieldTypeName());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 0;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      
      long long0 = 2742L;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)95;
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, long0, long0, byteArray0, byteOrder0, byte0);
      assertEquals(9, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(2742L, tiffField0.getCount());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(95, tiffField0.getSortHint());
      assertEquals(2742, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(21936, tiffField0.getBytesLength());
      
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertNotNull(fieldTypeRational0);
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeRational0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(9, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0L, tiffField0.getCount());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(9, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0L, tiffField0.getCount());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = (-953);
      int int1 = 1;
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int1, string0);
      assertFalse(int1 == int0);
      assertNotNull(fieldTypeDouble0);
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeDouble0, int1, int1, byteArray0, byteOrder0, byte0);
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals((-953), tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getDirectoryType());
      
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(18, byteArray0.length);
      assertEquals(1, intArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals((-953), tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals(1, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 0;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      assertNotNull(fieldTypeLong0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)119;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(4, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(119, tiffField0.getSortHint());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
      
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(4, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(119, tiffField0.getSortHint());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 3512;
      FieldType fieldType0 = mock(FieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fieldType0).toString();
      doReturn((Object) null).when(fieldType0).getValue(any(org.apache.commons.imaging.formats.tiff.TiffField.class));
      byte[] byteArray0 = null;
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldType0, int0, int0, byteArray0, byteOrder0, int0);
      assertNotNull(tiffField0);
      assertTrue(tiffField0.isLocalValue());
      assertEquals(3512, tiffField0.getTag());
      assertEquals(3512, tiffField0.getOffset());
      assertEquals(3512, tiffField0.getSortHint());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(3512, tiffField0.getDirectoryType());
      assertEquals(3512L, tiffField0.getCount());
      
      String string0 = tiffField0.getStringValue();
      assertNull(string0);
      assertTrue(tiffField0.isLocalValue());
      assertEquals(3512, tiffField0.getTag());
      assertEquals(3512, tiffField0.getOffset());
      assertEquals(3512, tiffField0.getSortHint());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(3512, tiffField0.getDirectoryType());
      assertEquals(3512L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-1717986917);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)1;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, byte0, int0, byteArray0, byteOrder0, int0);
      assertEquals(7, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-1717986917), tiffField0.getDirectoryType());
      assertEquals((-1717986917), tiffField0.getOffset());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-1717986917), tiffField0.getSortHint());
      assertEquals((-1717986917), tiffField0.getTag());
      
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): 0.0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 0;
      int int1 = (-841);
      String string0 = "";
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertFalse(int0 == int1);
      assertNotNull(fieldTypeRational0);
      assertEquals("", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)50;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      
      ByteOrder byteOrder0 = byteBuffer0.order();
      assertEquals(8, byteArray0.length);
      assertNotNull(byteOrder0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeRational0, int1, int1, byteArray0, byteOrder0, byte0);
      assertEquals(8, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getTag());
      assertEquals("", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-841), tiffField0.getOffset());
      assertEquals((-841L), tiffField0.getCount());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals((-841), tiffField0.getDirectoryType());
      assertEquals((-6728), tiffField0.getBytesLength());
      
      String string1 = tiffField0.getTagName();
      assertEquals(8, byteArray0.length);
      assertEquals("GPSVersionID", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", fieldTypeRational0.getName());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(0, fieldTypeRational0.getType());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getTag());
      assertEquals("", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-841), tiffField0.getOffset());
      assertEquals((-841L), tiffField0.getCount());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals((-841), tiffField0.getDirectoryType());
      assertEquals((-6728), tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 1190;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      
      byte[] byteArray0 = new byte[8];
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1190, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1190, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(8, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1190, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(4760, tiffField0.getBytesLength());
      assertEquals(1190L, tiffField0.getCount());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(1190, tiffField0.getOffset());
      assertEquals(1190, tiffField0.getTag());
      assertEquals(1190, tiffField0.getSortHint());
      
      String string0 = tiffField0.getValueDescription();
      assertEquals(8, byteArray0.length);
      assertEquals("0.0, 0.0", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1190, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(4760, tiffField0.getBytesLength());
      assertEquals(1190L, tiffField0.getCount());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(1190, tiffField0.getOffset());
      assertEquals(1190, tiffField0.getTag());
      assertEquals(1190, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      assertNotNull(fieldTypeLong0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(9, fieldTypeLong0.getType());
      
      byte[] byteArray0 = new byte[18];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byteArray0[1]);
      assertEquals(18, byteArray0.length);
      assertNotNull(tiffField0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0L, tiffField0.getCount());
      
      Object object0 = PrivateAccess.callMethod((Class<TiffField>) TiffField.class, tiffField0, "getValueDescription", (Object) tiffField0, (Class<?>) Object.class);
      assertEquals(18, byteArray0.length);
      assertEquals("Unknown: org.apache.commons.imaging.formats.tiff.TiffField", object0);
      assertNotNull(object0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 0;
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      assertNotNull(fieldTypeByte0);
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      
      long long0 = 2187L;
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, long0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(9, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("SByte", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2187, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(2187L, tiffField0.getCount());
      
      String string0 = tiffField0.toString();
      assertEquals(9, byteArray0.length);
      assertEquals("0 (0x0: Unknown Tag): 0, 0, 0, 0, 0, 0, 0, 0, 0 (2187 SByte)", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("SByte", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getOffset());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2187, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(2187L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      assertNotNull(fieldTypeByte0);
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      
      byte[] byteArray0 = new byte[14];
      byte byte0 = (byte)0;
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeByte0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(14, byteArray0.length);
      assertNotNull(tiffField0);
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("SByte", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getDirectoryType());
      
      String string0 = "HCUsage";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      tiffField0.dump((PrintWriter) mockPrintWriter0, string0);
      assertEquals(14, byteArray0.length);
      assertEquals(6, fieldTypeByte0.getType());
      assertEquals("SByte", fieldTypeByte0.getName());
      assertEquals(1, fieldTypeByte0.getSize());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("SByte", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = (-953);
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int0, string0);
      assertNotNull(fieldTypeDouble0);
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      
      long long0 = 327L;
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte) (-123);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeDouble0, long0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(18, byteArray0.length);
      assertNotNull(tiffField0);
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2616, tiffField0.getBytesLength());
      assertEquals((-123), tiffField0.getSortHint());
      assertEquals((-953), tiffField0.getDirectoryType());
      assertEquals(327L, tiffField0.getCount());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals((-953), tiffField0.getTag());
      
      String string1 = tiffField0.getValueDescription();
      assertEquals(18, byteArray0.length);
      assertEquals("0.0, 0.0", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2616, tiffField0.getBytesLength());
      assertEquals((-123), tiffField0.getSortHint());
      assertEquals((-953), tiffField0.getDirectoryType());
      assertEquals(327L, tiffField0.getCount());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals((-953), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      int int1 = 50780;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      assertNotNull(fieldTypeLong0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      
      byte[] byteArray0 = new byte[18];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeLong0, int1, int1, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50780, tiffField0.getDirectoryType());
      assertEquals(50780L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(203120, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50780, tiffField0.getOffset());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      
      tiffField0.dump();
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(50780, tiffField0.getDirectoryType());
      assertEquals(50780L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(203120, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50780, tiffField0.getOffset());
      assertEquals("SLong", tiffField0.getFieldTypeName());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 2843;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      assertNotNull(fieldTypeShort0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals("Short", fieldTypeShort0.getName());
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      PrintWriter printWriter0 = null;
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeShort0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(7, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, fieldTypeShort0.getSize());
      assertEquals(3, fieldTypeShort0.getType());
      assertEquals("Short", fieldTypeShort0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2843, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(2843, tiffField0.getTag());
      assertEquals(2843, tiffField0.getSortHint());
      assertEquals(2843, tiffField0.getOffset());
      assertEquals(5686, tiffField0.getBytesLength());
      assertEquals("Short", tiffField0.getFieldTypeName());
      assertEquals(2843L, tiffField0.getCount());
      
      // Undeclared exception!
      try { 
        tiffField0.dump(printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = null;
      int int0 = (-953);
      long long0 = 1954L;
      byte[] byteArray0 = new byte[30];
      byte byte0 = (byte) (-123);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(int0, string0);
      assertNotNull(fieldTypeRational0);
      assertNull(fieldTypeRational0.getName());
      assertEquals((-953), fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      
      TiffField tiffField0 = new TiffField(int0, byte0, fieldTypeRational0, long0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(30, byteArray0.length);
      assertNotNull(tiffField0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(fieldTypeRational0.getName());
      assertEquals((-953), fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(1954L, tiffField0.getCount());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals((-123), tiffField0.getDirectoryType());
      assertEquals((-123), tiffField0.getSortHint());
      assertEquals((-953), tiffField0.getTag());
      assertEquals(15632, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
      
      String string1 = tiffField0.getValueDescription();
      assertEquals(30, byteArray0.length);
      assertNotNull(string1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(fieldTypeRational0.getName());
      assertEquals((-953), fieldTypeRational0.getType());
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals(1954L, tiffField0.getCount());
      assertNull(tiffField0.getFieldTypeName());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals((-123), tiffField0.getDirectoryType());
      assertEquals((-123), tiffField0.getSortHint());
      assertEquals((-953), tiffField0.getTag());
      assertEquals(15632, tiffField0.getBytesLength());
      assertFalse(tiffField0.isLocalValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      assertNotNull(fieldTypeLong0);
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(4, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      
      String string0 = tiffField0.getTagName();
      assertEquals(4, byteArray0.length);
      assertEquals("Unknown Tag (0x0)", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      
      Object object0 = PrivateAccess.callMethod((Class<TiffField>) TiffField.class, tiffField0, "getValueDescription", (Object) string0, (Class<?>) Object.class);
      assertEquals(4, byteArray0.length);
      assertNotSame(string0, object0);
      assertNotSame(object0, string0);
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, fieldTypeLong0.getType());
      assertEquals("SLong", fieldTypeLong0.getName());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("SLong", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = (-953);
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int0, string0);
      assertNotNull(fieldTypeDouble0);
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeDouble0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(18, byteArray0.length);
      assertNotNull(tiffField0);
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-7624), tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals((-953), tiffField0.getTag());
      assertEquals((-953L), tiffField0.getCount());
      assertEquals((-953), tiffField0.getDirectoryType());
      
      Object object0 = PrivateAccess.callMethod((Class<TiffField>) TiffField.class, tiffField0, "getValueDescription", (Object) byteArray0[0], (Class<?>) Object.class);
      assertEquals(18, byteArray0.length);
      assertNotSame(string0, object0);
      assertNotSame(object0, string0);
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-7624), tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals((-953), tiffField0.getTag());
      assertEquals((-953L), tiffField0.getCount());
      assertEquals((-953), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 0;
      int int1 = 925;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      assertNotNull(fieldTypeRational0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeRational0, int1, int1, byteArray0, byteOrder0, byteArray0[6]);
      assertEquals(9, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(925, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertEquals(7400, tiffField0.getBytesLength());
      assertEquals(925L, tiffField0.getCount());
      assertEquals(925, tiffField0.getOffset());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(9, tiffElement0.length);
      assertEquals(925L, tiffElement0.offset);
      assertEquals(9, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffElement0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, fieldTypeRational0.getSize());
      assertEquals("Rational", fieldTypeRational0.getName());
      assertEquals(5, fieldTypeRational0.getType());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(925, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertEquals(7400, tiffField0.getBytesLength());
      assertEquals(925L, tiffField0.getCount());
      assertEquals(925, tiffField0.getOffset());
      assertEquals("Rational", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 1190;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      
      byte[] byteArray0 = new byte[8];
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(1190, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(1190, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(8, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(1190, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(1190, tiffField0.getOffset());
      assertEquals(1190, tiffField0.getTag());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1190, tiffField0.getSortHint());
      assertEquals(4760, tiffField0.getBytesLength());
      assertEquals(1190L, tiffField0.getCount());
      
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(int0, int0);
      assertEquals(1190L, tiffField_OversizeValueElement0.offset);
      assertEquals(1190, tiffField_OversizeValueElement0.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(tiffField_OversizeValueElement0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(1190, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(1190, tiffField0.getOffset());
      assertEquals(1190, tiffField0.getTag());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1190, tiffField0.getSortHint());
      assertEquals(4760, tiffField0.getBytesLength());
      assertEquals(1190L, tiffField0.getCount());
      
      boolean boolean0 = true;
      String string0 = tiffField_OversizeValueElement0.getElementDescription(boolean0);
      assertEquals(1190L, tiffField_OversizeValueElement0.offset);
      assertEquals(1190, tiffField_OversizeValueElement0.length);
      assertEquals(8, byteArray0.length);
      assertNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.length());
      assertEquals(1190, charBuffer0.limit());
      assertEquals(1190, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(1190, tiffField0.getOffset());
      assertEquals(1190, tiffField0.getTag());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1190, tiffField0.getSortHint());
      assertEquals(4760, tiffField0.getBytesLength());
      assertEquals(1190L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = (-1175);
      String string0 = "N8%K6gkm#1 HOQI,yKM";
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(int0, string0);
      assertNotNull(fieldTypeAscii0);
      assertEquals("N8%K6gkm#1 HOQI,yKM", fieldTypeAscii0.getName());
      assertEquals((-1175), fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)53;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeAscii0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(3, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("N8%K6gkm#1 HOQI,yKM", fieldTypeAscii0.getName());
      assertEquals((-1175), fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-1175), tiffField0.getOffset());
      assertEquals((-1175L), tiffField0.getCount());
      assertEquals((-1175), tiffField0.getTag());
      assertEquals((-1175), tiffField0.getBytesLength());
      assertEquals((-1175), tiffField0.getDirectoryType());
      assertEquals(53, tiffField0.getSortHint());
      assertEquals("N8%K6gkm#1 HOQI,yKM", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(byteArray0[0], byteArray0[1]);
      assertEquals(0, tiffField_OversizeValueElement0.length);
      assertEquals(0L, tiffField_OversizeValueElement0.offset);
      assertEquals(3, byteArray0.length);
      assertNotNull(tiffField_OversizeValueElement0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("N8%K6gkm#1 HOQI,yKM", fieldTypeAscii0.getName());
      assertEquals((-1175), fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-1175), tiffField0.getOffset());
      assertEquals((-1175L), tiffField0.getCount());
      assertEquals((-1175), tiffField0.getTag());
      assertEquals((-1175), tiffField0.getBytesLength());
      assertEquals((-1175), tiffField0.getDirectoryType());
      assertEquals(53, tiffField0.getSortHint());
      assertEquals("N8%K6gkm#1 HOQI,yKM", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
      
      String string1 = tiffField_OversizeValueElement0.getElementDescription();
      assertEquals(0, tiffField_OversizeValueElement0.length);
      assertEquals(0L, tiffField_OversizeValueElement0.offset);
      assertEquals(3, byteArray0.length);
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: N8%K6gkm#1 HOQI,yKM", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("N8%K6gkm#1 HOQI,yKM", fieldTypeAscii0.getName());
      assertEquals((-1175), fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-1175), tiffField0.getOffset());
      assertEquals((-1175L), tiffField0.getCount());
      assertEquals((-1175), tiffField0.getTag());
      assertEquals((-1175), tiffField0.getBytesLength());
      assertEquals((-1175), tiffField0.getDirectoryType());
      assertEquals(53, tiffField0.getSortHint());
      assertEquals("N8%K6gkm#1 HOQI,yKM", tiffField0.getFieldTypeName());
      assertTrue(tiffField0.isLocalValue());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 0;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      assertNotNull(fieldTypeLong0);
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(13, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)90;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeLong0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(8, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(13, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("IFD", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(90, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
      
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(8, byteArray0.length);
      assertNull(tiffElement0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("IFD", fieldTypeLong0.getName());
      assertEquals(13, fieldTypeLong0.getType());
      assertEquals(4, fieldTypeLong0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("IFD", tiffField0.getFieldTypeName());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(90, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-953);
      int int1 = 1;
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int1, string0);
      assertFalse(int1 == int0);
      assertNotNull(fieldTypeDouble0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      
      byte[] byteArray0 = new byte[18];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int1, fieldTypeDouble0, int1, int1, byteArray0, byteOrder0, int1);
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(tiffField0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-953), tiffField0.getTag());
      
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(18, byteArray0.length);
      assertFalse(boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals(1, fieldTypeDouble0.getType());
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-953), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = (-953);
      String string0 = "b{Q'i~mPB::fQqYGF}";
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(int0, string0);
      assertNotNull(fieldTypeDouble0);
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeDouble0, int0, int0, byteArray0, byteOrder0, byte0);
      assertEquals(18, byteArray0.length);
      assertNotNull(tiffField0);
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals((-953), tiffField0.getDirectoryType());
      assertEquals((-953), tiffField0.getTag());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals((-7624), tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals((-953L), tiffField0.getCount());
      
      String string1 = tiffField0.getFieldTypeName();
      assertEquals(18, byteArray0.length);
      assertEquals("b{Q'i~mPB::fQqYGF}", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("b{Q'i~mPB::fQqYGF}", fieldTypeDouble0.getName());
      assertEquals((-953), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-953), tiffField0.getOffset());
      assertEquals((-953), tiffField0.getDirectoryType());
      assertEquals((-953), tiffField0.getTag());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals((-7624), tiffField0.getBytesLength());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("b{Q'i~mPB::fQqYGF}", tiffField0.getFieldTypeName());
      assertEquals((-953L), tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(3, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      
      int int1 = tiffField0.getOffset();
      assertEquals(3, byteArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(0L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = (-1);
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, byteArray0[0]);
      assertEquals(6, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-1), tiffField0.getTag());
      assertEquals((-1), tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals((-1L), tiffField0.getCount());
      assertEquals((-1), tiffField0.getOffset());
      assertEquals((-4), tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      
      int int1 = tiffField0.getDirectoryType();
      assertEquals(6, byteArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals((-1), tiffField0.getTag());
      assertEquals((-1), tiffField0.getDirectoryType());
      assertTrue(tiffField0.isLocalValue());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals((-1L), tiffField0.getCount());
      assertEquals((-1), tiffField0.getOffset());
      assertEquals((-4), tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 1190;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      
      byte[] byteArray0 = new byte[8];
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1190, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.length());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1190, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.length());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, int0, int0, byteArray0, byteOrder0, int0);
      assertEquals(8, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1190, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.length());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1190L, tiffField0.getCount());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(4760, tiffField0.getBytesLength());
      assertEquals(1190, tiffField0.getSortHint());
      assertEquals(1190, tiffField0.getOffset());
      assertEquals(1190, tiffField0.getTag());
      
      int int1 = tiffField0.getSortHint();
      assertEquals(8, byteArray0.length);
      assertEquals(1190, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1190, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1190, charBuffer0.remaining());
      assertEquals(1190, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1190, charBuffer0.length());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1190, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
      assertEquals(1190L, tiffField0.getCount());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals(4760, tiffField0.getBytesLength());
      assertEquals(1190, tiffField0.getSortHint());
      assertEquals(1190, tiffField0.getOffset());
      assertEquals(1190, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = (-1717986917);
      byte[] byteArray0 = new byte[7];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      assertNotNull(fieldTypeFloat0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      
      ByteOrder byteOrder0 = null;
      TiffField tiffField0 = new TiffField(int0, int0, fieldTypeFloat0, byteArray0[1], int0, byteArray0, byteOrder0, byteArray0[2]);
      assertEquals(7, byteArray0.length);
      assertNotNull(tiffField0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals((-1717986917), tiffField0.getTag());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals((-1717986917), tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-1717986917), tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
      
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals(7, byteArray0.length);
      assertEquals("-1717986917 (0x9999999b: Unknown Tag): ", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(11, fieldTypeFloat0.getType());
      assertEquals(4, fieldTypeFloat0.getSize());
      assertEquals("Float", fieldTypeFloat0.getName());
      assertEquals((-1717986917), tiffField0.getTag());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Float", tiffField0.getFieldTypeName());
      assertEquals((-1717986917), tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-1717986917), tiffField0.getDirectoryType());
      assertEquals(0L, tiffField0.getCount());
  }
}
