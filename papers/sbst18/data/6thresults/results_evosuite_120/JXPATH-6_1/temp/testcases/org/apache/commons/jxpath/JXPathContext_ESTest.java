/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:43:13 GMT 2018
 */

package org.apache.commons.jxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormatSymbols;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.ClassFunctions;
import org.apache.commons.jxpath.Functions;
import org.apache.commons.jxpath.IdentityManager;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import org.apache.commons.jxpath.KeyManager;
import org.apache.commons.jxpath.PackageFunctions;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathCompiledExpression;
import org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JXPathContext_ESTest extends JXPathContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "GbR7zrIKK1sV0@Q]U|r";
      KeyManager keyManager0 = mock(KeyManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyManager0).toString();
      doReturn((Pointer) null).when(keyManager0).getPointerByKey(any(org.apache.commons.jxpath.JXPathContext.class) , anyString() , anyString());
      jXPathContextReferenceImpl0.setKeyManager(keyManager0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string1 = "|S5A7f+@=% SThaa";
      Pointer pointer0 = jXPathContextReferenceImpl0.getPointerByKey(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(pointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      PrivateAccess.setVariable((Class<JXPathContext>) JXPathContext.class, (JXPathContext) jXPathContextReferenceImpl0, "lenient", (Object) jXPathContextReferenceImpl0.USE_SOFT_CACHE);
      assertTrue(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      jXPathContextReferenceImpl0.removePath(jXPathContextFactoryReferenceImpl0.FACTORY_NAME_PROPERTY);
      assertTrue(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      jXPathContextReferenceImpl0.removeAll(jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "xml:lang";
      Double double0 = (Double)jXPathContextReferenceImpl0.selectSingleNode(string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(double0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "_W";
      List list0 = jXPathContextReferenceImpl0.selectNodes(string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      int int0 = 423;
      Integer integer0 = new Integer(int0);
      assertEquals(423, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(jXPathContext0, (Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      jXPathContextReferenceImpl0.setLenient(jXPathContextReferenceImpl0.USE_SOFT_CACHE);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContext0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(jXPathContextReferenceImpl0.isLenient());
      assertTrue(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      Iterator iterator0 = jXPathContextReferenceImpl0.iteratePointers(jXPathContextFactoryReferenceImpl0.FACTORY_NAME_PROPERTY);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(iterator0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Iterator iterator0 = jXPathContextReferenceImpl0.iterate(jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(iterator0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertNotNull(decimalFormatSymbols0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormatSymbols0);
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      jXPathContextReferenceImpl0.setLenient(jXPathContextReferenceImpl0.USE_SOFT_CACHE);
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertTrue(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "java.util.Date";
      Class<Object> class0 = Object.class;
      Object object0 = jXPathContextReferenceImpl0.getValue(string0, class0);
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertTrue(jXPathContextReferenceImpl0.isLenient());
      assertNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertNotNull(decimalFormatSymbols0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormatSymbols0);
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "java.util<Date";
      Class<Object> class0 = Object.class;
      Boolean boolean0 = (Boolean)jXPathContextReferenceImpl0.getValue(string0, class0);
      assertFalse(boolean0);
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(boolean0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      int int0 = 423;
      Integer integer0 = new Integer(int0);
      assertEquals(423, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(jXPathContext0, (Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      jXPathContextReferenceImpl0.setLenient(jXPathContextReferenceImpl0.USE_SOFT_CACHE);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "FD";
      Object object0 = jXPathContextReferenceImpl0.getValue(string0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(jXPathContextReferenceImpl0.isLenient());
      assertNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = new QName(jXPathContextFactory0.FACTORY_NAME_PROPERTY, jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory:org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextFactory0, locale0);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory:org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl0.getRelativeContext(beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory:org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(jXPathContext0, (Object) jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "f450+oH6g,N%q";
      String string1 = jXPathContextReferenceImpl0.getPrefix(string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(string1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      jXPathContextReferenceImpl0.registerNamespace(jXPathContextFactory0.FACTORY_NAME_PROPERTY, jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = jXPathContextReferenceImpl0.getPrefix(jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextFactoryReferenceImpl0.newContext(jXPathContextReferenceImpl0, object0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)jXPathContextReferenceImpl1.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName(jXPathContextFactoryReferenceImpl0.FACTORY_NAME_PROPERTY);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = jXPathContextReferenceImpl0.getNamespaceURI(variablePointer0.UNKNOWN_NAMESPACE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      jXPathContextReferenceImpl0.registerNamespace(jXPathContextFactory0.FACTORY_NAME_PROPERTY, jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = jXPathContextReferenceImpl0.getNamespaceURI(jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertNotNull(decimalFormatSymbols0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormatSymbols0);
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BeanPointer beanPointer0 = (BeanPointer)jXPathContextReferenceImpl0.getNamespaceContextPointer();
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "E^'IQ0;1#5gE,n8r";
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BeanPointer beanPointer0 = (BeanPointer)jXPathContextReferenceImpl0.getContextPointer();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Object object0 = jXPathContextReferenceImpl0.getContextBean();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContextFactory0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DecimalFormatSymbols decimalFormatSymbols0 = jXPathContextReferenceImpl0.getDecimalFormatSymbols(jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(decimalFormatSymbols0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.setValue(jXPathContextFactory0.FACTORY_NAME_PROPERTY, decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception trying to set value with xpath org.apache.commons.jxpath.JXPathContextFactory; Cannot set property /org.apache.commons.jxpath.JXPathContextFactory, path does not match a changeable location
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(jXPathContext0, (Object) jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.setValue(string0, jXPathContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid XPath: ''. Syntax error at the beginning of the expression
         //
         verifyException("org.apache.commons.jxpath.ri.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      String string0 = "org.apache.commons.jxpath.JXPathContext";
      String string1 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.setValue(string1, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Pointer pointer0 = mock(Pointer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.setNamespaceContextPointer(pointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.Pointer$MockitoMock$159162481 cannot be cast to org.apache.commons.jxpath.ri.model.NodePointer
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertNotNull(decimalFormatSymbols0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormatSymbols0);
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "NIX\\";
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.selectSingleNode(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid XPath: 'NIX\\\\'. Invalid symbol '\\\\' - expression incomplete
         //
         verifyException("org.apache.commons.jxpath.ri.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.selectSingleNode(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(jXPathContext0, (Object) jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.selectNodes(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      Variables variables0 = mock(Variables.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(variables0).getVariable(anyString());
      QName qName0 = mock(QName.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(qName0).toString();
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, variablePointer0, variablePointer0);
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "W(d2|f";
      // Undeclared exception!
      jXPathContextReferenceImpl0.removePath(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContextFactory0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "JXPath: loaded from services: ";
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.removePath(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid XPath: 'JXPath: loaded from services: '. Syntax error after: 'JXPath: l'
         //
         verifyException("org.apache.commons.jxpath.ri.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContextFactory0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = jXPathContextReferenceImpl0.getPrefix(jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.removePath(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName(jXPathContextFactoryReferenceImpl0.FACTORY_NAME_PROPERTY);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.iteratePointers(variablePointer0.UNKNOWN_NAMESPACE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid XPath: '<<unknown namespace>>'. Syntax error at the beginning of the expression
         //
         verifyException("org.apache.commons.jxpath.ri.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.iteratePointers(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.iterate(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid XPath: ''. Syntax error at the beginning of the expression
         //
         verifyException("org.apache.commons.jxpath.ri.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContextFactory0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getValue(jXPathContextFactory0.FACTORY_NAME_PROPERTY, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No value for xpath: org.apache.commons.jxpath.JXPathContextFactory
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Pointer pointer0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, object0, pointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = null;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getValue(string0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getValue(jXPathContextFactory0.FACTORY_NAME_PROPERTY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No value for xpath: org.apache.commons.jxpath.JXPathContextFactory
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      JXPathContext jXPathContext0 = null;
      EvalContext evalContext0 = null;
      QName qName0 = new QName(string0, string0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, string0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, boolean0, nodeNameTest0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      NodePointer nodePointer0 = ancestorContext0.getCurrentNodePointer();
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertNull(nodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, evoSuiteFile0, nodePointer0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getValue(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      QName qName0 = new QName(jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, variablePointer0);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getRelativeContext(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: org.apache.commons.jxpath.JXPathContextFactory
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertNotNull(decimalFormatSymbols0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormatSymbols0);
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Pointer pointer0 = null;
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getRelativeContext(pointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      AbstractFactory abstractFactory0 = jXPathContextReferenceImpl0.getFactory();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(abstractFactory0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      jXPathContextReferenceImpl0.setVariables(basicVariables0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DecimalFormatSymbols decimalFormatSymbols0 = jXPathContextReferenceImpl0.getDecimalFormatSymbols(jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(decimalFormatSymbols0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "/";
      BeanPointer beanPointer0 = (BeanPointer)jXPathContextReferenceImpl0.getPointer(string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "mSy";
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getPointer(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No pointer for xpath: mSy
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertNotNull(decimalFormatSymbols0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormatSymbols0);
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getPointer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.createPathAndSetValue(jXPathContextFactory0.FACTORY_NAME_PROPERTY, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception trying to create xpath org.apache.commons.jxpath.JXPathContextFactory; Cannot create the root object: null()
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "=";
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      HashMap<Object, NodePointer> hashMap0 = null;
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.createPathAndSetValue(string0, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid XPath: '='. Syntax error at the beginning of the expression
         //
         verifyException("org.apache.commons.jxpath.ri.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(basicVariables0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = null;
      QName qName0 = null;
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertNotNull(variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.createPathAndSetValue(string0, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "&@`se(PqsBIlc-JCw";
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.createPath(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid XPath: '&@`se(PqsBIlc-JCw'. Invalid symbol '&' at the beginning of the expression
         //
         verifyException("org.apache.commons.jxpath.ri.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "UMhremI!.lu\"{U_\\qX9";
      // Undeclared exception!
      try { 
        JXPathContext.compile(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid XPath: 'UMhremI!.lu\\\"{U_\\\\qX9'. Invalid symbol '.' after: 'UMhremI!'
         //
         verifyException("org.apache.commons.jxpath.ri.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        JXPathContext.compile(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      boolean boolean0 = jXPathContextReferenceImpl0.isLenient();
      assertFalse(boolean0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextFactoryReferenceImpl0.newContext(jXPathContextReferenceImpl0, object0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      Locale locale0 = jXPathContextReferenceImpl1.getLocale();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(basicVariables0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables1 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(basicVariables1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertSame(basicVariables1, basicVariables0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContext jXPathContext0 = jXPathContextReferenceImpl0.getParentContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getPointerByKey(jXPathContextFactoryReferenceImpl0.FACTORY_NAME_PROPERTY, jXPathContextFactoryReferenceImpl0.FACTORY_NAME_PROPERTY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextFactoryReferenceImpl0.newContext(jXPathContextReferenceImpl0, object0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      KeyManager keyManager0 = jXPathContextReferenceImpl1.getKeyManager();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(keyManager0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      KeyManager keyManager0 = jXPathContextReferenceImpl0.getKeyManager();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(keyManager0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getPointerByID(jXPathContextFactoryReferenceImpl0.FACTORY_NAME_PROPERTY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = new QName(jXPathContextFactory0.FACTORY_NAME_PROPERTY, jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory:org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContextReferenceImpl0, qName0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory:org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      IdentityManager identityManager0 = jXPathContextReferenceImpl1.getIdentityManager();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory:org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(identityManager0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "g,c7px#h!}^_^~";
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(identityManager0).toString();
      doReturn((Pointer) null).when(identityManager0).getPointerByID(any(org.apache.commons.jxpath.JXPathContext.class) , anyString());
      jXPathContextReferenceImpl0.setIdentityManager(identityManager0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Pointer pointer0 = jXPathContextReferenceImpl0.getPointerByID(string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(pointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "\">\"";
      List list0 = jXPathContextReferenceImpl0.selectNodes(string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = "1";
      Double double0 = (Double)jXPathContextReferenceImpl0.selectSingleNode(string0);
      assertEquals(1.0, (double)double0, 0.01);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(double0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "id";
      JXPathCompiledExpression jXPathCompiledExpression0 = (JXPathCompiledExpression)JXPathContext.compile(string0);
      assertEquals("id", jXPathCompiledExpression0.toString());
      assertNotNull(jXPathCompiledExpression0);
      
      JXPathCompiledExpression jXPathCompiledExpression1 = (JXPathCompiledExpression)JXPathContext.compile(string0);
      assertFalse(jXPathCompiledExpression1.equals((Object)jXPathCompiledExpression0));
      assertEquals("id", jXPathCompiledExpression1.toString());
      assertNotNull(jXPathCompiledExpression1);
      assertNotSame(jXPathCompiledExpression1, jXPathCompiledExpression0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextFactoryReferenceImpl0.newContext(jXPathContextReferenceImpl0, object0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      boolean boolean0 = jXPathContextReferenceImpl1.isLenient();
      assertFalse(boolean0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.removePath(jXPathContextFactoryReferenceImpl0.FACTORY_NAME_PROPERTY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception trying to remove xpath org.apache.commons.jxpath.JXPathContextFactory; No pointer for xpath: org.apache.commons.jxpath.JXPathContextFactory
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextFactoryReferenceImpl0.newContext(jXPathContextReferenceImpl0, object0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      DecimalFormatSymbols decimalFormatSymbols0 = jXPathContextReferenceImpl1.getDecimalFormatSymbols(jXPathContextFactoryReferenceImpl0.FACTORY_NAME_PROPERTY);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(decimalFormatSymbols0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContextFactory0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DecimalFormatSymbols decimalFormatSymbols0 = jXPathContextReferenceImpl0.getDecimalFormatSymbols(jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(decimalFormatSymbols0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getNodeSetByKey(jXPathContextFactory0.FACTORY_NAME_PROPERTY, decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContextFactory0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertNotNull(decimalFormatSymbols0);
      
      jXPathContextReferenceImpl0.setDecimalFormatSymbols(jXPathContextFactory0.FACTORY_NAME_PROPERTY, decimalFormatSymbols0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DecimalFormatSymbols decimalFormatSymbols1 = jXPathContextReferenceImpl0.getDecimalFormatSymbols(jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals('0', decimalFormatSymbols1.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols1.getNaN());
      assertEquals('%', decimalFormatSymbols1.getPercent());
      assertEquals('.', decimalFormatSymbols1.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols1.getInfinity());
      assertEquals('.', decimalFormatSymbols1.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols1.getDigit());
      assertEquals(';', decimalFormatSymbols1.getPatternSeparator());
      assertEquals('\u2030', decimalFormatSymbols1.getPerMill());
      assertEquals("E", decimalFormatSymbols1.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols1.getInternationalCurrencySymbol());
      assertEquals(',', decimalFormatSymbols1.getGroupingSeparator());
      assertEquals('-', decimalFormatSymbols1.getMinusSign());
      assertEquals("\u00A4", decimalFormatSymbols1.getCurrencySymbol());
      assertNotNull(decimalFormatSymbols1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertSame(decimalFormatSymbols1, decimalFormatSymbols0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContext jXPathContext0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContextFactory0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertNotNull(decimalFormatSymbols0);
      
      jXPathContextReferenceImpl0.setDecimalFormatSymbols(jXPathContextFactory0.FACTORY_NAME_PROPERTY, decimalFormatSymbols0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      jXPathContextReferenceImpl0.setDecimalFormatSymbols(jXPathContextFactory0.FACTORY_NAME_PROPERTY, decimalFormatSymbols0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextFactoryReferenceImpl0.newContext(jXPathContextReferenceImpl0, object0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      AbstractFactory abstractFactory0 = jXPathContextReferenceImpl1.getFactory();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(abstractFactory0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      AbstractFactory abstractFactory0 = mock(AbstractFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(abstractFactory0).toString();
      jXPathContextReferenceImpl0.setFactory(abstractFactory0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      AbstractFactory abstractFactory1 = jXPathContextReferenceImpl0.getFactory();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(abstractFactory1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertSame(abstractFactory1, abstractFactory0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextFactoryReferenceImpl jXPathContextFactoryReferenceImpl0 = (JXPathContextFactoryReferenceImpl)JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactoryReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)jXPathContextFactoryReferenceImpl0.newContext(jXPathContextReferenceImpl0, object0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      Functions functions0 = jXPathContextReferenceImpl1.getFunctions();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(functions0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      int int0 = 423;
      Integer integer0 = new Integer(int0);
      assertEquals(423, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(jXPathContext0, (Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      PackageFunctions packageFunctions0 = (PackageFunctions)jXPathContextReferenceImpl0.getFunctions();
      assertTrue(integer0.equals((Object)int0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(packageFunctions0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Object object1 = jXPathContextReferenceImpl0.getContextBean();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(object1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertSame(object0, object1);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      int int0 = 423;
      Integer integer0 = new Integer(int0);
      assertEquals(423, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(jXPathContext0, (Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      IdentityManager identityManager0 = jXPathContextReferenceImpl0.getIdentityManager();
      assertTrue(integer0.equals((Object)int0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(identityManager0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      jXPathContextReferenceImpl0.setIdentityManager(identityManager0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertNotNull(decimalFormatSymbols0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormatSymbols0);
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      jXPathContextReferenceImpl0.setLenient(jXPathContextReferenceImpl0.USE_SOFT_CACHE);
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertTrue(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      boolean boolean0 = jXPathContextReferenceImpl0.isLenient();
      assertTrue(boolean0);
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertTrue(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertNotNull(decimalFormatSymbols0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormatSymbols0);
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      jXPathContextReferenceImpl0.setLocale(locale0);
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Object object0 = RootContext.UNKNOWN_VALUE;
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Class<Object> class0 = Object.class;
      String string0 = "9YMCDB#pD!YXAb";
      ClassFunctions classFunctions0 = new ClassFunctions(class0, string0);
      assertNotNull(classFunctions0);
      
      jXPathContextReferenceImpl0.setFunctions(classFunctions0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JXPathContext jXPathContext0 = null;
      JXPathContextFactory jXPathContextFactory0 = JXPathContextFactory.newInstance();
      assertNotNull(jXPathContextFactory0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)jXPathContextFactory0.newContext(jXPathContext0, jXPathContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = new QName(jXPathContextFactory0.FACTORY_NAME_PROPERTY, jXPathContextFactory0.FACTORY_NAME_PROPERTY);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory:org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = (VariablePointer)jXPathContextReferenceImpl0.getVariablePointer(qName0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory:org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertNotNull(variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      jXPathContextReferenceImpl0.setNamespaceContextPointer(variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory:org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }
}
