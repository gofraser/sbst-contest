/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 21:17:27 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1979;
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      double double1 = 1262.2963177;
      doubleArray0[3] = double1;
      doubleArray0[4] = (double) int0;
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int0;
      int int1 = 1290;
      intArray0[2] = int1;
      int int2 = (-139);
      intArray0[3] = int2;
      intArray0[4] = int0;
      intArray0[5] = int0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0, int0, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.trace();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-150);
      int int1 = (-3689);
      int int2 = 1;
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) int1;
      int int3 = 0;
      int int4 = 2;
      doubleArray1[2] = (double) int1;
      doubleArray1[3] = (double) int1;
      doubleArray1[4] = (double) int4;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.nonZeroRowMajorIterator();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      int int5 = (-3728);
      int int6 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(int6, mockRandom0);
      cRSMatrix0.to(matrixFactory0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1205;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, int0);
      cRSMatrix0.toDenseMatrix();
      int int1 = 0;
      double[] doubleArray0 = new double[0];
      int int2 = 572;
      cRSMatrix0.minInColumn(int2);
      Matrix.from1DArray(int0, int1, doubleArray0);
      double double0 = 598.4443088;
      cRSMatrix0.add(double0);
      int int3 = (-488);
      try { 
        PrivateAccess.callMethod((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "remove", (Object) int1, (Class<?>) int.class, (Object) int3, (Class<?>) int.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -487
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 36;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, int0);
      int int1 = 3;
      PrivateAccess.callMethod((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "align", (Object) int0, (Class<?>) int.class);
      cRSMatrix0.toString();
      PrivateAccess.callMethod((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "remove", (Object) int0, (Class<?>) int.class, (Object) int1, (Class<?>) int.class);
      double[] doubleArray0 = new double[0];
      cRSMatrix0.euclideanNorm();
      PrivateAccess.setVariable((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "values", (Object) doubleArray0);
      int int2 = 952;
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(int2, int2, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '952' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1205;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, int0);
      cRSMatrix0.toDenseMatrix();
      int int1 = 0;
      double[] doubleArray0 = new double[1];
      int int2 = 572;
      cRSMatrix0.minInColumn(int2);
      Matrix.from1DArray(int0, int1, doubleArray0);
      int int3 = 8;
      // Undeclared exception!
      cRSMatrix0.setRow(int3, (double) int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 2953;
      cRSMatrix0.minInColumn(int0);
      int int1 = 2;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int1, int1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.transform(matrixFunction0);
      cRSMatrix0.rowMajorIterator();
      int int2 = 1;
      // Undeclared exception!
      try { 
        cRSMatrix0.set(int1, int2, int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      double double0 = 1.1102230246251565E-14;
      Random random0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.random(int0, int0, double0, random0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int0);
      String string0 = "#/bO7";
      cRSMatrix0.toCSV();
      DecimalFormat decimalFormat0 = new DecimalFormat(string0);
      cRSMatrix0.toCSV((NumberFormat) decimalFormat0);
      int int1 = 1714;
      Matrix matrix0 = cRSMatrix0.blankOfShape(int1, int1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.updateAt(int0, int0, matrixFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1714
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-150);
      int int1 = (-3689);
      int int2 = 1;
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) int1;
      int int3 = 0;
      int int4 = 2;
      doubleArray1[2] = (double) int1;
      doubleArray1[3] = (double) int1;
      doubleArray1[4] = (double) int1;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int4, int0);
      cRSMatrix0.nonZeroRowMajorIterator();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      int int5 = (-3728);
      int int6 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(int6, mockRandom0);
      cRSMatrix0.to(matrixFactory0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.minInRow(int2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-150);
      int int1 = (-3689);
      int int2 = 1;
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) int1;
      int int3 = 0;
      int int4 = 2;
      doubleArray1[4] = (double) int1;
      doubleArray1[3] = (double) int1;
      doubleArray1[4] = (double) int1;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.nonZeroRowMajorIterator();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      int int5 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(int5, mockRandom0);
      cRSMatrix0.to(matrixFactory0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 3092;
      int int1 = (-6042);
      int int2 = 168;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-150);
      int int1 = (-3689);
      int int2 = 1;
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) int1;
      int int3 = 0;
      int int4 = 2;
      doubleArray1[2] = (double) int1;
      doubleArray1[3] = (double) int1;
      doubleArray1[4] = (double) int1;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.nonZeroRowMajorIterator();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      int int5 = (-3728);
      int int6 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(int6, mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 3139;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 3907;
      int int1 = 804;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1);
      cRSMatrix0.toDenseMatrix();
      double double0 = 2310.319909130724;
      // Undeclared exception!
      cRSMatrix0.setRow(int1, double0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 502;
      int int1 = 20;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int1);
      cRSMatrix0.min();
      Matrix.zero(int1, int1);
      double double0 = 4510.917;
      cRSMatrix0.setAll(double0);
      int int2 = (-124);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(int2, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -124
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 0;
      int int1 = 6591;
      long long0 = 2343L;
      MockRandom mockRandom0 = new MockRandom(long0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix.zero(int0, int1);
      mockRandom0.nextLong();
      mockRandom0.nextDouble();
      Matrix matrix0 = Matrix.random(int0, int1, mockRandom0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      int int1 = 66;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1);
      Matrix.unit(int0, int0);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.nonZeroIteratorOfColumn(int1);
      CRSMatrix cRSMatrix1 = cRSMatrix0.to(matrixFactory0);
      cRSMatrix1.euclideanNorm();
      int int2 = 0;
      cRSMatrix1.power(int2);
      cRSMatrix0.toString();
      cRSMatrix1.spliterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 66
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 886;
      int int1 = 701;
      double[] doubleArray0 = null;
      int[] intArray0 = new int[2];
      int int2 = 1;
      intArray0[0] = int2;
      intArray0[1] = int0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1, int0, doubleArray0, intArray0, intArray0);
      int int3 = (-1370);
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1370
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2766;
      double double0 = 801.180692856;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, double0);
      int int1 = (-983);
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns(int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2766' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 52;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, int0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 2953;
      cRSMatrix0.minInColumn(int0);
      int int1 = 2;
      cRSMatrix0.copyOfShape(int1, int1);
      cRSMatrix0.rowMajorIterator();
      int int2 = 1;
      // Undeclared exception!
      try { 
        cRSMatrix0.set(int1, int2, int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1);
      cRSMatrix0.copy();
      int int2 = (-252);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape(int2, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -252x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      int int1 = 1;
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns(int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-149);
      long long0 = (-1L);
      MockRandom mockRandom0 = new MockRandom(long0);
      long long1 = 0L;
      mockRandom0.ints(long1);
      // Undeclared exception!
      try { 
        CRSMatrix.random(int0, int0, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 0;
      cRSMatrix0.power(int0);
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[1];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = double0;
      double double1 = 0.0;
      doubleArray2[1] = double1;
      doubleArray2[2] = double0;
      doubleArray2[3] = double0;
      doubleArray2[4] = double0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = double0;
      doubleArray3[1] = double0;
      doubleArray3[2] = double1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      double double2 = 2217.2154;
      doubleArray4[0] = double2;
      doubleArray4[1] = double0;
      doubleArray4[2] = double1;
      doubleArray4[3] = double0;
      doubleArray4[4] = double1;
      doubleArray4[5] = double1;
      doubleArray4[6] = double0;
      doubleArray4[7] = double0;
      doubleArray0[3] = doubleArray4;
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 2472;
      int int1 = 308;
      long long0 = 0L;
      String string0 = "4";
      CRSMatrix.fromCSV(string0);
      MockRandom mockRandom0 = new MockRandom(long0);
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(int1, (double) int1, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 94864.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      double double0 = 1923.4316234769;
      doubleArray2[0] = double0;
      double double1 = 207.9029092315;
      doubleArray2[1] = double1;
      double double2 = 1478.655;
      doubleArray2[2] = double2;
      double double3 = 160.2;
      doubleArray2[3] = double3;
      double double4 = (-567.9);
      doubleArray2[4] = double4;
      double double5 = 0.0;
      doubleArray2[5] = double5;
      doubleArray0[1] = doubleArray2;
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix1, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 4473;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0);
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(int0, int0, double0, (Random) mockRandom0);
      cRSMatrix0.sliceBottomRight(int0, int0);
      int int1 = 0;
      mockRandom0.longs();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.removeColumn(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 1;
      int int1 = 1;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      double double0 = 783.7;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(int0, int1, doubleArray0);
      SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int int2 = 2941;
      double double1 = 0.0;
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(int2, int0, double1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2941' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 41;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0);
      int int1 = 2670;
      cRSMatrix0.power(int1);
      CRSMatrix.zero(int1, int1, int0);
      double double0 = cRSMatrix0.min();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(int0, int1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 2472;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(int0, int0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.rank();
      cRSMatrix0.eachNonZeroInRow(int1, vectorProcedure0);
      int int2 = 48;
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 49
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int2 = Double.BYTES;
      cRSMatrix0.eachNonZeroInRow(int1, vectorProcedure0);
      int int3 = 48;
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 0;
      cRSMatrix0.blankOfShape(int0, int0);
      double[] doubleArray0 = new double[6];
      double double0 = (-2918.4962082275492);
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      RowMajorSparseMatrix.from1DArray(int0, int0, doubleArray0);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      int int1 = 0;
      SparseVector sparseVector0 = SparseVector.zero(int1);
      Vector vector0 = ooPlaceVectorsAddition0.apply(sparseVector0, sparseVector0);
      vector0.iterator();
      int int2 = 0;
      int int3 = 103;
      // Undeclared exception!
      try { 
        vector0.slice(int2, int3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2224);
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-2224
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-2152);
      int int1 = (-452);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2152x-452
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 498;
      int int1 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1);
      cRSMatrix0.min();
      Matrix.zero(int1, int1);
      double double0 = (-728.23122966);
      cRSMatrix0.setAll(double0);
      int int2 = (-124);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(int2, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -124
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0);
      int int1 = 2670;
      cRSMatrix0.power(int1);
      CRSMatrix.identity(int1);
      double double0 = cRSMatrix0.min();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(int0, int1, doubleArray0);
      cRSMatrix1.nonZeroIteratorOfRow(int0);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix1.each(matrixProcedure0);
      int int2 = 523;
      double double1 = (-2312.817326);
      CRSMatrix.diagonal(int2, double1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 590;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(int0, int0, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-850);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(int0, int0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -850x-850
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(int0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      long long0 = 1665L;
      mockRandom0.ints(long0);
      int int1 = (-2295);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-2295
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal(int0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CRSMatrix.zero(int0, int0, int1);
      double[][] doubleArray0 = new double[0][9];
      // Undeclared exception!
      try { 
        SparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.nonZeroIteratorOfRow(int0);
      int int2 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn(int2, vectorProcedure0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(int0, vectorProcedure1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1848;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0, int0);
      cRSMatrix0.max();
      int int1 = 1286;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(int1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "";
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV(string0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int0);
      int int1 = 4246;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(int1, int1, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      int int1 = 0;
      cRSMatrix0.getColumn(int1);
      int int2 = 2411;
      int int3 = 0;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        cRSMatrix0.set(int2, int3, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2411' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 538;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int0);
      int int1 = 2097;
      // Undeclared exception!
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0);
      cRSMatrix0.toDenseMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.spliterator();
      int int1 = 1;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachInColumn(int1, vectorProcedure0);
      cRSMatrix1.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix1.minInRow(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(int0, int0, doubleArray0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(int1, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int0);
      String string0 = "#/bO7";
      cRSMatrix0.toCSV();
      DecimalFormat decimalFormat0 = new DecimalFormat(string0);
      cRSMatrix0.toCSV((NumberFormat) decimalFormat0);
      int int1 = 1714;
      cRSMatrix0.blankOfShape(int1, int1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 1;
      int int1 = 1419;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int1, int1);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 0;
      double double0 = 1904.7183694977623;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, double0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.setAll(int0);
      cRSMatrix0.copyOfShape(int0, int0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      String string0 = "b";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0);
      int int1 = 1;
      int int2 = 0;
      cRSMatrix0.copyOfShape(int1, int2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 1;
      double double0 = 1.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, double0);
      cRSMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.nonZeroRowMajorIterator();
      String string0 = "";
      double double1 = 0.0;
      CRSMatrix.diagonal(int0, double1);
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV(string0);
      int int1 = 1146;
      cRSMatrix1.getColumn(int1);
      cRSMatrix0.iteratorOfRow(int0);
      double double2 = (-155.0);
      cRSMatrix1.setAll(double2);
      cRSMatrix1.iteratorOfNonZeroRows();
      cRSMatrix1.setAll(double1);
      String string1 = "org.la4j.matrix.sparse.CRSMatrix";
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      int int1 = 33;
      long long0 = (-2511L);
      MockRandom mockRandom0 = new MockRandom(long0);
      Matrix.random(int1, int0, mockRandom0);
      cRSMatrix0.setAll(int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "!\"nL0&vRrCImVT}-cf'";
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = (-5711);
      int int1 = 855;
      double double0 = 0.0;
      long long0 = 1542L;
      MockRandom mockRandom0 = new MockRandom(long0);
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        CRSMatrix.random(int0, int1, double0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 17;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      Matrix matrix0 = cRSMatrix0.divide(int0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, cRSMatrix0, cRSMatrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '18' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 544;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      // Undeclared exception!
      cRSMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int1);
      Vector vector0 = cRSMatrix0.getRow(int1);
      vector0.infinityNorm();
      int int2 = 1;
      cRSMatrix0.blankOfShape(int2, int2);
      Vector.zero(int1);
      int int3 = 2479;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateColumn(int1, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 1507;
      int int1 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int1);
      cRSMatrix0.max();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int2 = 1;
      int int3 = (-1456);
      // Undeclared exception!
      try { 
        cRSMatrix0.swapRows(int2, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1455
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 1759;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0, int0, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0);
      int int1 = 0;
      cRSMatrix0.nonZeroIteratorOfRow(int1);
      cRSMatrix0.add((double) int0);
      // Undeclared exception!
      try { 
        cRSMatrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, int0);
      int int1 = (-1366);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1365
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = (-2594);
      int int1 = 1;
      int int2 = (-2345);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int2;
      doubleArray0[1] = (double) int2;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int2;
      doubleArray0[4] = (double) int2;
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[5] = double0;
      doubleArray0[6] = (double) int2;
      doubleArray0[7] = (double) int1;
      doubleArray0[8] = (double) int0;
      int[] intArray0 = new int[3];
      intArray0[0] = int2;
      intArray0[1] = int2;
      intArray0[2] = int1;
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(int0, int1, int2, doubleArray0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2594x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      double double0 = 1.0;
      doubleArray0[2] = double0;
      double double1 = 2229.400795788829;
      doubleArray0[3] = double1;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(int0, int0, doubleArray0);
      double double2 = 2385.80882;
      Matrix matrix0 = cRSMatrix0.add(double2);
      cRSMatrix0.multiply(matrix0);
      int int1 = (-44);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(int1, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -44x-44
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 18;
      int int1 = 6005;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(int0, int1, double0, (Random) mockRandom0);
      cRSMatrix0.copyOfColumns(int1);
      // Undeclared exception!
      cRSMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0);
      cRSMatrix0.nonZeroIteratorOfColumn(int0);
      cRSMatrix0.norm();
      int int1 = (-1491);
      VectorProcedure vectorProcedure0 = null;
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(int1, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1491
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0);
      double double0 = (-920.0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      RowMajorSparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 0;
      SparseMatrix.identity(int0);
      cRSMatrix0.columnMajorIterator();
      String string0 = "Given vectors should have the same length: ";
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 3907;
      int int1 = 804;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1);
      int int2 = 55;
      cRSMatrix0.isZeroAt(int2, int1);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(int1, int1, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '804' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 628;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0, int0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      cRSMatrix0.toColumnMajorSparseMatrix();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      hashMap0.entrySet();
      int int1 = 2007;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, int1);
      sparseVector0.min();
      int int2 = 0;
      // Undeclared exception!
      try { 
        sparseVector0.swapElements(int2, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = (-1548);
      int int1 = (-2580);
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1548x-1548
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      double double0 = (-556.6353715579);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = (-1075);
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(int0);
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1075x-1075
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 3092;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int0, int0);
      int int1 = 168;
      cRSMatrix0.maxInRow(int1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-128);
      byteArray0[2] = byte2;
      byte byte3 = (byte)6;
      byteArray0[3] = byte3;
      byte byte4 = (byte)32;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)103;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = (-3246);
      int int1 = 1;
      int int2 = 2;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3246x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = (-1956);
      // Undeclared exception!
      try { 
        CRSMatrix.identity(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[4];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = 1206.0;
      doubleArray1[1] = double1;
      double double2 = 0.0;
      doubleArray1[2] = double2;
      double double3 = 4174.6;
      doubleArray1[3] = double3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = double2;
      doubleArray2[1] = double2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = double0;
      doubleArray3[1] = double0;
      doubleArray3[2] = double1;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = "";
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV(string0);
      double double0 = 0.0;
      cRSMatrix0.multiply(double0);
      double double1 = (-451.0);
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = double1;
      doubleArray1[1] = double1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      double double2 = 367.7771856482;
      doubleArray2[0] = double2;
      doubleArray2[1] = double1;
      doubleArray2[2] = double1;
      doubleArray2[3] = double0;
      doubleArray2[4] = double1;
      doubleArray2[5] = double1;
      doubleArray2[6] = double1;
      doubleArray2[7] = double1;
      doubleArray2[8] = double0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = double1;
      doubleArray3[1] = double2;
      doubleArray3[2] = double0;
      doubleArray3[3] = double1;
      doubleArray3[4] = double2;
      doubleArray3[5] = double0;
      doubleArray3[6] = double2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = double0;
      doubleArray4[1] = double2;
      doubleArray4[2] = double0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = double1;
      doubleArray5[1] = double0;
      double double3 = 0.0;
      doubleArray5[2] = double3;
      doubleArray5[3] = double2;
      doubleArray5[4] = double2;
      doubleArray0[4] = doubleArray5;
      RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      int int0 = 69;
      int int1 = 1;
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, int0, int1, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 69, 1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      int int0 = 2535;
      int int1 = 0;
      double double0 = 0.0;
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom(long0);
      // Undeclared exception!
      try { 
        CRSMatrix.random(int0, int1, double0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      int int0 = 1205;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, int0);
      cRSMatrix0.toDenseMatrix();
      int int1 = 0;
      double[] doubleArray0 = new double[0];
      int int2 = 572;
      cRSMatrix0.minInColumn(int2);
      Matrix.from1DArray(int0, int1, doubleArray0);
      int int3 = 0;
      // Undeclared exception!
      cRSMatrix0.setRow(int3, (double) int0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      int int0 = 1208;
      double double0 = (-1215.681725282);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(int0, double0);
      // Undeclared exception!
      try { 
        SparseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      int int0 = 1759;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0, int0, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1759' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0);
      int int1 = 2670;
      cRSMatrix0.power(int1);
      cRSMatrix0.copyOfRows(int1);
      double double0 = cRSMatrix0.min();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(int0, int1, doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix1.nonZeroIteratorOfRow(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2670
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }
}
