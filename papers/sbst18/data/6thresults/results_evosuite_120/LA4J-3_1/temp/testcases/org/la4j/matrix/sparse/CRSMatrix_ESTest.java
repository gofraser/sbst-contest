/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:43:10 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.LeastSquaresSolver;
import org.la4j.linear.SweepSolver;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 1857;
      int int1 = 6;
      int int2 = 947;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1, int2);
      PrivateAccess.callMethod((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "growUp");
      int[] intArray0 = new int[4];
      intArray0[0] = int2;
      String string0 = ".";
      cRSMatrix0.equals((Object) string0);
      intArray0[1] = int1;
      intArray0[2] = int2;
      int int3 = 3694;
      intArray0[3] = int3;
      PrivateAccess.setVariable((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "columnIndices", (Object) intArray0);
      int int4 = 703;
      int int5 = 4;
      double double0 = 1.0;
      Matrix matrix0 = Matrix.constant(intArray0[2], int5, double0);
      double double1 = 0.0;
      PrivateAccess.callMethod((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "insert", (Object) int0, (Class<?>) int.class, (Object) int1, (Class<?>) int.class, (Object) int4, (Class<?>) int.class, (Object) double1, (Class<?>) double.class);
      PrivateAccess.setVariable((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "rowPointers", (Object) intArray0);
      PrivateAccess.callMethod((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "growUp");
      int int6 = 1102;
      PrivateAccess.callMethod((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "align", (Object) int6, (Class<?>) int.class);
      int int7 = 1894;
      PrivateAccess.callMethod((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "align", (Object) int7, (Class<?>) int.class);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 24;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, int0);
      cRSMatrix0.add((double) int0);
      cRSMatrix0.min();
      Matrix matrix0 = cRSMatrix0.removeLastRow();
      matrix0.toBinary();
      int int1 = 1976;
      Integer integer0 = new Integer(int1);
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      cRSMatrix0.apply(matrixOperation0);
      Matrix matrix1 = cRSMatrix0.removeFirstRow();
      matrix0.diagonalProduct();
      int int2 = 1;
      int int3 = 1;
      MockRandom mockRandom0 = new MockRandom(int2);
      SparseMatrix.random(int2, int3, (double) int2, (Random) mockRandom0);
      int int4 = (-1055);
      cRSMatrix0.euclideanNorm();
      double double0 = (-1908.1);
      int int5 = 0;
      CRSMatrix.zero(int5, int1);
      int int6 = 1;
      try { 
        PrivateAccess.callMethod((Class<CRSMatrix>) CRSMatrix.class, (CRSMatrix) matrix1, "insert", (Object) int1, (Class<?>) int.class, (Object) int0, (Class<?>) int.class, (Object) int6, (Class<?>) int.class, (Object) int1, (Class<?>) double.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1976
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 4;
      int int1 = 562;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1);
      cRSMatrix0.toBinary();
      cRSMatrix0.setAll(int1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      int int2 = 1;
      Matrix matrix0 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(matrix0).columns();
      doReturn(int0, int0).when(matrix0).rows();
      int int3 = 1;
      Matrix matrix1 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(matrix1).columns();
      doReturn(int2, int0).when(matrix1).rows();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix1, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      byte[] byteArray0 = null;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int0, int0, int0);
      int int1 = 1;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(int1, vectorProcedure0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      cRSMatrix1.withSolver(linearAlgebra_SolverFactory0);
      int int2 = 992;
      MockRandom mockRandom0 = new MockRandom(int2);
      mockRandom0.nextBoolean();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(int0, int2, (double) int2, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      long long0 = (-1L);
      MockRandom mockRandom0 = new MockRandom(long0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      int[] intArray0 = new int[2];
      int int1 = (-2184);
      intArray0[0] = int1;
      intArray0[1] = int0;
      PrivateAccess.setVariable((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "columnIndices", (Object) intArray0);
      int int2 = 5;
      PrivateAccess.callMethod((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "remove", (Object) int0, (Class<?>) int.class, (Object) int2, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 4;
      int int1 = 562;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1);
      cRSMatrix0.toBinary();
      cRSMatrix0.setAll(int1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      int int2 = 417;
      int int3 = 854;
      int int4 = 274;
      int int5 = (-2431);
      Matrix matrix0 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn(int1, int4).when(matrix0).rows();
      int int6 = 0;
      int int7 = 2072;
      int int8 = (-1451);
      Matrix matrix1 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix1, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      long long0 = (-1L);
      MockRandom mockRandom0 = new MockRandom(long0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      try { 
        PrivateAccess.callMethod((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "growUp");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This matrix can't grow up.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 24;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, int0);
      cRSMatrix0.add((double) int0);
      cRSMatrix0.min();
      Matrix matrix0 = cRSMatrix0.removeLastRow();
      matrix0.toBinary();
      cRSMatrix0.removeFirstRow();
      PrivateAccess.callMethod((Class<CRSMatrix>) CRSMatrix.class, (CRSMatrix) matrix0, "growUp");
      matrix0.diagonalProduct();
      int int1 = (-1055);
      cRSMatrix0.euclideanNorm();
      double double0 = (-1908.1);
      int int2 = 0;
      // Undeclared exception!
      try { 
        matrix0.copyOfShape(int2, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1055
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toMatrixMarket();
      int int0 = 0;
      PrivateAccess.callMethod((Class<CRSMatrix>) CRSMatrix.class, cRSMatrix0, "growUp");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(int0, int0, doubleArray0);
      int int1 = 1;
      cRSMatrix0.getColumn(int1);
      Matrix matrix0 = cRSMatrix0.blankOfShape(int0, int0);
      double double0 = (-1089.0);
      matrix0.add(double0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      int int2 = 1986;
      int int3 = 32;
      cRSMatrix0.copyOfShape(int2, int3);
      doubleArray1[4] = doubleArray0;
      cRSMatrix0.swapColumns(int1, int0);
      CRSMatrix.from2DArray(doubleArray1);
      int int4 = (-994);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.identity(int4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachInRow(int0, vectorProcedure0);
      String string0 = "t{hJqkzVdUy:S";
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 7;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      int int1 = 0;
      double[] doubleArray0 = null;
      Matrix.from1DArray(int1, int1, doubleArray0);
      int int2 = 1;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cRSMatrix0.toCSV((NumberFormat) decimalFormat0);
      int int3 = 108;
      cRSMatrix0.copyOfShape(int2, int3);
      int int4 = 1;
      CRSMatrix.zero(int4, int2);
      int int5 = 8;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(int5, int5, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(int0, int0, doubleArray0);
      int int1 = 1;
      cRSMatrix0.getColumn(int1);
      Matrix matrix0 = cRSMatrix0.blankOfShape(int0, int0);
      matrix0.diagonalProduct();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.transform(matrixFunction0);
      String string0 = "";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int0 = 484;
      int int1 = 1;
      int int2 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1, int2);
      int int3 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(int3, vectorFunction0);
      cRSMatrix0.iteratorOfNonZeroRows();
      double double0 = 1.0;
      int int4 = 0;
      int int5 = 2263;
      int int6 = 0;
      MockRandom mockRandom0 = new MockRandom(int0);
      CRSMatrix.randomSymmetric(int6, double0, (Random) mockRandom0);
      int int7 = 0;
      CRSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int1 = 2;
      cRSMatrix0.nonZeroIteratorOfRow(int1);
      int[] intArray0 = null;
      VectorProcedure vectorProcedure0 = null;
      cRSMatrix0.eachNonZeroInColumn(int1, vectorProcedure0);
      cRSMatrix0.iteratorOfNonZeroRows();
      ((CRSMatrix) rowMajorSparseMatrix0).min();
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 3407;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 1;
      Matrix matrix0 = Matrix.diagonal(int0, int0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(int0, vectorProcedure0);
      String string0 = "t{hJqkzVdUy:S";
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.setAll(int0);
      int int1 = 2214;
      MatrixFunction matrixFunction0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 24;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, int0);
      Matrix matrix0 = cRSMatrix0.add((double) int0);
      cRSMatrix0.min();
      Matrix matrix1 = cRSMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix1, matrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 24;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, int0);
      cRSMatrix0.add((double) int0);
      cRSMatrix0.min();
      cRSMatrix0.removeLastRow();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(int0, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = cRSMatrix0.rotate();
      matrix0.min();
      cRSMatrix0.multiply(matrix0);
      cRSMatrix0.rowMajorIterator();
      int int0 = 910;
      int int1 = 1831;
      RowMajorSparseMatrix.zero(int0, int1);
      cRSMatrix0.toBinary();
      int int2 = 1;
      RowMajorSparseMatrix.zero(int2, int2, int2);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 24;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, int0);
      cRSMatrix0.add((double) int0);
      cRSMatrix0.min();
      Matrix matrix0 = cRSMatrix0.removeLastRow();
      matrix0.diagonalProduct();
      int int1 = (-1055);
      cRSMatrix0.euclideanNorm();
      double double0 = (-1908.1);
      matrix0.rotate();
      int int2 = 0;
      // Undeclared exception!
      try { 
        matrix0.copyOfShape(int2, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1055
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      Random random0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.random(int0, int1, (double) int0, random0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 6;
      int int1 = 183;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int1);
      int int2 = 0;
      double double0 = (-25.3777160564);
      cRSMatrix0.setColumn(int2, double0);
      double double1 = 467.1838;
      double double2 = 353.6466796639;
      double double3 = 2585.297091151;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double1, double1, double2, double3, (double)int2).when(vectorAccumulator0).accumulate();
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(int1, int0, mockRandom0);
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      int int3 = 0;
      Matrix.unit(int3, int0);
      cRSMatrix0.blank();
      cRSMatrix0.iteratorOfRow(int0);
      cRSMatrix0.getColumn(int0);
      cRSMatrix0.nonZeroRowMajorIterator();
      int int4 = (-1677);
      double double4 = 0.0;
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal(int4, double4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double double0 = (-1188.302);
      cRSMatrix0.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int1 = 2;
      cRSMatrix0.nonZeroIteratorOfRow(int1);
      int int2 = 0;
      VectorProcedure vectorProcedure0 = null;
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInColumn(int2, vectorProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 3137;
      MockRandom mockRandom0 = new MockRandom();
      double double0 = 2096.0;
      int int1 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int1);
      CRSMatrix.zero(int1, int1, int1);
      MatrixProcedure matrixProcedure0 = null;
      // Undeclared exception!
      try { 
        cRSMatrix0.each(matrixProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      String string0 = "";
      SparseMatrix.fromCSV(string0);
      cRSMatrix0.nonZeroRowMajorIterator();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix0 = cRSMatrix0.to(matrixFactory0);
      int int0 = (-125);
      cRSMatrix0.getColumn(int0);
      int int1 = 0;
      Matrix matrix1 = cRSMatrix0.blankOfShape(int1, int1);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix0.each(matrixProcedure0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, cRSMatrix0, matrix1, matrix0);
      int int2 = 0;
      int int3 = 4538;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.updateRow(int3, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4538
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 40;
      int int1 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1);
      int int2 = (-1026);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      cRSMatrix0.apply(matrixOperation0);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(int2, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1026
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = (-1018);
      int int1 = 0;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(int0, int1, (double) int1, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = Double.POSITIVE_INFINITY;
      doubleArray1[1] = double1;
      double double2 = 712.28222785311;
      doubleArray1[2] = double2;
      double double3 = 4687.69214125261;
      doubleArray1[3] = double3;
      double double4 = (-851.9237698460315);
      doubleArray1[4] = double4;
      double double5 = 0.0;
      doubleArray1[5] = double5;
      double double6 = 1240.46;
      doubleArray1[6] = double6;
      double double7 = 232.10430673236425;
      doubleArray1[7] = double7;
      double double8 = 1.0;
      doubleArray1[8] = double8;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      cRSMatrix0.minInRow(int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 1474;
      double double0 = 0.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, double0);
      // Undeclared exception!
      cRSMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 3561;
      int int1 = 260;
      int int2 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int1, int2);
      cRSMatrix0.copyOfShape(int2, int0);
      cRSMatrix0.nonZeroIteratorOfRow(int0);
      cRSMatrix0.minInRow(int2);
      cRSMatrix0.blankOfShape(int1, int0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "";
      CRSMatrix.fromCSV(string0);
      int int0 = 0;
      int int1 = 0;
      CRSMatrix.zero(int0, int1, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 1;
      int int1 = 1452;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(int0, int1, (double) int0, (Random) mockRandom0);
      int int2 = 0;
      mockRandom0.nextBoolean();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1452
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[6];
      double double0 = 2620.8545894935646;
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      double double2 = 1.0;
      doubleArray1[2] = double2;
      double double3 = 0.0;
      doubleArray1[3] = double3;
      double double4 = 0.0;
      doubleArray1[4] = double4;
      double double5 = 4544.088195680436;
      doubleArray1[5] = double5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = double1;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 4;
      int int1 = 562;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1);
      cRSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '563' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 3407;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 66;
      int int1 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1);
      cRSMatrix0.removeLastColumn();
      cRSMatrix0.getColumn(int0);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int0, int0, int0);
      cRSMatrix1.iteratorOfNonZeroRows();
      int int2 = 1;
      int int3 = 1332;
      // Undeclared exception!
      try { 
        cRSMatrix1.swapRows(int2, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1333
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      double double0 = 0.0;
      doubleArray3[0] = double0;
      double double1 = 2045.0;
      doubleArray3[1] = double1;
      double double2 = 0.0;
      doubleArray3[2] = double2;
      double double3 = 1.0;
      doubleArray3[3] = double3;
      double double4 = 694.0;
      doubleArray3[4] = double4;
      double double5 = 0.0;
      doubleArray3[5] = double5;
      double double6 = 0.0;
      doubleArray3[6] = double6;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = double4;
      doubleArray4[1] = double4;
      double double7 = 1634.799840169;
      doubleArray4[2] = double7;
      doubleArray4[3] = double3;
      doubleArray4[4] = double1;
      doubleArray4[5] = double3;
      doubleArray4[6] = double4;
      doubleArray4[7] = double1;
      doubleArray4[8] = double5;
      doubleArray0[3] = doubleArray4;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      cRSMatrix0.nonZeroIteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 7;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int0);
      cRSMatrix0.multiply((double) int0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      int int1 = 1357;
      double[] doubleArray0 = null;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(int0, int1, doubleArray0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0, int0);
      Vector vector0 = null;
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0, int0);
      int int1 = 0;
      Matrix matrix0 = Matrix.identity(int1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformColumn(int0, vectorFunction0);
      cRSMatrix0.subtract(matrix0);
      cRSMatrix0.setAll(int0);
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 3115;
      double double0 = (-441.6990895452);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, double0);
      int int1 = 37;
      cRSMatrix0.iteratorOfRow(int1);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 1;
      double double0 = (-24.5144978);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, double0);
      cRSMatrix0.copyOfShape(int0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      CRSMatrix.from1DArray(int0, int1, doubleArray0);
      String string0 = null;
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 217;
      int int1 = 1;
      double[] doubleArray0 = new double[1];
      double double0 = 24.0;
      doubleArray0[0] = double0;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(int0, int1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      cRSMatrix0.min();
      int int1 = 0;
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      cRSMatrix0.apply(matrixOperation0);
      CRSMatrix.diagonal(int1, int0);
      int int2 = 0;
      int int3 = (-1071);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape(int2, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1071
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = (-2215);
      int int1 = 1;
      double double0 = (-412.6125);
      Random random0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.random(int0, int1, double0, random0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 2532;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      int int1 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(int1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 3044;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      String string0 = "Sides of blocks are incompatible!";
      // Undeclared exception!
      cRSMatrix0.mkString(string0, string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 3;
      int int1 = 1598;
      int int2 = 357;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1, int2);
      int int3 = 0;
      int int4 = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(int3, int4, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-1371);
      int int1 = (-2039);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1371x-2039
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 43;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 0;
      cRSMatrix0.toCSV();
      cRSMatrix0.copyOfShape(int0, int0);
      int int1 = 2278;
      cRSMatrix0.maxInColumn(int1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(int0);
      mockRandom0.ints();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      cRSMatrix0.nonZeroIteratorOfRow(int0);
      int int1 = 0;
      MatrixFunction matrixFunction0 = null;
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(int0, int1, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      int int1 = 35;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int0;
      int[] intArray0 = new int[4];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int1;
      intArray0[3] = int0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1, int0, doubleArray0, intArray0, intArray0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.random(int1, intArray0[3], (double) intArray0[2], (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)40;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 1117;
      int int1 = 4701;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int1;
      double double0 = (-1257.097406213);
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      double double1 = 0.0;
      doubleArray0[3] = double1;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(int0, int1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 79;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(int0, int0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 967;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(int0, int0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 2022;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      int int1 = (-1324);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1324
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[5];
      double double0 = (-1546.3079405);
      doubleArray1[0] = double0;
      double double1 = 2883.00192594;
      doubleArray1[1] = double1;
      double double2 = 2390.381268;
      doubleArray1[2] = double2;
      double double3 = 1.0;
      doubleArray1[3] = double3;
      double double4 = 0.0;
      doubleArray1[4] = double4;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int int0 = 3051;
      double double5 = (-3082.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(int0, int0, double5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3051' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 505;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int0, int0);
      int int1 = 1;
      cRSMatrix0.sliceBottomRight(int0, int1);
      double double0 = 1355.857939918395;
      cRSMatrix1.getRow(int1);
      // Undeclared exception!
      cRSMatrix0.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int0);
      String string0 = "CHOLESKY";
      int int1 = (-1);
      cRSMatrix0.maxInColumn(int1);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = (-1657);
      // Undeclared exception!
      try { 
        CRSMatrix.identity(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-202);
      int int1 = 0;
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int1;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(int0, int1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -202x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.min();
      int int0 = 1698;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int0, int0);
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix1.nonZeroAt(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1699
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 1;
      int int1 = 2227;
      int int2 = 1552;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int1, int2);
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2227
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-282);
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -282x-282
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(int0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 2214;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(int0, int0, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int1;
      doubleArray0[7] = (double) int1;
      doubleArray0[8] = (double) int1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(int0, int1, doubleArray0);
      int int2 = (-315);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumn(int2, vectorAccumulator0);
      int int3 = 0;
      Matrix matrix0 = cRSMatrix0.blankOfColumns(int3);
      cRSMatrix0.subtract(matrix0);
      int int4 = 1;
      cRSMatrix0.blankOfColumns(int4);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      int int5 = 1;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int0, int5);
      int int6 = (-3162);
      int int7 = 0;
      // Undeclared exception!
      try { 
        cRSMatrix1.set(int6, int7, doubleArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-3162' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      String string0 = "";
      SparseMatrix.fromCSV(string0);
      cRSMatrix0.nonZeroRowMajorIterator();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      long long0 = (-1L);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int0);
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 0;
      double double0 = 2311.37430953318;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, double0);
      cRSMatrix0.toDenseMatrix();
      cRSMatrix0.maxInColumn(int0);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(cRSMatrix0);
      String string0 = null;
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 4;
      int int1 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1);
      cRSMatrix0.toSparseMatrix();
      int int2 = (-865);
      String string0 = "Ze:CTN`{'F$\\1Vyl}3";
      String string1 = "rHwNP";
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV(string1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = (-2719);
      int int1 = 950;
      int int2 = 1846;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2719x950
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int0, int0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-2125);
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(int0);
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2125x-2125
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "`}k`N";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-557);
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal(int0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1815);
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1815
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = (-239);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(int0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -239
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 4;
      int int1 = 562;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1);
      cRSMatrix0.toBinary();
      cRSMatrix0.setAll(int1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      Matrix matrix0 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(matrix0).columns();
      doReturn(0, 0, 0).when(matrix0).rows();
      Matrix matrix1 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(matrix1).columns();
      doReturn(0, 0, 0).when(matrix1).rows();
      CRSMatrix.block(matrix0, matrix0, matrix1, matrix1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(int0, int0, doubleArray0);
      int int1 = 1;
      cRSMatrix0.getColumn(int1);
      cRSMatrix0.blankOfShape(int0, int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CRSMatrix.from2DArray(doubleArray1);
      int int2 = (-994);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.identity(int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 24;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int0, int0);
      assertEquals(24.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.041666666666666664, cRSMatrix0.density(), 0.01);
      assertEquals(24, cRSMatrix0.columns());
      assertEquals(24, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(24, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = cRSMatrix0.add((double) int0);
      assertEquals(24.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.041666666666666664, cRSMatrix0.density(), 0.01);
      assertEquals(24, cRSMatrix0.columns());
      assertEquals(24, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(24, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(24, matrix0.rows());
      assertEquals(24, matrix0.columns());
      assertNotNull(matrix0);
      
      double double0 = cRSMatrix0.min();
      assertEquals(24.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.041666666666666664, cRSMatrix0.density(), 0.01);
      assertEquals(24, cRSMatrix0.columns());
      assertEquals(24, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(24, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeLastRow();
      assertEquals(24.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.041666666666666664, cRSMatrix0.density(), 0.01);
      assertEquals(24, cRSMatrix0.columns());
      assertEquals(24, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(24, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(24.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.041666666666666664, cRSMatrix1.density(), 0.01);
      assertEquals(23, cRSMatrix1.rows());
      assertEquals(23, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(24, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      byte[] byteArray0 = cRSMatrix1.toBinary();
      assertEquals(24.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.041666666666666664, cRSMatrix0.density(), 0.01);
      assertEquals(24, cRSMatrix0.columns());
      assertEquals(24, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(24, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(24.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.041666666666666664, cRSMatrix1.density(), 0.01);
      assertEquals(23, cRSMatrix1.rows());
      assertEquals(23, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(24, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(385, byteArray0.length);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(byteArray0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.removeFirstRow();
      assertEquals(24.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.041666666666666664, cRSMatrix0.density(), 0.01);
      assertEquals(24, cRSMatrix0.columns());
      assertEquals(24, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(24, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(23, cRSMatrix2.cardinality());
      assertEquals(24.0, cRSMatrix2.max(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(24, cRSMatrix2.columns());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(23, cRSMatrix2.rows());
      assertEquals(0.041666666666666664, cRSMatrix2.density(), 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      
      double double1 = cRSMatrix1.diagonalProduct();
      assertEquals(24.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.041666666666666664, cRSMatrix0.density(), 0.01);
      assertEquals(24, cRSMatrix0.columns());
      assertEquals(24, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(24, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(24.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.041666666666666664, cRSMatrix1.density(), 0.01);
      assertEquals(23, cRSMatrix1.rows());
      assertEquals(23, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(24, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(5.5572324035428505E31, double1, 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix2));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      
      int int1 = (-1055);
      double double2 = cRSMatrix0.euclideanNorm();
      assertEquals(24.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.041666666666666664, cRSMatrix0.density(), 0.01);
      assertEquals(24, cRSMatrix0.columns());
      assertEquals(24, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(24, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(117.57550765359255, double2, 0.01);
      assertFalse(int0 == int1);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      
      double double3 = (-1908.1);
      int int2 = 0;
      // Undeclared exception!
      try { 
        cRSMatrix1.copyOfShape(int2, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1055
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[9];
      double double0 = (-1254.61);
      doubleArray1[0] = double0;
      double double1 = (-173.226986584159);
      doubleArray1[1] = double1;
      double double2 = 3421.0;
      doubleArray1[2] = double2;
      double double3 = 0.0;
      doubleArray1[3] = double3;
      double double4 = 795.89877;
      doubleArray1[4] = double4;
      double double5 = (-317.4472027253194);
      doubleArray1[5] = double5;
      double double6 = (-17.915853893);
      doubleArray1[6] = double6;
      double double7 = 0.0;
      doubleArray1[7] = double7;
      double double8 = (-3082.0);
      doubleArray1[8] = double8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double3;
      doubleArray2[1] = double3;
      double double9 = (-1233.874456920095);
      doubleArray2[2] = double9;
      doubleArray2[3] = double1;
      doubleArray2[4] = double3;
      doubleArray2[5] = double7;
      double double10 = (-2173.33198164);
      doubleArray2[6] = double10;
      doubleArray2[7] = double1;
      doubleArray2[8] = double4;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      long long0 = (-1L);
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(int0, int1, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 1;
      int int1 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int1, int1);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      MatrixVectorOperation<Object> matrixVectorOperation0 = (MatrixVectorOperation<Object>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      SweepSolver sweepSolver0 = new SweepSolver(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, sweepSolver0.unknowns());
      assertEquals(1, sweepSolver0.equations());
      assertNotNull(sweepSolver0);
      
      int int2 = 0;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfColumns(int2);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.rows());
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix1);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(1, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(1, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      
      boolean boolean0 = sweepSolver0.applicableTo(cRSMatrix2);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, sweepSolver0.unknowns());
      assertEquals(1, sweepSolver0.equations());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(1, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(1, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertTrue(boolean0);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      
      Vector vector0 = null;
      // Undeclared exception!
      try { 
        sweepSolver0.solve(vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = (-276);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      double double0 = 0.0;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int0;
      double double1 = 2425.0011568551568;
      doubleArray0[6] = double1;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(int0, int0, int0, doubleArray0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -276x-276
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(int0, int0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(2, cRSMatrix1.columns());
      assertEquals(4, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachInRow(int0, vectorProcedure0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(2, cRSMatrix1.columns());
      assertEquals(4, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      String string0 = "t{hJqkzVdUy:S";
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int0 = 484;
      int int1 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      Iterator<Integer> iterator0 = cRSMatrix0.iteratorOfNonZeroRows();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(iterator0);
      
      double double0 = 1.0;
      int int2 = 0;
      int int3 = 2263;
      int int4 = 18;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(int4, double0, (Random) mockRandom0);
      assertEquals(18, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.04938271604938271, cRSMatrix1.density(), 0.01);
      assertEquals(18, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(16, cRSMatrix1.cardinality());
      assertEquals(0.9, cRSMatrix1.max(), 0.01);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      int int5 = 0;
  }
}
