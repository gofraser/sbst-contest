/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 21:25:16 GMT 2018
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonPrimitive;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonPrimitive_ESTest extends JsonPrimitive_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = (-12L);
      Long long1 = new Long(long0);
      assertEquals((-12L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertNotNull(jsonPrimitive1);
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertTrue(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isNumber());
      
      byte[] byteArray0 = new byte[22];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(22, byteArray0.length);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      jsonPrimitive1.setValue(bigInteger0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertEquals(22, byteArray0.length);
      assertNotSame(jsonPrimitive1, jsonPrimitive0);
      assertFalse(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertTrue(jsonPrimitive1.isNumber());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      boolean boolean2 = jsonPrimitive0.equals(jsonPrimitive1);
      assertFalse(boolean2);
      assertTrue(long1.equals((Object)long0));
      assertFalse(jsonPrimitive0.equals((Object)jsonPrimitive1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertFalse(boolean2 == boolean0);
      assertNotSame(jsonPrimitive0, jsonPrimitive1);
      assertNotSame(jsonPrimitive1, jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertTrue(jsonPrimitive1.isNumber());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = (-4.613386472572813);
      Double double1 = new Double(double0);
      assertEquals((-4.613386472572813), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      jsonPrimitive0.hashCode();
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-47);
      byteArray0[0] = byte0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-47), (byte)0, (byte)0}, byteArray0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigInteger0);
      assertEquals(3, byteArray0.length);
      assertNotNull(jsonPrimitive0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertArrayEquals(new byte[] {(byte) (-47), (byte)0, (byte)0}, byteArray0);
      
      jsonPrimitive0.hashCode();
      assertEquals(3, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertArrayEquals(new byte[] {(byte) (-47), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char char0 = '8';
      Character character0 = new Character(char0);
      assertEquals('8', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isString());
      
      boolean boolean0 = jsonPrimitive0.isString();
      assertTrue(boolean0);
      assertTrue(character0.equals((Object)char0));
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      boolean boolean1 = jsonPrimitive0.isNumber();
      assertFalse(boolean1);
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "@L<pnB(} L@k<,0$o";
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(string0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      
      boolean boolean0 = jsonPrimitive0.isBoolean();
      assertFalse(boolean0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte byte0 = Character.DIRECTIONALITY_BOUNDARY_NEUTRAL;
      assertEquals((byte)9, byte0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(byte0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      short short0 = jsonPrimitive0.getAsShort();
      assertEquals((short)9, short0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-20);
      Integer integer0 = new Integer(int0);
      assertEquals((-20), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      
      short short0 = jsonPrimitive0.getAsShort();
      assertEquals((short) (-20), short0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char char0 = '~';
      Character character0 = new Character(char0);
      assertEquals('~', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      Object object0 = null;
      PrivateAccess.setVariable((Class<JsonPrimitive>) JsonPrimitive.class, jsonPrimitive0, "value", object0);
      assertTrue(character0.equals((Object)char0));
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      Number number0 = jsonPrimitive0.getAsNumber();
      assertTrue(character0.equals((Object)char0));
      assertNull(number0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte byte0 = Character.DIRECTIONALITY_BOUNDARY_NEUTRAL;
      assertEquals((byte)9, byte0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(byte0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      
      Number number0 = jsonPrimitive0.getAsNumber();
      assertEquals((byte)9, number0);
      assertNotNull(number0);
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-20);
      Integer integer0 = new Integer(int0);
      assertEquals((-20), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isNumber());
      
      Number number0 = jsonPrimitive0.getAsNumber();
      assertEquals((-20), number0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(number0.equals((Object)int0));
      assertNotNull(number0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte byte0 = Character.DIRECTIONALITY_BOUNDARY_NEUTRAL;
      assertEquals((byte)9, byte0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(byte0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      
      long long0 = jsonPrimitive0.getAsLong();
      assertEquals(9L, long0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = (-3160L);
      Long long1 = new Long(long0);
      assertEquals((-3160L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      long long2 = jsonPrimitive0.getAsLong();
      assertEquals((-3160L), long2);
      assertTrue(long1.equals((Object)long0));
      assertTrue(long2 == long0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigInteger0);
      assertEquals(3, byteArray0.length);
      assertNotNull(jsonPrimitive0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = jsonPrimitive0.getAsInt();
      assertEquals(0, int0);
      assertEquals(3, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = (-12L);
      Long long1 = new Long(long0);
      assertEquals((-12L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      int int0 = jsonPrimitive0.getAsInt();
      assertEquals((-12), int0);
      assertTrue(long1.equals((Object)long0));
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte byte0 = Character.DIRECTIONALITY_BOUNDARY_NEUTRAL;
      assertEquals((byte)9, byte0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(byte0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      
      float float0 = jsonPrimitive0.getAsFloat();
      assertEquals(9.0F, float0, 0.01F);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      short short0 = (short) (-422);
      Short short1 = new Short(short0);
      assertEquals((short) (-422), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      
      float float0 = jsonPrimitive0.getAsFloat();
      assertEquals((-422.0F), float0, 0.01F);
      assertTrue(short1.equals((Object)short0));
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = (-583.687);
      Double double1 = new Double(double0);
      assertEquals((-583.687), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      double double2 = jsonPrimitive0.getAsDouble();
      assertEquals((-583.687), double2, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(double2, double0, 0.01);
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char char0 = '/';
      Character character0 = new Character(char0);
      assertEquals('/', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      char char1 = jsonPrimitive0.getAsCharacter();
      assertEquals('/', char1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(char1 == char0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char char0 = '2';
      Character character0 = new Character(char0);
      assertEquals('2', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      
      char char1 = jsonPrimitive0.getAsCharacter();
      assertEquals('2', char1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(char1 == char0);
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short(short0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      
      byte byte0 = jsonPrimitive0.getAsByte();
      assertEquals((byte)0, byte0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = Double.MAX_EXPONENT;
      assertEquals(1023, int0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(int0);
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      
      byte byte0 = jsonPrimitive0.getAsByte();
      assertEquals((byte) (-1), byte0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      Boolean boolean1 = jsonPrimitive0.getAsBooleanWrapper();
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      
      Boolean boolean1 = jsonPrimitive0.getAsBooleanWrapper();
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-47);
      byteArray0[1] = byte0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-12032), bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-47), (byte)0}, byteArray0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigInteger0);
      assertEquals(3, byteArray0.length);
      assertNotNull(jsonPrimitive0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-12032), bigInteger0.shortValue());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-47), (byte)0}, byteArray0);
      
      BigInteger bigInteger1 = jsonPrimitive0.getAsBigInteger();
      assertEquals(3, byteArray0.length);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-12032), bigInteger0.shortValue());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertEquals((short) (-12032), bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-47), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)11;
      byteArray0[2] = byte0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(bigInteger0);
      assertEquals((short)11, bigInteger0.shortValue());
      assertEquals((byte)11, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)11}, byteArray0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigInteger0);
      assertEquals(3, byteArray0.length);
      assertNotNull(jsonPrimitive0);
      assertEquals((short)11, bigInteger0.shortValue());
      assertEquals((byte)11, bigInteger0.byteValue());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)11}, byteArray0);
      
      BigInteger bigInteger1 = jsonPrimitive0.getAsBigInteger();
      assertEquals(3, byteArray0.length);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)11, bigInteger0.shortValue());
      assertEquals((byte)11, bigInteger0.byteValue());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertEquals((byte)11, bigInteger1.byteValue());
      assertEquals((short)11, bigInteger1.shortValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)11}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-47);
      byteArray0[2] = byte0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-47), bigInteger0.byteValue());
      assertEquals((short)209, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-47)}, byteArray0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigInteger0);
      assertEquals(3, byteArray0.length);
      assertNotNull(jsonPrimitive0);
      assertEquals((byte) (-47), bigInteger0.byteValue());
      assertEquals((short)209, bigInteger0.shortValue());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-47)}, byteArray0);
      
      BigInteger bigInteger1 = jsonPrimitive0.getAsBigInteger();
      assertEquals(3, byteArray0.length);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte) (-47), bigInteger0.byteValue());
      assertEquals((short)209, bigInteger0.shortValue());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertEquals((short)209, bigInteger1.shortValue());
      assertEquals((byte) (-47), bigInteger1.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-47)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = 1574.355509714735;
      MathContext mathContext0 = MathContext.DECIMAL128;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(double0, mathContext0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertEquals((short)1574, bigDecimal0.shortValue());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigDecimal0);
      assertNotNull(jsonPrimitive0);
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertEquals((short)1574, bigDecimal0.shortValue());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      
      BigDecimal bigDecimal1 = jsonPrimitive0.getAsBigDecimal();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertEquals((short)1574, bigDecimal0.shortValue());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertEquals((short)1574, bigDecimal1.shortValue());
      assertEquals((byte)38, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = (-319L);
      BigDecimal bigDecimal0 = new BigDecimal(long0);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-63), bigDecimal0.byteValue());
      assertEquals((short) (-319), bigDecimal0.shortValue());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigDecimal0);
      assertNotNull(jsonPrimitive0);
      assertEquals((byte) (-63), bigDecimal0.byteValue());
      assertEquals((short) (-319), bigDecimal0.shortValue());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      BigDecimal bigDecimal1 = jsonPrimitive0.getAsBigDecimal();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals((byte) (-63), bigDecimal0.byteValue());
      assertEquals((short) (-319), bigDecimal0.shortValue());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertEquals((byte) (-63), bigDecimal1.byteValue());
      assertEquals((short) (-319), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "";
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(string0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      assertSame(jsonPrimitive0, jsonPrimitive1);
      assertSame(jsonPrimitive1, jsonPrimitive0);
      assertNotNull(jsonPrimitive1);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertTrue(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isBoolean());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = null;
      Boolean boolean0 = new Boolean(string0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isBoolean());
      
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      assertSame(jsonPrimitive0, jsonPrimitive1);
      assertSame(jsonPrimitive1, jsonPrimitive0);
      assertNotNull(jsonPrimitive1);
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte byte0 = Character.DIRECTIONALITY_BOUNDARY_NEUTRAL;
      assertEquals((byte)9, byte0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(byte0);
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      
      Object object0 = null;
      // Undeclared exception!
      try { 
        jsonPrimitive0.setValue(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.JsonPrimitive", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char char0 = '6';
      Character character0 = Character.valueOf(char0);
      assertEquals('6', (char)character0);
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.setValue(jsonPrimitive0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char char0 = ']';
      Character character0 = Character.valueOf(char0);
      assertEquals(']', (char)character0);
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      int int0 = 0;
      boolean boolean0 = Character.isBmpCodePoint(int0);
      assertTrue(boolean0);
      
      PrivateAccess.setVariable((Class<JsonPrimitive>) JsonPrimitive.class, jsonPrimitive0, "value", (Object) character0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.getAsString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Character cannot be cast to java.lang.String
         //
         verifyException("com.google.gson.JsonPrimitive", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.getAsNumber();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.JsonPrimitive", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "";
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(string0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isString());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.getAsInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char char0 = 'f';
      Character character0 = new Character(char0);
      assertEquals('f', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.getAsDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(string0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.getAsCharacter();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-20);
      Integer integer0 = new Integer(int0);
      assertEquals((-20), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.getAsBooleanWrapper();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Boolean
         //
         verifyException("com.google.gson.JsonPrimitive", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = null;
      JsonPrimitive jsonPrimitive0 = null;
      try {
        jsonPrimitive0 = new JsonPrimitive(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.JsonPrimitive", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = null;
      JsonPrimitive jsonPrimitive0 = null;
      try {
        jsonPrimitive0 = new JsonPrimitive(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.JsonPrimitive", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Number number0 = null;
      JsonPrimitive jsonPrimitive0 = null;
      try {
        jsonPrimitive0 = new JsonPrimitive(number0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.JsonPrimitive", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Character character0 = null;
      JsonPrimitive jsonPrimitive0 = null;
      try {
        jsonPrimitive0 = new JsonPrimitive(character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.JsonPrimitive", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Boolean boolean0 = null;
      JsonPrimitive jsonPrimitive0 = null;
      try {
        jsonPrimitive0 = new JsonPrimitive(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.JsonPrimitive", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "";
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(string0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isBoolean());
      
      String string1 = jsonPrimitive0.getAsString();
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte byte0 = Character.DIRECTIONALITY_BOUNDARY_NEUTRAL;
      assertEquals((byte)9, byte0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(byte0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      String string0 = jsonPrimitive0.getAsString();
      assertNotNull(string0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short(short0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      
      Number number0 = jsonPrimitive0.getAsNumber();
      assertEquals((short)0, number0);
      assertTrue(short1.equals((Object)short0));
      assertTrue(number0.equals((Object)short0));
      assertNotNull(number0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean1);
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      
      boolean boolean2 = jsonPrimitive0.isBoolean();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short(short0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      
      boolean boolean0 = jsonPrimitive0.isNumber();
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte byte0 = Character.DIRECTIONALITY_BOUNDARY_NEUTRAL;
      assertEquals((byte)9, byte0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(byte0);
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      jsonPrimitive0.hashCode();
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = Float.BYTES;
      assertEquals(4, int0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(int0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      int int1 = jsonPrimitive0.hashCode();
      assertTrue(int1 == int0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      long long0 = (-12L);
      Long long1 = new Long(long0);
      assertEquals((-12L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertNotNull(jsonPrimitive1);
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isBoolean());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isJsonObject());
      
      PrivateAccess.setVariable((Class<JsonPrimitive>) JsonPrimitive.class, jsonPrimitive1, "value", (Object) long1);
      assertTrue(long1.equals((Object)long0));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertNotSame(jsonPrimitive1, jsonPrimitive0);
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertTrue(jsonPrimitive1.isNumber());
      
      boolean boolean2 = jsonPrimitive0.equals(jsonPrimitive1);
      assertTrue(boolean2);
      assertTrue(long1.equals((Object)long0));
      assertTrue(jsonPrimitive0.equals((Object)jsonPrimitive1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertTrue(boolean2 == boolean0);
      assertNotSame(jsonPrimitive0, jsonPrimitive1);
      assertNotSame(jsonPrimitive1, jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertTrue(jsonPrimitive1.isNumber());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      long long0 = 15L;
      Long long1 = new Long(long0);
      assertEquals(15L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isNumber());
      
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertNotNull(jsonPrimitive1);
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isString());
      
      byte[] byteArray0 = new byte[21];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(21, byteArray0.length);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      jsonPrimitive1.setValue(bigInteger0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertEquals(21, byteArray0.length);
      assertNotSame(jsonPrimitive1, jsonPrimitive0);
      assertTrue(jsonPrimitive1.isNumber());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isBoolean());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      boolean boolean2 = jsonPrimitive0.equals(jsonPrimitive1);
      assertFalse(boolean2);
      assertTrue(long1.equals((Object)long0));
      assertFalse(jsonPrimitive0.equals((Object)jsonPrimitive1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertFalse(boolean2 == boolean0);
      assertNotSame(jsonPrimitive0, jsonPrimitive1);
      assertNotSame(jsonPrimitive1, jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive1.isNumber());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isBoolean());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long long0 = (-12L);
      Long long1 = new Long(long0);
      assertEquals((-12L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertNotNull(jsonPrimitive1);
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isBoolean());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isJsonArray());
      
      PrivateAccess.setVariable((Class<JsonPrimitive>) JsonPrimitive.class, jsonPrimitive0, "value", (Object) jsonPrimitive1);
      assertTrue(long1.equals((Object)long0));
      assertFalse(jsonPrimitive0.equals((Object)jsonPrimitive1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertNotSame(jsonPrimitive0, jsonPrimitive1);
      assertNotSame(jsonPrimitive1, jsonPrimitive0);
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isBoolean());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isJsonArray());
      
      boolean boolean2 = jsonPrimitive0.equals(jsonPrimitive1);
      assertFalse(boolean2);
      assertTrue(long1.equals((Object)long0));
      assertFalse(jsonPrimitive0.equals((Object)jsonPrimitive1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertFalse(boolean2 == boolean0);
      assertNotSame(jsonPrimitive0, jsonPrimitive1);
      assertNotSame(jsonPrimitive1, jsonPrimitive0);
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isBoolean());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long long0 = 15L;
      Long long1 = new Long(long0);
      assertEquals(15L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertNotNull(jsonPrimitive1);
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertTrue(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isNumber());
      assertFalse(jsonPrimitive1.isString());
      
      boolean boolean2 = jsonPrimitive0.equals(jsonPrimitive1);
      assertFalse(boolean2);
      assertTrue(long1.equals((Object)long0));
      assertFalse(jsonPrimitive0.equals((Object)jsonPrimitive1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertFalse(boolean2 == boolean0);
      assertNotSame(jsonPrimitive0, jsonPrimitive1);
      assertNotSame(jsonPrimitive1, jsonPrimitive0);
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertTrue(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isNumber());
      assertFalse(jsonPrimitive1.isString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte byte0 = Character.DIRECTIONALITY_WHITESPACE;
      assertEquals((byte)12, byte0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(byte0);
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      
      Object object0 = null;
      boolean boolean0 = jsonPrimitive0.equals(object0);
      assertFalse(boolean0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double double0 = 1574.355509714735;
      MathContext mathContext0 = MathContext.DECIMAL128;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(double0, mathContext0);
      assertNotNull(bigDecimal0);
      assertEquals((short)1574, bigDecimal0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigDecimal0);
      assertNotNull(jsonPrimitive0);
      assertEquals((short)1574, bigDecimal0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      
      boolean boolean0 = jsonPrimitive0.equals(jsonPrimitive0);
      assertTrue(boolean0);
      assertEquals((short)1574, bigDecimal0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long long0 = 0L;
      BigDecimal bigDecimal0 = new BigDecimal(long0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigDecimal0);
      assertNotNull(jsonPrimitive0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      
      boolean boolean0 = jsonPrimitive0.equals(bigDecimal0);
      assertFalse(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte byte0 = Character.DIRECTIONALITY_BOUNDARY_NEUTRAL;
      assertEquals((byte)9, byte0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(byte0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      
      byte byte1 = jsonPrimitive0.getAsByte();
      assertEquals((byte)9, byte1);
      assertTrue(byte1 == byte0);
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "u|6kbeJQ<HV7|vFqm;*";
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(string0);
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.getAsByte();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"u|6kbeJQ<HV7|vFqm;*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long long0 = 15L;
      Long long1 = new Long(long0);
      assertEquals(15L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isNumber());
      
      int int0 = jsonPrimitive0.getAsInt();
      assertEquals(15, int0);
      assertTrue(long1.equals((Object)long0));
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long long0 = 0L;
      BigDecimal bigDecimal0 = new BigDecimal(long0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigDecimal0);
      assertNotNull(jsonPrimitive0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      
      short short0 = jsonPrimitive0.getAsShort();
      assertEquals((short)0, short0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      
      Short short1 = new Short(short0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      jsonPrimitive0.setValue(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      
      jsonPrimitive0.hashCode();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char char0 = '/';
      Character character0 = new Character(char0);
      assertEquals('/', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isBoolean());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.getAsShort();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short(short0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      long long0 = jsonPrimitive0.getAsLong();
      assertEquals(0L, long0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "HdwiD#Q\\/~";
      Boolean boolean0 = new Boolean(string0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.getAsLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"false\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = 0L;
      BigDecimal bigDecimal0 = new BigDecimal(long0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigDecimal0);
      assertNotNull(jsonPrimitive0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      float float0 = jsonPrimitive0.getAsFloat();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigInteger0);
      assertEquals(3, byteArray0.length);
      assertNotNull(jsonPrimitive0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigInteger bigInteger1 = jsonPrimitive0.getAsBigInteger();
      assertEquals(3, byteArray0.length);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      short short0 = (short) (-422);
      Short short1 = new Short(short0);
      assertEquals((short) (-422), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isString());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.getAsBigInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      long long0 = 0L;
      BigDecimal bigDecimal0 = new BigDecimal(long0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigDecimal0);
      assertNotNull(jsonPrimitive0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      BigDecimal bigDecimal1 = jsonPrimitive0.getAsBigDecimal();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char char0 = '~';
      Character character0 = new Character(char0);
      assertEquals('~', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isString());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.getAsBigDecimal();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short(short0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      
      double double0 = jsonPrimitive0.getAsDouble();
      assertEquals(0.0, double0, 0.01);
      assertTrue(short1.equals((Object)short0));
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      char char0 = '2';
      Character character0 = new Character(char0);
      assertEquals('2', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      double double0 = jsonPrimitive0.getAsDouble();
      assertEquals(2.0, double0, 0.01);
      assertTrue(character0.equals((Object)char0));
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      long long0 = (-12L);
      Long long1 = new Long(long0);
      assertEquals((-12L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      PrivateAccess.setVariable((Class<JsonPrimitive>) JsonPrimitive.class, jsonPrimitive0, "value", (Object) jsonPrimitive0);
      assertTrue(long1.equals((Object)long0));
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.getAsInt();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.JsonPrimitive cannot be cast to java.lang.String
         //
         verifyException("com.google.gson.JsonPrimitive", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      char char0 = '/';
      Character character0 = new Character(char0);
      assertEquals('/', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      Number number0 = jsonPrimitive0.getAsNumber();
      assertTrue(character0.equals((Object)char0));
      assertNotNull(number0);
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertEquals("/", number0.toString());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isBoolean());
      
      boolean boolean1 = jsonPrimitive0.getAsBoolean();
      assertTrue(boolean1);
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double double0 = (-4.613386472572813);
      Double double1 = new Double(double0);
      assertEquals((-4.613386472572813), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      
      boolean boolean0 = jsonPrimitive0.getAsBoolean();
      assertFalse(boolean0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonPrimitive jsonPrimitive0 = null;
      try {
        jsonPrimitive0 = new JsonPrimitive(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte byte0 = Character.DIRECTIONALITY_BOUNDARY_NEUTRAL;
      assertEquals((byte)9, byte0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(byte0);
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      
      boolean boolean0 = jsonPrimitive0.isString();
      assertFalse(boolean0);
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "";
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(string0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      jsonPrimitive0.hashCode();
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      char char0 = ']';
      Character character0 = Character.valueOf(char0);
      assertEquals(']', (char)character0);
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      // Undeclared exception!
      try { 
        jsonPrimitive0.getAsFloat();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isBoolean());
      
      String string0 = jsonPrimitive0.getAsString();
      assertEquals("true", string0);
      assertNotNull(string0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertTrue(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      long long0 = 15L;
      Long long1 = new Long(long0);
      assertEquals(15L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      assertTrue(long1.equals((Object)long0));
      assertSame(jsonPrimitive0, jsonPrimitive1);
      assertSame(jsonPrimitive1, jsonPrimitive0);
      assertNotNull(jsonPrimitive1);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isBoolean());
      assertTrue(jsonPrimitive1.isNumber());
      assertFalse(jsonPrimitive1.isString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      long long0 = 0L;
      BigDecimal bigDecimal0 = new BigDecimal(long0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigDecimal0);
      assertNotNull(jsonPrimitive0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      char char0 = jsonPrimitive0.getAsCharacter();
      assertEquals('j', char0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
  }
}
