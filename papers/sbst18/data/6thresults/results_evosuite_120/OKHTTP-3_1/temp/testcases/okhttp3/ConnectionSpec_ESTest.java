/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 19:52:08 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import javax.net.ssl.SSLSocket;
import okhttp3.CipherSuite;
import okhttp3.ConnectionSpec;
import okhttp3.TlsVersion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConnectionSpec_ESTest extends ConnectionSpec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.MODERN_TLS;
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      boolean boolean0 = connectionSpec0.supportsTlsExtensions();
      assertTrue(boolean0);
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec_Builder0);
      
      ConnectionSpec.Builder connectionSpec_Builder1 = connectionSpec_Builder0.supportsTlsExtensions(boolean0);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec_Builder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.MODERN_TLS;
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      ConnectionSpec connectionSpec1 = ConnectionSpec.COMPATIBLE_TLS;
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertNotSame(connectionSpec1, connectionSpec0);
      assertTrue(connectionSpec1.isTls());
      assertTrue(connectionSpec1.supportsTlsExtensions());
      assertNotNull(connectionSpec1);
      
      boolean boolean0 = connectionSpec0.equals(connectionSpec1);
      assertFalse(connectionSpec0.equals((Object)connectionSpec1));
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertNotSame(connectionSpec0, connectionSpec1);
      assertNotSame(connectionSpec1, connectionSpec0);
      assertFalse(boolean0);
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec1.isTls());
      assertTrue(connectionSpec1.supportsTlsExtensions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.CLEARTEXT;
      assertFalse(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      ConnectionSpec connectionSpec1 = ConnectionSpec.COMPATIBLE_TLS;
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertNotSame(connectionSpec1, connectionSpec0);
      assertTrue(connectionSpec1.supportsTlsExtensions());
      assertTrue(connectionSpec1.isTls());
      assertNotNull(connectionSpec1);
      
      boolean boolean0 = connectionSpec0.equals(connectionSpec1);
      assertFalse(connectionSpec0.equals((Object)connectionSpec1));
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertNotSame(connectionSpec0, connectionSpec1);
      assertNotSame(connectionSpec1, connectionSpec0);
      assertFalse(boolean0);
      assertFalse(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec1.supportsTlsExtensions());
      assertTrue(connectionSpec1.isTls());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.CLEARTEXT;
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertFalse(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = connectionSpec0.CLEARTEXT.isCompatible(sSLSocket0);
      assertFalse(boolean0);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertFalse(connectionSpec0.isTls());
      
      String[] stringArray0 = new String[4];
      String[] stringArray1 = null;
      SSLSocket sSLSocket1 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(sSLSocket1).getEnabledCipherSuites();
      doReturn(stringArray1).when(sSLSocket1).getEnabledProtocols();
      // Undeclared exception!
      try { 
        connectionSpec0.apply(sSLSocket1, boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no cipher suites for cleartext connections
         //
         verifyException("okhttp3.ConnectionSpec$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.COMPATIBLE_TLS;
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(connectionSpec0);
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec_Builder0);
      
      boolean boolean0 = false;
      ConnectionSpec.Builder connectionSpec_Builder1 = connectionSpec_Builder0.supportsTlsExtensions(boolean0);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec_Builder1);
      
      ConnectionSpec connectionSpec1 = new ConnectionSpec(connectionSpec_Builder1);
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertFalse(connectionSpec1.supportsTlsExtensions());
      assertTrue(connectionSpec1.isTls());
      assertNotNull(connectionSpec1);
      
      boolean boolean1 = connectionSpec1.supportsTlsExtensions();
      assertFalse(connectionSpec0.equals((Object)connectionSpec1));
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(connectionSpec0, connectionSpec1);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertNotSame(connectionSpec1, connectionSpec0);
      assertFalse(boolean1);
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertFalse(connectionSpec1.supportsTlsExtensions());
      assertTrue(connectionSpec1.isTls());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.CLEARTEXT;
      assertFalse(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      boolean boolean0 = connectionSpec0.isTls();
      assertFalse(boolean0);
      assertFalse(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.MODERN_TLS;
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(connectionSpec0);
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec_Builder0);
      
      String[] stringArray0 = new String[10];
      ConnectionSpec.Builder connectionSpec_Builder1 = connectionSpec_Builder0.cipherSuites(stringArray0);
      assertEquals(10, stringArray0.length);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec_Builder1);
      
      ConnectionSpec connectionSpec1 = new ConnectionSpec(connectionSpec_Builder0);
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec1.isTls());
      assertTrue(connectionSpec1.supportsTlsExtensions());
      assertNotNull(connectionSpec1);
      
      // Undeclared exception!
      try { 
        connectionSpec1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      String[] stringArray0 = new String[1];
      String string0 = "okhttp3.ConnectionSpec";
      stringArray0[0] = string0;
      ConnectionSpec.Builder connectionSpec_Builder1 = connectionSpec_Builder0.tlsVersions(stringArray0);
      assertEquals(1, stringArray0.length);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertNotNull(connectionSpec_Builder1);
      
      ConnectionSpec connectionSpec0 = new ConnectionSpec(connectionSpec_Builder0);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      // Undeclared exception!
      try { 
        connectionSpec0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected TLS version: okhttp3.ConnectionSpec
         //
         verifyException("okhttp3.TlsVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      String[] stringArray0 = new String[5];
      String string0 = "yq3f$4]<IP";
      stringArray0[0] = string0;
      ConnectionSpec.Builder connectionSpec_Builder1 = connectionSpec_Builder0.tlsVersions(stringArray0);
      assertEquals(5, stringArray0.length);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertNotNull(connectionSpec_Builder1);
      
      ConnectionSpec connectionSpec0 = new ConnectionSpec(connectionSpec_Builder1);
      assertEquals(5, stringArray0.length);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      // Undeclared exception!
      try { 
        connectionSpec0.tlsVersions();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected TLS version: yq3f$4]<IP
         //
         verifyException("okhttp3.TlsVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.COMPATIBLE_TLS;
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      SSLSocket sSLSocket0 = null;
      // Undeclared exception!
      try { 
        connectionSpec0.MODERN_TLS.isCompatible(sSLSocket0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.ConnectionSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.MODERN_TLS;
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(connectionSpec0);
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec_Builder0);
      
      String[] stringArray0 = new String[10];
      ConnectionSpec.Builder connectionSpec_Builder1 = connectionSpec_Builder0.cipherSuites(stringArray0);
      assertEquals(10, stringArray0.length);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec_Builder1);
      
      ConnectionSpec connectionSpec1 = new ConnectionSpec(connectionSpec_Builder0);
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec1.isTls());
      assertTrue(connectionSpec1.supportsTlsExtensions());
      assertNotNull(connectionSpec1);
      
      // Undeclared exception!
      try { 
        connectionSpec1.cipherSuites();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.CLEARTEXT;
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertFalse(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = connectionSpec0.CLEARTEXT.isCompatible(sSLSocket0);
      assertFalse(boolean0);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertFalse(connectionSpec0.isTls());
      
      SSLSocket sSLSocket1 = null;
      // Undeclared exception!
      try { 
        connectionSpec0.MODERN_TLS.apply(sSLSocket1, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.ConnectionSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConnectionSpec.Builder connectionSpec_Builder0 = null;
      ConnectionSpec connectionSpec0 = null;
      try {
        connectionSpec0 = new ConnectionSpec(connectionSpec_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.ConnectionSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = false;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        connectionSpec_Builder0.cipherSuites(stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no cipher suites for cleartext connections
         //
         verifyException("okhttp3.ConnectionSpec$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.MODERN_TLS;
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      List<TlsVersion> list0 = connectionSpec0.MODERN_TLS.tlsVersions();
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.CLEARTEXT;
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertFalse(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(connectionSpec0);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertFalse(connectionSpec0.isTls());
      assertNotNull(connectionSpec_Builder0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        connectionSpec_Builder0.supportsTlsExtensions(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no TLS extensions for cleartext connections
         //
         verifyException("okhttp3.ConnectionSpec$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.MODERN_TLS;
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      boolean boolean0 = connectionSpec0.isTls();
      assertTrue(boolean0);
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec_Builder0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        connectionSpec_Builder0.tlsVersions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least one TLS version is required
         //
         verifyException("okhttp3.ConnectionSpec$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = false;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        connectionSpec_Builder0.tlsVersions(stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no TLS versions for cleartext connections
         //
         verifyException("okhttp3.ConnectionSpec$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = false;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      TlsVersion[] tlsVersionArray0 = new TlsVersion[6];
      // Undeclared exception!
      try { 
        connectionSpec_Builder0.tlsVersions(tlsVersionArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no TLS versions for cleartext connections
         //
         verifyException("okhttp3.ConnectionSpec$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = false;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      // Undeclared exception!
      try { 
        connectionSpec_Builder0.allEnabledTlsVersions();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no TLS versions for cleartext connections
         //
         verifyException("okhttp3.ConnectionSpec$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      ConnectionSpec.Builder connectionSpec_Builder1 = connectionSpec_Builder0.allEnabledTlsVersions();
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertNotNull(connectionSpec_Builder1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.MODERN_TLS;
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(connectionSpec0);
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec_Builder0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        connectionSpec_Builder0.cipherSuites(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least one cipher suite is required
         //
         verifyException("okhttp3.ConnectionSpec$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.CLEARTEXT;
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertFalse(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(connectionSpec0);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertFalse(connectionSpec0.isTls());
      assertNotNull(connectionSpec_Builder0);
      
      CipherSuite[] cipherSuiteArray0 = new CipherSuite[1];
      // Undeclared exception!
      try { 
        connectionSpec_Builder0.cipherSuites(cipherSuiteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no cipher suites for cleartext connections
         //
         verifyException("okhttp3.ConnectionSpec$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = false;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      // Undeclared exception!
      try { 
        connectionSpec_Builder0.allEnabledCipherSuites();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no cipher suites for cleartext connections
         //
         verifyException("okhttp3.ConnectionSpec$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      ConnectionSpec.Builder connectionSpec_Builder1 = connectionSpec_Builder0.allEnabledCipherSuites();
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertNotNull(connectionSpec_Builder1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      ConnectionSpec connectionSpec0 = new ConnectionSpec(connectionSpec_Builder0);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      String string0 = connectionSpec0.toString();
      assertEquals("ConnectionSpec(cipherSuites=[all enabled], tlsVersions=[all enabled], supportsTlsExtensions=false)", string0);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.MODERN_TLS;
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      String string0 = connectionSpec0.toString();
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.CLEARTEXT;
      assertFalse(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      String string0 = connectionSpec0.toString();
      assertEquals("ConnectionSpec()", string0);
      assertFalse(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.MODERN_TLS;
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(connectionSpec0);
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec_Builder0);
      
      boolean boolean0 = false;
      ConnectionSpec.Builder connectionSpec_Builder1 = connectionSpec_Builder0.supportsTlsExtensions(boolean0);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec_Builder1);
      
      ConnectionSpec connectionSpec1 = new ConnectionSpec(connectionSpec_Builder0);
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertFalse(connectionSpec1.supportsTlsExtensions());
      assertTrue(connectionSpec1.isTls());
      assertNotNull(connectionSpec1);
      
      connectionSpec1.hashCode();
      assertFalse(connectionSpec0.equals((Object)connectionSpec1));
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertNotSame(connectionSpec0, connectionSpec1);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertNotSame(connectionSpec1, connectionSpec0);
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertFalse(connectionSpec1.supportsTlsExtensions());
      assertTrue(connectionSpec1.isTls());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.MODERN_TLS;
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      connectionSpec0.hashCode();
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.CLEARTEXT;
      assertFalse(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      connectionSpec0.hashCode();
      assertFalse(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      ConnectionSpec connectionSpec0 = new ConnectionSpec(connectionSpec_Builder0);
      assertTrue(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      ConnectionSpec connectionSpec1 = ConnectionSpec.CLEARTEXT;
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertNotSame(connectionSpec1, connectionSpec0);
      assertFalse(connectionSpec1.supportsTlsExtensions());
      assertFalse(connectionSpec1.isTls());
      assertNotNull(connectionSpec1);
      
      boolean boolean1 = connectionSpec0.equals(connectionSpec1);
      assertFalse(connectionSpec0.equals((Object)connectionSpec1));
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(connectionSpec0, connectionSpec1);
      assertNotSame(connectionSpec1, connectionSpec0);
      assertFalse(boolean1);
      assertTrue(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertFalse(connectionSpec1.supportsTlsExtensions());
      assertFalse(connectionSpec1.isTls());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.COMPATIBLE_TLS;
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      ConnectionSpec connectionSpec1 = ConnectionSpec.MODERN_TLS;
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertNotSame(connectionSpec1, connectionSpec0);
      assertTrue(connectionSpec1.supportsTlsExtensions());
      assertTrue(connectionSpec1.isTls());
      assertNotNull(connectionSpec1);
      
      boolean boolean0 = connectionSpec0.equals(connectionSpec1);
      assertFalse(connectionSpec0.equals((Object)connectionSpec1));
      assertFalse(connectionSpec1.equals((Object)connectionSpec0));
      assertNotSame(connectionSpec0, connectionSpec1);
      assertNotSame(connectionSpec1, connectionSpec0);
      assertFalse(boolean0);
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec1.supportsTlsExtensions());
      assertTrue(connectionSpec1.isTls());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.MODERN_TLS;
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = connectionSpec0.equals(object0);
      assertFalse(boolean0);
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.COMPATIBLE_TLS;
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      boolean boolean0 = connectionSpec0.equals(connectionSpec0);
      assertTrue(boolean0);
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      CipherSuite[] cipherSuiteArray0 = new CipherSuite[2];
      CipherSuite cipherSuite0 = CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384;
      assertEquals("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", cipherSuite0.toString());
      assertEquals("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", cipherSuite0.javaName());
      assertNotNull(cipherSuite0);
      
      cipherSuiteArray0[0] = cipherSuite0;
      cipherSuiteArray0[1] = cipherSuiteArray0[0];
      ConnectionSpec.Builder connectionSpec_Builder1 = connectionSpec_Builder0.cipherSuites(cipherSuiteArray0);
      assertEquals(2, cipherSuiteArray0.length);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertNotNull(connectionSpec_Builder1);
      
      ConnectionSpec connectionSpec0 = new ConnectionSpec(connectionSpec_Builder1);
      assertEquals(2, cipherSuiteArray0.length);
      assertTrue(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      String[] stringArray0 = new String[0];
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(sSLSocket0).getEnabledCipherSuites();
      boolean boolean1 = connectionSpec0.isCompatible(sSLSocket0);
      assertEquals(2, cipherSuiteArray0.length);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertFalse(boolean1);
      assertTrue(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.MODERN_TLS;
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      String[] stringArray0 = new String[0];
      Object object0 = PrivateAccess.callMethod((Class<ConnectionSpec>) ConnectionSpec.class, connectionSpec0, "nonEmptyIntersection", (Object) stringArray0, (Class<?>) String[].class, (Object) stringArray0, (Class<?>) String[].class);
      assertEquals(0, stringArray0.length);
      assertEquals(false, object0);
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.CLEARTEXT;
      assertFalse(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      String[] stringArray0 = null;
      Object object0 = PrivateAccess.callMethod((Class<ConnectionSpec>) ConnectionSpec.class, connectionSpec0, "nonEmptyIntersection", (Object) stringArray0, (Class<?>) String[].class, (Object) stringArray0, (Class<?>) String[].class);
      assertEquals(false, object0);
      assertFalse(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      CipherSuite[] cipherSuiteArray0 = new CipherSuite[2];
      CipherSuite cipherSuite0 = CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384;
      assertEquals("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", cipherSuite0.toString());
      assertEquals("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", cipherSuite0.javaName());
      assertNotNull(cipherSuite0);
      
      cipherSuiteArray0[0] = cipherSuite0;
      cipherSuiteArray0[1] = cipherSuite0;
      ConnectionSpec.Builder connectionSpec_Builder1 = connectionSpec_Builder0.cipherSuites(cipherSuiteArray0);
      assertEquals(2, cipherSuiteArray0.length);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertNotNull(connectionSpec_Builder1);
      
      ConnectionSpec connectionSpec0 = new ConnectionSpec(connectionSpec_Builder1);
      assertEquals(2, cipherSuiteArray0.length);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(sSLSocket0).getEnabledCipherSuites();
      boolean boolean1 = connectionSpec0.isCompatible(sSLSocket0);
      assertEquals(2, cipherSuiteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertFalse(boolean1);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.CLEARTEXT;
      assertFalse(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      String[] stringArray0 = null;
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(sSLSocket0).getEnabledProtocols();
      boolean boolean0 = connectionSpec0.COMPATIBLE_TLS.isCompatible(sSLSocket0);
      assertFalse(boolean0);
      assertFalse(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      ConnectionSpec connectionSpec0 = new ConnectionSpec(connectionSpec_Builder0);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = connectionSpec0.isCompatible(sSLSocket0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.CLEARTEXT;
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertFalse(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      String[] stringArray0 = new String[4];
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(sSLSocket0).getEnabledProtocols();
      // Undeclared exception!
      try { 
        connectionSpec0.COMPATIBLE_TLS.isCompatible(sSLSocket0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class okhttp3.internal.Util
         //
         verifyException("okhttp3.ConnectionSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      String[] stringArray0 = new String[8];
      ConnectionSpec.Builder connectionSpec_Builder1 = connectionSpec_Builder0.tlsVersions(stringArray0);
      assertEquals(8, stringArray0.length);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertNotNull(connectionSpec_Builder1);
      
      ConnectionSpec connectionSpec0 = new ConnectionSpec(connectionSpec_Builder0);
      assertTrue(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(sSLSocket0).getEnabledCipherSuites();
      doReturn(stringArray0).when(sSLSocket0).getEnabledProtocols();
      // Undeclared exception!
      try { 
        connectionSpec0.apply(sSLSocket0, boolean0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class okhttp3.internal.Util
         //
         verifyException("okhttp3.ConnectionSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec connectionSpec0 = ConnectionSpec.CLEARTEXT;
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertFalse(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      String[] stringArray0 = new String[4];
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(sSLSocket0).getEnabledCipherSuites();
      doReturn(stringArray0).when(sSLSocket0).getEnabledProtocols();
      doReturn((String[]) null).when(sSLSocket0).getSupportedCipherSuites();
      // Undeclared exception!
      try { 
        connectionSpec0.apply(sSLSocket0, boolean0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class okhttp3.internal.Util
         //
         verifyException("okhttp3.ConnectionSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.COMPATIBLE_TLS;
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      List<TlsVersion> list0 = connectionSpec0.CLEARTEXT.tlsVersions();
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      TlsVersion[] tlsVersionArray0 = new TlsVersion[9];
      TlsVersion tlsVersion0 = TlsVersion.TLS_1_3;
      tlsVersionArray0[0] = tlsVersion0;
      tlsVersionArray0[1] = tlsVersion0;
      tlsVersionArray0[2] = tlsVersionArray0[0];
      tlsVersionArray0[3] = tlsVersionArray0[0];
      tlsVersionArray0[4] = tlsVersionArray0[3];
      tlsVersionArray0[5] = tlsVersionArray0[1];
      tlsVersionArray0[6] = tlsVersionArray0[0];
      tlsVersionArray0[7] = tlsVersionArray0[3];
      tlsVersionArray0[8] = tlsVersionArray0[5];
      ConnectionSpec.Builder connectionSpec_Builder1 = connectionSpec_Builder0.tlsVersions(tlsVersionArray0);
      assertEquals(9, tlsVersionArray0.length);
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertSame(connectionSpec_Builder1, connectionSpec_Builder0);
      assertNotNull(connectionSpec_Builder1);
      
      ConnectionSpec connectionSpec0 = new ConnectionSpec(connectionSpec_Builder0);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      String string0 = connectionSpec0.toString();
      assertSame(connectionSpec_Builder0, connectionSpec_Builder1);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      ConnectionSpec connectionSpec0 = new ConnectionSpec(connectionSpec_Builder0);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      List<CipherSuite> list0 = connectionSpec0.cipherSuites();
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConnectionSpec connectionSpec0 = ConnectionSpec.COMPATIBLE_TLS;
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
      
      List<CipherSuite> list0 = connectionSpec0.MODERN_TLS.cipherSuites();
      assertTrue(connectionSpec0.isTls());
      assertTrue(connectionSpec0.supportsTlsExtensions());
      assertEquals(15, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = true;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      ConnectionSpec connectionSpec0 = new ConnectionSpec(connectionSpec_Builder0);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
      assertNotNull(connectionSpec0);
      
      boolean boolean1 = connectionSpec0.isTls();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertTrue(connectionSpec0.isTls());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = false;
      ConnectionSpec.Builder connectionSpec_Builder0 = new ConnectionSpec.Builder(boolean0);
      assertNotNull(connectionSpec_Builder0);
      
      ConnectionSpec connectionSpec0 = connectionSpec_Builder0.build();
      assertFalse(connectionSpec0.isTls());
      assertFalse(connectionSpec0.supportsTlsExtensions());
      assertNotNull(connectionSpec0);
  }
}
