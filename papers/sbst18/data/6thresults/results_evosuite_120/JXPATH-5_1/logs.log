* EvoSuite 1.0.6-SNAPSHOT
* Going to generate test cases for class: org.apache.commons.jxpath.ri.compiler.Step
* Starting client
* Connecting to master process on port 20866
* Analyzing classpath: 
  - /var/benchmarks/projects/commons-jxpath-1.3-src/target/classes
  - /var/benchmarks/projects/commons-jxpath-1.3-src/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.jxpath.ri.compiler.Step
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 54
  - Branch 68
  - Exception 0
  - MutationFactory 102
  - Output 16
  - Method 7
  - MethodNoException 7
  - CBranchFitnessFactory 68
* Using seed 1516818551939
* Starting evolution
[MASTER] 19:30:11.854 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
* Search finished after 71s and 107 generations, 69001 statements, best individual has fitness: 15.64285714285714
* Minimizing test suite
* Generated 38 tests with total length 194
* Resulting test suite's coverage: 95% (average coverage for all fitness functions)
* Generating assertions
* Compiling and checking tests
[MASTER] 19:30:32.021 [logback-2] ERROR ClassStateSupport - Could not initialize org.apache.commons.jxpath.JXPathContextFactory: org/apache/commons/jxpath/JXPathContextFactoryConfigurationError
[MASTER] 19:30:32.028 [logback-2] ERROR ClassStateSupport - Could not initialize org.apache.commons.jxpath.ri.model.beans.CollectionPointer: org/apache/commons/jxpath/ri/model/beans/CollectionAttributeNodeIterator
[MASTER] 19:30:36.938 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 19:30:36.940 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 4;
NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
assertEquals(4, nodeTypeTest0.getNodeType());
assertNotNull(nodeTypeTest0);

String string0 = nodeTypeTest0.toString();
assertEquals(4, nodeTypeTest0.getNodeType());
assertEquals("processing-instruction()", string0);
assertNotNull(string0);

Expression[] expressionArray0 = new Expression[3];
QName qName0 = new QName(string0);
assertEquals(4, nodeTypeTest0.getNodeType());
assertEquals("processing-instruction()", qName0.toString());
assertNull(qName0.getPrefix());
assertEquals("processing-instruction()", qName0.getName());
assertNotNull(qName0);

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
assertEquals(4, nodeTypeTest0.getNodeType());
assertEquals("processing-instruction()", qName0.toString());
assertNull(qName0.getPrefix());
assertEquals("processing-instruction()", qName0.getName());
assertTrue(extensionFunction0.computeContextDependent());
assertNotNull(extensionFunction0);
assertEquals(3, expressionArray0.length);

expressionArray0[2] = (Expression) extensionFunction0;
Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
assertEquals(4, nodeTypeTest0.getNodeType());
assertEquals(4, step0.getAxis());
assertNotNull(step0);
assertEquals(3, expressionArray0.length);

step0.toString();

[MASTER] 19:30:37.954 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test14 -> class java.lang.StackOverflowError: null
[MASTER] 19:30:37.955 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 2;
String string0 = Step.axisToString(int0);
assertEquals("child", string0);
assertNotNull(string0);

ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
assertEquals("child", processingInstructionTest0.getTarget());
assertNotNull(processingInstructionTest0);

Expression[] expressionArray0 = new Expression[4];
Constant constant0 = new Constant(string0);
assertFalse(constant0.isContextDependent());
assertFalse(constant0.computeContextDependent());
assertNotNull(constant0);

expressionArray0[0] = (Expression) constant0;
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant0);
assertFalse(constant0.isContextDependent());
assertFalse(constant0.computeContextDependent());
assertEquals("<", coreOperationLessThan0.getSymbol());
assertNotNull(coreOperationLessThan0);
assertEquals(4, expressionArray0.length);

expressionArray0[1] = (Expression) coreOperationLessThan0;
CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], coreOperationLessThan0);
assertFalse(constant0.isContextDependent());
assertFalse(constant0.computeContextDependent());
assertEquals("<", coreOperationLessThan0.getSymbol());
assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
assertNotNull(coreOperationGreaterThanOrEqual0);
assertEquals(4, expressionArray0.length);

expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
assertEquals("|", coreOperationUnion0.getSymbol());
assertNotNull(coreOperationUnion0);
assertEquals(4, expressionArray0.length);

expressionArray0[3] = (Expression) coreOperationUnion0;
Step step0 = new Step(int0, processingInstructionTest0, expressionArray0);
assertEquals("child", processingInstructionTest0.getTarget());
assertEquals(2, step0.getAxis());
assertNotNull(step0);
assertEquals(4, expressionArray0.length);

step0.isContextDependent();

* Writing JUnit test case 'Step_ESTest' to temp/testcases
* Done!

* Computation finished
