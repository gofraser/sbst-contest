* EvoSuite 1.0.6-SNAPSHOT
* Going to generate test cases for class: org.apache.commons.jxpath.ri.compiler.Step
* Starting client
* Connecting to master process on port 19826
* Analyzing classpath: 
  - /var/benchmarks/projects/commons-jxpath-1.3-src/target/classes
  - /var/benchmarks/projects/commons-jxpath-1.3-src/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.jxpath.ri.compiler.Step
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 54
  - Branch 68
  - Exception 0
  - MutationFactory 102
  - Output 16
  - Method 7
  - MethodNoException 7
  - CBranchFitnessFactory 68
* Using seed 1517342355346
* Starting evolution
[MASTER] 20:59:26.233 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.AttributeContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.PredicateContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.ParentContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.RootContext due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 21:00:22.827 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
* Search finished after 72s and 110 generations, 72429 statements, best individual has fitness: 29.625
* Minimizing test suite
* Generated 36 tests with total length 209
* Resulting test suite's coverage: 94% (average coverage for all fitness functions)
* Generating assertions
* Compiling and checking tests
[MASTER] 21:00:37.099 [logback-2] ERROR ClassStateSupport - Could not initialize org.apache.commons.jxpath.JXPathContextFactory: org/apache/commons/jxpath/JXPathContextFactoryConfigurationError
[MASTER] 21:00:37.119 [logback-2] ERROR ClassStateSupport - Could not initialize org.apache.commons.jxpath.ri.model.beans.CollectionPointer: org/apache/commons/jxpath/ri/model/beans/CollectionAttributeNodeIterator
[MASTER] 21:00:40.919 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 21:00:40.921 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 1383;
String string0 = null;
ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
assertNotNull(processingInstructionTest0);
assertNull(processingInstructionTest0.getTarget());

Expression[] expressionArray0 = new Expression[9];
QName qName0 = new QName(string0, string0);
assertNotNull(qName0);
assertNull(qName0.getName());
assertNull(qName0.toString());
assertNull(qName0.getPrefix());

VariableReference variableReference0 = new VariableReference(qName0);
assertNotNull(variableReference0);
assertNull(qName0.getName());
assertNull(qName0.toString());
assertNull(qName0.getPrefix());
assertFalse(variableReference0.isContextDependent());
assertFalse(variableReference0.computeContextDependent());

CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
assertNotNull(coreOperationLessThanOrEqual0);
assertNull(qName0.getName());
assertNull(qName0.toString());
assertNull(qName0.getPrefix());
assertFalse(variableReference0.isContextDependent());
assertFalse(variableReference0.computeContextDependent());
assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());

expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, variableReference0);
assertNotNull(coreOperationGreaterThanOrEqual0);
assertNull(qName0.getName());
assertNull(qName0.toString());
assertNull(qName0.getPrefix());
assertFalse(variableReference0.isContextDependent());
assertFalse(variableReference0.computeContextDependent());
assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());

expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[1]);
assertEquals(9, expressionArray0.length);
assertNotNull(coreOperationEqual0);
assertEquals("=", coreOperationEqual0.getSymbol());

expressionArray0[2] = (Expression) coreOperationEqual0;
CoreFunction coreFunction0 = new CoreFunction(int0, expressionArray0);
assertEquals(9, expressionArray0.length);
assertNotNull(coreFunction0);
assertEquals(1383, coreFunction0.getFunctionCode());
assertEquals(9, coreFunction0.getArgumentCount());

expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
expressionArray0[4] = (Expression) variableReference0;
CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, variableReference0);
assertNotNull(coreOperationDivide0);
assertNull(qName0.getName());
assertNull(qName0.toString());
assertNull(qName0.getPrefix());
assertFalse(variableReference0.isContextDependent());
assertFalse(variableReference0.computeContextDependent());
assertEquals("div", coreOperationDivide0.getSymbol());

expressionArray0[5] = (Expression) coreOperationDivide0;
CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, coreOperationDivide0);
assertNotNull(coreOperationMod0);
assertEquals("mod", coreOperationMod0.getSymbol());
assertNull(qName0.getName());
assertNull(qName0.toString());
assertNull(qName0.getPrefix());
assertFalse(variableReference0.isContextDependent());
assertFalse(variableReference0.computeContextDependent());
assertEquals("div", coreOperationDivide0.getSymbol());

expressionArray0[6] = (Expression) coreOperationMod0;
CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreFunction0, expressionArray0[2]);
assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
assertEquals(9, expressionArray0.length);
assertNotNull(coreOperationEqual1);
assertEquals("=", coreOperationEqual1.getSymbol());
assertEquals(1383, coreFunction0.getFunctionCode());
assertEquals(9, coreFunction0.getArgumentCount());

expressionArray0[7] = (Expression) coreOperationEqual1;
Step step0 = new Step(int0, processingInstructionTest0, expressionArray0);
assertEquals(9, expressionArray0.length);
assertNotNull(step0);
assertNull(processingInstructionTest0.getTarget());
assertEquals(1383, step0.getAxis());

step0.isContextDependent();

* Writing JUnit test case 'Step_ESTest' to temp/testcases
* Done!

* Computation finished
