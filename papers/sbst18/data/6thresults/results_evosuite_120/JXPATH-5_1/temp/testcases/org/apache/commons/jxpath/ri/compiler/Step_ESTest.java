/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:00:43 GMT 2018
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Step_ESTest extends Step_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1391;
      NodeTest nodeTest0 = null;
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(int0, nodeTest0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(1391, step0.getAxis());
      
      String string0 = step0.toString();
      assertEquals(0, expressionArray0.length);
      assertEquals("UNKNOWN::null", string0);
      assertNotNull(string0);
      assertEquals(1391, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 2;
      String string0 = "";
      QName qName0 = new QName(string0);
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(2, step0.getAxis());
      
      String string1 = step0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(2, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-2163);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals((-2163), nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray0 = null;
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals((-2163), nodeTypeTest0.getNodeType());
      assertEquals((-2163), step0.getAxis());
      
      Expression[] expressionArray1 = step0.getPredicates();
      assertNull(expressionArray1);
      assertEquals((-2163), nodeTypeTest0.getNodeType());
      assertEquals((-2163), step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-640);
      String string0 = "6SO2 ";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertNotNull(processingInstructionTest0);
      assertEquals("6SO2 ", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[1];
      Step step0 = new Step(int0, processingInstructionTest0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("6SO2 ", processingInstructionTest0.getTarget());
      assertEquals((-640), step0.getAxis());
      
      Expression[] expressionArray1 = step0.getPredicates();
      assertEquals(1, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      assertNotNull(expressionArray1);
      assertSame(expressionArray0, expressionArray1);
      assertSame(expressionArray1, expressionArray0);
      assertEquals("6SO2 ", processingInstructionTest0.getTarget());
      assertEquals((-640), step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-2163);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals((-2163), nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray0 = null;
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals((-2163), nodeTypeTest0.getNodeType());
      assertEquals((-2163), step0.getAxis());
      
      NodeTypeTest nodeTypeTest1 = (NodeTypeTest)step0.getNodeTest();
      assertNotNull(nodeTypeTest1);
      assertSame(nodeTypeTest0, nodeTypeTest1);
      assertSame(nodeTypeTest1, nodeTypeTest0);
      assertEquals((-2163), nodeTypeTest0.getNodeType());
      assertEquals((-2163), step0.getAxis());
      assertEquals((-2163), nodeTypeTest1.getNodeType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1;
      String string0 = "org.apache.commons.jxpath.ri.compiler.Expression";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertNotNull(processingInstructionTest0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(int0, processingInstructionTest0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression", processingInstructionTest0.getTarget());
      assertEquals(1, step0.getAxis());
      
      int int1 = step0.getAxis();
      assertTrue(int1 == int0);
      assertEquals(0, expressionArray0.length);
      assertEquals(1, int1);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression", processingInstructionTest0.getTarget());
      assertEquals(1, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      String string0 = Step.axisToString(int0);
      assertEquals("UNKNOWN", string0);
      assertNotNull(string0);
      
      int int1 = (-3301);
      QName qName0 = new QName(string0);
      assertFalse(int0 == int1);
      assertNotNull(qName0);
      assertEquals("UNKNOWN", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertFalse(int0 == int1);
      assertNotNull(nodeNameTest0);
      assertEquals("UNKNOWN", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("UNKNOWN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(int1, nodeNameTest0, expressionArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("UNKNOWN", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("UNKNOWN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-3301), step0.getAxis());
      
      int int2 = step0.getAxis();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, expressionArray0.length);
      assertEquals((-3301), int2);
      assertEquals("UNKNOWN", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("UNKNOWN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-3301), step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-652);
      String string0 = "descendant";
      QName qName0 = new QName(string0, string0);
      assertNotNull(qName0);
      assertEquals("descendant:descendant", qName0.toString());
      assertEquals("descendant", qName0.getName());
      assertEquals("descendant", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("descendant:descendant", qName0.toString());
      assertEquals("descendant", qName0.getName());
      assertEquals("descendant", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("descendant:descendant", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(int0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-652), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      expressionArray0[4] = (Expression) coreFunction0;
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("descendant:descendant", qName0.toString());
      assertEquals("descendant", qName0.getName());
      assertEquals("descendant", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("descendant:descendant", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-652), step0.getAxis());
      
      // Undeclared exception!
      step0.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray0 = new Expression[6];
      String string0 = "Cannot create collection of type: ";
      QName qName0 = new QName(string0);
      assertNotNull(qName0);
      assertEquals(" ", qName0.getName());
      assertEquals("Cannot create collection of type: ", qName0.toString());
      assertEquals("Cannot create collection of type", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals(" ", qName0.getName());
      assertEquals("Cannot create collection of type: ", qName0.toString());
      assertEquals("Cannot create collection of type", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      
      // Undeclared exception!
      try { 
        step0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 13;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[1]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      
      // Undeclared exception!
      try { 
        step0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      
      // Undeclared exception!
      try { 
        step0.isContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 4;
      String string0 = Step.axisToString(int0);
      assertEquals("ancestor", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1;
      String string0 = Step.axisToString(int0);
      assertEquals("self", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 13;
      String string0 = Step.axisToString(int0);
      assertEquals("descendant-or-self", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      String string0 = Step.axisToString(int0);
      assertEquals("UNKNOWN", string0);
      assertNotNull(string0);
      
      QName qName0 = new QName(string0);
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.getName());
      assertEquals("UNKNOWN", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.getName());
      assertEquals("UNKNOWN", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("UNKNOWN", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.getName());
      assertEquals("UNKNOWN", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("UNKNOWN", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, step0.getAxis());
      
      int int1 = step0.getAxis();
      assertTrue(int1 == int0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, int1);
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.getName());
      assertEquals("UNKNOWN", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("UNKNOWN", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      String string0 = Step.axisToString(int0);
      assertEquals("UNKNOWN", string0);
      assertNotNull(string0);
      
      QName qName0 = new QName(string0);
      assertNotNull(qName0);
      assertEquals("UNKNOWN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("UNKNOWN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("UNKNOWN", nodeNameTest0.toString());
      
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("UNKNOWN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("UNKNOWN", nodeNameTest0.toString());
      assertEquals(0, step0.getAxis());
      
      Expression[] expressionArray1 = step0.getPredicates();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertNotNull(expressionArray1);
      assertSame(expressionArray0, expressionArray1);
      assertSame(expressionArray1, expressionArray0);
      assertEquals("UNKNOWN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("UNKNOWN", nodeNameTest0.toString());
      assertEquals(0, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 12;
      String string0 = Step.axisToString(int0);
      assertEquals("preceding-sibling", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 11;
      String string0 = Step.axisToString(int0);
      assertEquals("following-sibling", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 10;
      String string0 = Step.axisToString(int0);
      assertEquals("ancestor-or-self", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 9;
      String string0 = Step.axisToString(int0);
      assertEquals("descendant", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 7;
      String string0 = Step.axisToString(int0);
      assertEquals("preceding", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 6;
      String string0 = Step.axisToString(int0);
      assertEquals("namespace", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 5;
      String string0 = Step.axisToString(int0);
      assertEquals("attribute", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 2;
      String string0 = Step.axisToString(int0);
      assertEquals("child", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 13;
      int int1 = 1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int1);
      assertFalse(int1 == int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray0 = new Expression[6];
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      
      String string0 = step0.toString();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6, expressionArray0.length);
      assertEquals("descendant-or-self::node()[null][null][null][null][null][null]", string0);
      assertNotNull(string0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 8;
      String string0 = Step.axisToString(int0);
      assertEquals("following", string0);
      assertNotNull(string0);
      
      QName qName0 = new QName(string0, string0);
      assertNotNull(qName0);
      assertEquals("following:following", qName0.toString());
      assertEquals("following", qName0.getName());
      assertEquals("following", qName0.getPrefix());
      
      Expression[] expressionArray0 = null;
      int int1 = 13;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, string0);
      assertFalse(int0 == int1);
      assertNotNull(nodeNameTest0);
      assertEquals("following:following", qName0.toString());
      assertEquals("following", qName0.getName());
      assertEquals("following", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("following", nodeNameTest0.getNamespaceURI());
      assertEquals("following:following", nodeNameTest0.toString());
      
      Step step0 = new Step(int1, nodeNameTest0, expressionArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(step0);
      assertEquals("following:following", qName0.toString());
      assertEquals("following", qName0.getName());
      assertEquals("following", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("following", nodeNameTest0.getNamespaceURI());
      assertEquals("following:following", nodeNameTest0.toString());
      assertEquals(13, step0.getAxis());
      
      String string1 = step0.toString();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("descendant-or-self::following:following", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("following:following", qName0.toString());
      assertEquals("following", qName0.getName());
      assertEquals("following", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("following", nodeNameTest0.getNamespaceURI());
      assertEquals("following:following", nodeNameTest0.toString());
      assertEquals(13, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 3;
      String string0 = Step.axisToString(int0);
      assertEquals("parent", string0);
      assertNotNull(string0);
      
      QName qName0 = new QName(string0, string0);
      assertNotNull(qName0);
      assertEquals("parent", qName0.getName());
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent:parent", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("parent", qName0.getName());
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent:parent", qName0.toString());
      assertEquals("parent:parent", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Expression[] expressionArray0 = null;
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("parent", qName0.getName());
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent:parent", qName0.toString());
      assertEquals("parent:parent", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(3, step0.getAxis());
      
      String string1 = step0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("parent::parent:parent", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("parent", qName0.getName());
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent:parent", qName0.toString());
      assertEquals("parent:parent", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(3, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int1);
      assertFalse(int1 == int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray0 = new Expression[6];
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      
      String string0 = step0.toString();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6, expressionArray0.length);
      assertEquals("self::UNKNOWN()[null][null][null][null][null][null]", string0);
      assertNotNull(string0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 1;
      String string0 = "org.apache.commons.jxpath.ri.compiler.Expression";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertNotNull(processingInstructionTest0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(int0, processingInstructionTest0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression", processingInstructionTest0.getTarget());
      assertEquals(1, step0.getAxis());
      
      String string1 = step0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, expressionArray0.length);
      assertEquals("self::processing-instruction('org.apache.commons.jxpath.ri.compiler.Expression')", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression", processingInstructionTest0.getTarget());
      assertEquals(1, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 5;
      NodeTest nodeTest0 = null;
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(int0, nodeTest0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(5, step0.getAxis());
      
      String string0 = step0.toString();
      assertEquals(0, expressionArray0.length);
      assertEquals("@null", string0);
      assertNotNull(string0);
      assertEquals(5, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray0 = new Expression[1];
      boolean boolean0 = true;
      Expression expression0 = mock(Expression.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(expression0).isContextDependent();
      expressionArray0[0] = expression0;
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals(2, step0.getAxis());
      
      boolean boolean1 = step0.isContextDependent();
      assertTrue(boolean1 == boolean0);
      assertEquals(1, expressionArray0.length);
      assertTrue(boolean1);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals(2, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 1383;
      String string0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName(string0, string0);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Step step0 = new Step(int0, processingInstructionTest0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(step0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(1383, step0.getAxis());
      
      // Undeclared exception!
      try { 
        step0.isContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Step", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      String string0 = Step.axisToString(int0);
      assertEquals("UNKNOWN", string0);
      assertNotNull(string0);
      
      QName qName0 = new QName(string0);
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.getName());
      assertEquals("UNKNOWN", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.getName());
      assertEquals("UNKNOWN", qName0.toString());
      assertEquals("UNKNOWN", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.getName());
      assertEquals("UNKNOWN", qName0.toString());
      assertEquals("UNKNOWN", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, step0.getAxis());
      
      boolean boolean0 = step0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN", qName0.getName());
      assertEquals("UNKNOWN", qName0.toString());
      assertEquals("UNKNOWN", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 3;
      String string0 = Step.axisToString(int0);
      assertEquals("parent", string0);
      assertNotNull(string0);
      
      QName qName0 = new QName(string0, string0);
      assertNotNull(qName0);
      assertEquals("parent:parent", qName0.toString());
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("parent:parent", qName0.toString());
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("parent:parent", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Expression[] expressionArray0 = null;
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("parent:parent", qName0.toString());
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("parent:parent", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(3, step0.getAxis());
      
      boolean boolean0 = step0.isContextDependent();
      assertFalse(boolean0);
      assertEquals("parent:parent", qName0.toString());
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("parent:parent", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(3, step0.getAxis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 2272;
      NodeTest nodeTest0 = null;
      Expression[] expressionArray0 = null;
      Step step0 = new Step(int0, nodeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2272, step0.getAxis());
      
      NodeTest nodeTest1 = step0.getNodeTest();
      assertNull(nodeTest1);
      assertEquals(2272, step0.getAxis());
  }
}
