/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:30:38 GMT 2018
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Step_ESTest extends Step_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray0 = new Expression[4];
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      
      Expression[] expressionArray1 = step0.getPredicates();
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertNotNull(expressionArray1);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, expressionArray1.length);
      assertSame(expressionArray0, expressionArray1);
      assertSame(expressionArray1, expressionArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1;
      String string0 = "substring-after";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertEquals("substring-after", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(int0, processingInstructionTest0, expressionArray0);
      assertEquals("substring-after", processingInstructionTest0.getTarget());
      assertEquals(1, step0.getAxis());
      assertNotNull(step0);
      assertEquals(0, expressionArray0.length);
      
      Expression[] expressionArray1 = step0.getPredicates();
      assertEquals("substring-after", processingInstructionTest0.getTarget());
      assertEquals(1, step0.getAxis());
      assertNotNull(expressionArray1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertSame(expressionArray0, expressionArray1);
      assertSame(expressionArray1, expressionArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray0 = new Expression[4];
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest1 = (NodeTypeTest)step0.getNodeTest();
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertEquals(1, nodeTypeTest1.getNodeType());
      assertNotNull(nodeTypeTest1);
      assertEquals(4, expressionArray0.length);
      assertSame(nodeTypeTest0, nodeTypeTest1);
      assertSame(nodeTypeTest1, nodeTypeTest0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      String string0 = ", ";
      QName qName0 = new QName(string0, string0);
      assertEquals(", :, ", qName0.toString());
      assertEquals(", ", qName0.getName());
      assertEquals(", ", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, string0);
      assertEquals(", :, ", qName0.toString());
      assertEquals(", ", qName0.getName());
      assertEquals(", ", qName0.getPrefix());
      assertEquals(", :, ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(", ", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray0 = null;
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertEquals(", :, ", qName0.toString());
      assertEquals(", ", qName0.getName());
      assertEquals(", ", qName0.getPrefix());
      assertEquals(", :, ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(", ", nodeNameTest0.getNamespaceURI());
      assertEquals(0, step0.getAxis());
      assertNotNull(step0);
      
      int int1 = step0.getAxis();
      assertEquals(", :, ", qName0.toString());
      assertEquals(", ", qName0.getName());
      assertEquals(", ", qName0.getPrefix());
      assertEquals(", :, ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(", ", nodeNameTest0.getNamespaceURI());
      assertEquals(0, step0.getAxis());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray0 = new Expression[4];
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      
      int int1 = step0.getAxis();
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertEquals(1, int1);
      assertEquals(4, expressionArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 3;
      String string0 = "last";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertEquals("last", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName(string0);
      assertNull(qName0.getPrefix());
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      Step step0 = new Step(int0, processingInstructionTest0, expressionArray0);
      assertEquals("last", processingInstructionTest0.getTarget());
      assertEquals(3, step0.getAxis());
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        step0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-247);
      String string0 = "IQE3";
      QName qName0 = new QName(string0);
      assertNull(qName0.getPrefix());
      assertEquals("IQE3", qName0.getName());
      assertEquals("IQE3", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("IQE3", qName0.getName());
      assertEquals("IQE3", qName0.toString());
      assertEquals("IQE3", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("IQE3", qName0.getName());
      assertEquals("IQE3", qName0.toString());
      assertEquals("IQE3", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-247), step0.getAxis());
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        step0.isContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-1923);
      String string0 = Step.axisToString(int0);
      assertEquals("UNKNOWN", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 3;
      String string0 = Step.axisToString(int0);
      assertEquals("parent", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1;
      String string0 = Step.axisToString(int0);
      assertEquals("self", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 13;
      String string0 = Step.axisToString(int0);
      assertEquals("descendant-or-self", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-1653);
      String string0 = "java.lang.Boolean";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertEquals("java.lang.Boolean", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[2];
      Step step0 = new Step(int0, processingInstructionTest0, expressionArray0);
      assertEquals("java.lang.Boolean", processingInstructionTest0.getTarget());
      assertEquals((-1653), step0.getAxis());
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      
      int int1 = step0.getAxis();
      assertEquals("java.lang.Boolean", processingInstructionTest0.getTarget());
      assertEquals((-1653), step0.getAxis());
      assertEquals((-1653), int1);
      assertEquals(2, expressionArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 141;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertEquals(141, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray0 = null;
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(141, nodeTypeTest0.getNodeType());
      assertEquals(141, step0.getAxis());
      assertNotNull(step0);
      
      Expression[] expressionArray1 = step0.getPredicates();
      assertEquals(141, nodeTypeTest0.getNodeType());
      assertEquals(141, step0.getAxis());
      assertNull(expressionArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 91;
      NodeTest nodeTest0 = null;
      Expression[] expressionArray0 = null;
      Step step0 = new Step(int0, nodeTest0, expressionArray0);
      assertEquals(91, step0.getAxis());
      assertNotNull(step0);
      
      String string0 = step0.toString();
      assertEquals(91, step0.getAxis());
      assertEquals("UNKNOWN::null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 12;
      String string0 = Step.axisToString(int0);
      assertEquals("preceding-sibling", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 10;
      String string0 = Step.axisToString(int0);
      assertEquals("ancestor-or-self", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 9;
      String string0 = Step.axisToString(int0);
      assertEquals("descendant", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 8;
      String string0 = Step.axisToString(int0);
      assertEquals("following", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 7;
      String string0 = Step.axisToString(int0);
      assertEquals("preceding", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 6;
      String string0 = Step.axisToString(int0);
      assertEquals("namespace", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 5;
      String string0 = Step.axisToString(int0);
      assertEquals("attribute", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 4;
      String string0 = Step.axisToString(int0);
      assertEquals("ancestor", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 13;
      int int1 = 1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      assertFalse(int1 == int0);
      
      Expression[] expressionArray0 = new Expression[1];
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string0 = step0.toString();
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("descendant-or-self::node()[null]", string0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 13;
      QName qName0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray0 = new Expression[4];
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(13, step0.getAxis());
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        step0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 3;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray0 = new Expression[9];
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(3, step0.getAxis());
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      
      String string0 = step0.toString();
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(3, step0.getAxis());
      assertEquals("parent::comment()[null][null][null][null][null][null][null][null][null]", string0);
      assertNotNull(string0);
      assertEquals(9, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1;
      int int1 = 40;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int1);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      assertFalse(int1 == int0);
      
      Expression[] expressionArray0 = new Expression[5];
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string0 = step0.toString();
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertEquals("self::UNKNOWN()[null][null][null][null][null]", string0);
      assertNotNull(string0);
      assertEquals(5, expressionArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray0 = new Expression[4];
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      
      String string0 = step0.toString();
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertEquals(".[null][null][null][null]", string0);
      assertNotNull(string0);
      assertEquals(4, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 11;
      String string0 = Step.axisToString(int0);
      assertEquals("following-sibling", string0);
      assertNotNull(string0);
      
      int int1 = 1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertEquals("following-sibling", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      assertFalse(int0 == int1);
      
      Expression[] expressionArray0 = null;
      Step step0 = new Step(int1, processingInstructionTest0, expressionArray0);
      assertEquals("following-sibling", processingInstructionTest0.getTarget());
      assertEquals(1, step0.getAxis());
      assertNotNull(step0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string1 = step0.toString();
      assertEquals("following-sibling", processingInstructionTest0.getTarget());
      assertEquals(1, step0.getAxis());
      assertEquals("self::processing-instruction('following-sibling')", string1);
      assertNotNull(string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 5;
      String string0 = "Q}d6d f9";
      QName qName0 = new QName(string0);
      assertEquals("Q}d6d f9", qName0.getName());
      assertEquals("Q}d6d f9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, string0);
      assertEquals("Q}d6d f9", qName0.getName());
      assertEquals("Q}d6d f9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Q}d6d f9", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Q}d6d f9", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray0 = new Expression[5];
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertEquals("Q}d6d f9", qName0.getName());
      assertEquals("Q}d6d f9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Q}d6d f9", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Q}d6d f9", nodeNameTest0.toString());
      assertEquals(5, step0.getAxis());
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      
      String string1 = step0.toString();
      assertEquals("Q}d6d f9", qName0.getName());
      assertEquals("Q}d6d f9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Q}d6d f9", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Q}d6d f9", nodeNameTest0.toString());
      assertEquals(5, step0.getAxis());
      assertEquals("@Q}d6d f9[null][null][null][null][null]", string1);
      assertNotNull(string1);
      assertEquals(5, expressionArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 2;
      String string0 = "9";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertEquals("9", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = null;
      Step step0 = new Step(int0, processingInstructionTest0, expressionArray0);
      assertEquals("9", processingInstructionTest0.getTarget());
      assertEquals(2, step0.getAxis());
      assertNotNull(step0);
      
      String string1 = step0.toString();
      assertEquals("9", processingInstructionTest0.getTarget());
      assertEquals(2, step0.getAxis());
      assertEquals("processing-instruction('9')", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 3;
      String string0 = "last";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertEquals("last", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName(string0);
      assertNull(qName0.getPrefix());
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      Step step0 = new Step(int0, processingInstructionTest0, expressionArray0);
      assertEquals("last", processingInstructionTest0.getTarget());
      assertEquals(3, step0.getAxis());
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      
      boolean boolean0 = step0.isContextDependent();
      assertEquals("last", processingInstructionTest0.getTarget());
      assertEquals(3, step0.getAxis());
      assertTrue(boolean0);
      assertEquals(3, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray0 = new Expression[4];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      try { 
        step0.isContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Step", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-1923);
      NodeTest nodeTest0 = null;
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(int0, nodeTest0, expressionArray0);
      assertEquals((-1923), step0.getAxis());
      assertNotNull(step0);
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = step0.isContextDependent();
      assertEquals((-1923), step0.getAxis());
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 91;
      NodeTest nodeTest0 = null;
      Expression[] expressionArray0 = null;
      Step step0 = new Step(int0, nodeTest0, expressionArray0);
      assertEquals(91, step0.getAxis());
      assertNotNull(step0);
      
      boolean boolean0 = step0.isContextDependent();
      assertEquals(91, step0.getAxis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 91;
      NodeTest nodeTest0 = null;
      Expression[] expressionArray0 = null;
      Step step0 = new Step(int0, nodeTest0, expressionArray0);
      assertEquals(91, step0.getAxis());
      assertNotNull(step0);
      
      NodeTest nodeTest1 = step0.getNodeTest();
      assertEquals(91, step0.getAxis());
      assertNull(nodeTest1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 13;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray0 = new Expression[17];
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertNotNull(step0);
      assertEquals(17, expressionArray0.length);
      
      String string0 = step0.toString();
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("descendant-or-self::UNKNOWN()[null][null][null][null][null][null][null][null][null][null][null][null][null][null][null][null][null]", string0);
      assertNotNull(string0);
      assertEquals(17, expressionArray0.length);
  }
}
