/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:27:58 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.net.URI;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.AASTORE;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CodeExceptionGen;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionComparator;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InstructionListObserver;
import org.apache.bcel.generic.InstructionTargeter;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.LocalVariableGen;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.SWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstructionList_ESTest extends InstructionList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = 0L;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      I2C i2C0 = new I2C();
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertNotNull(i2C0);
      
      String string0 = "&qm:yTw}-";
      int int0 = constantPoolGen0.addString(string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2C0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertNotNull(iF_ICMPGT0);
      
      String string1 = "i:EEk<";
      boolean boolean2 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(string1, string0);
      assertFalse(boolean2);
      
      short short0 = (short)0;
      iF_ICMPGT0.length = short0;
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      
      Instruction instruction0 = instructionHandle0.swapInstruction(iF_ICMPGT0);
      assertSame(instruction0, i2C0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals("i2c", instruction0.getName());
      assertEquals(1, instruction0.getLength());
      assertEquals((short)146, instruction0.getOpcode());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(instruction0);
      
      IfInstruction ifInstruction0 = iF_ICMPGT0.negate();
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(ifInstruction0);
      
      EvoSuiteFile evoSuiteFile2 = null;
      String string2 = "oAp=#&1c";
      boolean boolean3 = FileSystemHandling.appendLineToFile(evoSuiteFile1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.createFolder(evoSuiteFile2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) ifInstruction0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(branchHandle0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(3, instructionArray0.length);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertNotNull(instructionArray0);
      
      instructionList0.move(instructionHandle0, (InstructionHandle) branchHandle0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      
      branchHandle0.setTarget(instructionHandle0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, instructionList1.getLength());
      assertEquals(3, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.append((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(branchHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(instructionHandle1);
      
      String string3 = instructionHandle0.toString(boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean1 == boolean4);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1 == boolean3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("   0: if_icmpgt -> 0", string3);
      assertNotNull(string3);
      
      InstructionHandle instructionHandle2 = instructionList0.insert((Instruction) ifInstruction0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
      
      InstructionHandle instructionHandle3 = instructionList0.insert((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(branchHandle0, instructionHandle1);
      assertSame(branchHandle0, instructionHandle2);
      assertSame(branchHandle0, instructionHandle3);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle3, branchHandle0);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertSame(instructionHandle3, instructionHandle2);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(0, instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertNotNull(instructionHandle3);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) ifInstruction0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)instructionHandle1));
      assertFalse(branchHandle1.equals((Object)instructionHandle3));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, instructionHandle1);
      assertNotSame(branchHandle1, instructionHandle3);
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(branchHandle1);
      
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) iF_ICMPGT0, instruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction i2c[146](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FSUB fSUB0 = (FSUB)InstructionConstants.FSUB;
      assertEquals(1, fSUB0.getLength());
      assertEquals((short)102, fSUB0.getOpcode());
      assertEquals("fsub", fSUB0.getName());
      assertNotNull(fSUB0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      Spliterator<InstructionHandle> spliterator0 = instructionList0.spliterator();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(spliterator0);
      
      InstructionHandle instructionHandle0 = null;
      IFNULL iFNULL0 = new IFNULL(instructionHandle0);
      assertEquals("ifnull", iFNULL0.getName());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(3, iFNULL0.getLength());
      assertEquals(0, iFNULL0.getIndex());
      assertNotNull(iFNULL0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iFNULL0);
      assertEquals("ifnull", iFNULL0.getName());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(3, iFNULL0.getLength());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      Object object0 = PrivateAccess.callMethod((Class<InstructionList>) InstructionList.class, instructionList0, "insert", (Object) branchHandle0, (Class<?>) InstructionHandle.class);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals("ifnull", iFNULL0.getName());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(3, iFNULL0.getLength());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNull(object0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[4];
      CodeExceptionGen codeExceptionGen0 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      codeExceptionGenArray0[0] = codeExceptionGen0;
      CodeExceptionGen codeExceptionGen1 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      codeExceptionGenArray0[1] = codeExceptionGen1;
      int int0 = (-1846);
      NEW nEW0 = null;
      try {
        nEW0 = new NEW(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -1846
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile1, boolean0, boolean1, boolean1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      EvoSuiteFile evoSuiteFile2 = null;
      String string0 = "Qey/+ZAWcdo|ifUkr%`";
      boolean boolean4 = FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      boolean boolean5 = FileSystemHandling.appendStringToFile(evoSuiteFile2, string0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5);
      
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertNotNull(iF_ACMPEQ0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ACMPEQ0);
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      String string1 = "]jxI";
      boolean boolean6 = FileSystemHandling.appendLineToFile(evoSuiteFile2, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertNotSame(string1, string0);
      assertFalse(boolean6);
      
      String string2 = "";
      boolean boolean7 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(boolean7);
      
      instructionList0.dispose();
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals((-1), iF_ACMPEQ0.getIndex());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals((-1), iF_ACMPEQ0.getIndex());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList1);
      
      int int0 = (-1921);
      InstructionHandle instructionHandle0 = instructionList1.findHandle(int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals((-1), iF_ACMPEQ0.getIndex());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNull(instructionHandle0);
      
      try { 
        PrivateAccess.callMethod((Class<InstructionList>) InstructionList.class, instructionList0, "append", (Object) instructionHandle0, (Class<?>) InstructionHandle.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      IASTORE iASTORE0 = new IASTORE();
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertNotNull(iASTORE0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iASTORE0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      assertNotNull(gOTO_W0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) gOTO_W0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      
      BranchHandle branchHandle0 = instructionList1.insert(instructionHandle0, (BranchInstruction) gOTO_W0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      BranchInstruction.notifyTarget(instructionHandle0, instructionHandle0, gOTO_W0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      
      float float0 = 0.0F;
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-50);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-111);
      byteArray0[1] = byte1;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-50), (byte) (-111)}, byteArray0);
      assertFalse(boolean0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((InstructionHandle) branchHandle0, (CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(instructionHandle1);
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iASTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = 0L;
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      I2C i2C0 = new I2C();
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertNotNull(i2C0);
      
      String string0 = "&qm:yTw}-";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      int int0 = constantPoolGen0.addString(string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2C0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(iF_ICMPGT0);
      
      String string1 = "i:EEk<";
      boolean boolean2 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(string1, string0);
      assertFalse(boolean2);
      
      short short0 = (short)0;
      Instruction instruction0 = instructionHandle0.swapInstruction(iF_ICMPGT0);
      assertSame(instruction0, i2C0);
      assertSame(i2C0, instruction0);
      assertEquals(1, instruction0.getLength());
      assertEquals("i2c", instruction0.getName());
      assertEquals((short)146, instruction0.getOpcode());
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(instruction0);
      
      IfInstruction ifInstruction0 = iF_ICMPGT0.negate();
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(ifInstruction0);
      
      EvoSuiteFile evoSuiteFile2 = null;
      String string2 = "oAp=#&1c";
      boolean boolean3 = FileSystemHandling.appendLineToFile(evoSuiteFile1, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.createFolder(evoSuiteFile2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) ifInstruction0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(branchHandle0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(3, instructionArray0.length);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertNotNull(instructionArray0);
      
      instructionList0.move(instructionHandle0, (InstructionHandle) branchHandle0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((-3), ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(3, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList1.size());
      assertEquals(3, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.append((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(branchHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((-3), ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(3, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(3, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert((Instruction) ifInstruction0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertSame(instructionHandle2, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((-3), ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(3, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(instructionHandle2);
      
      InstructionHandle instructionHandle3 = instructionList0.insert((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(branchHandle0, instructionHandle1);
      assertSame(branchHandle0, instructionHandle2);
      assertSame(branchHandle0, instructionHandle3);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle3, branchHandle0);
      assertSame(instructionHandle3, instructionHandle2);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((-3), ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(3, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(3, instructionHandle3.getPosition());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(instructionHandle3);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) ifInstruction0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)instructionHandle1));
      assertFalse(branchHandle1.equals((Object)instructionHandle3));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, instructionHandle1);
      assertNotSame(branchHandle1, instructionHandle3);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((-3), ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertNotNull(branchHandle1);
      
      BranchHandle branchHandle2 = instructionList1.append((BranchInstruction) iF_ICMPGT0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle2.equals((Object)instructionHandle2));
      assertFalse(branchHandle2.equals((Object)instructionHandle1));
      assertFalse(branchHandle2.equals((Object)branchHandle1));
      assertFalse(branchHandle2.equals((Object)instructionHandle3));
      assertFalse(branchHandle2.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(branchHandle2, instructionHandle2);
      assertNotSame(branchHandle2, instructionHandle1);
      assertNotSame(branchHandle2, branchHandle1);
      assertNotSame(branchHandle2, instructionHandle3);
      assertNotSame(branchHandle2, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(0, branchHandle2.getPosition());
      assertFalse(branchHandle2.hasTargeters());
      assertNotNull(branchHandle2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)53;
      byteArray0[0] = byte0;
      byteArray0[1] = byteArray0[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNotNull(instructionList0);
      
      FNEG fNEG0 = (FNEG)InstructionConstants.FNEG;
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertNotNull(fNEG0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(fNEG0);
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      instructionHandle0.addAttribute(instructionList0, fNEG0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      
      IFNE iFNE0 = new IFNE(instructionHandle0);
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertNotNull(iFNE0);
      
      instructionHandle0.removeAllTargeters();
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IfInstruction ifInstruction0 = iFNE0.negate();
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)153, ifInstruction0.getOpcode());
      assertEquals("ifeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)153, ifInstruction0.getOpcode());
      assertEquals("ifeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNotNull(branchHandle0);
      
      branchHandle0.setInstruction(ifInstruction0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((-1), ifInstruction0.getIndex());
      assertEquals((short)153, ifInstruction0.getOpcode());
      assertEquals("ifeq", ifInstruction0.getName());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals((-1), branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((InstructionHandle) branchHandle0, (Instruction) fNEG0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertEquals(4, instructionList0.size());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((-1), ifInstruction0.getIndex());
      assertEquals((short)153, ifInstruction0.getOpcode());
      assertEquals("ifeq", ifInstruction0.getName());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals((-1), branchHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNotNull(instructionHandle1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int0 = 1385;
      constantPoolGen0.size = int0;
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) byte0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      String string0 = pUSH0.toString();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals("ldc[18](2) 1 (PUSH)", string0);
      assertNotNull(string0);
      
      InstructionHandle instructionHandle2 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.getLength());
      assertEquals(5, instructionList0.size());
      assertEquals(2, constantPoolGen0.getSize());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNotNull(instructionHandle2);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        instructionList0.setPositions(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 747;
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(constantPoolGen0).addClass(any(org.apache.bcel.generic.ObjectType.class));
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      GOTO gOTO0 = new GOTO();
      assertEquals(1, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertNotNull(gOTO0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) gOTO0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList1.append(instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(1, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle0.getTargeters();
      assertEquals(0, instructionTargeterArray0.length);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(1, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionTargeterArray0);
      
      ConstantPoolGen constantPoolGen1 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(constantPoolGen1).addConstant(any(org.apache.bcel.classfile.Constant.class) , any(org.apache.bcel.generic.ConstantPoolGen.class));
      doReturn((Constant) null).when(constantPoolGen1).getConstant(anyInt());
      instructionList1.replaceConstantPool(constantPoolGen1, constantPoolGen1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      
      InstructionList instructionList2 = null;
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, instructionList2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)53;
      byteArray0[0] = byte0;
      byteArray0[1] = byteArray0[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNotNull(instructionList0);
      
      FNEG fNEG0 = new FNEG();
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertNotNull(fNEG0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(fNEG0);
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      instructionHandle0.addAttribute(instructionList0, fNEG0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      
      IFNE iFNE0 = new IFNE(instructionHandle0);
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertNotNull(iFNE0);
      
      instructionHandle0.removeAllTargeters();
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IfInstruction ifInstruction0 = iFNE0.negate();
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals("ifeq", ifInstruction0.getName());
      assertEquals((short)153, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals("ifeq", ifInstruction0.getName());
      assertEquals((short)153, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNotNull(branchHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.getStart();
      assertEquals(2, byteArray0.length);
      assertSame(instructionHandle1, branchHandle0);
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNotNull(instructionHandle1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int0 = 1385;
      constantPoolGen0.size = int0;
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) byte0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      String string0 = pUSH0.toString();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals("ldc[18](2) 1 (PUSH)", string0);
      assertNotNull(string0);
      
      InstructionHandle instructionHandle2 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle2, instructionHandle0);
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(4, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.size());
      assertEquals(2, constantPoolGen0.getSize());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNotNull(instructionHandle2);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        instructionList0.setPositions(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Branch target of ifeq:fneg[118](1) not in instruction list
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      IASTORE iASTORE0 = new IASTORE();
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertNotNull(iASTORE0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iASTORE0);
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals("goto_w", gOTO_W0.getName());
      assertNotNull(gOTO_W0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) gOTO_W0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      BranchHandle branchHandle0 = instructionList1.insert(instructionHandle0, (BranchInstruction) gOTO_W0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      BranchInstruction.notifyTarget(instructionHandle0, instructionHandle0, gOTO_W0);
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals("goto_w", gOTO_W0.getName());
      
      float float0 = 0.0F;
      String string0 = "";
      int int0 = constantPoolGen0.lookupMethodref(string0, string0, string0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int0);
      
      instructionHandle0.addHandle();
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-50);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-111);
      byteArray0[1] = byte1;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-50), (byte) (-111)}, byteArray0);
      assertFalse(boolean0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("<clinit>", string1);
      assertNotNull(string1);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((InstructionHandle) branchHandle0, (CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle1, instructionHandle0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)119;
      byteArray0[0] = byte0;
      byte byte1 = (byte)5;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)118;
      byteArray0[3] = byte3;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)24;
      byteArray0[5] = byte5;
      byte byte6 = (byte)82;
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = false;
      boolean boolean4 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean2, boolean3);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-83);
      byteArray0[7] = byte7;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(instructionList0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertNotNull(iXOR0);
      
      boolean boolean5 = true;
      String string0 = iXOR0.toString(boolean5);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertEquals("ixor[130](1)", string0);
      assertNotNull(string0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertNotNull(iF_ICMPGE0);
      
      IfInstruction ifInstruction0 = iF_ICMPGE0.negate();
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(branchHandle0);
      
      instructionList0.redirectBranches(branchHandle0, branchHandle0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      
      short short0 = (short)0;
      iXOR0.opcode = short0;
      assertEquals("nop", iXOR0.getName());
      assertEquals((short)0, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      
      boolean boolean6 = instructionList0.contains((Instruction) iXOR0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("nop", iXOR0.getName());
      assertEquals((short)0, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertFalse(boolean6);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byteArray0[2]);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(pUSH0);
      
      String string1 = pUSH0.toString();
      assertEquals(8, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals(1, constantPoolGen0.getSize());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertEquals("iconst_0[3](1) (PUSH)", string1);
      assertNotNull(string1);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(9, instructionList0.getLength());
      assertEquals(9, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (CompoundInstruction) pUSH0);
      assertEquals(8, byteArray0.length);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(10, instructionList0.getLength());
      assertEquals(10, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(instructionHandle1);
      
      instructionList0.move(instructionHandle1, (InstructionHandle) branchHandle0, instructionHandle0);
      assertEquals(8, byteArray0.length);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(10, instructionList0.getLength());
      assertEquals(10, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      
      InstructionHandle instructionHandle2 = null;
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle2, instructionHandle2, instructionHandle2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From null to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = 0L;
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      I2C i2C0 = new I2C();
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertNotNull(i2C0);
      
      String string0 = "&qm:yTw}-";
      int int0 = constantPoolGen0.addString(string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2C0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(iF_ICMPGT0);
      
      String string1 = "i:EEk<";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string1, string0);
      assertFalse(boolean1);
      
      short short0 = (short)0;
      iF_ICMPGT0.length = short0;
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      
      Instruction instruction0 = instructionHandle0.swapInstruction(iF_ICMPGT0);
      assertSame(i2C0, instruction0);
      assertSame(instruction0, i2C0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)146, instruction0.getOpcode());
      assertEquals(1, instruction0.getLength());
      assertEquals("i2c", instruction0.getName());
      assertNotNull(instruction0);
      
      IF_ICMPLE iF_ICMPLE0 = (IF_ICMPLE)iF_ICMPGT0.negate();
      assertSame(i2C0, instruction0);
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals("if_icmple", iF_ICMPLE0.getName());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(iF_ICMPLE0);
      
      iF_ICMPLE0.dispose();
      assertSame(i2C0, instruction0);
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals("if_icmple", iF_ICMPLE0.getName());
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      
      EvoSuiteFile evoSuiteFile1 = null;
      String string2 = "oAp=#&1c";
      boolean boolean2 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iF_ICMPLE0);
      assertSame(i2C0, instruction0);
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals("if_icmple", iF_ICMPLE0.getName());
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals((-1), branchHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(branchHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.getInstructions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of if_icmple[164](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)119;
      byteArray0[0] = byte0;
      byte byte1 = (byte)5;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)118;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)24;
      byteArray0[5] = byte5;
      byte byte6 = (byte)82;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-83);
      byteArray0[7] = byte7;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(instructionList0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertEquals("ixor", iXOR0.getName());
      assertNotNull(iXOR0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertNotNull(iF_ICMPGE0);
      
      IfInstruction ifInstruction0 = iF_ICMPGE0.negate();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(branchHandle0);
      
      BranchHandle branchHandle1 = null;
      instructionList0.redirectBranches(branchHandle1, branchHandle0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      
      short short0 = (short)0;
      iXOR0.opcode = short0;
      assertEquals((short)0, iXOR0.getOpcode());
      assertEquals("nop", iXOR0.getName());
      assertEquals(1, iXOR0.getLength());
      
      boolean boolean0 = instructionList0.contains((Instruction) iXOR0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.getLength());
      assertEquals((short)0, iXOR0.getOpcode());
      assertEquals("nop", iXOR0.getName());
      assertEquals(1, iXOR0.getLength());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertFalse(boolean0);
      
      InstructionHandle instructionHandle0 = null;
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, instructionHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From null to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = 0L;
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      I2C i2C0 = new I2C();
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertNotNull(i2C0);
      
      String string0 = "&qm:yTw}-";
      int int0 = constantPoolGen0.addString(string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2C0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(iF_ICMPGT0);
      
      String string1 = "i:EEk<";
      short short0 = (short)0;
      iF_ICMPGT0.length = short0;
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      
      Instruction instruction0 = instructionHandle0.swapInstruction(iF_ICMPGT0);
      assertSame(i2C0, instruction0);
      assertSame(instruction0, i2C0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(1, instruction0.getLength());
      assertEquals("i2c", instruction0.getName());
      assertEquals((short)146, instruction0.getOpcode());
      assertNotNull(instruction0);
      
      IfInstruction ifInstruction0 = iF_ICMPGT0.negate();
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(ifInstruction0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      String string2 = "oAp=#&1c";
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) ifInstruction0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(branchHandle0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(3, instructionArray0.length);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionArray0);
      
      branchHandle0.setTarget(instructionHandle0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, instructionList1.size());
      assertEquals(3, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.append((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)branchHandle0));
      assertNotSame(branchHandle0, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert((Instruction) ifInstruction0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(instructionHandle2);
      
      InstructionHandle instructionHandle3 = instructionList0.insert((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(branchHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertSame(branchHandle0, instructionHandle3);
      assertSame(branchHandle0, instructionHandle2);
      assertNotSame(branchHandle0, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle3, instructionHandle2);
      assertSame(instructionHandle3, branchHandle0);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(0, instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(instructionHandle3);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) ifInstruction0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle1.equals((Object)instructionHandle1));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)instructionHandle3));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(branchHandle1, instructionHandle1);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, instructionHandle3);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(branchHandle1);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[7];
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle2, instructionHandle0, branchHandle1, objectType0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertFalse(branchHandle1.equals((Object)instructionHandle1));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)instructionHandle3));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertTrue(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(codeExceptionGen0);
      
      codeExceptionGenArray0[0] = codeExceptionGen0;
      CodeExceptionGen codeExceptionGen1 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle3).when(codeExceptionGen1).getEndPC();
      doReturn(instructionHandle1).when(codeExceptionGen1).getHandlerPC();
      doReturn(branchHandle1).when(codeExceptionGen1).getStartPC();
      codeExceptionGenArray0[1] = codeExceptionGen1;
      CodeExceptionGen codeExceptionGen2 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle2).when(codeExceptionGen2).getEndPC();
      doReturn(instructionHandle3).when(codeExceptionGen2).getHandlerPC();
      doReturn(instructionHandle3).when(codeExceptionGen2).getStartPC();
      codeExceptionGenArray0[2] = codeExceptionGen2;
      ObjectType objectType1 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      CodeExceptionGen codeExceptionGen3 = new CodeExceptionGen(instructionHandle2, branchHandle0, branchHandle1, objectType1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(codeExceptionGen3.equals((Object)codeExceptionGen0));
      assertFalse(codeExceptionGen3.equals((Object)codeExceptionGen2));
      assertFalse(codeExceptionGen3.equals((Object)codeExceptionGen1));
      assertFalse(branchHandle0.equals((Object)instructionHandle1));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertFalse(branchHandle1.equals((Object)instructionHandle1));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)instructionHandle3));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertTrue(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(codeExceptionGen3);
      
      codeExceptionGenArray0[3] = codeExceptionGen3;
      InstructionHandle instructionHandle4 = instructionList1.append((InstructionHandle) branchHandle0, (CompoundInstruction) pUSH0);
      assertFalse(branchHandle0.equals((Object)instructionHandle1));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle4.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertSame(branchHandle0, instructionHandle3);
      assertSame(branchHandle0, instructionHandle2);
      assertNotSame(branchHandle0, instructionHandle1);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionHandle4, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle0, instructionHandle4);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertFalse(instructionHandle4.hasTargeters());
      assertEquals((-1), instructionHandle4.getPosition());
      assertEquals(1, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(instructionHandle4);
      
      CodeExceptionGen codeExceptionGen4 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle0).when(codeExceptionGen4).getEndPC();
      doReturn(instructionHandle1).when(codeExceptionGen4).getHandlerPC();
      doReturn(instructionHandle4).when(codeExceptionGen4).getStartPC();
      codeExceptionGenArray0[4] = codeExceptionGen4;
      BranchHandle branchHandle2 = instructionList0.append((InstructionHandle) branchHandle1, (BranchInstruction) iF_ICMPGT0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle4));
      assertFalse(branchHandle2.equals((Object)branchHandle0));
      assertFalse(branchHandle2.equals((Object)instructionHandle1));
      assertFalse(branchHandle2.equals((Object)instructionHandle3));
      assertFalse(branchHandle2.equals((Object)instructionHandle2));
      assertFalse(branchHandle2.equals((Object)branchHandle1));
      assertFalse(branchHandle1.equals((Object)instructionHandle1));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)instructionHandle3));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionHandle0, instructionHandle4);
      assertNotSame(branchHandle2, branchHandle0);
      assertNotSame(branchHandle2, instructionHandle1);
      assertNotSame(branchHandle2, instructionHandle3);
      assertNotSame(branchHandle2, instructionHandle2);
      assertNotSame(branchHandle2, branchHandle1);
      assertNotSame(branchHandle1, instructionHandle1);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, branchHandle2);
      assertNotSame(branchHandle1, instructionHandle3);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(0, branchHandle2.getPosition());
      assertFalse(branchHandle2.hasTargeters());
      assertTrue(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(branchHandle2);
      
      CodeExceptionGen codeExceptionGen5 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(branchHandle0).when(codeExceptionGen5).getEndPC();
      doReturn(branchHandle2).when(codeExceptionGen5).getHandlerPC();
      doReturn(branchHandle0).when(codeExceptionGen5).getStartPC();
      codeExceptionGenArray0[5] = codeExceptionGen5;
      CodeExceptionGen codeExceptionGen6 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle3).when(codeExceptionGen6).getEndPC();
      doReturn(instructionHandle0).when(codeExceptionGen6).getHandlerPC();
      doReturn(instructionHandle4).when(codeExceptionGen6).getStartPC();
      codeExceptionGenArray0[6] = codeExceptionGen6;
      InstructionHandle instructionHandle5 = instructionList0.getStart();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle5.equals((Object)instructionHandle4));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle5, instructionHandle4);
      assertSame(instructionHandle5, instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle5.hasTargeters());
      assertEquals(0, instructionHandle5.getPosition());
      assertNotNull(instructionHandle5);
      
      instructionList0.redirectExceptionHandlers(codeExceptionGenArray0, instructionHandle5, branchHandle1);
      assertEquals(7, codeExceptionGenArray0.length);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle4));
      assertFalse(branchHandle1.equals((Object)instructionHandle1));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)branchHandle2));
      assertFalse(branchHandle1.equals((Object)instructionHandle3));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(instructionHandle5.equals((Object)instructionHandle4));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertSame(instructionHandle0, instructionHandle5);
      assertNotSame(instructionHandle0, instructionHandle4);
      assertNotSame(branchHandle1, instructionHandle1);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, branchHandle2);
      assertNotSame(branchHandle1, instructionHandle3);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(instructionHandle5, instructionHandle4);
      assertSame(instructionHandle5, instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertTrue(instructionHandle5.hasTargeters());
      assertEquals(0, instructionHandle5.getPosition());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = 0L;
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      I2C i2C0 = new I2C();
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertNotNull(i2C0);
      
      String string0 = "&qm:yTw}-";
      int int0 = constantPoolGen0.addString(string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2C0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertNotNull(iF_ICMPGT0);
      
      String string1 = "i:EEk<";
      short short0 = (short)0;
      iF_ICMPGT0.length = short0;
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      
      Instruction instruction0 = instructionHandle0.swapInstruction(iF_ICMPGT0);
      assertSame(i2C0, instruction0);
      assertSame(instruction0, i2C0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(1, instruction0.getLength());
      assertEquals("i2c", instruction0.getName());
      assertEquals((short)146, instruction0.getOpcode());
      assertNotNull(instruction0);
      
      IfInstruction ifInstruction0 = iF_ICMPGT0.negate();
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(ifInstruction0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      String string2 = "oAp=#&1c";
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) ifInstruction0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(branchHandle0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(3, instructionArray0.length);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertNotNull(instructionArray0);
      
      instructionList0.move(instructionHandle0, (InstructionHandle) branchHandle0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      
      branchHandle0.setTarget(instructionHandle0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, instructionList1.size());
      assertEquals(3, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.append((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)branchHandle0));
      assertNotSame(branchHandle0, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert((Instruction) ifInstruction0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertSame(instructionHandle2, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(instructionHandle2);
      
      InstructionHandle instructionHandle3 = instructionList0.insert((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(branchHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertSame(branchHandle0, instructionHandle2);
      assertSame(branchHandle0, instructionHandle3);
      assertNotSame(branchHandle0, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertSame(instructionHandle3, instructionHandle2);
      assertSame(instructionHandle3, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(0, instructionHandle3.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(instructionHandle3);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) ifInstruction0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle3));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(branchHandle1, instructionHandle3);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, instructionHandle1);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(branchHandle1);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[7];
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle2, instructionHandle0, branchHandle1, objectType0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle3));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)instructionHandle1));
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, branchHandle1.getPosition());
      assertTrue(branchHandle1.hasTargeters());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(codeExceptionGen0);
      
      codeExceptionGenArray0[0] = codeExceptionGen0;
      CodeExceptionGen codeExceptionGen1 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen1).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen1).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen1).getStartPC();
      codeExceptionGenArray0[1] = codeExceptionGen1;
      CodeExceptionGen codeExceptionGen2 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen2).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen2).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen2).getStartPC();
      codeExceptionGenArray0[2] = codeExceptionGen2;
      ObjectType objectType1 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      CodeExceptionGen codeExceptionGen3 = new CodeExceptionGen(instructionHandle2, branchHandle0, branchHandle1, objectType1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(codeExceptionGen3.equals((Object)codeExceptionGen0));
      assertFalse(codeExceptionGen3.equals((Object)codeExceptionGen1));
      assertFalse(codeExceptionGen3.equals((Object)codeExceptionGen2));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(branchHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle3));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)instructionHandle1));
      assertEquals(3, constantPoolGen0.getSize());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, branchHandle1.getPosition());
      assertTrue(branchHandle1.hasTargeters());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(codeExceptionGen3);
      
      codeExceptionGenArray0[3] = codeExceptionGen3;
      CodeExceptionGen codeExceptionGen4 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen4).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen4).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen4).getStartPC();
      codeExceptionGenArray0[4] = codeExceptionGen4;
      CodeExceptionGen codeExceptionGen5 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen5).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen5).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen5).getStartPC();
      codeExceptionGenArray0[5] = codeExceptionGen5;
      CodeExceptionGen codeExceptionGen6 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen6).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen6).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen6).getStartPC();
      codeExceptionGenArray0[6] = codeExceptionGen6;
      InstructionHandle instructionHandle4 = instructionList0.getStart();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle4.equals((Object)branchHandle1));
      assertFalse(instructionHandle4.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertSame(instructionHandle4, instructionHandle3);
      assertSame(instructionHandle4, branchHandle0);
      assertNotSame(instructionHandle4, branchHandle1);
      assertNotSame(instructionHandle4, instructionHandle1);
      assertSame(instructionHandle4, instructionHandle2);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertEquals(0, instructionHandle4.getPosition());
      assertTrue(instructionHandle4.hasTargeters());
      assertNotNull(instructionHandle4);
      
      instructionList0.redirectExceptionHandlers(codeExceptionGenArray0, instructionHandle4, branchHandle1);
      assertEquals(7, codeExceptionGenArray0.length);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle4));
      assertFalse(branchHandle1.equals((Object)instructionHandle3));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)instructionHandle1));
      assertFalse(instructionHandle4.equals((Object)branchHandle1));
      assertFalse(instructionHandle4.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(branchHandle1, instructionHandle4);
      assertNotSame(branchHandle1, instructionHandle3);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, instructionHandle1);
      assertSame(instructionHandle4, instructionHandle3);
      assertSame(instructionHandle4, branchHandle0);
      assertNotSame(instructionHandle4, branchHandle1);
      assertNotSame(instructionHandle4, instructionHandle1);
      assertSame(instructionHandle4, instructionHandle2);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertEquals("i2c", i2C0.getName());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals(0, branchHandle1.getPosition());
      assertTrue(branchHandle1.hasTargeters());
      assertFalse(instructionHandle4.hasTargeters());
      assertEquals(0, instructionHandle4.getPosition());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertNotNull(iF_ICMPNE0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ICMPNE0);
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      BranchHandle branchHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPNE0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertNotNull(branchHandle1);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionList) null).when(compoundInstruction0).getInstructionList();
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionHandle) branchHandle1, compoundInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 3;
      intArray0[0] = int0;
      int int1 = 1896;
      intArray0[1] = int1;
      int int2 = 7;
      intArray0[2] = int2;
      int int3 = 2232;
      intArray0[3] = int3;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      DMUL dMUL0 = new DMUL();
      assertEquals("dmul", dMUL0.getName());
      assertEquals(1, dMUL0.getLength());
      assertEquals((short)107, dMUL0.getOpcode());
      assertNotNull(dMUL0);
      
      InstructionList instructionList0 = new InstructionList(dMUL0);
      assertEquals("dmul", dMUL0.getName());
      assertEquals(1, dMUL0.getLength());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals("dmul", dMUL0.getName());
      assertEquals(1, dMUL0.getLength());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals("dmul", dMUL0.getName());
      assertEquals(1, dMUL0.getLength());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList1.insert(instructionHandle0, instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      assertEquals("dmul", dMUL0.getName());
      assertEquals(1, dMUL0.getLength());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      
      instructionHandleArray0[0] = instructionHandle1;
      InstructionHandle instructionHandle2 = instructionList1.insert((Instruction) dMUL0, instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertSame(instructionHandle2, instructionHandle1);
      assertSame(instructionHandle2, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals("dmul", dMUL0.getName());
      assertEquals(1, dMUL0.getLength());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionHandle2);
      
      instructionHandleArray0[1] = instructionHandle2;
      InstructionHandle instructionHandle3 = instructionList0.getEnd();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals("dmul", dMUL0.getName());
      assertEquals(1, dMUL0.getLength());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNull(instructionHandle3);
      
      instructionHandleArray0[2] = instructionHandle3;
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn(instructionList0).when(compoundInstruction0).getInstructionList();
      InstructionHandle instructionHandle4 = instructionList1.append(compoundInstruction0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals("dmul", dMUL0.getName());
      assertEquals(1, dMUL0.getLength());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNull(instructionHandle4);
      
      ALOAD aLOAD0 = new ALOAD();
      assertEquals((-1), aLOAD0.getIndex());
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertEquals((short) (-1), aLOAD0.getOpcode());
      assertEquals(1, aLOAD0.getLength());
      assertNotNull(aLOAD0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle4, (Instruction) aLOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      AASTORE aASTORE0 = new AASTORE();
      assertEquals((short)83, aASTORE0.getOpcode());
      assertEquals("aastore", aASTORE0.getName());
      assertEquals(1, aASTORE0.getLength());
      assertNotNull(aASTORE0);
      
      InstructionList instructionList0 = new InstructionList(aASTORE0);
      assertEquals((short)83, aASTORE0.getOpcode());
      assertEquals("aastore", aASTORE0.getName());
      assertEquals(1, aASTORE0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionList) null).when(compoundInstruction0).getInstructionList();
      // Undeclared exception!
      try { 
        instructionList0.insert(compoundInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Inserting null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)119;
      byteArray0[0] = byte0;
      byte byte1 = (byte)5;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)118;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)24;
      byteArray0[5] = byte5;
      byte byte6 = (byte)82;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-83);
      byteArray0[7] = byte7;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(instructionList0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertEquals("ixor", iXOR0.getName());
      assertNotNull(iXOR0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertNotNull(iF_ICMPGE0);
      
      IfInstruction ifInstruction0 = iF_ICMPGE0.negate();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(ifInstruction0);
      
      LLOAD lLOAD0 = new LLOAD();
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertNotNull(lLOAD0);
      
      boolean boolean0 = ifInstruction0.equals(lLOAD0);
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertFalse(boolean0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(branchHandle0);
      
      instructionList0.redirectBranches(branchHandle0, branchHandle0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      
      short short0 = (short)0;
      iXOR0.opcode = short0;
      assertEquals((short)0, iXOR0.getOpcode());
      assertEquals("nop", iXOR0.getName());
      assertEquals(1, iXOR0.getLength());
      
      boolean boolean1 = instructionList0.contains((Instruction) iXOR0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.getLength());
      assertEquals((short)0, iXOR0.getOpcode());
      assertEquals("nop", iXOR0.getName());
      assertEquals(1, iXOR0.getLength());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionHandle) branchHandle0, (Instruction) iF_ICMPGE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 3;
      intArray0[0] = int0;
      int int1 = 1896;
      intArray0[1] = int1;
      int int2 = 7;
      intArray0[2] = int2;
      int int3 = 2232;
      intArray0[3] = int3;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      DMUL dMUL0 = new DMUL();
      assertEquals("dmul", dMUL0.getName());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(1, dMUL0.getLength());
      assertNotNull(dMUL0);
      
      InstructionList instructionList0 = new InstructionList(dMUL0);
      assertEquals("dmul", dMUL0.getName());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(1, dMUL0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals("dmul", dMUL0.getName());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(1, dMUL0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals("dmul", dMUL0.getName());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(1, dMUL0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList1.insert(instructionHandle0, instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      assertEquals("dmul", dMUL0.getName());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(1, dMUL0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      
      instructionHandleArray0[0] = instructionHandle1;
      InstructionHandle instructionHandle2 = instructionList1.insert((Instruction) dMUL0, instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertSame(instructionHandle2, instructionHandle0);
      assertSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals("dmul", dMUL0.getName());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(1, dMUL0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.size());
      assertNotNull(instructionHandle2);
      
      instructionHandleArray0[1] = instructionHandle2;
      InstructionHandle instructionHandle3 = instructionList0.getEnd();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals("dmul", dMUL0.getName());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals(1, dMUL0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNull(instructionHandle3);
      
      instructionHandleArray0[2] = instructionHandle3;
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionList) null).when(compoundInstruction0).getInstructionList();
      // Undeclared exception!
      try { 
        instructionList1.append(compoundInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      GETSTATIC gETSTATIC0 = new GETSTATIC();
      assertEquals(1, gETSTATIC0.getLength());
      assertEquals(0, gETSTATIC0.getIndex());
      assertEquals((short) (-1), gETSTATIC0.getOpcode());
      assertNotNull(gETSTATIC0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(gETSTATIC0);
      assertEquals(1, gETSTATIC0.getLength());
      assertEquals(0, gETSTATIC0.getIndex());
      assertEquals((short) (-1), gETSTATIC0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      instructionHandleArray0[0] = instructionHandle0;
      int[] intArray0 = new int[1];
      int int0 = 164;
      intArray0[0] = int0;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-110);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-116);
      byteArray0[2] = byte2;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertArrayEquals(new byte[] {(byte)1, (byte) (-110), (byte) (-116)}, byteArray0);
      assertNotNull(instructionList0);
      
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionList) null).when(compoundInstruction0).getInstructionList();
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandleArray0[0], compoundInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Inserting null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      IASTORE iASTORE0 = new IASTORE();
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertNotNull(iASTORE0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iASTORE0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertNotNull(gOTO_W0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) gOTO_W0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      BranchHandle branchHandle0 = instructionList1.insert(instructionHandle0, (BranchInstruction) gOTO_W0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      BranchInstruction.notifyTarget(instructionHandle0, instructionHandle0, gOTO_W0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short)200, gOTO_W0.getOpcode());
      
      float float0 = 0.0F;
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-50);
      String string0 = pUSH0.toString();
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("fconst_0[11](1) (PUSH)", string0);
      assertNotNull(string0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-111);
      byteArray0[1] = byte1;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-50), (byte) (-111)}, byteArray0);
      assertFalse(boolean0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("<clinit>", string1);
      assertNotNull(string1);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((InstructionHandle) branchHandle0, (CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(instructionHandle1);
      
      // Undeclared exception!
      try { 
        instructionList1.insert(instructionList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertNotNull(iF_ICMPNE0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ICMPNE0);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      int int0 = 169;
      branchHandle0.setPosition(int0);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(169, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      BranchHandle branchHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPNE0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(169, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(169, branchHandle1.getPosition());
      assertNotNull(branchHandle1);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      BranchHandle branchHandle2 = instructionList1.append((BranchInstruction) iF_ICMPNE0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle2.equals((Object)branchHandle0));
      assertFalse(branchHandle2.equals((Object)branchHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(branchHandle2, branchHandle0);
      assertNotSame(branchHandle2, branchHandle1);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(169, branchHandle2.getPosition());
      assertFalse(branchHandle2.hasTargeters());
      assertNotNull(branchHandle2);
      
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) iF_ICMPNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = 0L;
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      I2C i2C0 = new I2C();
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertNotNull(i2C0);
      
      String string0 = "&qm:yTw}-";
      int int0 = constantPoolGen0.addString(string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2C0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertNotNull(iF_ICMPGT0);
      
      String string1 = "i:EEk<";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      
      short short0 = (short)0;
      iF_ICMPGT0.length = short0;
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      
      Instruction instruction0 = instructionHandle0.swapInstruction(iF_ICMPGT0);
      assertSame(i2C0, instruction0);
      assertSame(instruction0, i2C0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("i2c", instruction0.getName());
      assertEquals(1, instruction0.getLength());
      assertEquals((short)146, instruction0.getOpcode());
      assertNotNull(instruction0);
      
      IfInstruction ifInstruction0 = iF_ICMPGT0.negate();
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(ifInstruction0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) ifInstruction0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(branchHandle0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(3, instructionArray0.length);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertNotNull(instructionArray0);
      
      instructionList0.move(instructionHandle0, (InstructionHandle) branchHandle0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      
      branchHandle0.setTarget(instructionHandle0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.append((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(4, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(4, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
      
      BranchHandle branchHandle1 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertEquals(5, instructionList0.getLength());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(branchHandle1);
      
      instructionList0.move((InstructionHandle) branchHandle0, (InstructionHandle) branchHandle1, instructionHandle0);
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertSame(branchHandle0, instructionHandle2);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertEquals(5, instructionList0.getLength());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      IASTORE iASTORE0 = new IASTORE();
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertNotNull(iASTORE0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iASTORE0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      assertNotNull(gOTO_W0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) gOTO_W0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      BranchHandle branchHandle0 = instructionList1.insert(instructionHandle0, (BranchInstruction) gOTO_W0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int0 = (-2922);
      gOTO_W0.setLength(int0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals((-2922), gOTO_W0.getLength());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle0.getTargeters();
      assertEquals(1, instructionTargeterArray0.length);
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertNotNull(instructionTargeterArray0);
      
      BranchInstruction.notifyTarget(instructionHandle0, instructionHandle0, gOTO_W0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals((-2922), gOTO_W0.getLength());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      
      float float0 = 0.0F;
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-50);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-111);
      byteArray0[1] = byteArray0[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-50), (byte) (-50), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      String string0 = pUSH0.toString();
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("fconst_0[11](1) (PUSH)", string0);
      assertNotNull(string0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((InstructionHandle) branchHandle0, (CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals((-2922), gOTO_W0.getLength());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(instructionHandle1);
      
      // Undeclared exception!
      try { 
        instructionList1.insert((Instruction) iASTORE0, instructionList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      boolean boolean0 = true;
      String string0 = instructionList0.toString(boolean0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      instructionList0.setPositions(boolean0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      int[] intArray0 = instructionList0.getInstructionPositions();
      assertEquals(0, intArray0.length);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      LocalVariableGen[] localVariableGenArray0 = new LocalVariableGen[9];
      Method method0 = new Method();
      assertFalse(method0.isInterface());
      assertFalse(method0.isTransient());
      assertFalse(method0.isAnnotation());
      assertFalse(method0.isStatic());
      assertFalse(method0.isPublic());
      assertEquals(0, method0.getNameIndex());
      assertEquals(0, method0.getModifiers());
      assertFalse(method0.isFinal());
      assertEquals(0, method0.getSignatureIndex());
      assertFalse(method0.isStrictfp());
      assertFalse(method0.isNative());
      assertFalse(method0.isAbstract());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isEnum());
      assertFalse(method0.isProtected());
      assertFalse(method0.isVolatile());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isPrivate());
      assertFalse(method0.isSynchronized());
      assertEquals(0, method0.getAccessFlags());
      assertNotNull(method0);
      
      Constant[] constantArray0 = new Constant[1];
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      float float0 = (-2526.723F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      instructionList0.update();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList1.insert(instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertNull(instructionHandle0);
      
      InstructionList instructionList2 = instructionList0.copy();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionList2, instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList2.isEmpty());
      assertEquals(0, instructionList2.size());
      assertEquals(0, instructionList2.getLength());
      assertNotNull(instructionList2);
      
      constantPoolGen0.adjustSize();
      assertEquals(2, constantPoolGen0.getSize());
      
      InstructionHandle instructionHandle1 = instructionList1.getStart();
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList1.insert(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertNull(instructionHandle2);
      
      InstructionListObserver instructionListObserver0 = null;
      instructionList1.removeObserver(instructionListObserver0);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(iterator0);
      
      CodeExceptionGen[] codeExceptionGenArray0 = null;
      // Undeclared exception!
      try { 
        instructionList2.redirectExceptionHandlers(codeExceptionGenArray0, instructionHandle0, instructionHandle2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      instructionList0.setPositions();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      byte[] byteArray0 = instructionList1.getByteCode();
      assertEquals(0, byteArray0.length);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = true;
      String string0 = instructionList1.toString(boolean0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = true;
      String string1 = instructionList1.toString(boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(string1, string0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals("", string1);
      assertNotNull(string1);
      
      instructionList1.setPositions(boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      
      InstructionHandle instructionHandle0 = null;
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      assertEquals(3, iFEQ0.getLength());
      assertEquals("ifeq", iFEQ0.getName());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals(0, iFEQ0.getIndex());
      assertNotNull(iFEQ0);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) iFEQ0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertEquals(3, iFEQ0.getLength());
      assertEquals("ifeq", iFEQ0.getName());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals(0, iFEQ0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      // Undeclared exception!
      try { 
        instructionList1.getInstructions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of ifeq[153](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)78;
      byteArray0[0] = byte0;
      byte byte1 = (byte)99;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertArrayEquals(new byte[] {(byte)78, (byte)0}, byteArray0);
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(2, byteArray0.length);
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)78, (byte)0}, byteArray0);
      assertNotNull(instructionHandle0);
      
      instructionList0.delete(instructionHandle0, instructionHandle0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)78, (byte)0}, byteArray0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(1, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertArrayEquals(new byte[] {(byte)78, (byte)0}, byteArray0);
      assertNotNull(instructionHandle1);
      
      DASTORE dASTORE0 = (DASTORE)InstructionConstants.DASTORE;
      assertEquals(1, dASTORE0.getLength());
      assertEquals((short)82, dASTORE0.getOpcode());
      assertEquals("dastore", dASTORE0.getName());
      assertNotNull(dASTORE0);
      
      InstructionList instructionList1 = null;
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) dASTORE0, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction dastore[82](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ();
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertNotNull(iF_ICMPEQ0);
      
      IfInstruction ifInstruction0 = iF_ICMPEQ0.negate();
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)160, ifInstruction0.getOpcode());
      assertEquals("if_icmpne", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(ifInstruction0);
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)160, ifInstruction0.getOpcode());
      assertEquals("if_icmpne", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      int int0 = 67;
      int int1 = 0;
      int int2 = iF_ICMPEQ0.updatePosition(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(0, int2);
      
      ConstantPoolGen constantPoolGen0 = null;
      ConstantPoolGen constantPoolGen1 = null;
      instructionList0.replaceConstantPool(constantPoolGen0, constantPoolGen1);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      BranchHandle branchHandle1 = instructionList0.insert((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPEQ0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)160, ifInstruction0.getOpcode());
      assertEquals("if_icmpne", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(67, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertNotNull(branchHandle1);
      
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen2.getSize());
      assertNotNull(constantPoolGen2);
      
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionHandle) branchHandle1, (Instruction) ifInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction if_icmpne[160](3) -> null to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      long long0 = 0L;
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      I2C i2C0 = new I2C();
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertNotNull(i2C0);
      
      String string0 = "&qm:yTw}-";
      int int0 = constantPoolGen0.addString(string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2C0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean4 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertNotNull(iF_ICMPGT0);
      
      String string1 = "i:EEk<";
      boolean boolean5 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertNotSame(string1, string0);
      assertFalse(boolean5);
      
      short short0 = (short) (-30);
      iF_ICMPGT0.length = short0;
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals((-30), iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      
      Instruction instruction0 = instructionHandle0.swapInstruction(iF_ICMPGT0);
      assertSame(instruction0, i2C0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((short)146, instruction0.getOpcode());
      assertEquals(1, instruction0.getLength());
      assertEquals("i2c", instruction0.getName());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals((-30), iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertNotNull(instruction0);
      
      IfInstruction ifInstruction0 = iF_ICMPGT0.negate();
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals((-30), iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertNotNull(ifInstruction0);
      
      EvoSuiteFile evoSuiteFile2 = null;
      boolean boolean6 = FileSystemHandling.createFolder(evoSuiteFile2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6);
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) ifInstruction0);
      assertSame(i2C0, instruction0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals("i2c", i2C0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals((-30), iF_ICMPGT0.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertNotNull(branchHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.getInstructions();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      I2B i2B0 = new I2B();
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertNotNull(i2B0);
      
      Instruction instruction0 = i2B0.copy();
      assertSame(i2B0, instruction0);
      assertSame(instruction0, i2B0);
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, instruction0.getLength());
      assertEquals("i2b", instruction0.getName());
      assertEquals((short)145, instruction0.getOpcode());
      assertNotNull(instruction0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      InstructionList instructionList0 = new InstructionList(i2B0);
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      BranchInstruction branchInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.append(branchInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertNotNull(iF_ICMPLE0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPLE0);
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instructionList0.forEach(consumer0);
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      instructionList0.delete((Instruction) iF_ICMPLE0, (Instruction) iF_ICMPLE0);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      InstructionList instructionList1 = null;
      String string0 = instructionList0.toString();
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.removeObserver(instructionListObserver0);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPLE0);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(branchHandle0);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertNotNull(iF_ICMPLT0);
      
      BranchHandle branchHandle1 = instructionList0.insert((BranchInstruction) iF_ICMPLT0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertNotNull(branchHandle1);
      
      BranchHandle branchHandle2 = instructionList0.insert((InstructionHandle) branchHandle1, (BranchInstruction) iF_ICMPLE0);
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle2.equals((Object)branchHandle1));
      assertFalse(branchHandle2.equals((Object)branchHandle0));
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle0, branchHandle2);
      assertNotSame(branchHandle1, branchHandle2);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(branchHandle2, branchHandle1);
      assertNotSame(branchHandle2, branchHandle0);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals((-1), branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertFalse(branchHandle2.hasTargeters());
      assertEquals((-1), branchHandle2.getPosition());
      assertNotNull(branchHandle2);
      
      int int0 = 0;
      branchHandle0.setPosition(int0);
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(branchHandle0.equals((Object)branchHandle2));
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle0, branchHandle2);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) branchHandle0, (Instruction) iF_ICMPLE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[0];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[5];
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)65;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-59);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-3);
      byteArray0[2] = byte2;
      byte byte3 = (byte)2;
      byteArray0[3] = byte3;
      byte byte4 = (byte)88;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-127);
      byteArray0[5] = byte5;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)65, (byte) (-59), (byte) (-3), (byte)2, (byte)88, (byte) (-127)}, byteArray0);
      assertNotNull(instructionList0);
      
      INEG iNEG0 = new INEG();
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals(1, iNEG0.getLength());
      assertNotNull(iNEG0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iNEG0);
      assertEquals(6, byteArray0.length);
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals(1, iNEG0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.size());
      assertEquals(4, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)65, (byte) (-59), (byte) (-3), (byte)2, (byte)88, (byte) (-127)}, byteArray0);
      assertNotNull(instructionHandle0);
      
      InstructionList instructionList1 = null;
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle0, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Inserting null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = 0L;
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      instructionList0.setPositions();
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      
      InstructionHandle instructionHandle1 = instructionList0.append((CompoundInstruction) pUSH0);
      assertEquals(0, constantArray0.length);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertNotNull(iF_ICMPLT0);
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iF_ICMPLT0);
      assertEquals(0, constantArray0.length);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertNotSame(instructionHandle0, instructionHandle1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(4, instructionList0.size());
      assertEquals(4, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      BranchHandle branchHandle1 = instructionList0.insert((BranchInstruction) iF_ICMPLT0);
      assertEquals(0, constantArray0.length);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(5, instructionList0.size());
      assertEquals(5, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertNotNull(branchHandle1);
      
      int int0 = (-3158);
      // Undeclared exception!
      try { 
        instructionList0.findHandle(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      I2B i2B0 = new I2B();
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertNotNull(i2B0);
      
      Instruction instruction0 = i2B0.copy();
      assertSame(i2B0, instruction0);
      assertSame(instruction0, i2B0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, instruction0.getOpcode());
      assertEquals(1, instruction0.getLength());
      assertEquals("i2b", instruction0.getName());
      assertNotNull(instruction0);
      
      InstructionList instructionList0 = new InstructionList(i2B0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) i2B0);
      assertSame(i2B0, instruction0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      boolean boolean0 = true;
      instructionList0.setPositions(boolean0);
      assertSame(i2B0, instruction0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      
      instructionList0.delete(instructionHandle0);
      assertSame(i2B0, instruction0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(1, instructionHandleArray0.length);
      assertSame(i2B0, instruction0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionHandleArray0);
      
      IFLT iFLT0 = new IFLT();
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      assertEquals(0, iFLT0.getIndex());
      assertNotNull(iFLT0);
      
      IfInstruction ifInstruction0 = iFLT0.negate();
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short)156, ifInstruction0.getOpcode());
      assertEquals("ifge", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertSame(i2B0, instruction0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short)156, ifInstruction0.getOpcode());
      assertEquals("ifge", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      instructionList0.redirectBranches(instructionHandle0, instructionHandle0);
      assertSame(i2B0, instruction0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      boolean boolean1 = instructionList0.contains(instructionHandle0);
      assertFalse(boolean1 == boolean0);
      assertSame(i2B0, instruction0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertNotNull(iF_ICMPLE0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPLE0);
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      instructionList0.delete((Instruction) iF_ICMPLE0, (Instruction) iF_ICMPLE0);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      InstructionList instructionList1 = null;
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ICMPLE0);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals((-1), branchHandle0.getPosition());
      assertNotNull(branchHandle0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)119;
      byteArray0[0] = byte0;
      byte byte1 = (byte)5;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)118;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)24;
      byteArray0[5] = byte5;
      byte byte6 = (byte)82;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-83);
      byteArray0[7] = byte7;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(instructionList0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertNotNull(iXOR0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertNotNull(iF_ICMPGE0);
      
      IF_ICMPLT iF_ICMPLT0 = (IF_ICMPLT)iF_ICMPGE0.negate();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertNotNull(iF_ICMPLT0);
      
      int int0 = 1038;
      int int1 = iF_ICMPLT0.updatePosition(int0, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte5);
      assertFalse(byte1 == byte6);
      assertFalse(byte1 == byte4);
      assertFalse(byte1 == byte7);
      assertFalse(int1 == int0);
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(0, int1);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPLT0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(1038, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(branchHandle0);
      
      instructionList0.redirectBranches(branchHandle0, branchHandle0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(1038, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      
      short short0 = (short)0;
      iXOR0.opcode = short0;
      assertEquals("nop", iXOR0.getName());
      assertEquals((short)0, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      
      boolean boolean0 = instructionList0.contains((Instruction) iXOR0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("nop", iXOR0.getName());
      assertEquals((short)0, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      String string0 = instructionList0.toString(boolean1);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertEquals("  -1: if_icmplt -> null\n   0: dneg\n   1: iconst_2\n   2: nop\n   3: fneg\n   4: nop\n   5: dload 82\n   7: lreturn\n", string0);
      assertNotNull(string0);
      
      int int2 = instructionList0.size();
      assertEquals(8, byteArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertEquals(8, int2);
      
      InstructionHandle instructionHandle0 = null;
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, instructionHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From null to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)1}, byteArray0);
      assertNotNull(instructionList0);
      
      byte[] byteArray1 = instructionList0.getByteCode();
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)1}, byteArray1);
      assertNotNull(byteArray1);
      
      F2I f2I0 = (F2I)InstructionConstants.F2I;
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertNotNull(f2I0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(f2I0);
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      IFGE iFGE0 = new IFGE(instructionHandle0);
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals("ifge", iFGE0.getName());
      assertEquals((short)156, iFGE0.getOpcode());
      assertNotNull(iFGE0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iFGE0);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertEquals(4, instructionList0.size());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals("ifge", iFGE0.getName());
      assertEquals((short)156, iFGE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)1}, byteArray0);
      assertNotNull(branchHandle0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = " is not contained in this list.";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      InstructionHandle instructionHandle1 = instructionHandle0.setPrev(branchHandle0);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertSame(instructionHandle1, branchHandle0);
      assertSame(branchHandle0, instructionHandle1);
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertEquals(4, instructionList0.size());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals("ifge", iFGE0.getName());
      assertEquals((short)156, iFGE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)1}, byteArray0);
      assertNotNull(instructionHandle1);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      
      BranchHandle branchHandle1 = (BranchHandle)instructionList0.append((InstructionHandle) branchHandle0, instructionList1);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle1, branchHandle0);
      assertSame(branchHandle1, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertSame(branchHandle0, branchHandle1);
      assertSame(branchHandle0, instructionHandle1);
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertEquals(4, instructionList0.size());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals("ifge", iFGE0.getName());
      assertEquals((short)156, iFGE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)1}, byteArray0);
      assertNotNull(branchHandle1);
      
      InstructionTargeter[] instructionTargeterArray0 = branchHandle1.getTargeters();
      assertEquals(3, byteArray0.length);
      assertEquals(0, instructionTargeterArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle1, branchHandle0);
      assertSame(branchHandle1, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertSame(branchHandle0, branchHandle1);
      assertSame(branchHandle0, instructionHandle1);
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertEquals(4, instructionList0.size());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals("ifge", iFGE0.getName());
      assertEquals((short)156, iFGE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)1}, byteArray0);
      assertNotNull(instructionTargeterArray0);
      
      BranchHandle branchHandle2 = (BranchHandle)branchHandle1.setNext(instructionHandle1);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(byteArray0, byteArray1);
      assertSame(instructionHandle1, branchHandle2);
      assertSame(instructionHandle1, branchHandle1);
      assertSame(instructionHandle1, branchHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle1, branchHandle0);
      assertSame(branchHandle1, instructionHandle1);
      assertSame(branchHandle1, branchHandle2);
      assertSame(branchHandle2, branchHandle0);
      assertSame(branchHandle2, branchHandle1);
      assertSame(branchHandle2, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertSame(branchHandle0, branchHandle1);
      assertSame(branchHandle0, branchHandle2);
      assertSame(branchHandle0, instructionHandle1);
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertFalse(branchHandle2.hasTargeters());
      assertEquals(0, branchHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertEquals(4, instructionList0.size());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals("ifge", iFGE0.getName());
      assertEquals((short)156, iFGE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)1}, byteArray0);
      assertNotNull(branchHandle2);
      
      branchHandle1.dispose();
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle1, branchHandle0);
      assertSame(branchHandle1, instructionHandle1);
      assertSame(branchHandle1, branchHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertSame(branchHandle0, branchHandle1);
      assertSame(branchHandle0, branchHandle2);
      assertSame(branchHandle0, instructionHandle1);
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals((-1), branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertEquals(4, instructionList0.size());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iFGE0.getLength());
      assertEquals((-1), iFGE0.getIndex());
      assertEquals("ifge", iFGE0.getName());
      assertEquals((short)156, iFGE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals((-1), branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)1}, byteArray0);
      
      InstructionHandle instructionHandle2 = instructionList0.insert((InstructionHandle) branchHandle1, (Instruction) f2I0);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle1, branchHandle0);
      assertSame(branchHandle1, instructionHandle1);
      assertSame(branchHandle1, branchHandle2);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle2);
      assertSame(branchHandle0, branchHandle1);
      assertSame(branchHandle0, branchHandle2);
      assertSame(branchHandle0, instructionHandle1);
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals((-1), branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertEquals(5, instructionList0.getLength());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iFGE0.getLength());
      assertEquals((-1), iFGE0.getIndex());
      assertEquals("ifge", iFGE0.getName());
      assertEquals((short)156, iFGE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals((-1), branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)1}, byteArray0);
      assertNotNull(instructionHandle2);
      
      BranchHandle branchHandle3 = (BranchHandle)instructionList0.append((InstructionHandle) branchHandle1, instructionList1);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle2));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle1, branchHandle0);
      assertSame(branchHandle1, instructionHandle1);
      assertSame(branchHandle1, branchHandle3);
      assertSame(branchHandle1, branchHandle2);
      assertSame(branchHandle3, instructionHandle1);
      assertSame(branchHandle3, branchHandle0);
      assertSame(branchHandle3, branchHandle2);
      assertSame(branchHandle3, branchHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle2);
      assertSame(branchHandle0, branchHandle1);
      assertSame(branchHandle0, branchHandle2);
      assertSame(branchHandle0, branchHandle3);
      assertSame(branchHandle0, instructionHandle1);
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals((-1), branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals((-1), branchHandle3.getPosition());
      assertFalse(branchHandle3.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertEquals(5, instructionList0.getLength());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iFGE0.getLength());
      assertEquals((-1), iFGE0.getIndex());
      assertEquals("ifge", iFGE0.getName());
      assertEquals((short)156, iFGE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals((-1), branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte)1}, byteArray0);
      assertNotNull(branchHandle3);
      
      // Undeclared exception!
      try { 
        instructionList0.getInstructions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_0;
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(0, iSTORE0.getIndex());
      assertEquals(1, iSTORE0.getLength());
      assertEquals("istore_0", iSTORE0.getName());
      assertEquals((short)59, iSTORE0.getOpcode());
      assertNotNull(iSTORE0);
      
      InstructionList instructionList0 = new InstructionList(iSTORE0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(0, iSTORE0.getIndex());
      assertEquals(1, iSTORE0.getLength());
      assertEquals("istore_0", iSTORE0.getName());
      assertEquals((short)59, iSTORE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(0, iSTORE0.getIndex());
      assertEquals(1, iSTORE0.getLength());
      assertEquals("istore_0", iSTORE0.getName());
      assertEquals((short)59, iSTORE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      IFLT iFLT0 = new IFLT();
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertNotNull(iFLT0);
      
      IfInstruction ifInstruction0 = iFLT0.negate();
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("ifge", ifInstruction0.getName());
      assertEquals((short)156, ifInstruction0.getOpcode());
      assertNotNull(ifInstruction0);
      
      DDIV dDIV0 = new DDIV();
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals("ddiv", dDIV0.getName());
      assertNotNull(dDIV0);
      
      boolean boolean0 = iFLT0.equals(dDIV0);
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals("ddiv", dDIV0.getName());
      assertFalse(boolean0);
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) ifInstruction0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(0, iSTORE0.getIndex());
      assertEquals(1, iSTORE0.getLength());
      assertEquals("istore_0", iSTORE0.getName());
      assertEquals((short)59, iSTORE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("ifge", ifInstruction0.getName());
      assertEquals((short)156, ifInstruction0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(branchHandle0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(0, iSTORE0.getIndex());
      assertEquals(1, iSTORE0.getLength());
      assertEquals("istore_0", iSTORE0.getName());
      assertEquals((short)59, iSTORE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("ifge", ifInstruction0.getName());
      assertEquals((short)156, ifInstruction0.getOpcode());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertNotNull(iF_ACMPEQ0);
      
      BranchHandle branchHandle1 = instructionList0.insert((InstructionHandle) branchHandle0, (BranchInstruction) iF_ACMPEQ0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(0, iSTORE0.getIndex());
      assertEquals(1, iSTORE0.getLength());
      assertEquals("istore_0", iSTORE0.getName());
      assertEquals((short)59, iSTORE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("ifge", ifInstruction0.getName());
      assertEquals((short)156, ifInstruction0.getOpcode());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertNotNull(branchHandle1);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((Instruction) iSTORE0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(0, iSTORE0.getIndex());
      assertEquals(1, iSTORE0.getLength());
      assertEquals("istore_0", iSTORE0.getName());
      assertEquals((short)59, iSTORE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.size());
      assertEquals(4, instructionList0.getLength());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(0, iSTORE0.getIndex());
      assertEquals(1, iSTORE0.getLength());
      assertEquals("istore_0", iSTORE0.getName());
      assertEquals((short)59, iSTORE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.size());
      assertEquals(4, instructionList0.getLength());
      assertNotNull(iterator0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) ifInstruction0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("ifge", ifInstruction0.getName());
      assertEquals((short)156, ifInstruction0.getOpcode());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)branchHandle0));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionHandle2, branchHandle1);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(0, iSTORE0.getIndex());
      assertEquals(1, iSTORE0.getLength());
      assertEquals("istore_0", iSTORE0.getName());
      assertEquals((short)59, iSTORE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertEquals(5, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("ifge", ifInstruction0.getName());
      assertEquals((short)156, ifInstruction0.getOpcode());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertNotNull(instructionHandle2);
      
      Constant[] constantArray0 = new Constant[9];
      double double0 = 0.0;
      ConstantDouble constantDouble0 = new ConstantDouble(double0);
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(0.0, constantDouble1.getBytes(), 0.01);
      assertNotNull(constantDouble1);
      
      constantArray0[0] = (Constant) constantDouble1;
      int int0 = 23;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(int0);
      assertEquals(23, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals(23, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(23, constantMethodType1.getDescriptorIndex());
      assertNotNull(constantMethodType1);
      
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantLong constantLong0 = new ConstantLong(int0);
      assertEquals(23L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals(23L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(23L, constantLong1.getBytes());
      assertNotNull(constantLong1);
      
      constantArray0[2] = (Constant) constantLong1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(int0);
      assertTrue(constantMethodType2.equals((Object)constantMethodType1));
      assertTrue(constantMethodType2.equals((Object)constantMethodType0));
      assertEquals(23, constantMethodType2.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType2.getTag());
      assertNotNull(constantMethodType2);
      
      constantArray0[3] = (Constant) constantMethodType2;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(int0, int0);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertNotNull(constantInvokeDynamic0);
      
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      ConstantLong constantLong2 = new ConstantLong(int0);
      assertTrue(constantLong2.equals((Object)constantLong0));
      assertTrue(constantLong2.equals((Object)constantLong1));
      assertEquals(23L, constantLong2.getBytes());
      assertEquals((byte)5, constantLong2.getTag());
      assertNotNull(constantLong2);
      
      constantArray0[5] = (Constant) constantLong2;
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteSequence0);
      
      try { 
        Constant.readConstant(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      I2B i2B0 = new I2B();
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertNotNull(i2B0);
      
      Instruction instruction0 = i2B0.copy();
      assertSame(i2B0, instruction0);
      assertSame(instruction0, i2B0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, instruction0.getLength());
      assertEquals((short)145, instruction0.getOpcode());
      assertEquals("i2b", instruction0.getName());
      assertNotNull(instruction0);
      
      InstructionList instructionList0 = new InstructionList(i2B0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionComparator instructionComparator0 = Instruction.getComparator();
      assertNotNull(instructionComparator0);
      
      Instruction.setComparator(instructionComparator0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) i2B0);
      assertSame(i2B0, instruction0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      boolean boolean0 = true;
      instructionList0.setPositions(boolean0);
      assertSame(i2B0, instruction0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      
      int int0 = 208;
      instructionHandle0.i_position = int0;
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(208, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      instructionList0.delete(instructionHandle0);
      assertSame(i2B0, instruction0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(1, instructionHandleArray0.length);
      assertSame(i2B0, instruction0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionHandleArray0);
      
      instructionList0.redirectBranches(instructionHandle0, instructionHandle0);
      assertSame(i2B0, instruction0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      boolean boolean1 = instructionList0.contains(instructionHandle0);
      assertFalse(boolean1 == boolean0);
      assertSame(i2B0, instruction0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FADD fADD0 = (FADD)InstructionConstants.FADD;
      assertEquals("fadd", fADD0.getName());
      assertEquals(1, fADD0.getLength());
      assertEquals((short)98, fADD0.getOpcode());
      assertNotNull(fADD0);
      
      InstructionList instructionList0 = new InstructionList(fADD0);
      assertEquals("fadd", fADD0.getName());
      assertEquals(1, fADD0.getLength());
      assertEquals((short)98, fADD0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals("fadd", fADD0.getName());
      assertEquals(1, fADD0.getLength());
      assertEquals((short)98, fADD0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertNotNull(iFNONNULL0);
      
      IfInstruction ifInstruction0 = iFNONNULL0.negate();
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("ifnull", ifInstruction0.getName());
      assertNotNull(ifInstruction0);
      
      instructionHandle0.addTargeter(ifInstruction0);
      assertEquals("fadd", fADD0.getName());
      assertEquals(1, fADD0.getLength());
      assertEquals((short)98, fADD0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("ifnull", ifInstruction0.getName());
      
      try { 
        instructionList0.delete(instructionHandle0, instructionHandle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // {   -1: fadd[98](1) }
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      char char0 = '$';
      Character character0 = Character.valueOf(char0);
      assertEquals('$', (char)character0);
      assertNotNull(character0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(iterator0);
      
      String string1 = pUSH0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("bipush[16](2) 36 (PUSH)", string1);
      assertNotNull(string1);
      
      BranchInstruction branchInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.insert(branchInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      float float0 = (-2526.723F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      instructionList0.update();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList1.insert(instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNull(instructionHandle0);
      
      InstructionList instructionList2 = instructionList0.copy();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList2.size());
      assertTrue(instructionList2.isEmpty());
      assertEquals(0, instructionList2.getLength());
      assertNotNull(instructionList2);
      
      constantPoolGen0.adjustSize();
      assertEquals(2, constantPoolGen0.getSize());
      
      InstructionList instructionList3 = pUSH0.getInstructionList();
      assertFalse(instructionList3.equals((Object)instructionList2));
      assertFalse(instructionList3.equals((Object)instructionList1));
      assertFalse(instructionList3.equals((Object)instructionList0));
      assertNotSame(instructionList3, instructionList2);
      assertNotSame(instructionList3, instructionList1);
      assertNotSame(instructionList3, instructionList0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList3.getLength());
      assertFalse(instructionList3.isEmpty());
      assertEquals(1, instructionList3.size());
      assertNotNull(instructionList3);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList3));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList3));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList3);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList1, instructionList3);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList1.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList3));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList3));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList3);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList1, instructionList3);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertNotNull(instructionHandle2);
      
      InstructionListObserver instructionListObserver0 = null;
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertFalse(instructionList0.equals((Object)instructionList3));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertNotSame(instructionList0, instructionList3);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(iterator0);
      
      boolean boolean0 = instructionList0.contains(instructionHandle0);
      assertFalse(instructionList0.equals((Object)instructionList3));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList3));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList3);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList1, instructionList3);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      float float0 = (-2526.723F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      instructionList0.update();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList1.insert(instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNull(instructionHandle0);
      
      InstructionList instructionList2 = instructionList0.copy();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList2.size());
      assertEquals(0, instructionList2.getLength());
      assertTrue(instructionList2.isEmpty());
      assertNotNull(instructionList2);
      
      constantPoolGen0.adjustSize();
      assertEquals(2, constantPoolGen0.getSize());
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList1.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
      
      InstructionListObserver instructionListObserver0 = null;
      instructionList1.removeObserver(instructionListObserver0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        instructionList1.insert(instructionHandle0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)78;
      byteArray0[0] = byte0;
      byte byte1 = (byte)99;
      byteArray0[1] = byte1;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertArrayEquals(new byte[] {(byte)78, (byte)99}, byteArray0);
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)78, (byte)99}, byteArray0);
      assertNotNull(instructionHandle0);
      
      instructionList0.delete(instructionHandle0, instructionHandle0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)78, (byte)99}, byteArray0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertArrayEquals(new byte[] {(byte)78, (byte)99}, byteArray0);
      assertNotNull(instructionHandle1);
      
      DASTORE dASTORE0 = (DASTORE)InstructionConstants.DASTORE;
      assertEquals(1, dASTORE0.getLength());
      assertEquals("dastore", dASTORE0.getName());
      assertEquals((short)82, dASTORE0.getOpcode());
      assertNotNull(dASTORE0);
      
      InstructionList instructionList1 = null;
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) dASTORE0, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction dastore[82](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      I2B i2B0 = new I2B();
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertNotNull(i2B0);
      
      Instruction instruction0 = i2B0.copy();
      assertSame(i2B0, instruction0);
      assertSame(instruction0, i2B0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals(1, instruction0.getLength());
      assertEquals((short)145, instruction0.getOpcode());
      assertEquals("i2b", instruction0.getName());
      assertNotNull(instruction0);
      
      InstructionList instructionList0 = new InstructionList(i2B0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionComparator instructionComparator0 = Instruction.getComparator();
      assertNotNull(instructionComparator0);
      
      Instruction.setComparator(instructionComparator0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) i2B0);
      assertSame(i2B0, instruction0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      boolean boolean0 = true;
      instructionList0.setPositions(boolean0);
      assertSame(i2B0, instruction0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      
      int int0 = 208;
      instructionHandle0.i_position = int0;
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(208, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      instructionList0.delete(instructionHandle0);
      assertSame(i2B0, instruction0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(1, instructionHandleArray0.length);
      assertSame(i2B0, instruction0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionHandleArray0);
      
      instructionList0.redirectBranches(instructionHandle0, instructionHandle0);
      assertSame(i2B0, instruction0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.append((Instruction) i2B0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertSame(i2B0, instruction0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      
      boolean boolean1 = instructionList0.contains(instructionHandle0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(boolean1 == boolean0);
      assertSame(i2B0, instruction0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(0, constantArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int0 = 168;
      PUSH pUSH0 = new PUSH(constantPoolGen0, int0);
      assertEquals(0, constantArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(0, constantArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals("if_icmple", iF_ICMPLE0.getName());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertNotNull(iF_ICMPLE0);
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ICMPLE0);
      assertEquals(0, constantArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals("if_icmple", iF_ICMPLE0.getName());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      IF_ICMPLE iF_ICMPLE1 = (IF_ICMPLE)branchHandle0.swapInstruction(iF_ICMPLE0);
      assertEquals(0, constantArray0.length);
      assertSame(iF_ICMPLE0, iF_ICMPLE1);
      assertSame(iF_ICMPLE1, iF_ICMPLE0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals("if_icmple", iF_ICMPLE0.getName());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(3, iF_ICMPLE1.getLength());
      assertEquals((short)164, iF_ICMPLE1.getOpcode());
      assertEquals("if_icmple", iF_ICMPLE1.getName());
      assertEquals(0, iF_ICMPLE1.getIndex());
      assertNotNull(iF_ICMPLE1);
      
      byte byte0 = (byte) (-92);
      // Undeclared exception!
      try { 
        instructionList0.move((InstructionHandle) branchHandle0, instructionHandle0, (InstructionHandle) branchHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From   -1: if_icmple[164](3) -> null to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      IOR iOR0 = new IOR();
      assertEquals("ior", iOR0.getName());
      assertEquals(1, iOR0.getLength());
      assertEquals((short)128, iOR0.getOpcode());
      assertNotNull(iOR0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      int int0 = instructionList0.size();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(0, int0);
      
      IFLT iFLT0 = new IFLT();
      assertEquals(1, iFLT0.getLength());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertNotNull(iFLT0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iFLT0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, iFLT0.getLength());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, iFLT0.getLength());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CompoundInstruction compoundInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iOR0, compoundInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      instructionList0.dispose();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      short short0 = Constants.FADD;
      assertEquals((short)98, short0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) short0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      boolean boolean0 = false;
      instructionList0.setPositions(boolean0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNull(instructionHandle0);
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(0, instructionHandleArray0.length);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionHandleArray0);
      
      int[] intArray0 = new int[2];
      int int0 = 1644;
      InstructionList instructionList1 = new InstructionList(pUSH0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      int int1 = instructionList1.size();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(int1 == int0);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertNotNull(iF_ICMPLE0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPLE0);
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      // Undeclared exception!
      try { 
        instructionList0.getByteCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      IOR iOR0 = new IOR();
      assertEquals("ior", iOR0.getName());
      assertEquals(1, iOR0.getLength());
      assertEquals((short)128, iOR0.getOpcode());
      assertNotNull(iOR0);
      
      CompoundInstruction compoundInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.append(compoundInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals(1, iF_ICMPLT0.getLength());
      assertNotNull(iF_ICMPLT0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPLT0);
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals(1, iF_ICMPLT0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals(1, iF_ICMPLT0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      int[] intArray0 = new int[5];
      int int0 = 5;
      intArray0[0] = int0;
      int int1 = 53;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 2;
      intArray0[3] = int3;
      int int4 = 1;
      intArray0[4] = int4;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[5];
      instructionHandleArray0[0] = instructionHandle0;
      instructionHandleArray0[1] = instructionHandle0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      instructionHandleArray0[2] = instructionHandle0;
      instructionHandleArray0[3] = instructionHandle0;
      instructionHandleArray0[4] = instructionHandle0;
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandleArray0[4]);
      assertEquals(5, intArray0.length);
      assertEquals(5, instructionHandleArray0.length);
      assertArrayEquals(new int[] {5, 53, 0, 2, 1}, intArray0);
      assertNotNull(sWITCH0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (CompoundInstruction) sWITCH0);
      assertEquals(5, intArray0.length);
      assertEquals(5, instructionHandleArray0.length);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertArrayEquals(new int[] {5, 53, 0, 2, 1}, intArray0);
      assertNotNull(instructionHandle1);
      
      instructionList0.update();
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      
      InstructionHandle[] instructionHandleArray1 = instructionList0.getInstructionHandles();
      assertEquals(2, instructionHandleArray1.length);
      assertFalse(instructionHandleArray1.equals((Object)instructionHandleArray0));
      assertNotSame(instructionHandleArray1, instructionHandleArray0);
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertNotNull(instructionHandleArray1);
      
      int int5 = instructionList0.size();
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, int5);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)78;
      byteArray0[0] = byte0;
      byte byte1 = (byte)99;
      byteArray0[1] = byte1;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertArrayEquals(new byte[] {(byte)78, (byte)99}, byteArray0);
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)78, (byte)99}, byteArray0);
      assertNotNull(instructionHandle0);
      
      instructionList0.delete(instructionHandle0, instructionHandle0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)78, (byte)99}, byteArray0);
      
      InstructionHandle instructionHandle1 = instructionList0.getStart();
      assertEquals(2, byteArray0.length);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(1, instructionHandle1.getPosition());
      assertArrayEquals(new byte[] {(byte)78, (byte)99}, byteArray0);
      assertNotNull(instructionHandle1);
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle1, instructionHandle1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid range: From    1: dadd[99](1) to    1: dadd[99](1) contains target    1: dadd[99](1)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ILOAD iLOAD0 = new ILOAD();
      assertEquals(1, iLOAD0.getLength());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertNotNull(iLOAD0);
      
      InstructionList instructionList0 = new InstructionList(iLOAD0);
      assertEquals(1, iLOAD0.getLength());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      // Undeclared exception!
      try { 
        instructionList0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      InstructionHandle instructionHandle0 = null;
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertNotNull(iF_ACMPEQ0);
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ACMPEQ0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      Constant[] constantArray0 = new Constant[3];
      double double0 = 4388.0;
      ConstantDouble constantDouble0 = new ConstantDouble(double0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(4388.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      constantArray0[0] = (Constant) constantDouble0;
      long long0 = (-2956L);
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantLong constantLong0 = new ConstantLong(long0);
      assertEquals((-2956L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      constantArray0[1] = (Constant) constantLong0;
      ConstantDouble constantDouble1 = (ConstantDouble)constantArray0[0].copy();
      assertEquals(3, constantArray0.length);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals(4388.0, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertNotNull(constantDouble1);
      
      // Undeclared exception!
      try { 
        instructionList1.append(instructionHandle0, (BranchInstruction) iF_ACMPEQ0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 0;
      String string0 = "b8L8mFeOj2wB:,/";
      String string1 = "";
      String string2 = "mMR+CV&\"a[";
      String string3 = "";
      InstructionHandle instructionHandle0 = null;
      IFLT iFLT0 = new IFLT();
      assertEquals(1, iFLT0.getLength());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertNotNull(iFLT0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFLT0);
      assertEquals(1, iFLT0.getLength());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int0;
      int int1 = 0;
      intArray0[2] = int1;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      instructionHandleArray0[0] = instructionHandle0;
      instructionHandleArray0[1] = instructionHandle0;
      instructionHandleArray0[2] = instructionHandle0;
      instructionHandleArray0[3] = instructionHandle0;
      instructionHandleArray0[4] = instructionHandle0;
      instructionHandleArray0[5] = instructionHandle0;
      instructionHandleArray0[6] = instructionHandle0;
      instructionHandleArray0[7] = instructionHandle0;
      instructionHandleArray0[8] = instructionHandle0;
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandleArray0[4]);
      assertEquals(9, instructionHandleArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(sWITCH0);
      
      InstructionList instructionList1 = new InstructionList(sWITCH0);
      assertEquals(9, instructionHandleArray0.length);
      assertEquals(6, intArray0.length);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle0, instructionList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LMUL lMUL0 = new LMUL();
      assertEquals((short)105, lMUL0.getOpcode());
      assertEquals("lmul", lMUL0.getName());
      assertEquals(1, lMUL0.getLength());
      assertNotNull(lMUL0);
      
      InstructionList instructionList0 = new InstructionList(lMUL0);
      assertEquals((short)105, lMUL0.getOpcode());
      assertEquals("lmul", lMUL0.getName());
      assertEquals(1, lMUL0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "-*&V4n|YzHs8";
      boolean boolean0 = true;
      String string1 = instructionList0.toString(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals((short)105, lMUL0.getOpcode());
      assertEquals("lmul", lMUL0.getName());
      assertEquals(1, lMUL0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals("  -1: lmul[105](1)\n", string1);
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(string0, string1);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle0, (Instruction) lMUL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = null;
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 92;
      intArray0[1] = int1;
      int int2 = 1415;
      intArray0[2] = int2;
      int int3 = (-569);
      intArray0[3] = int3;
      int int4 = (-2545);
      intArray0[4] = int4;
      int int5 = 3605;
      intArray0[5] = int5;
      int int6 = 5;
      // Undeclared exception!
      try { 
        InstructionList.findHandle(instructionHandleArray0, intArray0, int6, intArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)119;
      byteArray0[0] = byte0;
      byte byte1 = (byte)5;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte3 = (byte)118;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)24;
      byteArray0[5] = byte5;
      byte byte6 = (byte)82;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-83);
      byteArray0[7] = byte7;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(instructionList0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertNotNull(iXOR0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertNotNull(iF_ICMPGE0);
      
      IfInstruction ifInstruction0 = iF_ICMPGE0.negate();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(branchHandle0);
      
      instructionList0.redirectBranches(branchHandle0, branchHandle0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      
      short short0 = (short)0;
      iXOR0.opcode = short0;
      assertEquals("nop", iXOR0.getName());
      assertEquals((short)0, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      
      boolean boolean1 = instructionList0.contains((Instruction) iXOR0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("nop", iXOR0.getName());
      assertEquals((short)0, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertFalse(boolean1);
      
      InstructionHandle instructionHandle0 = null;
      // Undeclared exception!
      try { 
        instructionList0.getByteCode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of if_icmplt[161](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = null;
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertNotNull(iF_ACMPEQ0);
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ACMPEQ0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      Constant[] constantArray0 = new Constant[3];
      double double0 = 4388.0;
      ConstantDouble constantDouble0 = new ConstantDouble(double0);
      assertEquals(4388.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      constantArray0[0] = (Constant) constantDouble0;
      long long0 = (-2956L);
      ConstantLong constantLong0 = new ConstantLong(long0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-2956L), constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      constantArray0[1] = (Constant) constantLong0;
      ConstantDouble constantDouble1 = (ConstantDouble)constantArray0[0].copy();
      assertEquals(3, constantArray0.length);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotSame(constantDouble1, constantDouble0);
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(4388.0, constantDouble1.getBytes(), 0.01);
      assertNotNull(constantDouble1);
      
      constantArray0[2] = (Constant) constantDouble1;
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNull(instructionHandle1);
      
      URI uRI0 = MockURI.aHttpURI;
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DUP_X2 dUP_X2_0 = new DUP_X2();
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, dUP_X2_0.getLength());
      assertNotNull(dUP_X2_0);
      
      InstructionList instructionList0 = new InstructionList(dUP_X2_0);
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, dUP_X2_0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = new InstructionList(dUP_X2_0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionList instructionList2 = instructionList1.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList2.size());
      assertFalse(instructionList2.isEmpty());
      assertEquals(1, instructionList2.getLength());
      assertNotNull(instructionList2);
      
      InstructionHandle instructionHandle0 = instructionList1.getEnd();
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, dUP_X2_0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      
      boolean boolean0 = true;
      // Undeclared exception!
      instructionList0.setPositions(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FADD fADD0 = (FADD)InstructionConstants.FADD;
      assertEquals((short)98, fADD0.getOpcode());
      assertEquals(1, fADD0.getLength());
      assertEquals("fadd", fADD0.getName());
      assertNotNull(fADD0);
      
      InstructionList instructionList0 = new InstructionList(fADD0);
      assertEquals((short)98, fADD0.getOpcode());
      assertEquals(1, fADD0.getLength());
      assertEquals("fadd", fADD0.getName());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fADD0);
      assertEquals((short)98, fADD0.getOpcode());
      assertEquals(1, fADD0.getLength());
      assertEquals("fadd", fADD0.getName());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      instructionList0.dispose();
      assertEquals((short)98, fADD0.getOpcode());
      assertEquals(1, fADD0.getLength());
      assertEquals("fadd", fADD0.getName());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)58;
      byteArray0[3] = byte3;
      byte byte4 = (byte)67;
      byteArray0[4] = byte4;
      InstructionList instructionList1 = new InstructionList(byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(4, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(4, instructionList1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)58, (byte)67}, byteArray0);
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, instructionList1);
      assertEquals(5, byteArray0.length);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertEquals((short)98, fADD0.getOpcode());
      assertEquals(1, fADD0.getLength());
      assertEquals("fadd", fADD0.getName());
      assertTrue(instructionList0.isEmpty());
      assertEquals(4, instructionList0.size());
      assertEquals(4, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)58, (byte)67}, byteArray0);
      assertNotNull(instructionHandle1);
      
      // Undeclared exception!
      try { 
        instructionList0.getInstructionHandles();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      IOR iOR0 = new IOR();
      assertEquals(1, iOR0.getLength());
      assertEquals((short)128, iOR0.getOpcode());
      assertEquals("ior", iOR0.getName());
      assertNotNull(iOR0);
      
      CompoundInstruction compoundInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.insert(compoundInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals("impdep2", iMPDEP2_0.getName());
      assertEquals(1, iMPDEP2_0.getLength());
      assertNotNull(iMPDEP2_0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iMPDEP2_0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals("impdep2", iMPDEP2_0.getName());
      assertEquals(1, iMPDEP2_0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      IFNULL iFNULL0 = new IFNULL();
      assertEquals(0, iFNULL0.getIndex());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(1, iFNULL0.getLength());
      assertNotNull(iFNULL0);
      
      LocalVariableGen[] localVariableGenArray0 = null;
      // Undeclared exception!
      try { 
        instructionList0.redirectLocalVariables(localVariableGenArray0, instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      float float0 = 619.51F;
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      instructionList0.dispose();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      
      instructionList0.update();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      CASTORE cASTORE0 = new CASTORE();
      assertEquals(1, cASTORE0.getLength());
      assertEquals("castore", cASTORE0.getName());
      assertEquals((short)85, cASTORE0.getOpcode());
      assertNotNull(cASTORE0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (Instruction) cASTORE0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, cASTORE0.getLength());
      assertEquals("castore", cASTORE0.getName());
      assertEquals((short)85, cASTORE0.getOpcode());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionHandle1, (Instruction) cASTORE0);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle2);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle2);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, cASTORE0.getLength());
      assertEquals("castore", cASTORE0.getName());
      assertEquals((short)85, cASTORE0.getOpcode());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE(instructionHandle0);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertNotNull(iF_ICMPNE0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle0, (BranchInstruction) iF_ICMPNE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = null;
      char char0 = '>';
      Character character0 = Character.valueOf(char0);
      assertEquals('>', (char)character0);
      assertNotNull(character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      int int0 = 0;
      boolean boolean0 = Character.isBmpCodePoint(int0);
      assertTrue(boolean0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      String string0 = pUSH0.toString();
      assertEquals("bipush[16](2) 62 (PUSH)", string0);
      assertNotNull(string0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      Iterator<InstructionHandle> iterator0 = instructionList1.iterator();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(iterator0);
      
      char char1 = Character.lowSurrogate(int0);
      assertFalse(char1 == char0);
      assertEquals('\uDC00', char1);
      
      instructionList0.addObserver(instructionListObserver0);
      assertFalse(char0 == char1);
      assertFalse(character0.equals((Object)char1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      InstructionListObserver instructionListObserver1 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver1);
      assertFalse(char0 == char1);
      assertFalse(character0.equals((Object)char1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      Instruction instruction0 = null;
      // Undeclared exception!
      try { 
        instructionList1.insert(instruction0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction null is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSR jSR0 = new JSR();
      assertEquals(1, jSR0.getLength());
      assertEquals(0, jSR0.getIndex());
      assertEquals((short) (-1), jSR0.getOpcode());
      assertNotNull(jSR0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) jSR0);
      assertEquals(1, jSR0.getLength());
      assertEquals(0, jSR0.getIndex());
      assertEquals((short) (-1), jSR0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        instructionList0.toString(boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      ISUB iSUB0 = new ISUB();
      assertEquals("isub", iSUB0.getName());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals(1, iSUB0.getLength());
      assertNotNull(iSUB0);
      
      InstructionComparator instructionComparator0 = Instruction.getComparator();
      assertNotNull(instructionComparator0);
      
      Instruction.setComparator(instructionComparator0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int0 = (-2146);
      PUSH pUSH0 = new PUSH(constantPoolGen0, int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iSUB0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction isub[100](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-117);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)12;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-113);
      byteArray0[8] = byte8;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)12, (byte)0, (byte) (-113)}, byteArray0);
      assertNotNull(instructionList0);
      
      instructionList0.setPositions();
      assertEquals(9, byteArray0.length);
      assertEquals(9, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)12, (byte)0, (byte) (-113)}, byteArray0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.removeObserver(instructionListObserver0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)12, (byte)0, (byte) (-113)}, byteArray0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(9, byteArray0.length);
      assertEquals(9, instructionArray0.length);
      assertEquals(9, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)12, (byte)0, (byte) (-113)}, byteArray0);
      assertNotNull(instructionArray0);
      
      InstructionHandle instructionHandle0 = instructionList0.findHandle((int) byteArray0[7]);
      assertEquals(9, byteArray0.length);
      assertEquals(9, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.getLength());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)12, (byte)0, (byte) (-113)}, byteArray0);
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.getStart();
      assertEquals(9, byteArray0.length);
      assertSame(instructionHandle1, instructionHandle0);
      assertEquals(9, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.getLength());
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)12, (byte)0, (byte) (-113)}, byteArray0);
      assertNotNull(instructionHandle1);
      
      FNEG fNEG0 = new FNEG();
      assertEquals(1, fNEG0.getLength());
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertNotNull(fNEG0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      String string0 = "ZHRZ,`in";
      ObjectType objectType0 = ObjectType.getInstance(string0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LZHRZ,`in;", objectType0.getSignature());
      assertEquals("ZHRZ,`in", objectType0.getClassName());
      assertNotNull(objectType0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LZHRZ,`in;", objectType0.getSignature());
      assertEquals("ZHRZ,`in", objectType0.getClassName());
      assertNotNull(pUSH0);
      
      InstructionList instructionList1 = new InstructionList(pUSH0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LZHRZ,`in;", objectType0.getSignature());
      assertEquals("ZHRZ,`in", objectType0.getClassName());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      I2B i2B0 = new I2B();
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertNotNull(i2B0);
      
      Instruction instruction0 = i2B0.copy();
      assertSame(i2B0, instruction0);
      assertSame(instruction0, i2B0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", instruction0.getName());
      assertEquals(1, instruction0.getLength());
      assertEquals((short)145, instruction0.getOpcode());
      assertNotNull(instruction0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      InstructionList instructionList0 = new InstructionList(i2B0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionComparator instructionComparator0 = Instruction.getComparator();
      assertNotNull(instructionComparator0);
      
      Instruction.setComparator(instructionComparator0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) i2B0);
      assertSame(i2B0, instruction0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      instructionList0.setPositions(boolean0);
      assertSame(i2B0, instruction0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(2, instructionHandleArray0.length);
      assertSame(i2B0, instruction0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertNotNull(instructionHandleArray0);
      
      InstructionHandle instructionHandle1 = instructionList0.findHandle(instructionHandle0.i_position);
      assertSame(i2B0, instruction0);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, instructionHandle0.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(1, instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      
      instructionList0.redirectBranches(instructionHandle0, instructionHandle0);
      assertSame(i2B0, instruction0);
      assertSame(instructionHandle0, instructionHandle1);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, instructionHandle0.getPosition());
      
      boolean boolean1 = instructionList0.contains(instructionHandle0);
      assertFalse(boolean1 == boolean0);
      assertSame(i2B0, instruction0);
      assertSame(instructionHandle0, instructionHandle1);
      assertEquals(1, i2B0.getLength());
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, instructionHandle0.getPosition());
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid range: From    1: i2b[145](1) to    1: i2b[145](1) contains target    1: i2b[145](1)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      IFNE iFNE0 = new IFNE();
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short) (-1), iFNE0.getOpcode());
      assertEquals(1, iFNE0.getLength());
      assertNotNull(iFNE0);
      
      IfInstruction ifInstruction0 = iFNE0.negate();
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short) (-1), iFNE0.getOpcode());
      assertEquals(1, iFNE0.getLength());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)153, ifInstruction0.getOpcode());
      assertEquals("ifeq", ifInstruction0.getName());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(ifInstruction0);
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short) (-1), iFNE0.getOpcode());
      assertEquals(1, iFNE0.getLength());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)153, ifInstruction0.getOpcode());
      assertEquals("ifeq", ifInstruction0.getName());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) branchHandle0, (Instruction) iFNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      IOR iOR0 = new IOR();
      assertEquals(1, iOR0.getLength());
      assertEquals("ior", iOR0.getName());
      assertEquals((short)128, iOR0.getOpcode());
      assertNotNull(iOR0);
      
      CompoundInstruction compoundInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iOR0, compoundInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      ASTORE aSTORE0 = new ASTORE(int0);
      assertEquals("astore_0", aSTORE0.getName());
      assertEquals(1, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)75, aSTORE0.getOpcode());
      assertEquals(0, aSTORE0.getIndex());
      assertNotNull(aSTORE0);
      
      InstructionList instructionList0 = new InstructionList(aSTORE0);
      assertEquals("astore_0", aSTORE0.getName());
      assertEquals(1, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)75, aSTORE0.getOpcode());
      assertEquals(0, aSTORE0.getIndex());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      instructionList0.delete((Instruction) aSTORE0);
      assertEquals("astore_0", aSTORE0.getName());
      assertEquals(1, aSTORE0.getLength());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)75, aSTORE0.getOpcode());
      assertEquals(0, aSTORE0.getIndex());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) aSTORE0, (Instruction) aSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction astore_0[75](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      float float0 = (-2526.723F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      instructionList0.update();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList1.insert(instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNull(instructionHandle0);
      
      InstructionList instructionList2 = instructionList0.copy();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionList2, instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertTrue(instructionList2.isEmpty());
      assertEquals(0, instructionList2.getLength());
      assertEquals(0, instructionList2.size());
      assertNotNull(instructionList2);
      
      constantPoolGen0.adjustSize();
      assertEquals(2, constantPoolGen0.getSize());
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList1.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertNotNull(instructionHandle2);
      
      InstructionListObserver instructionListObserver0 = null;
      instructionList1.removeObserver(instructionListObserver0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(iterator0);
      
      InstructionHandle instructionHandle3 = instructionList2.append(instructionHandle0, instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionList2, instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertTrue(instructionList2.isEmpty());
      assertEquals(0, instructionList2.getLength());
      assertEquals(0, instructionList2.size());
      assertNull(instructionHandle3);
      
      Iterator<InstructionHandle> iterator1 = instructionList0.iterator();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(iterator1, iterator0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(iterator1);
      
      DUP dUP0 = (DUP)InstructionConstants.DUP;
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertNotNull(dUP0);
      
      // Undeclared exception!
      try { 
        instructionList2.append(instructionHandle1, (Instruction) dUP0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertNotNull(iFNONNULL0);
      
      IfInstruction ifInstruction0 = iFNONNULL0.negate();
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals("ifnull", ifInstruction0.getName());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(ifInstruction0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals("ifnull", ifInstruction0.getName());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      Spliterator<InstructionHandle> spliterator0 = instructionList0.spliterator();
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals("ifnull", ifInstruction0.getName());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(spliterator0);
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals("ifnull", ifInstruction0.getName());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) ifInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction ifnull[198](3) -> null to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = 1L;
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC();
      assertEquals(0, iNVOKESTATIC0.getIndex());
      assertEquals(1, iNVOKESTATIC0.getLength());
      assertEquals((short) (-1), iNVOKESTATIC0.getOpcode());
      assertNotNull(iNVOKESTATIC0);
      
      IFGT iFGT0 = new IFGT();
      assertEquals(1, iFGT0.getLength());
      assertEquals((short) (-1), iFGT0.getOpcode());
      assertEquals(0, iFGT0.getIndex());
      assertNotNull(iFGT0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iFGT0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, iFGT0.getLength());
      assertEquals((short) (-1), iFGT0.getOpcode());
      assertEquals(0, iFGT0.getIndex());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iNVOKESTATIC0, instructionList1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IFGE iFGE0 = new IFGE();
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertNotNull(iFGE0);
      
      IfInstruction ifInstruction0 = iFGE0.negate();
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals("iflt", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)155, ifInstruction0.getOpcode());
      assertNotNull(ifInstruction0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals("iflt", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)155, ifInstruction0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals("iflt", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)155, ifInstruction0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList1.insert((Instruction) ifInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction iflt[155](3) -> null to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertNotNull(iF_ICMPLE0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPLE0);
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ICMPLE0);
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      instructionList0.delete((Instruction) iF_ICMPLE0, (Instruction) iF_ICMPLE0);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      InstructionList instructionList1 = null;
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      float float0 = (-2526.723F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      instructionList0.update();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList1.insert(instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionList instructionList2 = instructionList0.copy();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionList2, instructionList0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList2.size());
      assertEquals(0, instructionList2.getLength());
      assertTrue(instructionList2.isEmpty());
      assertNotNull(instructionList2);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList1.addObserver(instructionListObserver0);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      
      constantPoolGen0.adjustSize();
      assertEquals(2, constantPoolGen0.getSize());
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle1, instructionHandle0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList1.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertNotNull(instructionHandle2);
      
      InstructionListObserver instructionListObserver1 = null;
      instructionList1.removeObserver(instructionListObserver1);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        instructionList2.delete(instructionHandle2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      I2B i2B0 = new I2B();
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertNotNull(i2B0);
      
      Instruction instruction0 = i2B0.copy();
      assertSame(i2B0, instruction0);
      assertSame(instruction0, i2B0);
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals((short)145, instruction0.getOpcode());
      assertEquals("i2b", instruction0.getName());
      assertEquals(1, instruction0.getLength());
      assertNotNull(instruction0);
      
      InstructionList instructionList0 = new InstructionList(i2B0);
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) i2B0);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      instructionList0.delete(instructionHandle0);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      byte[] byteArray0 = instructionList0.getByteCode();
      assertEquals(1, byteArray0.length);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertArrayEquals(new byte[] {(byte) (-111)}, byteArray0);
      assertNotNull(byteArray0);
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(1, instructionHandleArray0.length);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionHandleArray0);
      
      instructionList0.redirectBranches(instructionHandle0, instructionHandle0);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-1621);
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[7];
      ISTORE iSTORE0 = new ISTORE();
      assertEquals(1, iSTORE0.getLength());
      assertEquals((short) (-1), iSTORE0.getOpcode());
      assertEquals((-1), iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertNotNull(iSTORE0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iSTORE0);
      assertEquals(1, iSTORE0.getLength());
      assertEquals((short) (-1), iSTORE0.getOpcode());
      assertEquals((-1), iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      IFNULL iFNULL0 = new IFNULL(instructionHandle0);
      assertEquals(1, iSTORE0.getLength());
      assertEquals((short) (-1), iSTORE0.getOpcode());
      assertEquals((-1), iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("ifnull", iFNULL0.getName());
      assertEquals(3, iFNULL0.getLength());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertNotNull(iFNULL0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNULL0);
      assertEquals(1, iSTORE0.getLength());
      assertEquals((short) (-1), iSTORE0.getOpcode());
      assertEquals((-1), iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("ifnull", iFNULL0.getName());
      assertEquals(3, iFNULL0.getLength());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle1 = instructionList0.getEnd();
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertEquals(1, iSTORE0.getLength());
      assertEquals((short) (-1), iSTORE0.getOpcode());
      assertEquals((-1), iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("ifnull", iFNULL0.getName());
      assertEquals(3, iFNULL0.getLength());
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionHandle1);
      
      instructionHandleArray0[0] = instructionHandle1;
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandleArray0[0], (Instruction) iFNULL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction ifnull[198](3) -> -1 to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DUP_X2 dUP_X2_0 = new DUP_X2();
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertNotNull(dUP_X2_0);
      
      InstructionList instructionList0 = new InstructionList(dUP_X2_0);
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int0 = dUP_X2_0.produceStack(constantPoolGen0);
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(4, int0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(1, instructionArray0.length);
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionArray0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList0);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(instructionList0);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[5];
      InstructionList instructionList1 = null;
      // Undeclared exception!
      try { 
        instructionList0.append(instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertNotNull(iF_ACMPNE0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ACMPNE0);
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertSame(branchHandle0, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle0, branchHandle0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = branchHandle0.setNext(instructionHandle0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertSame(branchHandle0, instructionHandle0);
      assertSame(branchHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle0, branchHandle0);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, branchHandle0);
      assertSame(instructionHandle1, instructionHandle0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iF_ACMPNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals("impdep2", iMPDEP2_0.getName());
      assertEquals(1, iMPDEP2_0.getLength());
      assertNotNull(iMPDEP2_0);
      
      InstructionList instructionList0 = new InstructionList(iMPDEP2_0);
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals("impdep2", iMPDEP2_0.getName());
      assertEquals(1, iMPDEP2_0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iMPDEP2_0);
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals("impdep2", iMPDEP2_0.getName());
      assertEquals(1, iMPDEP2_0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals("impdep2", iMPDEP2_0.getName());
      assertEquals(1, iMPDEP2_0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertNotNull(iF_ICMPGE0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals("impdep2", iMPDEP2_0.getName());
      assertEquals(1, iMPDEP2_0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      int int0 = instructionList1.size();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals("impdep2", iMPDEP2_0.getName());
      assertEquals(1, iMPDEP2_0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      int int0 = 0;
      short short0 = (short)1136;
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(int0, short0);
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)1136, mULTIANEWARRAY0.getDimensions());
      assertNotNull(mULTIANEWARRAY0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(mULTIANEWARRAY0);
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)1136, mULTIANEWARRAY0.getDimensions());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      Constant[] constantArray0 = new Constant[3];
      int int1 = 0;
      int int2 = (-353);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(int1, int2);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertNotNull(constantInterfaceMethodref0);
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      String string0 = "";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(string0);
      assertEquals("", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[1] = (Constant) constantUtf8_0;
      int int3 = (-397);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-397), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(3, constantArray0.length);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      String string1 = "':OTN$AFqG";
      ObjectType objectType0 = ObjectType.getInstance(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("L':OTN$AFqG;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("':OTN$AFqG", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      assertEquals(3, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals("L':OTN$AFqG;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("':OTN$AFqG", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (CompoundInstruction) pUSH0);
      assertEquals(3, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(string1, string0);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals("L':OTN$AFqG;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("':OTN$AFqG", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)1136, mULTIANEWARRAY0.getDimensions());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionHandle0.setPrev(instructionHandle1);
      assertEquals(3, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertNotSame(string1, string0);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertSame(instructionHandle1, instructionHandle2);
      assertNotSame(instructionHandle0, instructionHandle2);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals("L':OTN$AFqG;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("':OTN$AFqG", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)1136, mULTIANEWARRAY0.getDimensions());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
      
      Class<Object> class0 = Object.class;
      ObjectType objectType1 = (ObjectType)Type.getType(class0);
      assertFalse(objectType1.equals((Object)objectType0));
      assertNotSame(objectType1, objectType0);
      assertEquals((byte)14, objectType1.getType());
      assertEquals(1, objectType1.getSize());
      assertEquals("Ljava/lang/Object;", objectType1.getSignature());
      assertEquals("java.lang.Object", objectType1.getClassName());
      assertNotNull(objectType1);
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE(instructionHandle1);
      assertEquals(3, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle0.equals((Object)instructionHandle2));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals("L':OTN$AFqG;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("':OTN$AFqG", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)1136, mULTIANEWARRAY0.getDimensions());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertNotNull(iF_ACMPNE0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iF_ACMPNE0);
      assertEquals(3, constantArray0.length);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(instructionHandle0.equals((Object)instructionHandle2));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals("L':OTN$AFqG;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("':OTN$AFqG", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)1136, mULTIANEWARRAY0.getDimensions());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      boolean boolean0 = instructionList1.contains((Instruction) iF_ACMPNE0);
      assertEquals(3, constantArray0.length);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(instructionHandle0.equals((Object)instructionHandle2));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(string1, string0);
      assertNotSame(objectType0, objectType1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertSame(instructionHandle1, instructionHandle2);
      assertNotSame(instructionHandle0, instructionHandle2);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals("L':OTN$AFqG;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("':OTN$AFqG", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)1136, mULTIANEWARRAY0.getDimensions());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertTrue(boolean0);
      
      String string2 = pUSH0.toString();
      assertEquals(3, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(objectType0, objectType1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals("L':OTN$AFqG;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("':OTN$AFqG", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("ldc[18](2) 4 (PUSH)", string2);
      assertNotNull(string2);
      
      InstructionHandle instructionHandle3 = instructionList0.append((Instruction) mULTIANEWARRAY0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle2));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionHandle3, instructionHandle2);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)1136, mULTIANEWARRAY0.getDimensions());
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertNotNull(instructionHandle3);
      
      // Undeclared exception!
      try { 
        instructionList1.delete(instructionHandle0, instructionHandle1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      LDC_W lDC_W0 = new LDC_W(int0);
      assertEquals(0, lDC_W0.getIndex());
      assertEquals("ldc", lDC_W0.getName());
      assertEquals((short)18, lDC_W0.getOpcode());
      assertEquals(2, lDC_W0.getLength());
      assertNotNull(lDC_W0);
      
      InstructionList instructionList0 = new InstructionList(lDC_W0);
      assertEquals(0, lDC_W0.getIndex());
      assertEquals("ldc", lDC_W0.getName());
      assertEquals((short)18, lDC_W0.getOpcode());
      assertEquals(2, lDC_W0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      boolean boolean0 = instructionList0.contains((Instruction) lDC_W0);
      assertEquals(0, lDC_W0.getIndex());
      assertEquals("ldc", lDC_W0.getName());
      assertEquals((short)18, lDC_W0.getOpcode());
      assertEquals(2, lDC_W0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertTrue(boolean0);
      
      InstructionHandle[] instructionHandleArray0 = null;
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      // Undeclared exception!
      try { 
        InstructionList.findHandle(instructionHandleArray0, intArray0, intArray0[2], intArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = null;
      float float0 = 0.0F;
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      String string0 = pUSH0.toString();
      assertEquals("fconst_0[11](1) (PUSH)", string0);
      assertNotNull(string0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals("ifnonnull", iFNONNULL0.getName());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertNotNull(iFNONNULL0);
      
      String string1 = instructionList1.toString();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(string1, string0);
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals("  -1: fconst_0[11](1)\n", string1);
      assertNotNull(string1);
      
      IfInstruction ifInstruction0 = iFNONNULL0.negate();
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals("ifnonnull", iFNONNULL0.getName());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals("ifnull", ifInstruction0.getName());
      assertNotNull(ifInstruction0);
      
      InstructionList instructionList2 = new InstructionList((BranchInstruction) ifInstruction0);
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals("ifnonnull", iFNONNULL0.getName());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals("ifnull", ifInstruction0.getName());
      assertEquals(1, instructionList2.getLength());
      assertEquals(1, instructionList2.size());
      assertFalse(instructionList2.isEmpty());
      assertNotNull(instructionList2);
      
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, instructionList2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(instructionList0);
      
      DLOAD dLOAD0 = new DLOAD();
      assertEquals((-1), dLOAD0.getIndex());
      assertEquals((short) (-1), dLOAD0.getOpcode());
      assertEquals(1, dLOAD0.getLength());
      assertEquals((short)24, dLOAD0.getCanonicalTag());
      assertNotNull(dLOAD0);
      
      InstructionList instructionList1 = new InstructionList(dLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((-1), dLOAD0.getIndex());
      assertEquals((short) (-1), dLOAD0.getOpcode());
      assertEquals(1, dLOAD0.getLength());
      assertEquals((short)24, dLOAD0.getCanonicalTag());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) dLOAD0, instructionList1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DUP_X2 dUP_X2_0 = new DUP_X2();
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertNotNull(dUP_X2_0);
      
      InstructionList instructionList0 = new InstructionList(dUP_X2_0);
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = new InstructionList(dUP_X2_0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList1.getEnd();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      IASTORE iASTORE0 = new IASTORE();
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertNotNull(iASTORE0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iASTORE0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertNotNull(gOTO_W0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) gOTO_W0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      BranchHandle branchHandle0 = instructionList1.insert(instructionHandle0, (BranchInstruction) gOTO_W0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("goto_w", gOTO_W0.getName());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals(5, gOTO_W0.getLength());
      assertEquals((short)200, gOTO_W0.getOpcode());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      // Undeclared exception!
      try { 
        instructionList1.move((InstructionHandle) branchHandle0, instructionHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid range: From   -1: goto_w[200](5) -> -1 to   -1: iastore[79](1) contains target   -1: iastore[79](1)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LSUB lSUB0 = new LSUB();
      assertEquals(1, lSUB0.getLength());
      assertEquals("lsub", lSUB0.getName());
      assertEquals((short)101, lSUB0.getOpcode());
      assertNotNull(lSUB0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(lSUB0);
      assertEquals(1, lSUB0.getLength());
      assertEquals("lsub", lSUB0.getName());
      assertEquals((short)101, lSUB0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ(instructionHandle0);
      assertEquals(1, lSUB0.getLength());
      assertEquals("lsub", lSUB0.getName());
      assertEquals((short)101, lSUB0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpeq", iF_ICMPEQ0.getName());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertNotNull(iF_ICMPEQ0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPEQ0);
      assertEquals(1, lSUB0.getLength());
      assertEquals("lsub", lSUB0.getName());
      assertEquals((short)101, lSUB0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpeq", iF_ICMPEQ0.getName());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      int int0 = instructionList0.getLength();
      assertEquals(1, lSUB0.getLength());
      assertEquals("lsub", lSUB0.getName());
      assertEquals((short)101, lSUB0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpeq", iF_ICMPEQ0.getName());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      int[] intArray0 = new int[0];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNull(instructionHandle0);
      
      instructionHandleArray0[0] = instructionHandle0;
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertNotNull(iF_ICMPLT0);
      
      IfInstruction ifInstruction0 = iF_ICMPLT0.negate();
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)162, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmpge", ifInstruction0.getName());
      assertNotNull(ifInstruction0);
      
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, (Instruction) ifInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction if_icmpge[162](3) -> null to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      I2C i2C0 = new I2C();
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertNotNull(i2C0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) i2C0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      String string0 = instructionList0.toString();
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals("  -1: i2c[146](1)\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = null;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = (-1184L);
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertNotNull(iF_ICMPGE0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ICMPGE0);
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((InstructionHandle) branchHandle0, (CompoundInstruction) pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      instructionHandleArray0[0] = instructionHandle0;
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      
      instructionHandleArray0[1] = instructionHandle1;
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionHandle0, (CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle2);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(4, instructionList0.getLength());
      assertEquals(4, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
      
      instructionHandleArray0[2] = instructionHandle2;
      BranchHandle branchHandle1 = BranchHandle.getBranchHandle(iF_ICMPGE0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertNotNull(branchHandle1);
      
      instructionHandleArray0[3] = (InstructionHandle) branchHandle1;
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iF_ICMPGE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertNotNull(iF_ICMPLE0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPLE0);
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = null;
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Inserting null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      Instruction instruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.append(instruction0, instruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      char char0 = '~';
      Character character0 = new Character(char0);
      assertTrue(character0.equals((Object)char0));
      assertEquals('~', (char)character0);
      assertNotNull(character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertTrue(character0.equals((Object)char0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertTrue(character0.equals((Object)char0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      BranchInstruction branchInstruction0 = null;
      IFLT iFLT0 = new IFLT();
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertEquals(1, iFLT0.getLength());
      assertNotNull(iFLT0);
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFLT0);
      assertTrue(character0.equals((Object)char0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertEquals(1, iFLT0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      InstructionHandle instructionHandle1 = instructionHandle0.setNext(branchHandle0);
      assertTrue(character0.equals((Object)char0));
      assertSame(branchHandle0, instructionHandle1);
      assertSame(instructionHandle1, branchHandle0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertEquals(1, iFLT0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, branchInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte byte0 = (byte)119;
      byteArray0[0] = byte0;
      byte byte1 = (byte)5;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)118;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)24;
      byteArray0[5] = byte5;
      byte byte6 = (byte)82;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-83);
      byteArray0[7] = byte7;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(15, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(15, instructionList0.size());
      assertNotNull(instructionList0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals("ixor", iXOR0.getName());
      assertEquals(1, iXOR0.getLength());
      assertNotNull(iXOR0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertNotNull(iF_ICMPGE0);
      
      IfInstruction ifInstruction0 = iF_ICMPGE0.negate();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(16, instructionList0.size());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      instructionList0.redirectBranches(branchHandle0, branchHandle0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(16, instructionList0.size());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      short short0 = (short)0;
      iXOR0.opcode = short0;
      assertEquals(1, iXOR0.getLength());
      assertEquals("nop", iXOR0.getName());
      assertEquals((short)0, iXOR0.getOpcode());
      
      boolean boolean1 = instructionList0.contains((Instruction) iXOR0);
      assertEquals(16, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(16, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(16, instructionList0.size());
      assertEquals(1, iXOR0.getLength());
      assertEquals("nop", iXOR0.getName());
      assertEquals((short)0, iXOR0.getOpcode());
      assertFalse(boolean1);
      
      LXOR lXOR0 = new LXOR();
      assertEquals("lxor", lXOR0.getName());
      assertEquals(1, lXOR0.getLength());
      assertEquals((short)131, lXOR0.getOpcode());
      assertNotNull(lXOR0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) ifInstruction0, (Instruction) lXOR0);
      assertEquals(16, byteArray0.length);
      assertEquals(17, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(17, instructionList0.size());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("lxor", lXOR0.getName());
      assertEquals(1, lXOR0.getLength());
      assertEquals((short)131, lXOR0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.getEnd();
      assertEquals(16, byteArray0.length);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals(17, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(17, instructionList0.size());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(15, instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = null;
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle2, instructionHandle2, instructionHandle2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From null to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      int[] intArray0 = new int[2];
      int int0 = (-2203);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 1;
      int int3 = (-2152);
      InstructionHandle instructionHandle0 = InstructionList.findHandle(instructionHandleArray0, intArray0, int2, int3);
      assertEquals(2, instructionHandleArray0.length);
      assertEquals(2, intArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertArrayEquals(new int[] {(-2203), 0}, intArray0);
      assertNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = null;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(instructionList0);
      
      PUTFIELD pUTFIELD0 = new PUTFIELD();
      assertEquals(1, pUTFIELD0.getLength());
      assertEquals((short) (-1), pUTFIELD0.getOpcode());
      assertEquals(0, pUTFIELD0.getIndex());
      assertNotNull(pUTFIELD0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(0, constantArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int0 = 0;
      PUSH pUSH0 = new PUSH(constantPoolGen0, int0);
      assertEquals(0, constantArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertEquals(0, constantArray0.length);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) pUTFIELD0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertNotNull(iF_ICMPNE0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ICMPNE0);
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      BranchHandle branchHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPNE0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertNotNull(branchHandle1);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList0.move((InstructionHandle) branchHandle1, (InstructionHandle) branchHandle0, (InstructionHandle) branchHandle1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      I2L i2L0 = (I2L)InstructionConstants.I2L;
      assertEquals(1, i2L0.getLength());
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals("i2l", i2L0.getName());
      assertNotNull(i2L0);
      
      InstructionList instructionList0 = new InstructionList(i2L0);
      assertEquals(1, i2L0.getLength());
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals("i2l", i2L0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2L0, (Instruction) i2L0);
      assertEquals(1, i2L0.getLength());
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals("i2l", i2L0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = 10L;
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.append((Instruction) i2L0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals(1, i2L0.getLength());
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals("i2l", i2L0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      double double0 = 0.0;
      float float0 = 2.0F;
      int int0 = constantPoolGen0.addFloat(float0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, double0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      String string0 = pUSH0.toString();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals("dconst_0[14](1) (PUSH)", string0);
      assertNotNull(string0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionList instructionList2 = instructionList1.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList2.size());
      assertFalse(instructionList2.isEmpty());
      assertEquals(1, instructionList2.getLength());
      assertNotNull(instructionList2);
      
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY();
      assertEquals(1, aNEWARRAY0.getLength());
      assertEquals((short) (-1), aNEWARRAY0.getOpcode());
      assertEquals(0, aNEWARRAY0.getIndex());
      assertNotNull(aNEWARRAY0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-15);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-102);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)85;
      byteArray0[6] = byte6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-15), (byte) (-102), (byte)0, (byte)0, (byte)85}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean0 = true;
      aNEWARRAY0.initFromFile(byteSequence0, boolean0);
      assertEquals(7, byteArray0.length);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short) (-1), aNEWARRAY0.getOpcode());
      assertEquals(0, aNEWARRAY0.getIndex());
      assertEquals(3, aNEWARRAY0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-15), (byte) (-102), (byte)0, (byte)0, (byte)85}, byteArray0);
      
      DMUL dMUL0 = (DMUL)InstructionConstants.DMUL;
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals("dmul", dMUL0.getName());
      assertEquals(1, dMUL0.getLength());
      assertNotNull(dMUL0);
      
      // Undeclared exception!
      try { 
        instructionList1.insert((Instruction) aNEWARRAY0, (Instruction) dMUL0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CompoundInstruction compoundInstruction0 = null;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(compoundInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      ASTORE aSTORE0 = (ASTORE)InstructionConstants.ASTORE_2;
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)77, aSTORE0.getOpcode());
      assertEquals(2, aSTORE0.getIndex());
      assertEquals(1, aSTORE0.getLength());
      assertEquals("astore_2", aSTORE0.getName());
      assertNotNull(aSTORE0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(aSTORE0);
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)77, aSTORE0.getOpcode());
      assertEquals(2, aSTORE0.getIndex());
      assertEquals(1, aSTORE0.getLength());
      assertEquals("astore_2", aSTORE0.getName());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      double double0 = (-1.0);
      String string0 = "Instruction ";
      boolean boolean2 = Boolean.getBoolean(string0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      PUSH pUSH1 = new PUSH(constantPoolGen0, double0);
      assertFalse(pUSH1.equals((Object)pUSH0));
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH1);
      
      InstructionList instructionList1 = pUSH1.getInstructionList();
      assertFalse(pUSH1.equals((Object)pUSH0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(pUSH1, pUSH0);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionList instructionList2 = new InstructionList(pUSH1);
      assertFalse(pUSH1.equals((Object)pUSH0));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList2.size());
      assertEquals(1, instructionList2.getLength());
      assertFalse(instructionList2.isEmpty());
      assertNotNull(instructionList2);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, instructionList2);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(pUSH0.equals((Object)pUSH1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(pUSH1.equals((Object)pUSH0));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(pUSH0, pUSH1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(pUSH1, pUSH0);
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals((short)77, aSTORE0.getOpcode());
      assertEquals(2, aSTORE0.getIndex());
      assertEquals(1, aSTORE0.getLength());
      assertEquals("astore_2", aSTORE0.getName());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, instructionList2.size());
      assertTrue(instructionList2.isEmpty());
      assertEquals(0, instructionList2.getLength());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      
      boolean boolean3 = instructionList0.isEmpty();
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(pUSH0.equals((Object)pUSH1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertNotSame(pUSH0, pUSH1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 595;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-399);
      intArray0[2] = int2;
      int int3 = (-3890);
      intArray0[3] = int3;
      int int4 = (-2074);
      intArray0[4] = int4;
      int int5 = (-409);
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[7];
      FCMPG fCMPG0 = (FCMPG)InstructionConstants.FCMPG;
      assertEquals(1, fCMPG0.getLength());
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertNotNull(fCMPG0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(fCMPG0);
      assertEquals(1, fCMPG0.getLength());
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0, int2);
      assertEquals(7, intArray0.length);
      assertEquals(7, instructionHandleArray0.length);
      assertFalse(int2 == int5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int6);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertEquals(1, fCMPG0.getLength());
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertArrayEquals(new int[] {595, 0, (-399), (-3890), (-2074), (-409), 0}, intArray0);
      assertNotNull(sWITCH0);
      
      InstructionList instructionList0 = sWITCH0.getInstructionList();
      assertEquals(7, intArray0.length);
      assertEquals(7, instructionHandleArray0.length);
      assertFalse(int2 == int5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int6);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertEquals(1, fCMPG0.getLength());
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertArrayEquals(new int[] {595, 0, (-399), (-3890), (-2074), (-409), 0}, intArray0);
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertEquals(7, intArray0.length);
      assertEquals(7, instructionHandleArray0.length);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(int2 == int5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int6);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, fCMPG0.getLength());
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertArrayEquals(new int[] {595, 0, (-399), (-3890), (-2074), (-409), 0}, intArray0);
      assertNotNull(instructionList1);
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertNotNull(iF_ICMPGT0);
      
      BranchHandle branchHandle0 = instructionList1.append(instructionHandle0, (BranchInstruction) iF_ICMPGT0);
      assertEquals(7, intArray0.length);
      assertEquals(7, instructionHandleArray0.length);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(int2 == int5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int6);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, fCMPG0.getLength());
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertArrayEquals(new int[] {595, 0, (-399), (-3890), (-2074), (-409), 0}, intArray0);
      assertNotNull(branchHandle0);
      
      instructionHandleArray0[0] = (InstructionHandle) branchHandle0;
      BranchHandle branchHandle1 = instructionList1.append((BranchInstruction) iF_ICMPGT0);
      assertEquals(7, intArray0.length);
      assertEquals(7, instructionHandleArray0.length);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(int2 == int5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int6);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(1, fCMPG0.getLength());
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(3, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, instructionList1.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertArrayEquals(new int[] {595, 0, (-399), (-3890), (-2074), (-409), 0}, intArray0);
      assertNotNull(branchHandle1);
      
      instructionHandleArray0[1] = (InstructionHandle) branchHandle1;
      InstructionHandle instructionHandle1 = instructionList1.insert(instructionList0);
      assertEquals(7, intArray0.length);
      assertEquals(7, instructionHandleArray0.length);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(int2 == int5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int6);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(instructionHandle1.equals((Object)branchHandle1));
      assertFalse(instructionHandle1.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, branchHandle1);
      assertNotSame(instructionHandle1, branchHandle0);
      assertEquals(1, fCMPG0.getLength());
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(4, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(4, instructionList1.getLength());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertArrayEquals(new int[] {595, 0, (-399), (-3890), (-2074), (-409), 0}, intArray0);
      assertNotNull(instructionHandle1);
      
      instructionHandleArray0[2] = instructionHandle1;
      InstructionHandle instructionHandle2 = instructionList0.getStart();
      assertEquals(7, intArray0.length);
      assertEquals(7, instructionHandleArray0.length);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(int2 == int5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int6);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertNotSame(instructionList0, instructionList1);
      assertEquals(1, fCMPG0.getLength());
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertArrayEquals(new int[] {595, 0, (-399), (-3890), (-2074), (-409), 0}, intArray0);
      assertNull(instructionHandle2);
      
      instructionHandleArray0[3] = instructionHandle2;
      InstructionList instructionList2 = sWITCH0.getInstructionList();
      assertEquals(7, intArray0.length);
      assertEquals(7, instructionHandleArray0.length);
      assertFalse(int2 == int5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int6);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertEquals(1, fCMPG0.getLength());
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(1, instructionList2.size());
      assertFalse(instructionList2.isEmpty());
      assertEquals(1, instructionList2.getLength());
      assertArrayEquals(new int[] {595, 0, (-399), (-3890), (-2074), (-409), 0}, intArray0);
      assertNotNull(instructionList2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      instructionList0.dispose();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      short short0 = Constants.FADD;
      assertEquals((short)98, short0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) short0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      boolean boolean0 = false;
      instructionList1.setPositions(boolean0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, constantPoolGen0.getSize());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(1, instructionHandleArray0.length);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionHandleArray0);
      
      int[] intArray0 = new int[2];
      int int0 = 1644;
      NOP nOP0 = (NOP)InstructionConstants.NOP;
      assertEquals(1, nOP0.getLength());
      assertEquals("nop", nOP0.getName());
      assertEquals((short)0, nOP0.getOpcode());
      assertNotNull(nOP0);
      
      InstructionList instructionList2 = new InstructionList(pUSH0);
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList2.size());
      assertFalse(instructionList2.isEmpty());
      assertEquals(1, instructionList2.getLength());
      assertNotNull(instructionList2);
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) nOP0, instructionList2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction nop[0](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GOTO_W gOTO_W0 = new GOTO_W();
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals(1, gOTO_W0.getLength());
      assertEquals((short) (-1), gOTO_W0.getOpcode());
      assertNotNull(gOTO_W0);
      
      IDIV iDIV0 = new IDIV();
      assertEquals(1, iDIV0.getLength());
      assertEquals("idiv", iDIV0.getName());
      assertEquals((short)108, iDIV0.getOpcode());
      assertNotNull(iDIV0);
      
      boolean boolean0 = gOTO_W0.equals(iDIV0);
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals(1, gOTO_W0.getLength());
      assertEquals((short) (-1), gOTO_W0.getOpcode());
      assertEquals(1, iDIV0.getLength());
      assertEquals("idiv", iDIV0.getName());
      assertEquals((short)108, iDIV0.getOpcode());
      assertFalse(boolean0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO_W0);
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals(1, gOTO_W0.getLength());
      assertEquals((short) (-1), gOTO_W0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      int int0 = 782;
      // Undeclared exception!
      try { 
        instructionList0.findHandle(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      IFNULL iFNULL0 = new IFNULL();
      assertEquals(1, iFNULL0.getLength());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertNotNull(iFNULL0);
      
      IfInstruction ifInstruction0 = iFNULL0.negate();
      assertEquals(1, iFNULL0.getLength());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals((short)199, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("ifnonnull", ifInstruction0.getName());
      assertNotNull(ifInstruction0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) ifInstruction0, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ifnonnull[199](3) -> null is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      I2L i2L0 = (I2L)InstructionConstants.I2L;
      assertEquals("i2l", i2L0.getName());
      assertEquals(1, i2L0.getLength());
      assertEquals((short)133, i2L0.getOpcode());
      assertNotNull(i2L0);
      
      InstructionList instructionList0 = new InstructionList(i2L0);
      assertEquals("i2l", i2L0.getName());
      assertEquals(1, i2L0.getLength());
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2L0, (Instruction) i2L0);
      assertEquals("i2l", i2L0.getName());
      assertEquals(1, i2L0.getLength());
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      int[] intArray0 = instructionList0.getInstructionPositions();
      assertEquals("i2l", i2L0.getName());
      assertEquals(1, i2L0.getLength());
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 2532;
      intArray0[1] = int1;
      int int2 = 3019;
      intArray0[2] = int2;
      int int3 = 2183;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[5];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      String string0 = "faload";
      PUSH pUSH0 = new PUSH(constantPoolGen0, string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionHandle0);
      
      GOTO_W gOTO_W0 = new GOTO_W();
      assertEquals(1, gOTO_W0.getLength());
      assertEquals((short) (-1), gOTO_W0.getOpcode());
      assertEquals(0, gOTO_W0.getIndex());
      assertNotNull(gOTO_W0);
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) gOTO_W0);
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, gOTO_W0.getLength());
      assertEquals((short) (-1), gOTO_W0.getOpcode());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(branchHandle0);
      
      instructionHandleArray0[0] = (InstructionHandle) branchHandle0;
      FADD fADD0 = new FADD();
      assertEquals("fadd", fADD0.getName());
      assertEquals(1, fADD0.getLength());
      assertEquals((short)98, fADD0.getOpcode());
      assertNotNull(fADD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((Instruction) fADD0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals("fadd", fADD0.getName());
      assertEquals(1, fADD0.getLength());
      assertEquals((short)98, fADD0.getOpcode());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionHandle1);
      
      instructionHandleArray0[1] = instructionHandle1;
      InstructionHandle instructionHandle2 = instructionList0.insert((Instruction) gOTO_W0, (CompoundInstruction) pUSH0);
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertNotSame(instructionHandle2, instructionHandle0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertEquals(1, gOTO_W0.getLength());
      assertEquals((short) (-1), gOTO_W0.getOpcode());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(4, instructionList0.getLength());
      assertEquals(4, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionHandle2);
      
      instructionHandleArray0[2] = instructionHandle2;
      int int5 = 0;
      InstructionHandle instructionHandle3 = InstructionList.findHandle(instructionHandleArray0, intArray0, int5, int0);
      assertEquals(5, intArray0.length);
      assertEquals(5, instructionHandleArray0.length);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertSame(instructionHandle3, branchHandle0);
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(0, instructionHandle3.getPosition());
      assertArrayEquals(new int[] {0, 2532, 3019, 2183, 0}, intArray0);
      assertNotNull(instructionHandle3);
      
      instructionHandleArray0[3] = instructionHandle3;
      InstructionList instructionList1 = null;
      try {
        instructionList1 = new InstructionList((Instruction) gOTO_W0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      ICONST iCONST0 = (ICONST)InstructionConstants.ICONST_1;
      assertEquals((short)4, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals("iconst_1", iCONST0.getName());
      assertNotNull(iCONST0);
      
      InstructionList instructionList0 = new InstructionList(iCONST0);
      assertEquals((short)4, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals("iconst_1", iCONST0.getName());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals((short)4, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals("iconst_1", iCONST0.getName());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      instructionHandleArray0[0] = instructionHandle0;
      InstructionHandle instructionHandle1 = instructionList0.append((Instruction) iCONST0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals((short)4, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals("iconst_1", iCONST0.getName());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      
      instructionHandleArray0[1] = instructionHandle1;
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 98;
      intArray0[1] = int1;
      int int2 = (-1466);
      intArray0[2] = int2;
      int int3 = 0;
      InstructionHandle instructionHandle2 = InstructionList.findHandle(instructionHandleArray0, intArray0, int3, intArray0[0]);
      assertEquals(2, instructionHandleArray0.length);
      assertEquals(3, intArray0.length);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertSame(instructionHandle2, instructionHandle0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertArrayEquals(new int[] {0, 98, (-1466)}, intArray0);
      assertNotNull(instructionHandle2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNull(instructionHandle0);
      
      instructionList0.redirectBranches(instructionHandle0, instructionHandle0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      boolean boolean0 = instructionList0.isEmpty();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertTrue(boolean0);
      
      Spliterator<InstructionHandle> spliterator0 = instructionList0.spliterator();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(spliterator0);
      
      LLOAD lLOAD0 = new LLOAD();
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((-1), lLOAD0.getIndex());
      assertNotNull(lLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((Instruction) lLOAD0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((-1), lLOAD0.getIndex());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      
      int int0 = (-130);
      lLOAD0.setIndexOnly(int0);
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals((-130), lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      
      GOTO gOTO0 = new GOTO();
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(1, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      assertNotNull(gOTO0);
      
      gOTO0.index = int0;
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(1, gOTO0.getLength());
      assertEquals((-130), gOTO0.getIndex());
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle1, (BranchInstruction) gOTO0);
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals((-130), lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(1, gOTO0.getLength());
      assertEquals((-130), gOTO0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle1, instructionHandle1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      double double0 = 2101.923344430016;
      PUSH pUSH0 = new PUSH(constantPoolGen0, double0);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      DSUB dSUB0 = (DSUB)InstructionConstants.DSUB;
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals("dsub", dSUB0.getName());
      assertEquals(1, dSUB0.getLength());
      assertNotNull(dSUB0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) dSUB0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction dsub[103](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionHandle[] instructionHandleArray0 = null;
      int[] intArray0 = new int[1];
      int int0 = (-128);
      intArray0[0] = int0;
      int int1 = 431;
      // Undeclared exception!
      try { 
        InstructionList.findHandle(instructionHandleArray0, intArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -64
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(1, iF_ICMPLT0.getLength());
      assertNotNull(iF_ICMPLT0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPLT0);
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      // Undeclared exception!
      try { 
        instructionList0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.InstructionConst", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LREM lREM0 = (LREM)InstructionConstants.LREM;
      assertEquals("lrem", lREM0.getName());
      assertEquals(1, lREM0.getLength());
      assertEquals((short)113, lREM0.getOpcode());
      assertNotNull(lREM0);
      
      InstructionList instructionList0 = new InstructionList(lREM0);
      assertEquals("lrem", lREM0.getName());
      assertEquals(1, lREM0.getLength());
      assertEquals((short)113, lREM0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      instructionList0.delete((Instruction) lREM0, (Instruction) lREM0);
      assertEquals("lrem", lREM0.getName());
      assertEquals(1, lREM0.getLength());
      assertEquals((short)113, lREM0.getOpcode());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      boolean boolean0 = instructionList0.isEmpty();
      assertEquals("lrem", lREM0.getName());
      assertEquals(1, lREM0.getLength());
      assertEquals((short)113, lREM0.getOpcode());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(boolean0);
      
      String string0 = instructionList0.toString(boolean0);
      assertEquals("lrem", lREM0.getName());
      assertEquals(1, lREM0.getLength());
      assertEquals((short)113, lREM0.getOpcode());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNull(instructionHandle0);
      
      BranchInstruction branchInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle0, branchInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BranchInstruction branchInstruction0 = null;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(branchInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 3234;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      LAND lAND0 = (LAND)InstructionConstants.LAND;
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals("land", lAND0.getName());
      assertEquals(1, lAND0.getLength());
      assertNotNull(lAND0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(lAND0);
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals("land", lAND0.getName());
      assertEquals(1, lAND0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      instructionHandleArray0[0] = instructionHandle0;
      InstructionList instructionList0 = new InstructionList(lAND0);
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals("land", lAND0.getName());
      assertEquals(1, lAND0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      ConstantPoolGen constantPoolGen0 = null;
      String string0 = "iastore";
      Boolean boolean0 = new Boolean(string0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((Instruction) lAND0, (CompoundInstruction) pUSH0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle1, instructionHandle0);
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals("land", lAND0.getName());
      assertEquals(1, lAND0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      
      instructionHandleArray0[1] = instructionHandle1;
      InstructionHandle instructionHandle2 = InstructionList.findHandle(instructionHandleArray0, intArray0, intArray0[1], int1);
      assertEquals(2, intArray0.length);
      assertEquals(6, instructionHandleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {3234, 0}, intArray0);
      assertNull(instructionHandle2);
      
      instructionHandleArray0[2] = instructionHandle2;
      InstructionHandle instructionHandle3 = instructionList0.append((Instruction) lAND0);
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((-1), instructionHandle3.getPosition());
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals("land", lAND0.getName());
      assertEquals(1, lAND0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertNotNull(instructionHandle3);
      
      instructionHandleArray0[3] = instructionHandle3;
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList1 = new InstructionList(byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle4 = instructionList0.insert((Instruction) lAND0, instructionList1);
      assertEquals(0, byteArray0.length);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle4.equals((Object)instructionHandle3));
      assertFalse(instructionHandle4.equals((Object)instructionHandle0));
      assertFalse(instructionHandle4.equals((Object)instructionHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle4, instructionHandle3);
      assertNotSame(instructionHandle4, instructionHandle0);
      assertNotSame(instructionHandle4, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertFalse(instructionHandle4.hasTargeters());
      assertEquals((-1), instructionHandle4.getPosition());
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals("land", lAND0.getName());
      assertEquals(1, lAND0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(instructionHandle4);
      
      instructionHandleArray0[4] = instructionHandle4;
      InstructionHandle instructionHandle5 = instructionList0.append((Instruction) lAND0, (CompoundInstruction) pUSH0);
      assertFalse(instructionHandle5.equals((Object)instructionHandle0));
      assertFalse(instructionHandle5.equals((Object)instructionHandle4));
      assertFalse(instructionHandle5.equals((Object)instructionHandle1));
      assertFalse(instructionHandle5.equals((Object)instructionHandle3));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionHandle5, instructionHandle0);
      assertNotSame(instructionHandle5, instructionHandle4);
      assertNotSame(instructionHandle5, instructionHandle1);
      assertNotSame(instructionHandle5, instructionHandle3);
      assertNotSame(instructionList0, instructionList1);
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals("land", lAND0.getName());
      assertEquals(1, lAND0.getLength());
      assertFalse(instructionHandle5.hasTargeters());
      assertEquals((-1), instructionHandle5.getPosition());
      assertEquals(4, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertNotNull(instructionHandle5);
      
      instructionHandleArray0[5] = instructionHandle5;
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandleArray0[1], intArray0[0]);
      assertEquals(2, intArray0.length);
      assertEquals(6, instructionHandleArray0.length);
      assertArrayEquals(new int[] {3234, 0}, intArray0);
      assertNotNull(sWITCH0);
      
      InstructionList instructionList2 = sWITCH0.getInstructionList();
      assertEquals(2, intArray0.length);
      assertEquals(6, instructionHandleArray0.length);
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertFalse(instructionList2.isEmpty());
      assertEquals(1, instructionList2.getLength());
      assertEquals(1, instructionList2.size());
      assertArrayEquals(new int[] {3234, 0}, intArray0);
      assertNotNull(instructionList2);
      
      IFLT iFLT0 = new IFLT();
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      assertEquals(0, iFLT0.getIndex());
      assertNotNull(iFLT0);
      
      // Undeclared exception!
      try { 
        instructionList2.delete((Instruction) iFLT0, (Instruction) lAND0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)7;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0}, byteArray0);
      assertNotNull(instructionList0);
      
      instructionList0.setPositions();
      assertEquals(3, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0}, byteArray0);
      
      int int0 = (-1616);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      byte[] byteArray0 = instructionList0.getByteCode();
      assertEquals(0, byteArray0.length);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = true;
      instructionList0.setPositions(boolean0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      InstructionComparator instructionComparator0 = Instruction.getComparator();
      assertNotNull(instructionComparator0);
      
      Instruction.setComparator(instructionComparator0);
      InstructionHandle instructionHandle0 = new InstructionHandle(l2I0);
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertNotNull(iF_ICMPGT0);
      
      IfInstruction ifInstruction0 = iF_ICMPGT0.negate();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertNotNull(ifInstruction0);
      
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((Instruction) ifInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction if_icmple[164](3) -> -1 to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 954;
      FLOAD fLOAD0 = new FLOAD(int0);
      assertEquals("fload", fLOAD0.getName());
      assertEquals(954, fLOAD0.getIndex());
      assertEquals((short)23, fLOAD0.getCanonicalTag());
      assertEquals((short)23, fLOAD0.getOpcode());
      assertEquals(4, fLOAD0.getLength());
      assertNotNull(fLOAD0);
      
      InstructionList instructionList0 = new InstructionList(fLOAD0);
      assertEquals("fload", fLOAD0.getName());
      assertEquals(954, fLOAD0.getIndex());
      assertEquals((short)23, fLOAD0.getCanonicalTag());
      assertEquals((short)23, fLOAD0.getOpcode());
      assertEquals(4, fLOAD0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertNotNull(iF_ICMPGT0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fLOAD0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals("fload", fLOAD0.getName());
      assertEquals(954, fLOAD0.getIndex());
      assertEquals((short)23, fLOAD0.getCanonicalTag());
      assertEquals((short)23, fLOAD0.getOpcode());
      assertEquals(4, fLOAD0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_1;
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertEquals(1, aLOAD0.getIndex());
      assertEquals("aload_1", aLOAD0.getName());
      assertEquals((short)43, aLOAD0.getOpcode());
      assertEquals(1, aLOAD0.getLength());
      assertNotNull(aLOAD0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) aLOAD0, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction aload_1[43](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      I2B i2B0 = new I2B();
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertNotNull(i2B0);
      
      Instruction instruction0 = i2B0.copy();
      assertSame(i2B0, instruction0);
      assertSame(instruction0, i2B0);
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals("i2b", instruction0.getName());
      assertEquals(1, instruction0.getLength());
      assertEquals((short)145, instruction0.getOpcode());
      assertNotNull(instruction0);
      
      InstructionList instructionList0 = new InstructionList(i2B0);
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) i2B0);
      assertSame(i2B0, instruction0);
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      boolean boolean0 = true;
      instructionList0.setPositions(boolean0);
      assertSame(i2B0, instruction0);
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(2, instructionHandleArray0.length);
      assertSame(i2B0, instruction0);
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertNotNull(instructionHandleArray0);
      
      boolean boolean1 = instructionList0.contains(instructionHandle0);
      assertTrue(boolean1 == boolean0);
      assertSame(i2B0, instruction0);
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals("i2b", i2B0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, instructionHandle0.getPosition());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertNotNull(iF_ICMPNE0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ICMPNE0);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      BranchHandle branchHandle1 = instructionList1.append((BranchInstruction) iF_ICMPNE0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertNotNull(branchHandle1);
      
      instructionList0.move((InstructionHandle) branchHandle0, (InstructionHandle) branchHandle0, (InstructionHandle) branchHandle1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      
      Instruction instruction0 = null;
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(0, instructionArray0.length);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-87);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0}, byteArray0);
      assertNotNull(instructionList0);
      
      LDC lDC0 = new LDC();
      assertEquals(0, lDC0.getIndex());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertNotNull(lDC0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDC0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(0, lDC0.getIndex());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0}, byteArray0);
      assertNotNull(instructionHandle0);
      
      Object object0 = PrivateAccess.callMethod((Class<InstructionList>) InstructionList.class, instructionList0, "insert", (Object) instructionHandle0, (Class<?>) InstructionHandle.class);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals(0, lDC0.getIndex());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0}, byteArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)53;
      byteArray0[0] = byte0;
      byteArray0[1] = byteArray0[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNotNull(instructionList0);
      
      FNEG fNEG0 = (FNEG)InstructionConstants.FNEG;
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertNotNull(fNEG0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(fNEG0);
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      instructionHandle0.addAttribute(instructionList0, fNEG0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      
      IFNE iFNE0 = new IFNE(instructionHandle0);
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertNotNull(iFNE0);
      
      instructionHandle0.removeAllTargeters();
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IfInstruction ifInstruction0 = iFNE0.negate();
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("ifeq", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)153, ifInstruction0.getOpcode());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("ifeq", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)153, ifInstruction0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNotNull(branchHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((InstructionHandle) branchHandle0, (Instruction) fNEG0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertEquals(4, instructionList0.size());
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("ifeq", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)153, ifInstruction0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNotNull(instructionHandle1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int0 = 1385;
      constantPoolGen0.size = int0;
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) byte0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      String string0 = pUSH0.toString();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals("ldc[18](2) 1 (PUSH)", string0);
      assertNotNull(string0);
      
      InstructionHandle instructionHandle2 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertEquals(5, instructionList0.getLength());
      assertEquals(2, constantPoolGen0.getSize());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNotNull(instructionHandle2);
      
      boolean boolean0 = true;
      instructionList0.setPositions(boolean0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertEquals(5, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      
      BranchHandle branchHandle1 = instructionList0.append(instructionHandle0, (BranchInstruction) iFNE0);
      assertEquals(2, byteArray0.length);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle2));
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle2);
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNotNull(branchHandle1);
      
      Object object0 = PrivateAccess.callMethod((Class<InstructionList>) InstructionList.class, instructionList0, "append", (Object) branchHandle1, (Class<?>) InstructionHandle.class);
      assertEquals(2, byteArray0.length);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle2));
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle2);
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals("fneg", fNEG0.getName());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals(1, fNEG0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      String string0 = "Qey/+ZAWcdo|ifUkr%`";
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertNotNull(iF_ACMPEQ0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ACMPEQ0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      String string1 = "]jxI";
      boolean boolean3 = FileSystemHandling.appendLineToFile(evoSuiteFile1, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNotSame(string1, string0);
      assertFalse(boolean3);
      
      String string2 = "";
      boolean boolean4 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(boolean4);
      
      instructionList0.dispose();
      assertEquals((-1), iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      
      int int0 = 0;
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertEquals((-1), iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(iterator0);
      
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) int0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList1.getEnd();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      Object object0 = PrivateAccess.callMethod((Class<InstructionList>) InstructionList.class, instructionList1, "append", (Object) instructionHandle0, (Class<?>) InstructionHandle.class);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList1, instructionList0);
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      EvoSuiteFile evoSuiteFile1 = null;
      String string0 = "Qey/+ZAWcdo|ifUkr%`";
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionList) null).when(compoundInstruction0).getInstructionList();
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(compoundInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 171;
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(constantPoolGen0).addClass(any(org.apache.bcel.generic.ObjectType.class));
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      GOTO gOTO0 = new GOTO();
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(1, gOTO0.getLength());
      assertNotNull(gOTO0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) gOTO0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(1, gOTO0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList1.append(instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(1, gOTO0.getLength());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionList instructionList2 = null;
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, instructionList2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      ICONST iCONST0 = (ICONST)InstructionConstants.ICONST_3;
      assertEquals((short)6, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertEquals("iconst_3", iCONST0.getName());
      assertNotNull(iCONST0);
      
      CompoundInstruction compoundInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iCONST0, compoundInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(0, constantArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = false;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean2);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      int int0 = 168;
      PUSH pUSH0 = new PUSH(constantPoolGen0, int0);
      assertEquals(0, constantArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(0, constantArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[3];
      CodeExceptionGen codeExceptionGen0 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen0).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen0).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen0).getStartPC();
      codeExceptionGenArray0[0] = codeExceptionGen0;
      CodeExceptionGen codeExceptionGen1 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen1).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen1).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen1).getStartPC();
      codeExceptionGenArray0[1] = codeExceptionGen1;
      CodeExceptionGen codeExceptionGen2 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen2).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen2).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen2).getStartPC();
      codeExceptionGenArray0[2] = codeExceptionGen2;
      instructionList0.redirectExceptionHandlers(codeExceptionGenArray0, instructionHandle0, instructionHandle0);
      assertEquals(0, constantArray0.length);
      assertEquals(3, codeExceptionGenArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals("if_icmple", iF_ICMPLE0.getName());
      assertNotNull(iF_ICMPLE0);
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ICMPLE0);
      assertEquals(0, constantArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals("if_icmple", iF_ICMPLE0.getName());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertNotNull(branchHandle0);
      
      IF_ICMPLE iF_ICMPLE1 = (IF_ICMPLE)branchHandle0.swapInstruction(iF_ICMPLE0);
      assertEquals(0, constantArray0.length);
      assertSame(iF_ICMPLE0, iF_ICMPLE1);
      assertSame(iF_ICMPLE1, iF_ICMPLE0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((short)164, iF_ICMPLE0.getOpcode());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals(3, iF_ICMPLE0.getLength());
      assertEquals("if_icmple", iF_ICMPLE0.getName());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, iF_ICMPLE1.getIndex());
      assertEquals("if_icmple", iF_ICMPLE1.getName());
      assertEquals((short)164, iF_ICMPLE1.getOpcode());
      assertEquals(3, iF_ICMPLE1.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertNotNull(iF_ICMPLE1);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-92);
      byteArray0[0] = byte0;
      InstructionList instructionList1 = null;
      try {
        instructionList1 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = 0L;
      String string0 = "&qm:yTw}-";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string1 = "i:EEk<";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string1, string0);
      assertFalse(boolean1);
      
      short short0 = (short)0;
      EvoSuiteFile evoSuiteFile1 = null;
      String string2 = "oAp=#&1c";
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = 0L;
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      I2C i2C0 = new I2C();
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertNotNull(i2C0);
      
      String string0 = "&qm:yTw}-";
      int int0 = constantPoolGen0.addString(string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2C0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(iF_ICMPGT0);
      
      String string1 = "i:EEk<";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string1, string0);
      assertFalse(boolean1);
      
      short short0 = (short)0;
      iF_ICMPGT0.length = short0;
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      
      Instruction instruction0 = instructionHandle0.swapInstruction(iF_ICMPGT0);
      assertSame(i2C0, instruction0);
      assertSame(instruction0, i2C0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals("i2c", instruction0.getName());
      assertEquals(1, instruction0.getLength());
      assertEquals((short)146, instruction0.getOpcode());
      assertNotNull(instruction0);
      
      IfInstruction ifInstruction0 = iF_ICMPGT0.negate();
      assertSame(i2C0, instruction0);
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(ifInstruction0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      String string2 = "oAp=#&1c";
      boolean boolean2 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) ifInstruction0);
      assertSame(i2C0, instruction0);
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(branchHandle0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(3, instructionArray0.length);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionArray0);
      
      instructionList0.move(instructionHandle0, (InstructionHandle) branchHandle0);
      assertSame(i2C0, instruction0);
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      
      branchHandle0.setTarget(instructionHandle0);
      assertSame(i2C0, instruction0);
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList1.size());
      assertEquals(3, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.append((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(branchHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, branchHandle0);
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert((Instruction) ifInstruction0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertSame(instructionHandle2, branchHandle0);
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertNotNull(instructionHandle2);
      
      InstructionHandle instructionHandle3 = instructionList0.insert((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertSame(branchHandle0, instructionHandle3);
      assertNotSame(branchHandle0, instructionHandle1);
      assertSame(branchHandle0, instructionHandle2);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle3, instructionHandle2);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertSame(instructionHandle3, branchHandle0);
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(0, instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertNotNull(instructionHandle3);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) ifInstruction0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle1.equals((Object)instructionHandle3));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertSame(i2C0, instruction0);
      assertNotSame(branchHandle1, instructionHandle3);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(branchHandle1, instructionHandle1);
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals("i2c", i2C0.getName());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals(1, i2C0.getLength());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertNotNull(branchHandle1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertNotNull(iF_ICMPLE0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPLE0);
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instructionList0.forEach(consumer0);
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      
      int int0 = 40;
      iF_ICMPLE0.setPosition(int0);
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      
      instructionList0.delete((Instruction) iF_ICMPLE0, (Instruction) iF_ICMPLE0);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      InstructionList instructionList1 = null;
      InstructionList instructionList2 = instructionList0.copy();
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList2, instructionList0);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList2.getLength());
      assertEquals(0, instructionList2.size());
      assertTrue(instructionList2.isEmpty());
      assertNotNull(instructionList2);
      
      String string0 = instructionList0.toString();
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertNotSame(instructionList0, instructionList2);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = instructionList0.getLength();
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(int1 == int0);
      assertNotSame(instructionList0, instructionList2);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, int1);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPLE0);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertNotSame(instructionList0, instructionList2);
      assertEquals((-1), iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals((-1), branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iF_ICMPLE0, (Instruction) iF_ICMPLE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-79);
      byteArray0[0] = byte0;
      byte byte1 = (byte)119;
      byteArray0[1] = byte1;
      byte byte2 = (byte)6;
      byteArray0[1] = byte2;
      byte byte3 = (byte) (-88);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-17);
      byteArray0[4] = byte4;
      byte byte5 = (byte)126;
      byteArray0[5] = byte5;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't find target for branch: jsr[168](3) -> null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = ";\\pwU2gnF";
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-111);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)40;
      byteArray0[2] = byte2;
      byte byte3 = (byte)26;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-96);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-99);
      byte byte7 = (byte) (-79);
      byteArray0[7] = byte7;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)40, (byte)26, (byte) (-96), (byte)0, (byte)0, (byte) (-79)}, byteArray0);
      assertNotNull(instructionList0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      assertNotNull(lNEG0);
      
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) lNEG0, (Instruction) lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction lneg[117](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertNotNull(iF_ICMPNE0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ICMPNE0);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      BranchHandle branchHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPNE0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertNotNull(branchHandle1);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      
      BranchHandle branchHandle2 = instructionList1.append((BranchInstruction) iF_ICMPNE0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle2.equals((Object)branchHandle0));
      assertFalse(branchHandle2.equals((Object)branchHandle1));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(branchHandle2, branchHandle0);
      assertNotSame(branchHandle2, branchHandle1);
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertEquals(0, branchHandle2.getPosition());
      assertFalse(branchHandle2.hasTargeters());
      assertNotNull(branchHandle2);
      
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) iF_ICMPNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)99;
      byteArray0[1] = byte0;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)99}, byteArray0);
      assertNotNull(instructionList0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)0, (byte)99}, byteArray0);
      assertNotNull(instructionHandle0);
      
      instructionList0.delete(instructionHandle0, instructionHandle0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)0, (byte)99}, byteArray0);
      
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertNotNull(iF_ICMPLE0);
      
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals("if_icmpgt", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)163, ifInstruction0.getOpcode());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) ifInstruction0);
      assertEquals(2, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(1, iF_ICMPLE0.getLength());
      assertEquals(0, iF_ICMPLE0.getIndex());
      assertEquals((short) (-1), iF_ICMPLE0.getOpcode());
      assertEquals("if_icmpgt", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)163, ifInstruction0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)0, (byte)99}, byteArray0);
      assertNotNull(branchHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertNotNull(iF_ICMPNE0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ICMPNE0);
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      BranchHandle branchHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPNE0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertNotNull(branchHandle1);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      BranchHandle branchHandle2 = instructionList1.append((BranchInstruction) iF_ICMPNE0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle2.equals((Object)branchHandle1));
      assertFalse(branchHandle2.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(branchHandle2, branchHandle1);
      assertNotSame(branchHandle2, branchHandle0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(0, branchHandle2.getPosition());
      assertFalse(branchHandle2.hasTargeters());
      assertNotNull(branchHandle2);
      
      instructionList0.move((InstructionHandle) branchHandle1, (InstructionHandle) branchHandle0, (InstructionHandle) branchHandle2);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle0.equals((Object)branchHandle2));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(branchHandle1.equals((Object)branchHandle2));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle2.equals((Object)branchHandle1));
      assertFalse(branchHandle2.equals((Object)branchHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(branchHandle0, branchHandle2);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle2);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(branchHandle2, branchHandle1);
      assertNotSame(branchHandle2, branchHandle0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(0, branchHandle2.getPosition());
      assertFalse(branchHandle2.hasTargeters());
      
      Instruction instruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.delete(instruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction null is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      float float0 = (-2526.723F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      instructionList0.update();
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      
      constantPoolGen0.adjustSize();
      assertEquals(2, constantPoolGen0.getSize());
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertNotNull(instructionHandle2);
      
      InstructionListObserver instructionListObserver0 = null;
      instructionList0.removeObserver(instructionListObserver0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        instructionList1.append(instructionHandle1, (CompoundInstruction) pUSH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      float float0 = (-2526.723F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      instructionList0.update();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList1);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNull(instructionHandle0);
      
      InstructionList instructionList2 = new InstructionList();
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertEquals(0, instructionList2.size());
      assertEquals(0, instructionList2.getLength());
      assertTrue(instructionList2.isEmpty());
      assertNotNull(instructionList2);
      
      constantPoolGen0.adjustSize();
      assertEquals(2, constantPoolGen0.getSize());
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNull(instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList1.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
      
      InstructionListObserver instructionListObserver0 = null;
      instructionList1.removeObserver(instructionListObserver0);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(iterator0);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[2];
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertNotNull(mONITORENTER0);
      
      InstructionList instructionList3 = new InstructionList(mONITORENTER0);
      assertFalse(instructionList3.equals((Object)instructionList1));
      assertFalse(instructionList3.equals((Object)instructionList2));
      assertFalse(instructionList3.equals((Object)instructionList0));
      assertEquals(1, instructionList3.getLength());
      assertFalse(instructionList3.isEmpty());
      assertEquals(1, instructionList3.size());
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertNotNull(instructionList3);
      
      InstructionHandle instructionHandle3 = instructionList3.append(instructionHandle0, instructionList0);
      assertFalse(instructionList3.equals((Object)instructionList1));
      assertFalse(instructionList3.equals((Object)instructionList2));
      assertFalse(instructionList3.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList3));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList3, instructionList1);
      assertNotSame(instructionList3, instructionList2);
      assertNotSame(instructionList3, instructionList0);
      assertNotSame(instructionList0, instructionList3);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertEquals(1, instructionList3.getLength());
      assertFalse(instructionList3.isEmpty());
      assertEquals(1, instructionList3.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertNull(instructionHandle3);
      
      CodeExceptionGen codeExceptionGen0 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle3).when(codeExceptionGen0).getEndPC();
      doReturn(instructionHandle3).when(codeExceptionGen0).getHandlerPC();
      doReturn(instructionHandle1).when(codeExceptionGen0).getStartPC();
      codeExceptionGenArray0[0] = codeExceptionGen0;
      CodeExceptionGen codeExceptionGen1 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle0).when(codeExceptionGen1).getEndPC();
      doReturn(instructionHandle3).when(codeExceptionGen1).getHandlerPC();
      doReturn(instructionHandle1).when(codeExceptionGen1).getStartPC();
      codeExceptionGenArray0[1] = codeExceptionGen1;
      instructionList2.redirectExceptionHandlers(codeExceptionGenArray0, instructionHandle2, instructionHandle2);
      assertEquals(2, codeExceptionGenArray0.length);
      assertFalse(instructionList0.equals((Object)instructionList3));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList3));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList3));
      assertNotSame(instructionList0, instructionList3);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList3);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionList2, instructionList3);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(0, instructionList2.size());
      assertEquals(0, instructionList2.getLength());
      assertTrue(instructionList2.isEmpty());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      
      InstructionHandle instructionHandle4 = instructionList1.append(instructionList2);
      assertFalse(instructionList0.equals((Object)instructionList3));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList3));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList3));
      assertNotSame(instructionList0, instructionList3);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList3);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionList2, instructionList3);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(0, instructionList2.size());
      assertEquals(0, instructionList2.getLength());
      assertTrue(instructionList2.isEmpty());
      assertNull(instructionHandle4);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)119;
      byteArray0[0] = byte0;
      byte byte1 = (byte)5;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)118;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)24;
      byteArray0[5] = byte5;
      byte byte6 = (byte)82;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-83);
      byteArray0[7] = byte7;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(instructionList0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals(1, iXOR0.getLength());
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertNotNull(iXOR0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertNotNull(iF_ICMPGE0);
      
      IfInstruction ifInstruction0 = iF_ICMPGE0.negate();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertEquals(8, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(branchHandle0);
      
      instructionList0.redirectBranches(branchHandle0, branchHandle0);
      assertEquals(8, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      
      short short0 = (short)0;
      iXOR0.opcode = short0;
      assertEquals(1, iXOR0.getLength());
      assertEquals("nop", iXOR0.getName());
      assertEquals((short)0, iXOR0.getOpcode());
      
      boolean boolean0 = instructionList0.contains((Instruction) iXOR0);
      assertEquals(8, byteArray0.length);
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals(1, iXOR0.getLength());
      assertEquals("nop", iXOR0.getName());
      assertEquals((short)0, iXOR0.getOpcode());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertFalse(boolean0);
      
      InstructionHandle instructionHandle0 = null;
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, instructionHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From null to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)119;
      byteArray0[0] = byte0;
      byte byte1 = (byte)5;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)118;
      byteArray0[3] = byte3;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)24;
      byteArray0[5] = byte5;
      byte byte6 = (byte)82;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-83);
      byteArray0[7] = byte7;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(instructionList0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertNotNull(iXOR0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertNotNull(iF_ICMPGE0);
      
      IfInstruction ifInstruction0 = iF_ICMPGE0.negate();
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(branchHandle0);
      
      instructionList0.redirectBranches(branchHandle0, branchHandle0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      
      short short0 = (short)0;
      iXOR0.opcode = short0;
      assertEquals("nop", iXOR0.getName());
      assertEquals((short)0, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      
      boolean boolean1 = instructionList0.contains((Instruction) iXOR0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals("nop", iXOR0.getName());
      assertEquals((short)0, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertFalse(boolean1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byteArray0[2]);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(pUSH0);
      
      String string0 = pUSH0.toString();
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertEquals("iconst_0[3](1) (PUSH)", string0);
      assertNotNull(string0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertEquals(8, byteArray0.length);
      assertEquals(9, instructionList0.size());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertArrayEquals(new byte[] {(byte)119, (byte)5, (byte)0, (byte)118, (byte)0, (byte)24, (byte)82, (byte) (-83)}, byteArray0);
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = null;
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle1, instructionHandle1, instructionHandle1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From null to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      D2I d2I0 = (D2I)InstructionConstants.D2I;
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertNotNull(d2I0);
      
      InstructionList instructionList0 = new InstructionList(d2I0);
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      boolean boolean0 = true;
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      String string0 = instructionList0.toString(boolean0);
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals("  -1: d2i[142](1)\n", string0);
      assertNotNull(string0);
      
      int int0 = instructionList0.size();
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, int0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(1, instructionArray0.length);
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionArray0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) d2I0, (Instruction) d2I0);
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionList instructionList2 = instructionList0.copy();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList2.size());
      assertFalse(instructionList2.isEmpty());
      assertEquals(2, instructionList2.getLength());
      assertNotNull(instructionList2);
      
      int[] intArray0 = instructionList0.getInstructionPositions();
      assertEquals(1, intArray0.length);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(intArray0);
      
      LOOKUPSWITCH lOOKUPSWITCH0 = new LOOKUPSWITCH();
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertNotNull(lOOKUPSWITCH0);
      
      BranchHandle branchHandle0 = instructionList2.insert(instructionHandle0, (BranchInstruction) lOOKUPSWITCH0);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(3, instructionList2.size());
      assertFalse(instructionList2.isEmpty());
      assertEquals(3, instructionList2.getLength());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[4];
      InstructionList instructionList3 = new InstructionList((BranchInstruction) lOOKUPSWITCH0);
      assertFalse(instructionList3.equals((Object)instructionList2));
      assertFalse(instructionList3.equals((Object)instructionList0));
      assertFalse(instructionList3.equals((Object)instructionList1));
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(1, instructionList3.size());
      assertEquals(1, instructionList3.getLength());
      assertFalse(instructionList3.isEmpty());
      assertNotNull(instructionList3);
      
      Constant[] constantArray0 = new Constant[9];
      int int1 = 1;
      ConstantClass constantClass0 = new ConstantClass(int1);
      assertTrue(int1 == int0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(1, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(int0);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList3));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(int0 == int1);
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(1, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      constantArray0[1] = (Constant) constantMethodType0;
      int int2 = 270;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(int2, int1);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(270, constantMethodHandle0.getReferenceKind());
      assertEquals(1, constantMethodHandle0.getReferenceIndex());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(270, constantMethodHandle0.getReferenceKind());
      assertEquals(1, constantMethodHandle0.getReferenceIndex());
      assertEquals(270, constantMethodHandle1.getReferenceKind());
      assertEquals(1, constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertNotNull(constantMethodHandle1);
      
      constantArray0[2] = (Constant) constantMethodHandle1;
      int int3 = 0;
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertTrue(int1 == int0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(1, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(1, constantClass1.getNameIndex());
      assertNotNull(constantClass1);
      
      constantArray0[4] = (Constant) constantClass1;
      int int4 = 0;
      int int5 = 0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(int4, int5);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertEquals(0, constantNameAndType1.getSignatureIndex());
      assertEquals(0, constantNameAndType1.getNameIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType1);
      
      constantArray0[5] = (Constant) constantNameAndType1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(int5, int5);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertNotNull(constantInvokeDynamic0);
      
      constantArray0[6] = (Constant) constantInvokeDynamic0;
      ConstantClass constantClass2 = new ConstantClass(constantClass0);
      assertFalse(int1 == int5);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertTrue(int1 == int0);
      assertFalse(int1 == int4);
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertTrue(constantClass2.equals((Object)constantClass0));
      assertTrue(constantClass2.equals((Object)constantClass1));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(1, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass2.getTag());
      assertEquals(1, constantClass2.getNameIndex());
      assertNotNull(constantClass2);
      
      constantArray0[7] = (Constant) constantClass2;
      String string1 = "5y!8*A_y.\\Mm|xxp\\a";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("5y!8*A_y.\\Mm|xxp\\a", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("5y!8*A_y.\\Mm|xxp\\a", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("5y!8*A_y.\\Mm|xxp\\a", constantUtf8_1.getBytes());
      assertNotNull(constantUtf8_1);
      
      constantArray0[8] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantArray0.length);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantMethodType cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-1815);
      intArray0[0] = int0;
      int int1 = (-65);
      intArray0[1] = int1;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      Constant[] constantArray0 = new Constant[1];
      int int2 = 0;
      ConstantClass constantClass0 = new ConstantClass(int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(0, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(0, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(0, constantClass1.getNameIndex());
      assertNotNull(constantClass1);
      
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(1, constantArray0.length);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      ObjectType objectType0 = Type.THROWABLE;
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Throwable", objectType0.getClassName());
      assertEquals("Ljava/lang/Throwable;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      assertEquals(1, constantArray0.length);
      assertEquals(1, constantPool0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Throwable", objectType0.getClassName());
      assertEquals("Ljava/lang/Throwable;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      assertEquals(1, constantArray0.length);
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, constantPool0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Throwable", objectType0.getClassName());
      assertEquals("Ljava/lang/Throwable;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(instructionHandle0);
      
      String string0 = "n_jna{xR-6|1k";
      int int3 = constantPoolGen0.addFieldref(string0, string0, string0);
      assertEquals(1, constantArray0.length);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, int3);
      
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ();
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertNotNull(iF_ICMPEQ0);
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ICMPEQ0);
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(branchHandle0);
      
      instructionHandleArray0[1] = (InstructionHandle) branchHandle0;
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, instructionList0);
      assertEquals(1, constantArray0.length);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals(1, constantPool0.getLength());
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Throwable", objectType0.getClassName());
      assertEquals("Ljava/lang/Throwable;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(instructionHandle1);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-106);
      byteArray0[0] = byte0;
      byte byte1 = (byte)115;
      byteArray0[1] = byte1;
      byte byte2 = (byte)16;
      byteArray0[2] = byte2;
      byte byte3 = (byte)121;
      byteArray0[3] = byte3;
      byte byte4 = (byte)24;
      byteArray0[4] = byte4;
      byteArray0[5] = byteArray0[0];
      byte byte5 = (byte) (-101);
      byteArray0[6] = byte5;
      InstructionList instructionList1 = null;
      try {
        instructionList1 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 771;
      intArray0[0] = int0;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int1 = 0;
      intArray0[1] = int1;
      intArray0[3] = intArray0[1];
      int int2 = (-2512);
      intArray0[3] = int2;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int3 = (-28);
      PUSH pUSH0 = new PUSH(constantPoolGen0, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(instructionList0);
      
      LocalVariableGen[] localVariableGenArray0 = new LocalVariableGen[6];
      int int4 = 5;
      String string0 = "";
      Type type0 = null;
      L2F l2F0 = new L2F();
      assertEquals(1, l2F0.getLength());
      assertEquals((short)137, l2F0.getOpcode());
      assertEquals("l2f", l2F0.getName());
      assertNotNull(l2F0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) l2F0, (Instruction) l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction l2f[137](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FSUB fSUB0 = (FSUB)InstructionConstants.FSUB;
      assertEquals(1, fSUB0.getLength());
      assertEquals("fsub", fSUB0.getName());
      assertEquals((short)102, fSUB0.getOpcode());
      assertNotNull(fSUB0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.removeObserver(instructionListObserver0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      EvoSuiteFile evoSuiteFile0 = null;
      LocalVariableGen[] localVariableGenArray0 = new LocalVariableGen[0];
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fSUB0);
      assertEquals(1, fSUB0.getLength());
      assertEquals("fsub", fSUB0.getName());
      assertEquals((short)102, fSUB0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      instructionList0.redirectLocalVariables(localVariableGenArray0, instructionHandle0, instructionHandle0);
      assertEquals(0, localVariableGenArray0.length);
      assertEquals(1, fSUB0.getLength());
      assertEquals("fsub", fSUB0.getName());
      assertEquals((short)102, fSUB0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      BIPUSH bIPUSH0 = new BIPUSH();
      assertEquals(1, bIPUSH0.getLength());
      assertEquals((short) (-1), bIPUSH0.getOpcode());
      assertNotNull(bIPUSH0);
      
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn(instructionList0).when(compoundInstruction0).getInstructionList();
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) bIPUSH0, compoundInstruction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      I2B i2B0 = new I2B();
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertNotNull(i2B0);
      
      Instruction instruction0 = i2B0.copy();
      assertSame(i2B0, instruction0);
      assertSame(instruction0, i2B0);
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, instruction0.getOpcode());
      assertEquals("i2b", instruction0.getName());
      assertEquals(1, instruction0.getLength());
      assertNotNull(instruction0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      InstructionList instructionList0 = new InstructionList(i2B0);
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionComparator instructionComparator0 = Instruction.getComparator();
      assertNotNull(instructionComparator0);
      
      Instruction.setComparator(instructionComparator0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) i2B0);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      boolean boolean1 = true;
      instructionList0.setPositions(boolean1);
      assertFalse(boolean1 == boolean0);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      
      int int0 = 208;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)100;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-55);
      byteArray0[1] = byte1;
      byte byte2 = (byte)3;
      byteArray0[2] = byte2;
      byte byte3 = (byte)2;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte)78;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-46);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-68);
      byteArray0[8] = byte8;
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-55), (byte)3, (byte)2, (byte) (-1), (byte)78, (byte) (-46), (byte)0, (byte) (-68)}, byteArray0);
      assertFalse(boolean2);
      
      instructionHandle0.i_position = int0;
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(208, instructionHandle0.getPosition());
      
      instructionList0.delete(instructionHandle0);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(1, instructionHandleArray0.length);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionHandleArray0);
      
      InstructionTargeter instructionTargeter0 = mock(InstructionTargeter.class, new ViolatedAssumptionAnswer());
      instructionHandle0.removeTargeter(instructionTargeter0);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      InstructionHandle instructionHandle1 = instructionList0.findHandle(instructionHandle0.i_position);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNull(instructionHandle1);
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(iterator0);
      
      instructionList0.redirectBranches(instructionHandle0, instructionHandle0);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      instructionList0.replaceConstantPool(constantPoolGen0, constantPoolGen0);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      boolean boolean3 = instructionList0.contains(instructionHandle0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertSame(i2B0, instruction0);
      assertEquals("i2b", i2B0.getName());
      assertEquals((short)145, i2B0.getOpcode());
      assertEquals(1, i2B0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }
}
