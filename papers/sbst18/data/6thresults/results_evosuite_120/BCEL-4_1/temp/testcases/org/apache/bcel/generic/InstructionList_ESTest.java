/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:53:37 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectStreamConstants;
import java.net.URI;
import java.util.Collection;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BASTORE;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CodeExceptionGen;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InstructionListObserver;
import org.apache.bcel.generic.InstructionTargeter;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LocalVariableGen;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.SWITCH;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstructionList_ESTest extends InstructionList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertNotNull(iF_ACMPEQ0);
      
      IfInstruction ifInstruction0 = iF_ACMPEQ0.negate();
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals("if_acmpne", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)166, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals("if_acmpne", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)166, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.getByteCode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of if_acmpne[166](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LDC lDC0 = new LDC();
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertNotNull(lDC0);
      
      IFGE iFGE0 = new IFGE();
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertNotNull(iFGE0);
      
      short short0 = (short)208;
      iFGE0.length = short0;
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGE0);
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      int int0 = 7;
      Instruction instruction0 = null;
      int[] intArray0 = new int[10];
      intArray0[0] = (int) short0;
      intArray0[1] = int0;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int1 = (-1284);
      PUSH pUSH0 = new PUSH(constantPoolGen0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList1 = new InstructionList(pUSH0);
      assertFalse(int1 == int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      BranchHandle branchHandle0 = instructionList1.append((BranchInstruction) iFGE0);
      assertFalse(int1 == int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      assertNotSame(instructionList1, instructionList0);
      
      BranchHandle branchHandle1 = instructionList1.append((InstructionHandle) branchHandle0, (BranchInstruction) iFGE0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(int1 == int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(3, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, instructionList1.size());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(branchHandle0, branchHandle1);
      
      branchHandle1.addHandle();
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(int1 == int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(3, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, instructionList1.size());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(branchHandle0, branchHandle1);
      
      instructionHandleArray0[0] = (InstructionHandle) branchHandle1;
      InstructionHandle instructionHandle0 = instructionList1.append(instructionList0);
      assertFalse(instructionHandle0.equals((Object)branchHandle0));
      assertFalse(instructionHandle0.equals((Object)branchHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(int1 == int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList1.isEmpty());
      assertEquals(4, instructionList1.getLength());
      assertEquals(4, instructionList1.size());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionHandle0, branchHandle0);
      assertNotSame(instructionHandle0, branchHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        instructionList1.toString(boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SWAP sWAP0 = new SWAP();
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, sWAP0.getLength());
      assertNotNull(sWAP0);
      
      InstructionList instructionList0 = new InstructionList(sWAP0);
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[7];
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      String string0 = "/vL";
      ObjectType objectType0 = new ObjectType(string0);
      assertEquals(".vL", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L/vL;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(".vL", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L/vL;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(codeExceptionGen0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = false;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList0);
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, sWAP0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) sWAP0, (Instruction) sWAP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction swap[95](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      char char0 = 'y';
      Character character0 = new Character(char0);
      assertEquals('y', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle0 = instructionList1.append((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(character0.equals((Object)char0));
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      Object object0 = PrivateAccess.callMethod((Class<InstructionList>) InstructionList.class, instructionList0, "insert", (Object) instructionHandle0, (Class<?>) InstructionHandle.class);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(character0.equals((Object)char0));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNull(object0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle1, instructionHandle0);
      
      boolean boolean0 = true;
      instructionList1.setPositions(boolean0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = instructionList0.size();
      assertEquals(2, int0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotSame(instructionList0, instructionList1);
      
      instructionList1.update();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle2 = instructionList1.append((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(character0.equals((Object)char0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertNotNull(instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionHandle2, instructionHandle0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertNotNull(iF_ICMPGE0);
      
      IfInstruction ifInstruction0 = iF_ICMPGE0.negate();
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle1, (BranchInstruction) ifInstruction0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle2));
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)161, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmplt", ifInstruction0.getName());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle2);
      
      PUSH pUSH1 = new PUSH(constantPoolGen0, (float) int0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(pUSH1.equals((Object)pUSH0));
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH1);
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle2, instructionHandle2, instructionHandle2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid range: From   -1: bipush[16](2) 121 to   -1: bipush[16](2) 121 contains target   -1: bipush[16](2) 121
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LSTORE lSTORE0 = new LSTORE();
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertNotNull(lSTORE0);
      
      InstructionList instructionList0 = new InstructionList(lSTORE0);
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      boolean boolean0 = false;
      instructionList0.setPositions(boolean0);
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      byte byte0 = (byte) (-3);
      byte byte1 = (byte) (-104);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte2 = (byte) (-21);
      byte byte3 = (byte)102;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      instructionList0.delete((Instruction) lSTORE0, (Instruction) lSTORE0);
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lSTORE0);
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((Instruction) lSTORE0, (Instruction) lSTORE0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      byte byte4 = Constants.ATTR_ANNOTATION_DEFAULT;
      assertEquals((byte)16, byte4);
      assertFalse(byte4 == byte1);
      assertFalse(byte4 == byte0);
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte3);
      
      instructionList0.delete(instructionHandle1, instructionHandle0);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      
      String string0 = instructionList1.toString();
      assertEquals("", string0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(string0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      
      InstructionHandle instructionHandle2 = instructionList1.getStart();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNull(instructionHandle2);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      
      try { 
        PrivateAccess.callMethod((Class<InstructionList>) InstructionList.class, instructionList1, "append", (Object) instructionHandle2, (Class<?>) InstructionHandle.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      boolean boolean1 = true;
      String string0 = instructionList0.toString(boolean1);
      assertEquals("  -1: iconst_0[3](1)\n", string0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(string0);
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertFalse(boolean0 == boolean1);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(iterator0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[8];
      CodeExceptionGen codeExceptionGen0 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle0).when(codeExceptionGen0).getEndPC();
      doReturn(instructionHandle0).when(codeExceptionGen0).getHandlerPC();
      doReturn(instructionHandle0).when(codeExceptionGen0).getStartPC();
      codeExceptionGenArray0[0] = codeExceptionGen0;
      IFGE iFGE0 = new IFGE(instructionHandle0);
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)156, iFGE0.getOpcode());
      assertEquals(3, iFGE0.getLength());
      assertEquals("ifge", iFGE0.getName());
      assertEquals(0, iFGE0.getIndex());
      assertNotNull(iFGE0);
      
      IfInstruction ifInstruction0 = iFGE0.negate();
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)156, iFGE0.getOpcode());
      assertEquals(3, iFGE0.getLength());
      assertEquals("ifge", iFGE0.getName());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("iflt", ifInstruction0.getName());
      assertEquals((short)155, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(ifInstruction0);
      assertNotSame(instructionList0, instructionList1);
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) ifInstruction0);
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)156, iFGE0.getOpcode());
      assertEquals(3, iFGE0.getLength());
      assertEquals("ifge", iFGE0.getName());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("iflt", ifInstruction0.getName());
      assertEquals((short)155, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      CodeExceptionGen codeExceptionGen1 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(branchHandle0).when(codeExceptionGen1).getEndPC();
      doReturn(instructionHandle0).when(codeExceptionGen1).getHandlerPC();
      doReturn(branchHandle0).when(codeExceptionGen1).getStartPC();
      codeExceptionGenArray0[1] = codeExceptionGen1;
      CodeExceptionGen codeExceptionGen2 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(branchHandle0).when(codeExceptionGen2).getEndPC();
      doReturn(branchHandle0).when(codeExceptionGen2).getHandlerPC();
      doReturn(branchHandle0).when(codeExceptionGen2).getStartPC();
      codeExceptionGenArray0[2] = codeExceptionGen2;
      InstructionHandle instructionHandle1 = instructionList1.append(instructionHandle0, instructionList0);
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals(3, instructionList1.getLength());
      assertEquals(3, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle0, instructionHandle1);
      
      CodeExceptionGen codeExceptionGen3 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      CodeExceptionGen codeExceptionGen4 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(codeExceptionGen4.equals((Object)codeExceptionGen0));
      assertFalse(codeExceptionGen4.equals((Object)codeExceptionGen3));
      assertFalse(codeExceptionGen4.equals((Object)codeExceptionGen1));
      assertFalse(codeExceptionGen4.equals((Object)codeExceptionGen2));
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(codeExceptionGen4);
      
      codeExceptionGenArray0[4] = codeExceptionGen4;
      CodeExceptionGen codeExceptionGen5 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      codeExceptionGenArray0[5] = codeExceptionGen5;
      CodeExceptionGen codeExceptionGen6 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      codeExceptionGenArray0[6] = codeExceptionGen6;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      instructionHandleArray0[0] = (InstructionHandle) branchHandle0;
      instructionHandleArray0[1] = instructionHandle0;
      instructionHandleArray0[2] = instructionHandle0;
      instructionHandleArray0[3] = instructionHandle0;
      instructionHandleArray0[4] = instructionHandle1;
      instructionHandleArray0[5] = instructionHandle0;
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = int0;
      intArray0[1] = int0;
      int int1 = 4;
      intArray0[2] = int1;
      int int2 = 1500;
      intArray0[3] = int2;
      int int3 = 0;
      intArray0[4] = int3;
      int int4 = (-981);
      intArray0[5] = int4;
      int int5 = 0;
      intArray0[6] = int5;
      InstructionHandle instructionHandle2 = InstructionList.findHandle(instructionHandleArray0, intArray0, int1, intArray0[6]);
      assertArrayEquals(new int[] {0, 0, 4, 1500, 0, (-981), 0}, intArray0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(int1 == int5);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals((-1), instructionHandle2.getPosition());
      assertTrue(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
      assertEquals(7, intArray0.length);
      assertEquals(6, instructionHandleArray0.length);
      assertSame(instructionHandle2, instructionHandle1);
      assertSame(instructionHandle2, instructionHandle0);
      
      CodeExceptionGen codeExceptionGen7 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      codeExceptionGenArray0[7] = codeExceptionGen7;
      // Undeclared exception!
      try { 
        instructionList0.redirectExceptionHandlers(codeExceptionGenArray0, instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IASTORE iASTORE0 = (IASTORE)InstructionConstants.IASTORE;
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertNotNull(iASTORE0);
      
      InstructionList instructionList0 = new InstructionList(iASTORE0);
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      Class<?>[] classArray0 = iASTORE0.getExceptions();
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertNotNull(classArray0);
      assertEquals(2, classArray0.length);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionArray0);
      assertEquals(1, instructionArray0.length);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray0 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      Instruction[] instructionArray1 = instructionList1.getInstructions();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionArray1.equals((Object)instructionArray0));
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionArray1);
      assertEquals(1, instructionArray1.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionArray1, instructionArray0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iASTORE0, (Instruction) iASTORE0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      Object object0 = PrivateAccess.callMethod((Class<InstructionList>) InstructionList.class, instructionList0, "append", (Object) instructionHandle0, (Class<?>) InstructionHandle.class);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNull(object0);
      assertNotSame(instructionList0, instructionList1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 2664;
      int int1 = (-3225);
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      IFLT iFLT0 = new IFLT();
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertNotNull(iFLT0);
      
      IFGE iFGE0 = new IFGE();
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, iFGE0.getLength());
      assertNotNull(iFGE0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGE0);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, iFGE0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      int int2 = 0;
      iFGE0.setPosition(int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, iFGE0.getLength());
      
      int int3 = 215;
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, iFGE0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(2664, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, iFGE0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(2664, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(2664, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle1, instructionHandle0);
      
      Instruction instruction0 = null;
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn(instructionList0).when(compoundInstruction0).getInstructionList();
      // Undeclared exception!
      try { 
        instructionList1.append(instruction0, compoundInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction null is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      LDC lDC0 = new LDC();
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertNotNull(lDC0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDC0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(0, byteArray0.length);
      
      instructionList0.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, byteArray0.length);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertNotNull(iF_ICMPGE0);
      assertEquals(0, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      assertEquals(0, byteArray0.length);
      
      BranchHandle branchHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertNotNull(branchHandle1);
      assertEquals(0, byteArray0.length);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = int0;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int1 = 28;
      intArray0[1] = int1;
      int int2 = 2367;
      intArray0[2] = int2;
      int int3 = 2522;
      InstructionListObserver instructionListObserver1 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(0, byteArray0.length);
      
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      int int4 = 48;
      PUSH pUSH0 = new PUSH(constantPoolGen0, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (CompoundInstruction) pUSH0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertEquals(0, byteArray0.length);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iF_ICMPGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction if_icmpge[162](3) -> -1 to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = false;
      String string0 = instructionList0.toString(boolean0);
      assertEquals("   0: nop\n   1: nop\n   2: nop\n   3: nop\n   4: nop\n   5: nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = new ILOAD();
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList1.insert(instructionHandle0, instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(5, instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle1, instructionHandle0);
      
      boolean boolean1 = instructionList1.contains(instructionHandle0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(boolean1 == boolean0);
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertNotNull(iF_ACMPEQ0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ACMPEQ0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      instructionList0.redirectBranches(instructionHandle0, branchHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertSame(instructionHandle0, instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      LDC lDC0 = new LDC();
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertNotNull(lDC0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = int0;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int1 = 28;
      intArray0[1] = int1;
      int int2 = 2367;
      intArray0[2] = int2;
      int int3 = 2522;
      InstructionListObserver instructionListObserver1 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      boolean boolean1 = true;
      String string0 = instructionList0.toString(boolean1);
      assertEquals("  -1: iconst_0[3](1)\n", string0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(string0);
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertFalse(boolean0 == boolean1);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(iterator0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[8];
      CodeExceptionGen codeExceptionGen0 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle0).when(codeExceptionGen0).getEndPC();
      doReturn(instructionHandle0).when(codeExceptionGen0).getHandlerPC();
      doReturn(instructionHandle0).when(codeExceptionGen0).getStartPC();
      codeExceptionGenArray0[0] = codeExceptionGen0;
      CodeExceptionGen codeExceptionGen1 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle0).when(codeExceptionGen1).getEndPC();
      doReturn(instructionHandle0).when(codeExceptionGen1).getHandlerPC();
      doReturn(instructionHandle0).when(codeExceptionGen1).getStartPC();
      codeExceptionGenArray0[1] = codeExceptionGen1;
      CodeExceptionGen codeExceptionGen2 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle0).when(codeExceptionGen2).getEndPC();
      doReturn(instructionHandle0).when(codeExceptionGen2).getHandlerPC();
      doReturn(instructionHandle0).when(codeExceptionGen2).getStartPC();
      codeExceptionGenArray0[2] = codeExceptionGen2;
      CodeExceptionGen codeExceptionGen3 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle0).when(codeExceptionGen3).getEndPC();
      doReturn(instructionHandle0).when(codeExceptionGen3).getHandlerPC();
      doReturn(instructionHandle0).when(codeExceptionGen3).getStartPC();
      codeExceptionGenArray0[3] = codeExceptionGen3;
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      CodeExceptionGen codeExceptionGen4 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(codeExceptionGen4.equals((Object)codeExceptionGen3));
      assertFalse(codeExceptionGen4.equals((Object)codeExceptionGen0));
      assertFalse(codeExceptionGen4.equals((Object)codeExceptionGen1));
      assertFalse(codeExceptionGen4.equals((Object)codeExceptionGen2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertNotNull(codeExceptionGen4);
      
      codeExceptionGenArray0[4] = codeExceptionGen4;
      CodeExceptionGen codeExceptionGen5 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle0).when(codeExceptionGen5).getEndPC();
      doReturn(instructionHandle0).when(codeExceptionGen5).getHandlerPC();
      doReturn(instructionHandle0).when(codeExceptionGen5).getStartPC();
      codeExceptionGenArray0[5] = codeExceptionGen5;
      CodeExceptionGen codeExceptionGen6 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle0).when(codeExceptionGen6).getEndPC();
      doReturn(instructionHandle0).when(codeExceptionGen6).getHandlerPC();
      doReturn(instructionHandle0).when(codeExceptionGen6).getStartPC();
      codeExceptionGenArray0[6] = codeExceptionGen6;
      CodeExceptionGen codeExceptionGen7 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle0).when(codeExceptionGen7).getEndPC();
      doReturn(instructionHandle0).when(codeExceptionGen7).getHandlerPC();
      doReturn(instructionHandle0).when(codeExceptionGen7).getStartPC();
      codeExceptionGenArray0[7] = codeExceptionGen7;
      instructionList0.redirectExceptionHandlers(codeExceptionGenArray0, instructionHandle0, instructionHandle0);
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(8, codeExceptionGenArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertNotNull(iF_ACMPEQ0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ACMPEQ0);
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      boolean boolean2 = true;
      instructionList0.setPositions(boolean2);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(boolean2 == boolean0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertNotSame(instructionList0, instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList1);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(3, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle0, instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = null;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-95);
      byteArray0[1] = byteArray0[0];
      byte byte2 = (byte)0;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)33;
      byteArray0[6] = byte6;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(7, byteArray0.length);
      
      int int0 = 1;
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(int0);
      assertEquals(1, iNVOKESPECIAL0.getIndex());
      assertEquals(3, iNVOKESPECIAL0.getLength());
      assertEquals("invokespecial", iNVOKESPECIAL0.getName());
      assertEquals((short)183, iNVOKESPECIAL0.getOpcode());
      assertNotNull(iNVOKESPECIAL0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iNVOKESPECIAL0);
      assertEquals(1, iNVOKESPECIAL0.getIndex());
      assertEquals(3, iNVOKESPECIAL0.getLength());
      assertEquals("invokespecial", iNVOKESPECIAL0.getName());
      assertEquals((short)183, iNVOKESPECIAL0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      assertEquals(1, iNVOKESPECIAL0.getIndex());
      assertEquals(3, iNVOKESPECIAL0.getLength());
      assertEquals("invokespecial", iNVOKESPECIAL0.getName());
      assertEquals((short)183, iNVOKESPECIAL0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFEQ0.getIndex());
      assertEquals(3, iFEQ0.getLength());
      assertEquals("ifeq", iFEQ0.getName());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertNotNull(iFEQ0);
      
      short short0 = (short)3;
      iFEQ0.setOpcode(short0);
      assertEquals(1, iNVOKESPECIAL0.getIndex());
      assertEquals(3, iNVOKESPECIAL0.getLength());
      assertEquals("invokespecial", iNVOKESPECIAL0.getName());
      assertEquals((short)183, iNVOKESPECIAL0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)3, iFEQ0.getOpcode());
      assertEquals(0, iFEQ0.getIndex());
      assertEquals("iconst_0", iFEQ0.getName());
      assertEquals(3, iFEQ0.getLength());
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFEQ0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertEquals(1, iNVOKESPECIAL0.getIndex());
      assertEquals(3, iNVOKESPECIAL0.getLength());
      assertEquals("invokespecial", iNVOKESPECIAL0.getName());
      assertEquals((short)183, iNVOKESPECIAL0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)3, iFEQ0.getOpcode());
      assertEquals(0, iFEQ0.getIndex());
      assertEquals("iconst_0", iFEQ0.getName());
      assertEquals(3, iFEQ0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertNotNull(branchHandle0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        instructionList0.setPositions(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Branch target of iconst_0:invokespecial[183](3) 1 not in instruction list
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      PUSH pUSH0 = new PUSH(constantPoolGen0, double0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      assertEquals("bastore", bASTORE0.getName());
      assertEquals((short)84, bASTORE0.getOpcode());
      assertEquals(1, bASTORE0.getLength());
      assertNotNull(bASTORE0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) bASTORE0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals("bastore", bASTORE0.getName());
      assertEquals((short)84, bASTORE0.getOpcode());
      assertEquals(1, bASTORE0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList1.append(instructionHandle0, (Instruction) bASTORE0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals("bastore", bASTORE0.getName());
      assertEquals((short)84, bASTORE0.getOpcode());
      assertEquals(1, bASTORE0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[8];
      LSHL lSHL0 = (LSHL)InstructionConstants.LSHL;
      assertEquals(1, lSHL0.getLength());
      assertEquals("lshl", lSHL0.getName());
      assertEquals((short)121, lSHL0.getOpcode());
      assertNotNull(lSHL0);
      
      InstructionHandle instructionHandle2 = instructionList1.append((Instruction) bASTORE0, (Instruction) lSHL0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(3, instructionList1.size());
      assertEquals(3, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals("bastore", bASTORE0.getName());
      assertEquals((short)84, bASTORE0.getOpcode());
      assertEquals(1, bASTORE0.getLength());
      assertEquals(1, lSHL0.getLength());
      assertEquals("lshl", lSHL0.getName());
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionHandle2, instructionHandle0);
      
      CodeExceptionGen codeExceptionGen0 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle2).when(codeExceptionGen0).getEndPC();
      doReturn(instructionHandle2).when(codeExceptionGen0).getHandlerPC();
      doReturn(instructionHandle1).when(codeExceptionGen0).getStartPC();
      codeExceptionGenArray0[0] = codeExceptionGen0;
      InstructionHandle instructionHandle3 = instructionList1.append(instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle2));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(5, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(5, instructionList1.getLength());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((-1), instructionHandle3.getPosition());
      assertNotNull(instructionHandle3);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle3, instructionHandle2);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionHandle3, instructionHandle0);
      
      CodeExceptionGen codeExceptionGen1 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle3).when(codeExceptionGen1).getEndPC();
      doReturn(instructionHandle2).when(codeExceptionGen1).getHandlerPC();
      doReturn(instructionHandle0).when(codeExceptionGen1).getStartPC();
      codeExceptionGenArray0[1] = codeExceptionGen1;
      CodeExceptionGen codeExceptionGen2 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle3).when(codeExceptionGen2).getEndPC();
      doReturn(instructionHandle3).when(codeExceptionGen2).getHandlerPC();
      doReturn(instructionHandle1).when(codeExceptionGen2).getStartPC();
      codeExceptionGenArray0[2] = codeExceptionGen2;
      CodeExceptionGen codeExceptionGen3 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle0).when(codeExceptionGen3).getEndPC();
      doReturn(instructionHandle1).when(codeExceptionGen3).getHandlerPC();
      doReturn(instructionHandle1).when(codeExceptionGen3).getStartPC();
      codeExceptionGenArray0[3] = codeExceptionGen3;
      CodeExceptionGen codeExceptionGen4 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle3).when(codeExceptionGen4).getEndPC();
      doReturn(instructionHandle2).when(codeExceptionGen4).getHandlerPC();
      doReturn(instructionHandle1).when(codeExceptionGen4).getStartPC();
      codeExceptionGenArray0[4] = codeExceptionGen4;
      CodeExceptionGen codeExceptionGen5 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle1).when(codeExceptionGen5).getEndPC();
      doReturn(instructionHandle3).when(codeExceptionGen5).getHandlerPC();
      doReturn(instructionHandle2).when(codeExceptionGen5).getStartPC();
      codeExceptionGenArray0[5] = codeExceptionGen5;
      CodeExceptionGen codeExceptionGen6 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle2).when(codeExceptionGen6).getEndPC();
      doReturn(instructionHandle2).when(codeExceptionGen6).getHandlerPC();
      doReturn(instructionHandle1).when(codeExceptionGen6).getStartPC();
      codeExceptionGenArray0[6] = codeExceptionGen6;
      CodeExceptionGen codeExceptionGen7 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn(instructionHandle2).when(codeExceptionGen7).getEndPC();
      doReturn(instructionHandle3).when(codeExceptionGen7).getHandlerPC();
      doReturn(instructionHandle3).when(codeExceptionGen7).getStartPC();
      codeExceptionGenArray0[7] = codeExceptionGen7;
      instructionList1.redirectExceptionHandlers(codeExceptionGenArray0, instructionHandle0, instructionHandle0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle0.equals((Object)instructionHandle2));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(5, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(5, instructionList1.getLength());
      assertEquals("bastore", bASTORE0.getName());
      assertEquals((short)84, bASTORE0.getOpcode());
      assertEquals(1, bASTORE0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(8, codeExceptionGenArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle0, instructionHandle2);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstructionHandle instructionHandle0 = null;
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE(instructionHandle0);
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertNotNull(iF_ICMPNE0);
      
      IfInstruction ifInstruction0 = iF_ICMPNE0.negate();
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)159, ifInstruction0.getOpcode());
      assertEquals("if_icmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertNotNull(ifInstruction0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)159, ifInstruction0.getOpcode());
      assertEquals("if_icmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn(instructionList0).when(compoundInstruction0).getInstructionList();
      InstructionHandle instructionHandle1 = instructionList0.append(compoundInstruction0);
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)159, ifInstruction0.getOpcode());
      assertEquals("if_icmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SWAP sWAP0 = new SWAP();
      assertEquals(1, sWAP0.getLength());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertNotNull(sWAP0);
      
      InstructionList instructionList0 = new InstructionList(sWAP0);
      assertEquals(1, sWAP0.getLength());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[7];
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals(1, sWAP0.getLength());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      String string0 = "/vL";
      ObjectType objectType0 = new ObjectType(string0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L/vL;", objectType0.getSignature());
      assertEquals(".vL", objectType0.getClassName());
      assertNotNull(objectType0);
      
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      assertEquals(1, sWAP0.getLength());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L/vL;", objectType0.getSignature());
      assertEquals(".vL", objectType0.getClassName());
      assertNotNull(codeExceptionGen0);
      
      codeExceptionGenArray0[1] = codeExceptionGen0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = true;
      PUSH pUSH0 = new PUSH(constantPoolGen0, string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle1 = instructionList0.append((Instruction) sWAP0, (CompoundInstruction) pUSH0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(1, sWAP0.getLength());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      SWAP sWAP1 = null;
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) sWAP0, (Instruction) sWAP1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction null is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DUP_X1 dUP_X1_0 = (DUP_X1)InstructionConstants.DUP_X1;
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertEquals(1, dUP_X1_0.getLength());
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertNotNull(dUP_X1_0);
      
      InstructionList instructionList0 = new InstructionList(dUP_X1_0);
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertEquals(1, dUP_X1_0.getLength());
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn(instructionList0).when(compoundInstruction0).getInstructionList();
      InstructionList instructionList1 = new InstructionList(compoundInstruction0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertEquals(1, dUP_X1_0.getLength());
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      assertEquals((short)86, sASTORE0.getOpcode());
      assertEquals(1, sASTORE0.getLength());
      assertEquals("sastore", sASTORE0.getName());
      assertNotNull(sASTORE0);
      
      BIPUSH bIPUSH0 = new BIPUSH();
      assertEquals((short) (-1), bIPUSH0.getOpcode());
      assertEquals(1, bIPUSH0.getLength());
      assertNotNull(bIPUSH0);
      
      CompoundInstruction compoundInstruction1 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionList) null).when(compoundInstruction1).getInstructionList();
      // Undeclared exception!
      try { 
        instructionList1.append((Instruction) bIPUSH0, compoundInstruction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SWAP sWAP0 = new SWAP();
      assertEquals(1, sWAP0.getLength());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertNotNull(sWAP0);
      
      InstructionList instructionList0 = new InstructionList(sWAP0);
      assertEquals(1, sWAP0.getLength());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[7];
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals(1, sWAP0.getLength());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      String string0 = "/vL";
      ObjectType objectType0 = Type.CLASS;
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      assertEquals(1, sWAP0.getLength());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertNotNull(codeExceptionGen0);
      
      codeExceptionGenArray0[1] = codeExceptionGen0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = false;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList0);
      assertEquals(1, sWAP0.getLength());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) sWAP0, (Instruction) sWAP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction swap[95](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(1, byteArray0.length);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      Iterator<InstructionHandle> iterator0 = instructionList1.iterator();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertNotNull(iterator0);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.removeObserver(instructionListObserver0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      boolean boolean0 = true;
      String string0 = instructionList1.toString(boolean0);
      assertEquals("  -1: nop[0](1)\n", string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, instructionArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList0.findHandle((int) byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ();
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertNotNull(iF_ICMPEQ0);
      
      IfInstruction ifInstruction0 = iF_ICMPEQ0.negate();
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmpne", ifInstruction0.getName());
      assertEquals((short)160, ifInstruction0.getOpcode());
      assertNotNull(ifInstruction0);
      
      instructionHandle0.addTargeter(ifInstruction0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmpne", ifInstruction0.getName());
      assertEquals((short)160, ifInstruction0.getOpcode());
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      Constant[] constantArray0 = new Constant[8];
      int int0 = (-254);
      int int1 = (-152);
      int int2 = (-3272);
      ConstantString constantString0 = new ConstantString(int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((-3272), constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      constantArray0[2] = (Constant) constantString0;
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNotNull(uRI0);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      instructionHandleArray0[0] = instructionHandle0;
      instructionHandleArray0[1] = instructionHandle1;
      instructionHandleArray0[2] = instructionHandle0;
      instructionHandleArray0[3] = instructionHandle0;
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionList) null).when(compoundInstruction0).getInstructionList();
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandleArray0[0], compoundInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LSTORE lSTORE0 = new LSTORE();
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertNotNull(lSTORE0);
      
      InstructionList instructionList0 = new InstructionList(lSTORE0);
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      boolean boolean0 = false;
      instructionList0.setPositions(boolean0);
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      byte byte0 = (byte) (-3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte1 = (byte) (-104);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byte byte2 = (byte) (-21);
      byte byte3 = (byte)122;
      EvoSuiteFile evoSuiteFile0 = null;
      instructionList0.delete((Instruction) lSTORE0, (Instruction) lSTORE0);
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lSTORE0);
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((Instruction) lSTORE0, (Instruction) lSTORE0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      byte byte4 = Constants.ATTR_ANNOTATION_DEFAULT;
      assertEquals((byte)16, byte4);
      assertFalse(byte4 == byte1);
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte3);
      assertFalse(byte4 == byte0);
      
      instructionList0.delete(instructionHandle1, instructionHandle0);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn(instructionList0).when(compoundInstruction0).getInstructionList();
      InstructionHandle instructionHandle2 = instructionList0.append(compoundInstruction0);
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNull(instructionHandle2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      char char0 = 'y';
      Character character0 = new Character(char0);
      assertEquals('y', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle0 = instructionList1.append((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(character0.equals((Object)char0));
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle1, instructionHandle0);
      
      boolean boolean0 = true;
      instructionList1.setPositions(boolean0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      int int0 = instructionList0.size();
      assertEquals(1, int0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotSame(instructionList0, instructionList1);
      
      instructionList1.update();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle2 = instructionList1.append((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(character0.equals((Object)char0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionHandle2, instructionHandle0);
      
      PUSH pUSH1 = new PUSH(constantPoolGen0, (float) int0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(pUSH1.equals((Object)pUSH0));
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH1);
      
      // Undeclared exception!
      try { 
        instructionList1.move(instructionHandle2, instructionHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid range: From   -1: bipush[16](2) 121 to   -1: bipush[16](2) 121 contains target   -1: bipush[16](2) 121
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertNotNull(iF_ICMPLT0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPLT0);
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionList) null).when(compoundInstruction0).getInstructionList();
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle0, compoundInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Inserting null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(8, byteArray0.length);
      
      boolean boolean0 = false;
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionList) null).when(compoundInstruction0).getInstructionList();
      // Undeclared exception!
      try { 
        instructionList0.insert(compoundInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Inserting null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-95);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)33;
      byteArray0[6] = byte6;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertEquals(5, instructionList0.size());
      assertEquals(5, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(7, byteArray0.length);
      
      InstructionList instructionList1 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(5, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(5, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertEquals(7, byteArray0.length);
      
      DASTORE dASTORE0 = (DASTORE)InstructionConstants.DASTORE;
      assertEquals("dastore", dASTORE0.getName());
      assertEquals(1, dASTORE0.getLength());
      assertEquals((short)82, dASTORE0.getOpcode());
      assertNotNull(dASTORE0);
      
      InstructionHandle instructionHandle0 = instructionList1.insert((Instruction) dASTORE0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals("dastore", dASTORE0.getName());
      assertEquals(1, dASTORE0.getLength());
      assertEquals((short)82, dASTORE0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(6, instructionList1.size());
      assertEquals(6, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionHandle0);
      assertEquals(7, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      
      INEG iNEG0 = new INEG();
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals("ineg", iNEG0.getName());
      assertEquals(1, iNEG0.getLength());
      assertNotNull(iNEG0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) iNEG0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals("dastore", dASTORE0.getName());
      assertEquals(1, dASTORE0.getLength());
      assertEquals((short)82, dASTORE0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals("ineg", iNEG0.getName());
      assertEquals(1, iNEG0.getLength());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList1.size());
      assertEquals(6, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionHandle1);
      assertEquals(7, byteArray0.length);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionHandle1, (Instruction) dASTORE0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals("dastore", dASTORE0.getName());
      assertEquals(1, dASTORE0.getLength());
      assertEquals((short)82, dASTORE0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals("ineg", iNEG0.getName());
      assertEquals(1, iNEG0.getLength());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertEquals(6, instructionList1.size());
      assertEquals(6, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionHandle2);
      assertEquals(7, byteArray0.length);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle2);
      assertNotSame(instructionHandle1, instructionHandle2);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        instructionList0.setPositions(boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LDC lDC0 = new LDC();
      assertEquals(0, lDC0.getIndex());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertNotNull(lDC0);
      
      short short0 = (short)208;
      int int0 = 7;
      Instruction instruction0 = null;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) short0;
      intArray0[1] = int0;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = (-278L);
      int int1 = constantPoolGen0.addLong(long0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(3, constantPoolGen0.getSize());
      
      int int2 = (-1284);
      PUSH pUSH0 = new PUSH(constantPoolGen0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      ConstantPoolGen constantPoolGen1 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      char char0 = 'O';
      Character character0 = new Character(char0);
      assertEquals('O', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      PUSH pUSH1 = new PUSH(constantPoolGen1, character0);
      assertFalse(pUSH1.equals((Object)pUSH0));
      assertTrue(character0.equals((Object)char0));
      assertNotNull(pUSH1);
      
      char char1 = Character.highSurrogate(short0);
      assertEquals('\uD7C0', char1);
      assertFalse(char1 == char0);
      
      InstructionList instructionList0 = pUSH1.getInstructionList();
      assertFalse(pUSH1.equals((Object)pUSH0));
      assertFalse(char0 == char1);
      assertFalse(character0.equals((Object)char1));
      assertTrue(character0.equals((Object)char0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertNotSame(pUSH1, pUSH0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) lDC0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = (-2917);
      intArray0[0] = int0;
      int int1 = 255;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 2304;
      intArray0[4] = int4;
      int int5 = (-2830);
      intArray0[5] = int5;
      int int6 = 169;
      intArray0[6] = int6;
      int int7 = 132;
      intArray0[7] = int7;
      int int8 = 168;
      intArray0[8] = int8;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertNotNull(iFNONNULL0);
      
      IfInstruction ifInstruction0 = iFNONNULL0.negate();
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("ifnull", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertNotNull(ifInstruction0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("ifnull", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      ifInstruction0.updateTarget(instructionHandle0, instructionHandle0);
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("ifnull", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn(instructionList0).when(compoundInstruction0).getInstructionList();
      InstructionHandle instructionHandle1 = instructionList0.append((Instruction) ifInstruction0, compoundInstruction0);
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("ifnull", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      LDC lDC0 = new LDC();
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertNotNull(lDC0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDC0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(0, byteArray0.length);
      
      instructionList0.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, byteArray0.length);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertNotNull(iF_ICMPGE0);
      assertEquals(0, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      assertEquals(0, byteArray0.length);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      BranchHandle branchHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertNotNull(branchHandle1);
      assertEquals(0, byteArray0.length);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      
      instructionHandleArray0[0] = (InstructionHandle) branchHandle1;
      instructionHandleArray0[1] = (InstructionHandle) branchHandle0;
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 2367;
      intArray0[2] = int2;
      int int3 = 2522;
      // Undeclared exception!
      try { 
        instructionList0.getInstructions();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      FCONST fCONST0 = (FCONST)InstructionConstants.FCONST_2;
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals("fconst_2", fCONST0.getName());
      assertNotNull(fCONST0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(fCONST0);
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IFLT iFLT0 = new IFLT(instructionHandle0);
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals("fconst_2", fCONST0.getName());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short)155, iFLT0.getOpcode());
      assertEquals(3, iFLT0.getLength());
      assertEquals("iflt", iFLT0.getName());
      assertNotNull(iFLT0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle2 = instructionList0.append(instructionHandle1, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertNull(instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      // Undeclared exception!
      try { 
        instructionList1.move(instructionHandle1, instructionHandle1, instructionHandle1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From null to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(8, byteArray0.length);
      
      boolean boolean0 = false;
      String string0 = instructionList0.toString(boolean0);
      assertEquals("   0: nop\n   1: nop\n   2: nop\n   3: nop\n   4: nop\n   5: nop\n   6: nop\n   7: nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertNotNull(string0);
      assertEquals(8, byteArray0.length);
      
      ILOAD iLOAD0 = new ILOAD();
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iLOAD0);
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList1.insert(instructionHandle0, (Instruction) iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      boolean boolean1 = instructionList1.contains(instructionHandle0);
      assertTrue(boolean1);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(boolean1 == boolean0);
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertNotNull(iF_ACMPEQ0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ACMPEQ0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      instructionList0.redirectBranches(instructionHandle0, branchHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(8, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionList) null).when(compoundInstruction0).getInstructionList();
      // Undeclared exception!
      try { 
        instructionList0.append(compoundInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      String string0 = "";
      PUSH pUSH0 = new PUSH(constantPoolGen0, string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      int int0 = 1471;
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertNotNull(iF_ACMPEQ0);
      
      instructionList0.replaceConstantPool(constantPoolGen0, constantPoolGen0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      LDC lDC0 = new LDC();
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, lDC0.getLength());
      assertNotNull(lDC0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDC0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, lDC0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertEquals(0, byteArray0.length);
      
      instructionList0.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, lDC0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, byteArray0.length);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, lDC0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertNotNull(iF_ICMPGE0);
      assertEquals(0, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, lDC0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      assertEquals(0, byteArray0.length);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      BranchHandle branchHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, lDC0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertNotNull(branchHandle1);
      assertEquals(0, byteArray0.length);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      
      instructionHandleArray0[0] = (InstructionHandle) branchHandle1;
      instructionHandleArray0[1] = (InstructionHandle) branchHandle0;
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 2367;
      intArray0[2] = int2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        instructionList0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = null;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-95);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)33;
      byteArray0[6] = byte6;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertEquals(5, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertEquals(7, byteArray0.length);
      
      RET rET0 = new RET(byteArray0[5]);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertEquals(0, rET0.getIndex());
      assertEquals("ret", rET0.getName());
      assertEquals(2, rET0.getLength());
      assertEquals((short)169, rET0.getOpcode());
      assertNotNull(rET0);
      assertEquals(7, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) rET0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.getLength());
      assertEquals(0, rET0.getIndex());
      assertEquals("ret", rET0.getName());
      assertEquals(2, rET0.getLength());
      assertEquals((short)169, rET0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = true;
      instructionList0.setPositions(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.getLength());
      assertEquals(7, byteArray0.length);
      
      CompoundInstruction compoundInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) rET0, compoundInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      LDC lDC0 = new LDC();
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertNotNull(lDC0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDC0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertEquals(0, byteArray0.length);
      
      instructionList0.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, byteArray0.length);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertNotNull(iF_ICMPGE0);
      assertEquals(0, byteArray0.length);
      
      int int0 = 1;
      iF_ICMPGE0.position = int0;
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(1, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      assertEquals(0, byteArray0.length);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      BranchHandle branchHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(1, branchHandle0.getPosition());
      assertEquals(1, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertNotNull(branchHandle1);
      assertEquals(0, byteArray0.length);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      
      instructionHandleArray0[0] = (InstructionHandle) branchHandle1;
      instructionHandleArray0[1] = (InstructionHandle) branchHandle0;
      int[] intArray0 = new int[3];
      int int1 = 0;
      intArray0[0] = int1;
      int int2 = 0;
      intArray0[1] = int2;
      int int3 = 2367;
      intArray0[2] = int3;
      int int4 = 2522;
      // Undeclared exception!
      try { 
        InstructionList.findHandle(instructionHandleArray0, intArray0, int4, int4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1260
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(8, byteArray0.length);
      
      boolean boolean0 = false;
      String string0 = instructionList0.toString(boolean0);
      assertEquals("   0: nop\n   1: nop\n   2: nop\n   3: nop\n   4: nop\n   5: nop\n   6: nop\n   7: nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(string0);
      assertEquals(8, byteArray0.length);
      
      instructionList0.setPositions();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, byteArray0.length);
      
      ILOAD iLOAD0 = new ILOAD();
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iLOAD0);
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList1.insert(instructionHandle0, (Instruction) iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      boolean boolean1 = instructionList1.contains(instructionHandle0);
      assertTrue(boolean1);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertNotNull(iF_ACMPEQ0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ACMPEQ0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      instructionList0.redirectBranches(instructionHandle0, branchHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(8, instructionList0.getLength());
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(8, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      // Undeclared exception!
      try { 
        instructionList1.append(instructionList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      LDC lDC0 = new LDC();
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertNotNull(lDC0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDC0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertEquals(0, byteArray0.length);
      
      instructionList0.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, byteArray0.length);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertNotNull(iF_ICMPGE0);
      assertEquals(0, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      assertEquals(0, byteArray0.length);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      BranchHandle branchHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertNotNull(branchHandle1);
      assertEquals(0, byteArray0.length);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      
      instructionHandleArray0[0] = (InstructionHandle) branchHandle1;
      instructionHandleArray0[1] = (InstructionHandle) branchHandle0;
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 2367;
      intArray0[2] = int2;
      InstructionHandle instructionHandle1 = InstructionList.findHandle(instructionHandleArray0, intArray0, intArray0[0], intArray0[0]);
      assertArrayEquals(new int[] {0, 0, 2367}, intArray0);
      assertFalse(instructionHandle1.equals((Object)branchHandle0));
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertEquals(2, instructionHandleArray0.length);
      assertEquals(3, intArray0.length);
      assertSame(instructionHandle1, branchHandle1);
      assertNotSame(instructionHandle1, branchHandle0);
      
      instructionList0.update();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LDC lDC0 = new LDC();
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertNotNull(lDC0);
      
      IFGE iFGE0 = new IFGE();
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertNotNull(iFGE0);
      
      short short0 = (short)208;
      iFGE0.length = short0;
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGE0);
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      int int0 = 7;
      Instruction instruction0 = null;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) short0;
      intArray0[1] = int0;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int1 = (-1284);
      PUSH pUSH0 = new PUSH(constantPoolGen0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList1 = new InstructionList(pUSH0);
      assertFalse(int1 == int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      BranchHandle branchHandle0 = instructionList1.append((BranchInstruction) iFGE0);
      assertFalse(int1 == int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      assertNotSame(instructionList1, instructionList0);
      
      // Undeclared exception!
      try { 
        instructionList1.move((InstructionHandle) branchHandle0, (InstructionHandle) branchHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[7];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = false;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      String string0 = pUSH0.toString();
      assertEquals("iconst_0[3](1) (PUSH)", string0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(string0);
      
      float float0 = 2.0F;
      FCONST fCONST0 = new FCONST(float0);
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertNotNull(fCONST0);
      
      IFNE iFNE0 = new IFNE();
      assertEquals(1, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short) (-1), iFNE0.getOpcode());
      assertNotNull(iFNE0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iFNE0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short) (-1), iFNE0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      instructionHandleArray0[2] = (InstructionHandle) branchHandle0;
      InstructionList instructionList1 = new InstructionList(fCONST0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionList instructionList2 = pUSH0.getInstructionList();
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList2.isEmpty());
      assertEquals(1, instructionList2.getLength());
      assertEquals(1, instructionList2.size());
      assertNotNull(instructionList2);
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iFNE0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals(1, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short) (-1), iFNE0.getOpcode());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionList1, instructionList0);
      
      instructionHandleArray0[3] = instructionHandle0;
      instructionList0.delete((Instruction) fCONST0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList0, instructionList2);
      
      // Undeclared exception!
      try { 
        instructionList1.insert(instructionHandleArray0[0], (CompoundInstruction) pUSH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SWAP sWAP0 = new SWAP();
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertNotNull(sWAP0);
      
      InstructionList instructionList0 = new InstructionList(sWAP0);
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[7];
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      String string0 = "/vL";
      ObjectType objectType0 = new ObjectType(string0);
      assertEquals("L/vL;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(".vL", objectType0.getClassName());
      assertNotNull(objectType0);
      
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("L/vL;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(".vL", objectType0.getClassName());
      assertNotNull(codeExceptionGen0);
      
      codeExceptionGenArray0[1] = codeExceptionGen0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = true;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      try { 
        instructionList0.delete((Instruction) sWAP0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // {   -1: swap[95](1) }
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SWAP sWAP0 = new SWAP();
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertNotNull(sWAP0);
      
      InstructionList instructionList0 = new InstructionList(sWAP0);
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[7];
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      String string0 = "/vL";
      ObjectType objectType0 = new ObjectType(string0);
      assertEquals(".vL", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L/vL;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(".vL", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L/vL;", objectType0.getSignature());
      assertNotNull(codeExceptionGen0);
      
      codeExceptionGenArray0[1] = codeExceptionGen0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = true;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle1 = instructionList0.getStart();
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      
      try { 
        instructionList0.delete((Instruction) sWAP0, (Instruction) sWAP0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // {   -1: swap[95](1) }
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-106);
      byteArray0[3] = byte3;
      byte byte4 = (byte)106;
      byteArray0[4] = byte4;
      byte byte5 = (byte)59;
      byteArray0[5] = byte5;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) iLOAD0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionList instructionList1 = new InstructionList(iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(instructionList1);
      
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle1.getTargeters();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(instructionTargeterArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, instructionTargeterArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      IFNE iFNE0 = new IFNE(instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(0, iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertNotNull(iFNE0);
      assertEquals(6, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(branchHandle0);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      try { 
        instructionList1.delete(instructionHandle0, instructionHandle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // {    5: istore_0[59](1) }
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LDC lDC0 = new LDC();
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertNotNull(lDC0);
      
      IFGE iFGE0 = new IFGE();
      assertEquals(1, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertNotNull(iFGE0);
      
      short short0 = (short)208;
      iFGE0.length = short0;
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGE0);
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      int int0 = 7;
      Instruction instruction0 = null;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) short0;
      intArray0[1] = int0;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int1 = (-1284);
      PUSH pUSH0 = new PUSH(constantPoolGen0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList1 = new InstructionList(pUSH0);
      assertFalse(int1 == int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      InstructionList instructionList2 = pUSH0.getInstructionList();
      assertFalse(int1 == int0);
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList2.isEmpty());
      assertEquals(1, instructionList2.getLength());
      assertEquals(1, instructionList2.size());
      assertNotNull(instructionList2);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionList2, instructionList0);
      
      BranchHandle branchHandle0 = instructionList1.append((BranchInstruction) iFGE0);
      assertFalse(int1 == int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(branchHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      
      BranchHandle branchHandle1 = instructionList1.append((InstructionHandle) branchHandle0, (BranchInstruction) iFGE0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(int1 == int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(3, instructionList1.size());
      assertEquals(3, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(branchHandle1);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      
      InstructionHandle instructionHandle0 = instructionList0.append((InstructionHandle) branchHandle1, (CompoundInstruction) pUSH0);
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(int1 == int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(3, instructionList1.size());
      assertEquals(3, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionHandle0);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      
      InstructionHandle instructionHandle1 = branchHandle0.setPrev(instructionHandle0);
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(int1 == int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals(208, iFGE0.getLength());
      assertEquals(0, iFGE0.getIndex());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(3, instructionList1.size());
      assertEquals(3, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionHandle1);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      
      String string0 = "";
      String string1 = "";
      int int2 = constantPoolGen0.lookupMethodref(string0, string0, string1);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, constantPoolGen0.getSize());
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      instructionHandleArray0[0] = instructionHandle0;
      // Undeclared exception!
      instructionList0.append(instruction0, instructionList1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      LDC lDC0 = new LDC();
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertNotNull(lDC0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDC0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(0, byteArray0.length);
      
      instructionList0.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, byteArray0.length);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertNotNull(iF_ICMPGE0);
      assertEquals(0, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      assertEquals(0, byteArray0.length);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      BranchHandle branchHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertNotNull(branchHandle1);
      assertEquals(0, byteArray0.length);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      
      instructionHandleArray0[0] = (InstructionHandle) branchHandle1;
      instructionHandleArray0[1] = (InstructionHandle) branchHandle0;
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 2367;
      String string0 = branchHandle1.toString();
      assertEquals("  -1: if_icmpge[162](3) -> <null instruction!!!?>", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      
      intArray0[2] = int2;
      int int3 = 2522;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        instructionList0.toString(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-106);
      byteArray0[3] = byte3;
      byte byte4 = (byte)106;
      byteArray0[4] = byte4;
      byte byte5 = (byte)59;
      byteArray0[5] = byte5;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) iLOAD0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionList instructionList1 = new InstructionList(iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(instructionList1);
      
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle1.getTargeters();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(instructionTargeterArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, instructionTargeterArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      instructionList1.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(instructionHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      
      int[] intArray0 = instructionList1.getInstructionPositions();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNull(intArray0);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray1 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = false;
      String string0 = instructionHandle2.toString(boolean0);
      assertEquals("  -1: iload_2", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      
      String string1 = instructionHandle2.toString();
      assertEquals("  -1: iload_2[28](1)", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(string1, string0);
      assertNotSame(instructionList0, instructionList1);
      
      byte[] byteArray2 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      int int0 = 1644;
      InstructionHandle instructionHandle3 = new InstructionHandle(iLOAD0);
      assertFalse(instructionHandle3.equals((Object)instructionHandle2));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((-1), instructionHandle3.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(instructionHandle3);
      
      InstructionHandle instructionHandle4 = null;
      instructionList1.redirectBranches(instructionHandle3, instructionHandle4);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle2));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((-1), instructionHandle3.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle3, instructionHandle2);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionHandle3, instructionHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.dispose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SWAP sWAP0 = new SWAP();
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals("swap", sWAP0.getName());
      assertNotNull(sWAP0);
      
      InstructionList instructionList0 = new InstructionList(sWAP0);
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      Spliterator<InstructionHandle> spliterator0 = instructionList0.spliterator();
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(spliterator0);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[24];
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      String string0 = "/vL";
      ObjectType objectType0 = new ObjectType(string0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(".vL", objectType0.getClassName());
      assertEquals("L/vL;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(".vL", objectType0.getClassName());
      assertEquals("L/vL;", objectType0.getSignature());
      assertNotNull(codeExceptionGen0);
      
      codeExceptionGenArray0[1] = codeExceptionGen0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = true;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle1 = instructionList0.append((Instruction) sWAP0, (CompoundInstruction) pUSH0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals("swap", sWAP0.getName());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      InstructionHandle instructionHandle2 = instructionList0.append(instructionHandle1, (Instruction) sWAP0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals("swap", sWAP0.getName());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle2);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertNotSame(instructionHandle2, instructionHandle1);
      
      try { 
        instructionList0.delete((Instruction) sWAP0, (Instruction) sWAP0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // {   -1: swap[95](1) }
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      boolean boolean0 = false;
      String string0 = instructionList0.toString(boolean0);
      assertEquals("", string0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(string0);
      
      ICONST iCONST0 = (ICONST)InstructionConstants.ICONST_M1;
      assertEquals("iconst_m1", iCONST0.getName());
      assertEquals((short)2, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertNotNull(iCONST0);
      
      InstructionHandle instructionHandle0 = null;
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList1 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      assertEquals(0, byteArray0.length);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertNull(instructionHandle1);
      assertEquals(0, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle1, (Instruction) iCONST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = false;
      String string0 = instructionList0.toString(boolean0);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      
      ILOAD iLOAD0 = new ILOAD();
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iLOAD0);
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertEquals(0, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle1 = instructionList1.insert(instructionHandle0, (Instruction) iLOAD0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertEquals(0, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      // Undeclared exception!
      try { 
        instructionList1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-106);
      byteArray0[3] = byte3;
      byte byte4 = (byte)106;
      byteArray0[4] = byte4;
      byte byte5 = (byte)59;
      byteArray0[5] = byte5;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) iLOAD0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionList instructionList1 = new InstructionList(iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(instructionList1);
      
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle1.getTargeters();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(instructionTargeterArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, instructionTargeterArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      IFNE iFNE0 = new IFNE(instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(iFNE0);
      assertEquals(6, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(branchHandle0);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      instructionList1.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.append((InstructionHandle) branchHandle0, instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(instructionHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle0, instructionHandle2);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle3 = instructionList0.insert(instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals((-1), instructionHandle3.getPosition());
      assertTrue(instructionHandle3.hasTargeters());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(instructionHandle3);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      
      int[] intArray0 = instructionList1.getInstructionPositions();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertNull(intArray0);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray1 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = false;
      String string0 = instructionHandle3.toString(boolean0);
      assertEquals("  -1: iload_2", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals((-1), instructionHandle3.getPosition());
      assertTrue(instructionHandle3.hasTargeters());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      
      String string1 = instructionHandle3.toString();
      assertEquals("  -1: iload_2[28](1)", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals((-1), instructionHandle3.getPosition());
      assertTrue(instructionHandle3.hasTargeters());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertSame(instructionHandle3, instructionHandle1);
      assertNotSame(string1, string0);
      assertNotSame(instructionList0, instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList0.append((BranchInstruction) iFNE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertEquals(8, byteArray0.length);
      
      boolean boolean0 = false;
      String string0 = instructionList0.toString(boolean0);
      assertEquals("   0: nop\n   1: nop\n   2: nop\n   3: nop\n   4: nop\n   5: nop\n   6: nop\n   7: nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.getLength());
      assertNotNull(string0);
      assertEquals(8, byteArray0.length);
      
      ILOAD iLOAD0 = new ILOAD();
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iLOAD0);
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList1.insert(instructionHandle0, (Instruction) iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = instructionList1.contains(instructionHandle0);
      assertTrue(boolean2);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertNotNull(iF_ACMPEQ0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ACMPEQ0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      instructionList0.redirectBranches(instructionHandle0, branchHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(8, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.getLength());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(8, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      // Undeclared exception!
      try { 
        instructionList1.move(instructionHandle1, (InstructionHandle) branchHandle0, (InstructionHandle) branchHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      LDC lDC0 = new LDC();
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertNotNull(lDC0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      D2L d2L0 = (D2L)InstructionConstants.D2L;
      assertEquals((short)143, d2L0.getOpcode());
      assertEquals("d2l", d2L0.getName());
      assertEquals(1, d2L0.getLength());
      assertNotNull(d2L0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) d2L0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)143, d2L0.getOpcode());
      assertEquals("d2l", d2L0.getName());
      assertEquals(1, d2L0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(0, byteArray0.length);
      
      instructionList0.addObserver(instructionListObserver0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, byteArray0.length);
      
      InstructionHandle instructionHandle1 = instructionList0.append((Instruction) lDC0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertEquals(0, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      instructionList0.delete(instructionHandle1, instructionHandle1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(0, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      InstructionListObserver instructionListObserver1 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.removeObserver(instructionListObserver1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byte byte1 = (byte)0;
      byte byte2 = (byte)63;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-106);
      byteArray0[3] = byte3;
      byte byte4 = (byte)106;
      byteArray0[4] = byte4;
      byte byte5 = (byte)59;
      byteArray0[5] = byte5;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) iLOAD0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      InstructionList instructionList1 = new InstructionList(iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      IFNE iFNE0 = new IFNE(instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(iFNE0);
      assertEquals(6, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(branchHandle0);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      
      instructionList1.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionHandle2);
      assertEquals(6, byteArray0.length);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      int[] intArray0 = instructionList0.getInstructionPositions();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertArrayEquals(new int[] {0, 1, 2, 3, 4, 5}, intArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertNotNull(intArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, intArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      byte[] byteArray1 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(instructionList1, instructionList0);
      
      boolean boolean0 = false;
      String string0 = instructionHandle2.toString(boolean0);
      assertEquals("  -1: ifne -> -1", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(branchHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      byte[] byteArray2 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(instructionList1, instructionList0);
      
      int int0 = 1644;
      InstructionHandle instructionHandle3 = new InstructionHandle(iLOAD0);
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(instructionHandle3);
      
      InstructionHandle instructionHandle4 = null;
      instructionList1.redirectBranches(instructionHandle3, instructionHandle4);
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      
      instructionList0.move(instructionHandle2, (InstructionHandle) branchHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(branchHandle0, branchHandle1);
      assertSame(branchHandle0, instructionHandle2);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionHandle2, branchHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle3);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(instructionList1, instructionList0);
      
      instructionList0.dispose();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList0, instructionList1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)115;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-106);
      byteArray0[3] = byte3;
      byte byte4 = (byte)106;
      byteArray0[4] = byte4;
      byte byte5 = (byte)59;
      byteArray0[5] = byte5;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList0);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionList instructionList1 = new InstructionList(iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(instructionList1);
      
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle1.getTargeters();
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionTargeterArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, instructionTargeterArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      IFNE iFNE0 = new IFNE(instructionHandle1);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(0, instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(iFNE0);
      assertEquals(6, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(0, instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(branchHandle0);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      instructionList1.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionList1);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(instructionHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      int[] intArray0 = instructionList1.getInstructionPositions();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertNull(intArray0);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray1 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = false;
      String string0 = instructionHandle2.toString(boolean0);
      assertEquals("  -1: ifne -> 0", string0);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      String string1 = instructionHandle2.toString();
      assertEquals("  -1: ifne[154](3) -> 0", string1);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(string1, string0);
      assertNotSame(instructionList0, instructionList1);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(0, instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(branchHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      byte[] byteArray2 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      int int0 = 1644;
      int int1 = iFNE0.updatePosition(byteArray0[2], int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(0, instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle3 = new InstructionHandle(iLOAD0);
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(instructionHandle3);
      
      InstructionHandle instructionHandle4 = null;
      instructionList1.redirectBranches(instructionHandle3, instructionHandle4);
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      
      instructionList0.move(instructionHandle2, (InstructionHandle) branchHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(0, instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(branchHandle0, branchHandle1);
      assertSame(branchHandle0, instructionHandle2);
      assertNotSame(instructionHandle2, branchHandle1);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle3);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      instructionList0.dispose();
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList0, instructionList1);
      
      BranchHandle branchHandle2 = instructionList0.append((InstructionHandle) branchHandle1, (BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(branchHandle2.equals((Object)branchHandle1));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertEquals(3, iFNE0.getLength());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals((-1), branchHandle2.getPosition());
      assertFalse(branchHandle2.hasTargeters());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals((-1), branchHandle1.getPosition());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(branchHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(branchHandle2, branchHandle0);
      assertNotSame(branchHandle2, branchHandle1);
      assertSame(branchHandle2, instructionHandle2);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(branchHandle1, branchHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle3);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iLOAD0, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction iload_2[28](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = false;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      String string0 = pUSH0.toString();
      assertEquals("iconst_0[3](1) (PUSH)", string0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(string0);
      
      NEWARRAY nEWARRAY0 = new NEWARRAY();
      assertEquals((byte)0, nEWARRAY0.getTypecode());
      assertEquals((short) (-1), nEWARRAY0.getOpcode());
      assertEquals(1, nEWARRAY0.getLength());
      assertNotNull(nEWARRAY0);
      
      // Undeclared exception!
      try { 
        instructionList1.append((Instruction) nEWARRAY0, (Instruction) nEWARRAY0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-106);
      byteArray0[3] = byte3;
      byte byte4 = (byte)106;
      byteArray0[4] = byte4;
      byteArray0[5] = byteArray0[3];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) iLOAD0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle1.getTargeters();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionTargeterArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, instructionTargeterArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      IFNE iFNE0 = new IFNE(instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(0, iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(iFNE0);
      assertEquals(6, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(branchHandle0);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      
      instructionList1.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertFalse(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionHandle2);
      assertEquals(6, byteArray0.length);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      int[] intArray0 = instructionList1.getInstructionPositions();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNull(intArray0);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray1 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(instructionList1, instructionList0);
      
      boolean boolean0 = false;
      String string0 = instructionHandle2.toString(boolean0);
      assertEquals("  -1: ifne -> -1", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      String string1 = instructionHandle2.toString();
      assertEquals("  -1: ifne[154](3) -> -1", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(string1, string0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((-1), iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(branchHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      byte[] byteArray2 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(instructionList1, instructionList0);
      
      int int0 = 1644;
      InstructionHandle instructionHandle3 = new InstructionHandle(iLOAD0);
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertNotNull(instructionHandle3);
      
      InstructionHandle instructionHandle4 = null;
      instructionList1.redirectBranches(instructionHandle3, instructionHandle4);
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      
      instructionList0.move(instructionHandle2, (InstructionHandle) branchHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((-1), iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(8, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(branchHandle0, instructionHandle2);
      assertNotSame(branchHandle0, branchHandle1);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionHandle2, branchHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle3);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(instructionList1, instructionList0);
      
      instructionList0.dispose();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList0, instructionList1);
      
      BranchHandle branchHandle2 = instructionList0.append((InstructionHandle) branchHandle1, (BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte) (-106)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(branchHandle2.equals((Object)instructionHandle2));
      assertFalse(branchHandle2.equals((Object)branchHandle1));
      assertFalse(branchHandle2.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertEquals((-1), iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, branchHandle2.getPosition());
      assertFalse(branchHandle2.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(branchHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(branchHandle2, instructionHandle2);
      assertNotSame(branchHandle2, branchHandle1);
      assertNotSame(branchHandle2, branchHandle0);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, branchHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle3);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle3);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iLOAD0, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction iload_2[28](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      LDC lDC0 = new LDC();
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertNotNull(lDC0);
      
      IFGE iFGE0 = new IFGE();
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertNotNull(iFGE0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGE0);
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      int[] intArray0 = new int[7];
      int int0 = 3817;
      intArray0[0] = int0;
      int int1 = (-1789);
      intArray0[1] = int1;
      int int2 = 6;
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      int int4 = 2376;
      intArray0[4] = int4;
      int int5 = 2147483645;
      intArray0[5] = int5;
      int int6 = (-340);
      intArray0[6] = int6;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[7];
      instructionHandleArray0[0] = instructionHandle0;
      instructionHandleArray0[1] = instructionHandle0;
      instructionHandleArray0[2] = instructionHandle0;
      instructionHandleArray0[3] = instructionHandle0;
      instructionHandleArray0[4] = instructionHandle0;
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandleArray0[2], (Instruction) lDC0);
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertEquals(7, instructionHandleArray0.length);
      
      instructionHandleArray0[5] = instructionHandle1;
      instructionHandleArray0[6] = instructionHandle0;
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle1);
      assertArrayEquals(new int[] {3817, (-1789), 6, 1, 2376, 2147483645, (-340)}, intArray0);
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertNotNull(sWITCH0);
      assertEquals(7, instructionHandleArray0.length);
      assertEquals(7, intArray0.length);
      
      InstructionHandle instructionHandle2 = instructionList0.append(instructionHandle0, (CompoundInstruction) sWITCH0);
      assertArrayEquals(new int[] {3817, (-1789), 6, 1, 2376, 2147483645, (-340)}, intArray0);
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
      assertEquals(7, instructionHandleArray0.length);
      assertEquals(7, intArray0.length);
      assertNotSame(instructionHandle0, instructionHandle2);
      assertNotSame(instructionHandle2, instructionHandle0);
      
      instructionList0.delete(instructionHandle2, instructionHandleArray0[2]);
      assertArrayEquals(new int[] {3817, (-1789), 6, 1, 2376, 2147483645, (-340)}, intArray0);
      assertFalse(instructionHandle0.equals((Object)instructionHandle2));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertEquals(1, lDC0.getLength());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(7, instructionHandleArray0.length);
      assertEquals(7, intArray0.length);
      assertNotSame(instructionHandle0, instructionHandle2);
      assertNotSame(instructionHandle2, instructionHandle0);
      
      int int7 = 7;
      // Undeclared exception!
      try { 
        instructionList0.findHandle(int7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstructionHandle instructionHandle0 = null;
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertNotNull(iF_ICMPLT0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPLT0);
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = null;
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-106);
      byteArray0[3] = byte3;
      byte byte4 = (byte)106;
      byteArray0[4] = byte4;
      byte byte5 = (byte)59;
      byteArray0[5] = byte5;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) iLOAD0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionList instructionList1 = new InstructionList(iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(instructionList1);
      
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle1.getTargeters();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(instructionTargeterArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, instructionTargeterArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      IFNE iFNE0 = new IFNE(instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(iFNE0);
      assertEquals(6, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.size());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(branchHandle0);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      instructionList1.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(instructionHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      int[] intArray0 = instructionList1.getInstructionPositions();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNull(intArray0);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray1 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = false;
      String string0 = instructionHandle2.toString(boolean0);
      assertEquals("  -1: ifne -> -1", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      String string1 = instructionHandle2.toString();
      assertEquals("  -1: ifne[154](3) -> -1", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(string1, string0);
      assertNotSame(instructionList0, instructionList1);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(branchHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      byte[] byteArray2 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      instructionHandle2.removeAttribute(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertEquals(9, instructionList0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, branchHandle1);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(string1, string0);
      assertNotSame(instructionList0, instructionList1);
      
      int int0 = 1644;
      int int1 = iFNE0.updatePosition(byteArray0[2], int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(int1 == int0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle3 = new InstructionHandle(iLOAD0);
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(instructionHandle3);
      
      InstructionHandle instructionHandle4 = null;
      instructionList1.redirectBranches(instructionHandle3, instructionHandle4);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionHandle3, instructionHandle1);
      
      instructionList0.move(instructionHandle2, (InstructionHandle) branchHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle0, instructionHandle2);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(instructionHandle2, branchHandle1);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle3);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      instructionList0.dispose();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList0, instructionList1);
      
      BranchHandle branchHandle2 = instructionList0.insert((InstructionHandle) branchHandle0, (BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(branchHandle2.equals((Object)instructionHandle2));
      assertFalse(branchHandle2.equals((Object)branchHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals((-1), branchHandle0.getPosition());
      assertFalse(branchHandle2.hasTargeters());
      assertEquals((-1), branchHandle2.getPosition());
      assertEquals(1, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(branchHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle0, instructionHandle2);
      assertNotSame(branchHandle0, branchHandle2);
      assertNotSame(branchHandle0, branchHandle1);
      assertSame(branchHandle2, branchHandle1);
      assertNotSame(branchHandle2, instructionHandle2);
      assertNotSame(branchHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle3);
      assertNotSame(instructionHandle0, instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      assertEquals((byte)8, basicType0.getType());
      assertEquals(1, basicType0.getSize());
      assertEquals("B", basicType0.getSignature());
      assertNotNull(basicType0);
      
      NEWARRAY nEWARRAY0 = new NEWARRAY(basicType0);
      assertEquals((byte)8, basicType0.getType());
      assertEquals(1, basicType0.getSize());
      assertEquals("B", basicType0.getSignature());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals((byte)8, nEWARRAY0.getTypecode());
      assertNotNull(nEWARRAY0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      boolean boolean0 = instructionList0.contains((Instruction) nEWARRAY0);
      assertFalse(boolean0);
      assertEquals((byte)8, basicType0.getType());
      assertEquals(1, basicType0.getSize());
      assertEquals("B", basicType0.getSignature());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals((byte)8, nEWARRAY0.getTypecode());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionHandleArray0);
      assertEquals(0, instructionHandleArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = false;
      ILOAD iLOAD0 = new ILOAD();
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iLOAD0);
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      boolean boolean1 = instructionList0.contains(instructionHandle0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short) (-1), iLOAD0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertNotNull(iF_ACMPEQ0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ACMPEQ0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      IFEQ iFEQ0 = new IFEQ();
      assertEquals(0, iFEQ0.getIndex());
      assertEquals(1, iFEQ0.getLength());
      assertEquals((short) (-1), iFEQ0.getOpcode());
      assertNotNull(iFEQ0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFEQ0);
      assertEquals(0, iFEQ0.getIndex());
      assertEquals(1, iFEQ0.getLength());
      assertEquals((short) (-1), iFEQ0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      ConstantPoolGen constantPoolGen0 = null;
      byte byte0 = Character.CONTROL;
      assertEquals((byte)15, byte0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      assertEquals(0, iFEQ0.getIndex());
      assertEquals(1, iFEQ0.getLength());
      assertEquals((short) (-1), iFEQ0.getOpcode());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      instructionHandle0.removeTargeter(iFEQ0);
      assertEquals(0, iFEQ0.getIndex());
      assertEquals(1, iFEQ0.getLength());
      assertEquals((short) (-1), iFEQ0.getOpcode());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      instructionHandleArray0[0] = instructionHandle0;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        instructionList0.setPositions(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-106);
      byteArray0[3] = byte3;
      byte byte4 = (byte)106;
      byteArray0[4] = byte4;
      byte byte5 = (byte)59;
      byteArray0[5] = byte5;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) iLOAD0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionList instructionList1 = new InstructionList(iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(instructionList1);
      
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle1.getTargeters();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(instructionTargeterArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, instructionTargeterArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      IFNE iFNE0 = new IFNE(instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(iFNE0);
      assertEquals(6, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.size());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(branchHandle0);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      instructionList1.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(instructionHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      int[] intArray0 = instructionList1.getInstructionPositions();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNull(intArray0);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray1 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray1, byteArray0);
      
      InstructionHandle instructionHandle3 = instructionList0.insert((Instruction) iFNE0, instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(0, instructionHandle3.getPosition());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(instructionHandle3);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle3, instructionHandle2);
      assertSame(instructionHandle3, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      boolean boolean0 = false;
      String string0 = instructionHandle2.toString(boolean0);
      assertEquals("  -1: ifne -> -1", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, instructionHandle3);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      String string1 = instructionHandle2.toString();
      assertEquals("  -1: ifne[154](3) -> -1", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, instructionHandle3);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(string1, string0);
      assertNotSame(instructionList0, instructionList1);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle3));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(3, iFNE0.getLength());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(branchHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(branchHandle1, instructionHandle3);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      byte[] byteArray2 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      int int0 = 1644;
      int int1 = iFNE0.updatePosition(byteArray0[2], int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(int1 == int0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(3, iFNE0.getLength());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle4 = new InstructionHandle(iLOAD0);
      assertFalse(instructionHandle4.equals((Object)instructionHandle0));
      assertFalse(instructionHandle4.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle4.getPosition());
      assertFalse(instructionHandle4.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotNull(instructionHandle4);
      
      InstructionHandle instructionHandle5 = null;
      instructionList1.redirectBranches(instructionHandle4, instructionHandle5);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle4.equals((Object)instructionHandle0));
      assertFalse(instructionHandle4.equals((Object)instructionHandle1));
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals((-1), instructionHandle4.getPosition());
      assertFalse(instructionHandle4.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle4, instructionHandle0);
      assertNotSame(instructionHandle4, instructionHandle1);
      
      instructionList0.move(instructionHandle2, (InstructionHandle) branchHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle4));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(3, iFNE0.getLength());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle0, instructionHandle2);
      assertSame(branchHandle0, instructionHandle3);
      assertNotSame(branchHandle0, branchHandle1);
      assertSame(instructionHandle2, instructionHandle3);
      assertNotSame(instructionHandle2, branchHandle1);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle4);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      instructionList0.dispose();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList0, instructionList1);
      
      int int2 = instructionList0.size();
      assertEquals(0, int2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList0, instructionList1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-106);
      byteArray0[3] = byte3;
      byte byte4 = (byte)106;
      byteArray0[4] = byte4;
      byte byte5 = (byte)59;
      byteArray0[5] = byte5;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) iLOAD0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionList instructionList1 = new InstructionList(iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(instructionList1);
      
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle1.getTargeters();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(instructionTargeterArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, instructionTargeterArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      IFNE iFNE0 = new IFNE(instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(iFNE0);
      assertEquals(6, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(branchHandle0);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      instructionList1.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.append((InstructionHandle) branchHandle0, instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(instructionHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle0, instructionHandle2);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle3 = instructionList0.insert(instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(0, instructionHandle3.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(instructionHandle3);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      int[] intArray0 = instructionList1.getInstructionPositions();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNull(intArray0);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray1 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = false;
      String string0 = instructionHandle3.toString(boolean0);
      assertEquals("   0: nop", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(0, instructionHandle3.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      String string1 = instructionHandle3.toString();
      assertEquals("   0: nop[0](1)", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(0, instructionHandle3.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(string1, string0);
      assertNotSame(instructionList0, instructionList1);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertEquals(9, instructionList0.getLength());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(branchHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle3);
      
      byte[] byteArray2 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      iFNE0.setTarget(instructionHandle2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertTrue(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle0, instructionHandle2);
      assertNotSame(branchHandle0, branchHandle1);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionHandle2, branchHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle3);
      
      int int0 = 1644;
      int int1 = iFNE0.updatePosition(byteArray0[2], int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(int1 == int0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle3);
      
      InstructionHandle instructionHandle4 = new InstructionHandle(iLOAD0);
      assertFalse(instructionHandle4.equals((Object)instructionHandle1));
      assertFalse(instructionHandle4.equals((Object)instructionHandle3));
      assertFalse(instructionHandle4.equals((Object)instructionHandle0));
      assertEquals((-1), instructionHandle4.getPosition());
      assertFalse(instructionHandle4.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(instructionHandle4);
      
      InstructionHandle instructionHandle5 = null;
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle3, (InstructionHandle) branchHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid range: From    0: nop[0](1) to   -1: ifne[154](3) -> <points to itself>
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-106);
      byteArray0[3] = byte3;
      byte byte4 = (byte)106;
      byteArray0[4] = byte4;
      byte byte5 = (byte)59;
      byteArray0[5] = byte5;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) iLOAD0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionList instructionList1 = new InstructionList(iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(instructionList1);
      
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle1.getTargeters();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(instructionTargeterArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, instructionTargeterArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      IFNE iFNE0 = new IFNE(instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(iFNE0);
      assertEquals(6, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(branchHandle0);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      instructionList1.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(instructionHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      int[] intArray0 = instructionList1.getInstructionPositions();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNull(intArray0);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray1 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = false;
      String string0 = instructionHandle2.toString(boolean0);
      assertEquals("  -1: ifne -> -1", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      String string1 = instructionHandle2.toString();
      assertEquals("  -1: ifne[154](3) -> -1", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(string1, string0);
      assertNotSame(instructionList0, instructionList1);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(branchHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      byte[] byteArray2 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      int int0 = iFNE0.updatePosition(byteArray0[2], byte5);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byte5 == byte2);
      assertFalse(byte5 == byte1);
      assertFalse(byte5 == byte3);
      assertFalse(byte5 == byte0);
      assertFalse(byte5 == byte4);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle3 = new InstructionHandle(iLOAD0);
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((-1), instructionHandle3.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(instructionHandle3);
      
      InstructionHandle instructionHandle4 = null;
      instructionList1.redirectBranches(instructionHandle3, instructionHandle4);
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((-1), instructionHandle3.getPosition());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      
      instructionList0.dispose();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList0, instructionList1);
      
      int int1 = instructionList1.getLength();
      assertEquals(0, int1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(int1 == int0);
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotSame(instructionList1, instructionList0);
      
      BranchHandle branchHandle2 = instructionList0.append((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(branchHandle2.equals((Object)branchHandle0));
      assertFalse(branchHandle2.equals((Object)instructionHandle2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(branchHandle2.hasTargeters());
      assertEquals((-1), branchHandle2.getPosition());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertNotNull(branchHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(branchHandle2, branchHandle0);
      assertNotSame(branchHandle2, instructionHandle2);
      assertSame(branchHandle2, branchHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      FCONST fCONST0 = (FCONST)InstructionConstants.FCONST_2;
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertNotNull(fCONST0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(fCONST0);
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      int int0 = instructionList0.getLength();
      assertEquals(0, int0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      LDC lDC0 = new LDC();
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertNotNull(lDC0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNull(instructionHandle0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DRETURN dRETURN0 = new DRETURN();
      assertEquals("dreturn", dRETURN0.getName());
      assertEquals(1, dRETURN0.getLength());
      assertEquals((short)175, dRETURN0.getOpcode());
      assertNotNull(dRETURN0);
      
      InstructionList instructionList0 = new InstructionList(dRETURN0);
      assertEquals("dreturn", dRETURN0.getName());
      assertEquals(1, dRETURN0.getLength());
      assertEquals((short)175, dRETURN0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      BranchInstruction branchInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.insert(branchInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      int int0 = 2276;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(int0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(2276, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(2276, constantMethodType0.getDescriptorIndex());
      assertEquals(2276, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertNotNull(constantMethodType1);
      
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(int0, int0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertNotNull(constantMethodref0);
      
      constantArray0[1] = (Constant) constantMethodref0;
      JavaClass javaClass0 = null;
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, visitor0);
      assertNotNull(descendingVisitor0);
      
      constantMethodType1.accept(descendingVisitor0);
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(2276, constantMethodType0.getDescriptorIndex());
      assertEquals(2276, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      
      int int1 = 0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertNotNull(constantInterfaceMethodref0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertNotNull(constantInterfaceMethodref1);
      
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      int int2 = 0;
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertNotNull(iF_ICMPGE0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPGE0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) branchHandle0, (Instruction) iF_ICMPGE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = null;
      // Undeclared exception!
      try { 
        instructionList0.append(instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byteArray0[3] = byteArray0[0];
      byte byte3 = (byte)106;
      byteArray0[4] = byte3;
      byte byte4 = (byte)59;
      byteArray0[5] = byte4;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) iLOAD0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      InstructionList instructionList1 = new InstructionList(iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(instructionList1);
      
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      IFNE iFNE0 = new IFNE(instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(iFNE0);
      assertEquals(6, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(branchHandle0);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      instructionList1.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(instructionHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      instructionHandle1.removeAllTargeters();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      int[] intArray0 = instructionList1.getInstructionPositions();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNull(intArray0);
      assertNotSame(instructionList1, instructionList0);
      
      boolean boolean0 = false;
      String string0 = instructionHandle2.toString(boolean0);
      assertEquals("  -1: ifne -> -1", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      String string1 = instructionHandle2.toString();
      assertEquals("  -1: ifne[154](3) -> -1", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(string1, string0);
      assertNotSame(instructionList0, instructionList1);
      
      byte[] byteArray1 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = 1644;
      int int1 = iFNE0.updatePosition(byteArray0[2], int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(int1 == int0);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      InstructionHandle instructionHandle3 = new InstructionHandle(iLOAD0);
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((-1), instructionHandle3.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotNull(instructionHandle3);
      
      InstructionHandle instructionHandle4 = null;
      instructionList1.redirectBranches(instructionHandle3, instructionHandle4);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((-1), instructionHandle3.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionHandle3, instructionHandle1);
      
      instructionList0.move(instructionHandle2, (InstructionHandle) branchHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(branchHandle0, instructionHandle2);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle3);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      instructionList0.dispose();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList0, instructionList1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      File file0 = null;
      String string0 = "The value at the stack next-to-top is not of type 'int', but of type '";
      int int0 = 2383;
      GETFIELD gETFIELD0 = new GETFIELD(int0);
      assertEquals(3, gETFIELD0.getLength());
      assertEquals("getfield", gETFIELD0.getName());
      assertEquals(2383, gETFIELD0.getIndex());
      assertEquals((short)180, gETFIELD0.getOpcode());
      assertNotNull(gETFIELD0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) int0);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      BranchInstruction branchInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.append(branchInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(1, byteArray0.length);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      int int0 = (-1822);
      InstructionHandle instructionHandle0 = instructionList0.findHandle(int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNull(instructionHandle0);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, instructionList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      int int0 = 1;
      LDC2_W lDC2_W0 = new LDC2_W(int0);
      assertEquals("ldc2_w", lDC2_W0.getName());
      assertEquals(1, lDC2_W0.getIndex());
      assertEquals(3, lDC2_W0.getLength());
      assertEquals((short)20, lDC2_W0.getOpcode());
      assertNotNull(lDC2_W0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle0, (Instruction) lDC2_W0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertNotNull(iF_ICMPGT0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-2684);
      intArray0[1] = int1;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      // Undeclared exception!
      try { 
        instructionList0.getByteCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      F2L f2L0 = (F2L)InstructionConstants.F2L;
      assertEquals((short)140, f2L0.getOpcode());
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertNotNull(f2L0);
      
      InstructionList instructionList0 = new InstructionList(f2L0);
      assertEquals((short)140, f2L0.getOpcode());
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      byte[] byteArray0 = instructionList0.getByteCode();
      assertArrayEquals(new byte[] {(byte) (-116)}, byteArray0);
      assertEquals((short)140, f2L0.getOpcode());
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = true;
      String string0 = f2L0.toString(boolean0);
      assertEquals("f2l[140](1)", string0);
      assertEquals((short)140, f2L0.getOpcode());
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertNotNull(string0);
      
      long long0 = 0L;
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[9];
      boolean boolean1 = true;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean1);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertEquals((short)140, f2L0.getOpcode());
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      instructionList0.delete((Instruction) f2L0, (Instruction) f2L0);
      assertEquals((short)140, f2L0.getOpcode());
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      BranchInstruction branchInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle0, branchInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile1, boolean0, boolean0, boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int0 = 1937;
      PUSH pUSH0 = new PUSH(constantPoolGen0, int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = new InstructionList(pUSH0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      Instruction instruction0 = null;
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      assertEquals("sastore", sASTORE0.getName());
      assertEquals(1, sASTORE0.getLength());
      assertEquals((short)86, sASTORE0.getOpcode());
      assertNotNull(sASTORE0);
      
      // Undeclared exception!
      try { 
        instructionList1.delete((Instruction) sASTORE0, instruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction sastore[86](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-106);
      byteArray0[3] = byte3;
      byte byte4 = (byte)106;
      byteArray0[4] = byte4;
      byte byte5 = (byte)59;
      byteArray0[5] = byte5;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) iLOAD0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionList instructionList1 = new InstructionList(iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(instructionList1);
      
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle1.getTargeters();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(instructionTargeterArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, instructionTargeterArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      IFNE iFNE0 = new IFNE(instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(iFNE0);
      assertEquals(6, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.size());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(branchHandle0);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      instructionList1.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(7, instructionList0.getLength());
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(instructionHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      int[] intArray0 = instructionList1.getInstructionPositions();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNull(intArray0);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray1 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = false;
      String string0 = instructionHandle2.toString(boolean0);
      assertEquals("  -1: ifne -> -1", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      String string1 = instructionHandle2.toString();
      assertEquals("  -1: ifne[154](3) -> -1", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals(8, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(string1, string0);
      assertNotSame(instructionList0, instructionList1);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(branchHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      byte[] byteArray2 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      int int0 = 1644;
      int int1 = iFNE0.updatePosition(byteArray0[2], int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle3 = new InstructionHandle(iLOAD0);
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(instructionHandle3);
      
      InstructionHandle instructionHandle4 = null;
      instructionList1.redirectBranches(instructionHandle3, instructionHandle4);
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      
      instructionList0.move(instructionHandle2, (InstructionHandle) branchHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(branchHandle0, branchHandle1);
      assertSame(branchHandle0, instructionHandle2);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionHandle2, branchHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle3);
      
      instructionList0.dispose();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList0, instructionList1);
      
      BranchHandle branchHandle2 = instructionList1.insert((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle2.equals((Object)instructionHandle2));
      assertFalse(branchHandle2.equals((Object)branchHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals((-1), branchHandle2.getPosition());
      assertFalse(branchHandle2.hasTargeters());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload_2", iLOAD0.getName());
      assertNotNull(branchHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle2, branchHandle1);
      assertNotSame(branchHandle2, instructionHandle2);
      assertNotSame(branchHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle3);
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iFNE0, (Instruction) iFNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction ifne[154](3) -> null to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionArray0);
      assertEquals(0, instructionArray0.length);
      
      int[] intArray0 = instructionList0.getInstructionPositions();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ATHROW aTHROW0 = (ATHROW)InstructionConstants.ATHROW;
      assertEquals((short)191, aTHROW0.getOpcode());
      assertEquals("athrow", aTHROW0.getName());
      assertEquals(1, aTHROW0.getLength());
      assertNotNull(aTHROW0);
      
      InstructionList instructionList0 = new InstructionList(aTHROW0);
      assertEquals((short)191, aTHROW0.getOpcode());
      assertEquals("athrow", aTHROW0.getName());
      assertEquals(1, aTHROW0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      float float0 = (-1.0F);
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      assertEquals(0, constantArray0.length);
      
      byte byte0 = ObjectStreamConstants.SC_WRITE_METHOD;
      assertEquals((byte)1, byte0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      assertEquals(0, constantArray0.length);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(0, constantArray0.length);
      
      InstructionHandle instructionHandle0 = null;
      boolean boolean0 = instructionList0.contains(instructionHandle0);
      assertFalse(boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      ConstantPoolGen constantPoolGen0 = null;
      byte byte0 = Constants.ITEM_Null;
      assertEquals((byte)5, byte0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) byte0;
      int int0 = 1;
      InstructionHandle instructionHandle0 = InstructionList.findHandle(instructionHandleArray0, intArray0, int0, int0);
      assertArrayEquals(new int[] {5}, intArray0);
      assertNull(instructionHandle0);
      assertEquals(9, instructionHandleArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[7];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = false;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      instructionHandleArray0[0] = instructionHandle0;
      float float0 = 2.0F;
      FCONST fCONST0 = new FCONST(float0);
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertNotNull(fCONST0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (Instruction) fCONST0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      instructionHandleArray0[1] = instructionHandle1;
      IFNE iFNE0 = new IFNE();
      assertEquals((short) (-1), iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(1, iFNE0.getLength());
      assertNotNull(iFNE0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iFNE0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(4, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertEquals((short) (-1), iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(1, iFNE0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      instructionHandleArray0[2] = (InstructionHandle) branchHandle0;
      InstructionList instructionList1 = new InstructionList(fCONST0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert((Instruction) iFNE0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(5, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals((short) (-1), iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(1, iFNE0.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertNotNull(instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionHandle2, instructionHandle0);
      
      instructionHandleArray0[3] = instructionHandle2;
      InstructionHandle instructionHandle3 = instructionList1.insert(instructionHandleArray0[0], (CompoundInstruction) pUSH0);
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals(1, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionHandle3);
      assertEquals(7, instructionHandleArray0.length);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionHandle3, instructionHandle2);
      assertNotSame(instructionList1, instructionList0);
      
      instructionHandleArray0[4] = instructionHandle3;
      // Undeclared exception!
      try { 
        instructionList1.append((Instruction) iFNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SWAP sWAP0 = new SWAP();
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, sWAP0.getLength());
      assertNotNull(sWAP0);
      
      InstructionList instructionList0 = new InstructionList(sWAP0);
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[7];
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      String string0 = "/vL";
      ObjectType objectType0 = new ObjectType(string0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L/vL;", objectType0.getSignature());
      assertEquals(".vL", objectType0.getClassName());
      assertNotNull(objectType0);
      
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L/vL;", objectType0.getSignature());
      assertEquals(".vL", objectType0.getClassName());
      assertNotNull(codeExceptionGen0);
      
      codeExceptionGenArray0[1] = codeExceptionGen0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = true;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, instructionList0);
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals("swap", sWAP0.getName());
      assertEquals(1, sWAP0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) sWAP0, (Instruction) sWAP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction swap[95](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[3];
      int[] intArray0 = new int[9];
      int int0 = (-285);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = (-3901);
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = (-261);
      intArray0[6] = int6;
      int int7 = (-511);
      intArray0[7] = int7;
      int int8 = 0;
      intArray0[8] = int8;
      int int9 = 7;
      // Undeclared exception!
      try { 
        InstructionList.findHandle(instructionHandleArray0, intArray0, int9, intArray0[5]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      Spliterator<InstructionHandle> spliterator0 = instructionList0.spliterator();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(spliterator0);
      
      InstructionList instructionList1 = null;
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      assertEquals(1, tABLESWITCH0.getLength());
      assertEquals((short) (-1), tABLESWITCH0.getOpcode());
      assertEquals(0, tABLESWITCH0.getIndex());
      assertNotNull(tABLESWITCH0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(tABLESWITCH0);
      assertEquals(1, tABLESWITCH0.getLength());
      assertEquals((short) (-1), tABLESWITCH0.getOpcode());
      assertEquals(0, tABLESWITCH0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE(branchHandle0);
      assertEquals(1, tABLESWITCH0.getLength());
      assertEquals((short) (-1), tABLESWITCH0.getOpcode());
      assertEquals(0, tABLESWITCH0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertNotNull(iF_ACMPNE0);
      
      int int0 = iF_ACMPNE0.getTargetOffset();
      assertEquals(0, int0);
      assertEquals(1, tABLESWITCH0.getLength());
      assertEquals((short) (-1), tABLESWITCH0.getOpcode());
      assertEquals(0, tABLESWITCH0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ACMPNE0);
      assertEquals(1, tABLESWITCH0.getLength());
      assertEquals((short) (-1), tABLESWITCH0.getOpcode());
      assertEquals(0, tABLESWITCH0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      iF_ACMPNE0.dispose();
      assertEquals(1, tABLESWITCH0.getLength());
      assertEquals((short) (-1), tABLESWITCH0.getOpcode());
      assertEquals(0, tABLESWITCH0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals((-1), iF_ACMPNE0.getIndex());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      
      int int1 = instructionList0.size();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, tABLESWITCH0.getLength());
      assertEquals((short) (-1), tABLESWITCH0.getOpcode());
      assertEquals(0, tABLESWITCH0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals((-1), iF_ACMPNE0.getIndex());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      branchHandle0.removeAllTargeters();
      assertEquals(1, tABLESWITCH0.getLength());
      assertEquals((short) (-1), tABLESWITCH0.getOpcode());
      assertEquals(0, tABLESWITCH0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      int[] intArray0 = instructionList0.getInstructionPositions();
      assertEquals(1, tABLESWITCH0.getLength());
      assertEquals((short) (-1), tABLESWITCH0.getOpcode());
      assertEquals(0, tABLESWITCH0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals((-1), iF_ACMPNE0.getIndex());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) iF_ACMPNE0, (Instruction) tABLESWITCH0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = null;
      boolean boolean0 = false;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      F2I f2I0 = new F2I();
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals("f2i", f2I0.getName());
      assertEquals(1, f2I0.getLength());
      assertNotNull(f2I0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) f2I0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals("f2i", f2I0.getName());
      assertEquals(1, f2I0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals("f2i", f2I0.getName());
      assertEquals(1, f2I0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNull(instructionHandle2);
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) f2I0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction f2i[139](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      FCONST fCONST0 = (FCONST)InstructionConstants.FCONST_2;
      assertEquals(1, fCONST0.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals((short)13, fCONST0.getOpcode());
      assertNotNull(fCONST0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(fCONST0);
      assertEquals(1, fCONST0.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IFLT iFLT0 = new IFLT(instructionHandle0);
      assertEquals(1, fCONST0.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals((short)13, fCONST0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)155, iFLT0.getOpcode());
      assertEquals(3, iFLT0.getLength());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(0, iFLT0.getIndex());
      assertNotNull(iFLT0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iFLT0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, fCONST0.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals((short)13, fCONST0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)155, iFLT0.getOpcode());
      assertEquals(3, iFLT0.getLength());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(0, iFLT0.getIndex());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, fCONST0.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals((short)13, fCONST0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)155, iFLT0.getOpcode());
      assertEquals(3, iFLT0.getLength());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(0, iFLT0.getIndex());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle2 = instructionList0.append(instructionHandle1, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, fCONST0.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals((short)13, fCONST0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)155, iFLT0.getOpcode());
      assertEquals(3, iFLT0.getLength());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(0, iFLT0.getIndex());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle1, instructionHandle2);
      assertSame(instructionHandle2, instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertNotNull(iF_ACMPNE0);
      
      IfInstruction ifInstruction0 = iF_ACMPNE0.negate();
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)165, ifInstruction0.getOpcode());
      assertEquals("if_acmpeq", ifInstruction0.getName());
      assertNotNull(ifInstruction0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)165, ifInstruction0.getOpcode());
      assertEquals("if_acmpeq", ifInstruction0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      InstructionList instructionList1 = new InstructionList((BranchInstruction) ifInstruction0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)165, ifInstruction0.getOpcode());
      assertEquals("if_acmpeq", ifInstruction0.getName());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle0, instructionList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = false;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      String string0 = pUSH0.toString();
      assertEquals("iconst_0[3](1) (PUSH)", string0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(string0);
      
      AALOAD aALOAD0 = new AALOAD();
      assertEquals((short)50, aALOAD0.getOpcode());
      assertEquals("aaload", aALOAD0.getName());
      assertEquals(1, aALOAD0.getLength());
      assertNotNull(aALOAD0);
      
      String string1 = pUSH0.toString();
      assertEquals("iconst_0[3](1) (PUSH)", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(string1);
      assertNotSame(string1, string0);
      
      InstructionHandle instructionHandle0 = instructionList1.insert((Instruction) aALOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals((short)50, aALOAD0.getOpcode());
      assertEquals("aaload", aALOAD0.getName());
      assertEquals(1, aALOAD0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      
      Iterator<InstructionHandle> iterator0 = instructionList1.iterator();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertNotNull(iterator0);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals((short)50, aALOAD0.getOpcode());
      assertEquals("aaload", aALOAD0.getName());
      assertEquals(1, aALOAD0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals((short)50, aALOAD0.getOpcode());
      assertEquals("aaload", aALOAD0.getName());
      assertEquals(1, aALOAD0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertNotNull(iF_ACMPEQ0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ACMPEQ0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals((short)50, aALOAD0.getOpcode());
      assertEquals("aaload", aALOAD0.getName());
      assertEquals(1, aALOAD0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      String string0 = "S2`)&qx";
      PUSH pUSH0 = new PUSH(constantPoolGen0, string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      boolean boolean0 = false;
      String string0 = instructionList0.toString(boolean0);
      assertEquals("", string0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(string0);
      
      IFNE iFNE0 = new IFNE();
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short) (-1), iFNE0.getOpcode());
      assertEquals(1, iFNE0.getLength());
      assertNotNull(iFNE0);
      
      int int0 = 0;
      iFNE0.index = int0;
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short) (-1), iFNE0.getOpcode());
      assertEquals(1, iFNE0.getLength());
      
      iFNE0.dispose();
      assertEquals((-1), iFNE0.getIndex());
      assertEquals((short) (-1), iFNE0.getOpcode());
      assertEquals(1, iFNE0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, (BranchInstruction) iFNE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      F2I f2I0 = (F2I)InstructionConstants.F2I;
      assertEquals("f2i", f2I0.getName());
      assertEquals(1, f2I0.getLength());
      assertEquals((short)139, f2I0.getOpcode());
      assertNotNull(f2I0);
      
      InstructionList instructionList0 = new InstructionList(f2I0);
      assertEquals("f2i", f2I0.getName());
      assertEquals(1, f2I0.getLength());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals("f2i", f2I0.getName());
      assertEquals(1, f2I0.getLength());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionArray0);
      assertEquals(1, instructionArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) f2I0, (Instruction) f2I0);
      assertEquals("f2i", f2I0.getName());
      assertEquals(1, f2I0.getLength());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      CodeExceptionGen[] codeExceptionGenArray0 = null;
      int int0 = 0;
      InstructionHandle instructionHandle1 = instructionList0.findHandle(int0);
      assertEquals("f2i", f2I0.getName());
      assertEquals(1, f2I0.getLength());
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.redirectExceptionHandlers(codeExceptionGenArray0, instructionHandle1, instructionHandle1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = false;
      boolean boolean3 = Boolean.logicalAnd(boolean2, boolean2);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean1);
      assertTrue(boolean0 == boolean3);
      assertTrue(boolean1.equals((Object)boolean3));
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      String string0 = "Appending null InstructionList";
      String string1 = "";
      int int0 = constantPoolGen0.addNameAndType(string1, string0);
      assertEquals(3, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, constantPoolGen0.getSize());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = null;
      boolean boolean4 = Boolean.getBoolean(string2);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = Boolean.getBoolean(string0);
      assertFalse(boolean5);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertNotSame(string0, string1);
      
      String string3 = pUSH0.toString();
      assertEquals("iconst_0[3](1) (PUSH)", string3);
      assertTrue(boolean0 == boolean4);
      assertTrue(boolean0 == boolean5);
      assertTrue(boolean0 == boolean3);
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean4));
      assertTrue(boolean1.equals((Object)boolean5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4, constantPoolGen0.getSize());
      assertNotNull(string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertTrue(boolean0 == boolean4);
      assertTrue(boolean0 == boolean5);
      assertTrue(boolean0 == boolean3);
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean4));
      assertTrue(boolean1.equals((Object)boolean5));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      String string4 = instructionList0.toString();
      assertEquals("  -1: iconst_0[3](1)\n", string4);
      assertTrue(boolean0 == boolean4);
      assertTrue(boolean0 == boolean5);
      assertTrue(boolean0 == boolean3);
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean4));
      assertTrue(boolean1.equals((Object)boolean5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      
      boolean boolean6 = instructionList0.isEmpty();
      assertFalse(boolean6);
      assertTrue(boolean0 == boolean4);
      assertTrue(boolean0 == boolean5);
      assertTrue(boolean0 == boolean3);
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean4));
      assertTrue(boolean1.equals((Object)boolean5));
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF();
      assertEquals(1, iNSTANCEOF0.getLength());
      assertEquals((short) (-1), iNSTANCEOF0.getOpcode());
      assertEquals(0, iNSTANCEOF0.getIndex());
      assertNotNull(iNSTANCEOF0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iNSTANCEOF0, (Instruction) iNSTANCEOF0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      D2I d2I0 = (D2I)InstructionConstants.D2I;
      assertEquals("d2i", d2I0.getName());
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertNotNull(d2I0);
      
      InstructionList instructionList0 = new InstructionList(d2I0);
      assertEquals("d2i", d2I0.getName());
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      CompoundInstruction compoundInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.append(compoundInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 592;
      ISTORE iSTORE0 = new ISTORE(int0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals(592, iSTORE0.getIndex());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(4, iSTORE0.getLength());
      assertNotNull(iSTORE0);
      
      InstructionList instructionList0 = new InstructionList(iSTORE0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals(592, iSTORE0.getIndex());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(4, iSTORE0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      LOOKUPSWITCH lOOKUPSWITCH0 = new LOOKUPSWITCH();
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertNotNull(lOOKUPSWITCH0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iSTORE0, (Instruction) iSTORE0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals(592, iSTORE0.getIndex());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(4, iSTORE0.getLength());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) lOOKUPSWITCH0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals(592, iSTORE0.getIndex());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(4, iSTORE0.getLength());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      boolean boolean0 = instructionList0.isEmpty();
      assertFalse(boolean0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals(592, iSTORE0.getIndex());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(4, iSTORE0.getLength());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      
      BranchHandle branchHandle1 = instructionList0.insert((InstructionHandle) branchHandle0, (BranchInstruction) lOOKUPSWITCH0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals(592, iSTORE0.getIndex());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(4, iSTORE0.getLength());
      assertEquals(4, instructionList0.getLength());
      assertEquals(4, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertNotNull(branchHandle1);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.delete((InstructionHandle) branchHandle0, (InstructionHandle) branchHandle1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Select", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertNotNull(iF_ACMPNE0);
      
      IfInstruction ifInstruction0 = iF_ACMPNE0.negate();
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)165, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_acmpeq", ifInstruction0.getName());
      assertNotNull(ifInstruction0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)165, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_acmpeq", ifInstruction0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)165, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_acmpeq", ifInstruction0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(iterator0);
      
      boolean boolean0 = false;
      instructionList0.setPositions(boolean0);
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)165, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_acmpeq", ifInstruction0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      instructionList0.dispose();
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((-1), ifInstruction0.getIndex());
      assertEquals((short)165, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_acmpeq", ifInstruction0.getName());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      int int0 = 0;
      boolean boolean1 = true;
      String string0 = instructionList0.toString(boolean1);
      assertEquals("", string0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((-1), ifInstruction0.getIndex());
      assertEquals((short)165, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_acmpeq", ifInstruction0.getName());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(string0);
      
      InstructionHandle instructionHandle0 = instructionList0.findHandle(int0);
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((-1), ifInstruction0.getIndex());
      assertEquals((short)165, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_acmpeq", ifInstruction0.getName());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNull(instructionHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iF_ACMPNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1286;
      intArray0[0] = int0;
      int int1 = (-2);
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 58;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[8];
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      LOR lOR0 = (LOR)InstructionConstants.LOR;
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertEquals("lor", lOR0.getName());
      assertNotNull(lOR0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lOR0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertEquals("lor", lOR0.getName());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertEquals(0, byteArray0.length);
      
      instructionHandleArray0[0] = instructionHandle0;
      JSR jSR0 = new JSR(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(3, jSR0.getLength());
      assertEquals((short)168, jSR0.getOpcode());
      assertEquals("jsr", jSR0.getName());
      assertEquals(0, jSR0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertEquals("lor", lOR0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertNotNull(jSR0);
      assertEquals(0, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) jSR0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(3, jSR0.getLength());
      assertEquals((short)168, jSR0.getOpcode());
      assertEquals("jsr", jSR0.getName());
      assertEquals(0, jSR0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertEquals("lor", lOR0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      assertEquals(0, byteArray0.length);
      
      instructionHandleArray0[1] = (InstructionHandle) branchHandle0;
      // Undeclared exception!
      try { 
        instructionList0.findHandle(int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DDIV dDIV0 = (DDIV)InstructionConstants.DDIV;
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals("ddiv", dDIV0.getName());
      assertNotNull(dDIV0);
      
      InstructionList instructionList0 = new InstructionList(dDIV0);
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      instructionList0.setPositions();
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) dDIV0, (Instruction) dDIV0);
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.getEnd();
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals("ddiv", dDIV0.getName());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertNotNull(iF_ICMPGE0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGE0);
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      F2I f2I0 = (F2I)InstructionConstants.F2I;
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertNotNull(f2I0);
      
      InstructionList instructionList0 = new InstructionList(f2I0);
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      ConstantPoolGen constantPoolGen0 = null;
      String string0 = null;
      PUSH pUSH0 = new PUSH(constantPoolGen0, string0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, instructionList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      INEG iNEG0 = new INEG();
      assertEquals(1, iNEG0.getLength());
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertNotNull(iNEG0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      assertEquals(1, iNEG0.getLength());
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE(instructionHandle0);
      assertEquals(1, iNEG0.getLength());
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertNotNull(iF_ICMPNE0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPNE0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, iNEG0.getLength());
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      ObjectType objectType0 = Type.CLASS;
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertNotNull(objectType0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      instructionHandleArray0[1] = (InstructionHandle) branchHandle0;
      // Undeclared exception!
      try { 
        instructionList1.insert(instructionHandleArray0[1], (Instruction) iF_ICMPNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction if_icmpne[160](3) -> -1 to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      char char0 = 'y';
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "`";
      int int0 = 860;
      InstructionHandle instructionHandle1 = instructionList1.findHandle(int0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle1, instructionHandle1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From null to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY();
      assertEquals(1, mULTIANEWARRAY0.getLength());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)0, mULTIANEWARRAY0.getDimensions());
      assertEquals((short) (-1), mULTIANEWARRAY0.getOpcode());
      assertNotNull(mULTIANEWARRAY0);
      
      InstructionList instructionList0 = new InstructionList(mULTIANEWARRAY0);
      assertEquals(1, mULTIANEWARRAY0.getLength());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)0, mULTIANEWARRAY0.getDimensions());
      assertEquals((short) (-1), mULTIANEWARRAY0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) mULTIANEWARRAY0, (Instruction) mULTIANEWARRAY0);
      assertEquals(1, mULTIANEWARRAY0.getLength());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)0, mULTIANEWARRAY0.getDimensions());
      assertEquals((short) (-1), mULTIANEWARRAY0.getOpcode());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      IFLE iFLE0 = new IFLE(instructionHandle0);
      assertEquals(1, mULTIANEWARRAY0.getLength());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)0, mULTIANEWARRAY0.getDimensions());
      assertEquals((short) (-1), mULTIANEWARRAY0.getOpcode());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iFLE0.getLength());
      assertEquals((short)158, iFLE0.getOpcode());
      assertEquals(0, iFLE0.getIndex());
      assertEquals("ifle", iFLE0.getName());
      assertNotNull(iFLE0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iFLE0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, mULTIANEWARRAY0.getLength());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)0, mULTIANEWARRAY0.getDimensions());
      assertEquals((short) (-1), mULTIANEWARRAY0.getOpcode());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iFLE0.getLength());
      assertEquals((short)158, iFLE0.getOpcode());
      assertEquals(0, iFLE0.getIndex());
      assertEquals("ifle", iFLE0.getName());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      int[] intArray0 = instructionList1.getInstructionPositions();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, mULTIANEWARRAY0.getLength());
      assertEquals(0, mULTIANEWARRAY0.getIndex());
      assertEquals((short)0, mULTIANEWARRAY0.getDimensions());
      assertEquals((short) (-1), mULTIANEWARRAY0.getOpcode());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iFLE0.getLength());
      assertEquals((short)158, iFLE0.getOpcode());
      assertEquals(0, iFLE0.getIndex());
      assertEquals("ifle", iFLE0.getName());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNull(intArray0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      int int0 = 2383;
      GETFIELD gETFIELD0 = new GETFIELD(int0);
      assertEquals(3, gETFIELD0.getLength());
      assertEquals(2383, gETFIELD0.getIndex());
      assertEquals("getfield", gETFIELD0.getName());
      assertEquals((short)180, gETFIELD0.getOpcode());
      assertNotNull(gETFIELD0);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[1];
      instructionHandleArray0[0] = instructionHandle0;
      int int1 = (-1557);
      // Undeclared exception!
      try { 
        InstructionList.findHandle(instructionHandleArray0, intArray0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      byte[] byteArray0 = instructionList0.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      InstructionHandle instructionHandle0 = null;
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertNotNull(iF_ICMPGT0);
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iF_ICMPGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction if_icmpgt[163](3) -> null to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertNotNull(iFNONNULL0);
      
      IfInstruction ifInstruction0 = iFNONNULL0.negate();
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)198, ifInstruction0.getOpcode());
      assertEquals("ifnull", ifInstruction0.getName());
      assertNotNull(ifInstruction0);
      
      short short0 = (short)1746;
      iFNONNULL0.opcode = short0;
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short)1746, iFNONNULL0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short)1746, iFNONNULL0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      // Undeclared exception!
      try { 
        instructionList0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1746
         //
         verifyException("org.apache.bcel.generic.InstructionConst", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 2132;
      intArray0[1] = int1;
      int int2 = 46;
      intArray0[2] = int2;
      int int3 = 547;
      intArray0[3] = int3;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[3];
      IXOR iXOR0 = new IXOR();
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertNotNull(iXOR0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(iXOR0);
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      GOTO gOTO0 = new GOTO(instructionHandle0);
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals("goto", gOTO0.getName());
      assertEquals(0, gOTO0.getIndex());
      assertEquals(3, gOTO0.getLength());
      assertNotNull(gOTO0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals("goto", gOTO0.getName());
      assertEquals(0, gOTO0.getIndex());
      assertEquals(3, gOTO0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) gOTO0);
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals("goto", gOTO0.getName());
      assertEquals(0, gOTO0.getIndex());
      assertEquals(3, gOTO0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      
      instructionHandleArray0[0] = (InstructionHandle) branchHandle0;
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)branchHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals("goto", gOTO0.getName());
      assertEquals(0, gOTO0.getIndex());
      assertEquals(3, gOTO0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      instructionHandleArray0[1] = instructionHandle1;
      BranchHandle branchHandle1 = instructionList0.append(instructionHandle0, (BranchInstruction) gOTO0);
      assertFalse(branchHandle1.equals((Object)instructionHandle1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertEquals(1, iXOR0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals("goto", gOTO0.getName());
      assertEquals(0, gOTO0.getIndex());
      assertEquals(3, gOTO0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertNotNull(branchHandle1);
      assertNotSame(branchHandle1, instructionHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      instructionHandleArray0[2] = (InstructionHandle) branchHandle1;
      CompoundInstruction compoundInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) gOTO0, compoundInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      ISHR iSHR0 = new ISHR();
      assertEquals("ishr", iSHR0.getName());
      assertEquals((short)122, iSHR0.getOpcode());
      assertEquals(1, iSHR0.getLength());
      assertNotNull(iSHR0);
      
      byte[] byteArray0 = instructionList0.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ishr[122](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      F2L f2L0 = (F2L)InstructionConstants.F2L;
      assertEquals("f2l", f2L0.getName());
      assertEquals(1, f2L0.getLength());
      assertEquals((short)140, f2L0.getOpcode());
      assertNotNull(f2L0);
      
      InstructionList instructionList0 = new InstructionList(f2L0);
      assertEquals("f2l", f2L0.getName());
      assertEquals(1, f2L0.getLength());
      assertEquals((short)140, f2L0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      byte[] byteArray0 = instructionList0.getByteCode();
      assertArrayEquals(new byte[] {(byte) (-116)}, byteArray0);
      assertEquals("f2l", f2L0.getName());
      assertEquals(1, f2L0.getLength());
      assertEquals((short)140, f2L0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = 0L;
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[9];
      boolean boolean0 = true;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertEquals("f2l", f2L0.getName());
      assertEquals(1, f2L0.getLength());
      assertEquals((short)140, f2L0.getOpcode());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      BranchInstruction branchInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, branchInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ARRAYLENGTH aRRAYLENGTH0 = (ARRAYLENGTH)InstructionConstants.ARRAYLENGTH;
      assertEquals((short)190, aRRAYLENGTH0.getOpcode());
      assertEquals("arraylength", aRRAYLENGTH0.getName());
      assertEquals(1, aRRAYLENGTH0.getLength());
      assertNotNull(aRRAYLENGTH0);
      
      InstructionList instructionList0 = new InstructionList(aRRAYLENGTH0);
      assertEquals((short)190, aRRAYLENGTH0.getOpcode());
      assertEquals("arraylength", aRRAYLENGTH0.getName());
      assertEquals(1, aRRAYLENGTH0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)190, aRRAYLENGTH0.getOpcode());
      assertEquals("arraylength", aRRAYLENGTH0.getName());
      assertEquals(1, aRRAYLENGTH0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) aRRAYLENGTH0, instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)190, aRRAYLENGTH0.getOpcode());
      assertEquals("arraylength", aRRAYLENGTH0.getName());
      assertEquals(1, aRRAYLENGTH0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      LocalVariableGen[] localVariableGenArray0 = new LocalVariableGen[5];
      int int0 = 3;
      String string0 = "7djq9,EFb.";
      Class<Object> class0 = Object.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Object", objectType0.getClassName());
      assertEquals("Ljava/lang/Object;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      LocalVariableGen localVariableGen0 = new LocalVariableGen(int0, string0, objectType0, instructionHandle0, instructionHandle0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)190, aRRAYLENGTH0.getOpcode());
      assertEquals("arraylength", aRRAYLENGTH0.getName());
      assertEquals(1, aRRAYLENGTH0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Object", objectType0.getClassName());
      assertEquals("Ljava/lang/Object;", objectType0.getSignature());
      assertEquals(3, localVariableGen0.getIndex());
      assertEquals("7djq9,EFb.", localVariableGen0.getName());
      assertNotNull(localVariableGen0);
      
      localVariableGenArray0[0] = localVariableGen0;
      String string1 = "<tTRM\\2";
      LocalVariableGen localVariableGen1 = new LocalVariableGen(int0, string1, objectType0, instructionHandle0, instructionHandle0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(localVariableGen1.equals((Object)localVariableGen0));
      assertEquals((short)190, aRRAYLENGTH0.getOpcode());
      assertEquals("arraylength", aRRAYLENGTH0.getName());
      assertEquals(1, aRRAYLENGTH0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Object", objectType0.getClassName());
      assertEquals("Ljava/lang/Object;", objectType0.getSignature());
      assertEquals("<tTRM\\2", localVariableGen1.getName());
      assertEquals(3, localVariableGen1.getIndex());
      assertNotNull(localVariableGen1);
      
      localVariableGenArray0[1] = localVariableGen1;
      int int1 = 0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = string1;
      String string2 = "lrem";
      stringArray0[1] = string2;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      String string3 = "(!";
      stringArray0[4] = string3;
      stringArray0[5] = string1;
      String string4 = "";
      stringArray0[6] = string4;
      stringArray0[7] = string0;
      String string5 = "9\"H&lk7m0iy{WF";
      Constant[] constantArray0 = new Constant[7];
      int int2 = 4515;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(int1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertNotNull(constantInterfaceMethodref0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertNotNull(constantInterfaceMethodref1);
      
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      int int3 = 0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(int3, int0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertEquals(3, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      String string6 = "W-`2>{&07pTP|0e";
      MockFile mockFile0 = new MockFile(string6, string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("W-`2>{&07pTP|0e", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/evosuite_6th/W-`2>{&07pTP|0e/W-`2>{&07pTP|0e", mockFile0.toString());
      assertEquals("/home/evosuite_6th/W-`2>{&07pTP|0e", mockFile0.getParent());
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, stringArray0[3]);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("W-`2>{&07pTP|0e", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/evosuite_6th/W-`2>{&07pTP|0e/W-`2>{&07pTP|0e", mockFile0.toString());
      assertEquals("/home/evosuite_6th/W-`2>{&07pTP|0e", mockFile0.getParent());
      assertEquals(0L, mockFile1.length());
      assertEquals("<tTRM\\2", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canWrite());
      assertEquals("/home/evosuite_6th/W-`2>{&07pTP|0e/W-`2>{&07pTP|0e", mockFile1.getParent());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/evosuite_6th/W-`2>{&07pTP|0e/W-`2>{&07pTP|0e/<tTRM\\2", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNotNull(mockFile1);
      assertEquals(8, stringArray0.length);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, stringArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"<tTRM\\2\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      ISTORE iSTORE0 = new ISTORE();
      assertEquals((-1), iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(1, iSTORE0.getLength());
      assertEquals((short) (-1), iSTORE0.getOpcode());
      assertNotNull(iSTORE0);
      
      IFGT iFGT0 = new IFGT();
      assertEquals((short) (-1), iFGT0.getOpcode());
      assertEquals(1, iFGT0.getLength());
      assertEquals(0, iFGT0.getIndex());
      assertNotNull(iFGT0);
      
      IfInstruction ifInstruction0 = iFGT0.negate();
      assertEquals((short) (-1), iFGT0.getOpcode());
      assertEquals(1, iFGT0.getLength());
      assertEquals(0, iFGT0.getIndex());
      assertEquals("ifle", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)158, ifInstruction0.getOpcode());
      assertNotNull(ifInstruction0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) ifInstruction0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short) (-1), iFGT0.getOpcode());
      assertEquals(1, iFGT0.getLength());
      assertEquals(0, iFGT0.getIndex());
      assertEquals("ifle", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)158, ifInstruction0.getOpcode());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iSTORE0, instructionList1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray0 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      int int0 = instructionList0.size();
      assertEquals(0, int0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotSame(instructionList0, instructionList1);
      
      IASTORE iASTORE0 = (IASTORE)InstructionConstants.IASTORE;
      assertEquals(1, iASTORE0.getLength());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertNotNull(iASTORE0);
      
      // Undeclared exception!
      try { 
        instructionList1.delete((Instruction) iASTORE0, (Instruction) iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction iastore[79](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LDC lDC0 = new LDC();
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertNotNull(lDC0);
      
      InstructionList instructionList0 = new InstructionList(lDC0);
      assertEquals((short) (-1), lDC0.getOpcode());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        instructionList0.findHandle(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Instruction instruction0 = null;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(instruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = null;
      instructionList0.update();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      DNEG dNEG0 = new DNEG();
      assertEquals(1, dNEG0.getLength());
      assertEquals("dneg", dNEG0.getName());
      assertEquals((short)119, dNEG0.getOpcode());
      assertNotNull(dNEG0);
      
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, (Instruction) dNEG0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNull(instructionHandle0);
      
      instructionHandleArray0[0] = instructionHandle0;
      I2S i2S0 = new I2S();
      assertEquals(1, i2S0.getLength());
      assertEquals("i2s", i2S0.getName());
      assertEquals((short)147, i2S0.getOpcode());
      assertNotNull(i2S0);
      
      InstructionHandle instructionHandle1 = new InstructionHandle(i2S0);
      assertEquals(1, i2S0.getLength());
      assertEquals("i2s", i2S0.getName());
      assertEquals((short)147, i2S0.getOpcode());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      
      instructionHandleArray0[1] = instructionHandle1;
      ConstantPoolGen constantPoolGen0 = null;
      double double0 = 1.0;
      PUSH pUSH0 = new PUSH(constantPoolGen0, double0);
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionHandleArray0[1], (CompoundInstruction) pUSH0);
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotNull(instructionHandle2);
      assertEquals(9, instructionHandleArray0.length);
      assertNotSame(instructionHandle2, instructionHandle1);
      
      instructionHandleArray0[2] = instructionHandle2;
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertNotNull(bREAKPOINT0);
      
      InstructionHandle instructionHandle3 = new InstructionHandle(bREAKPOINT0);
      assertFalse(instructionHandle3.equals((Object)instructionHandle2));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertNotNull(instructionHandle3);
      
      instructionHandleArray0[3] = instructionHandle3;
      InstructionList instructionList1 = null;
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle2, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Inserting null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)85;
      byteArray0[1] = byte0;
      byteArray0[2] = byteArray0[0];
      byte byte1 = (byte) (-88);
      byteArray0[3] = byte1;
      byte byte2 = (byte)118;
      byteArray0[4] = byte2;
      byteArray0[5] = byte0;
      byte byte3 = (byte)0;
      byteArray0[6] = byte3;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't find target for branch: jsr[168](3) -> null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      assertEquals((byte)9, basicType0.getType());
      assertEquals("S", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertNotNull(basicType0);
      
      NEWARRAY nEWARRAY0 = new NEWARRAY(basicType0);
      assertEquals((byte)9, basicType0.getType());
      assertEquals("S", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)9, nEWARRAY0.getTypecode());
      assertNotNull(nEWARRAY0);
      
      InstructionList instructionList0 = new InstructionList(nEWARRAY0);
      assertEquals((byte)9, basicType0.getType());
      assertEquals("S", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)9, nEWARRAY0.getTypecode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      boolean boolean0 = instructionList0.contains((Instruction) nEWARRAY0);
      assertTrue(boolean0);
      assertEquals((byte)9, basicType0.getType());
      assertEquals("S", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)9, nEWARRAY0.getTypecode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals((byte)9, basicType0.getType());
      assertEquals("S", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)9, nEWARRAY0.getTypecode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionHandleArray0);
      assertEquals(1, instructionHandleArray0.length);
      
      InstructionList instructionList1 = null;
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals((byte)9, basicType0.getType());
      assertEquals("S", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)9, nEWARRAY0.getTypecode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) nEWARRAY0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((byte)9, basicType0.getType());
      assertEquals("S", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)9, nEWARRAY0.getTypecode());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle1, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Inserting null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LOOKUPSWITCH lOOKUPSWITCH0 = new LOOKUPSWITCH();
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertNotNull(lOOKUPSWITCH0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) lOOKUPSWITCH0);
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      Constant[] constantArray0 = new Constant[1];
      int int0 = (-180);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(int0, int0);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertNotNull(constantFieldref1);
      
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantArray0.length);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) int0);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      assertEquals(1, constantArray0.length);
      
      String string0 = pUSH0.toString();
      assertEquals("ldc2_w[20](3) 1 (PUSH)", string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(string0);
      assertEquals(1, constantArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lOOKUPSWITCH0, (CompoundInstruction) pUSH0);
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(1, constantArray0.length);
      
      int int1 = (-4371);
      int int2 = instructionHandle0.updatePosition(int1, int0);
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-4372), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, constantArray0.length);
      
      Collection<Object> collection0 = instructionHandle0.getAttributes();
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-4372), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(collection0);
      assertEquals(1, constantArray0.length);
      
      instructionList0.delete(instructionHandle0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, constantArray0.length);
      
      InstructionList instructionList1 = new InstructionList(pUSH0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      assertEquals(1, constantArray0.length);
      
      InstructionHandle instructionHandle1 = instructionList1.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionHandle1);
      assertEquals(1, constantArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle2 = instructionList1.insert(instructionHandle1, instructionList0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(3, instructionList1.size());
      assertEquals(3, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionHandle2);
      assertEquals(1, constantArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) lOOKUPSWITCH0, instructionList1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(2, byteArray0.length);
      
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      assertEquals(1, aRETURN0.getLength());
      assertEquals("areturn", aRETURN0.getName());
      assertEquals((short)176, aRETURN0.getOpcode());
      assertNotNull(aRETURN0);
      
      InstructionList instructionList1 = new InstructionList(aRETURN0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, aRETURN0.getLength());
      assertEquals("areturn", aRETURN0.getName());
      assertEquals((short)176, aRETURN0.getOpcode());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      float float0 = 2.562074F;
      PUSH pUSH0 = new PUSH(constantPoolGen0, float0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle0 = instructionList1.insert((Instruction) aRETURN0, (CompoundInstruction) pUSH0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, aRETURN0.getLength());
      assertEquals("areturn", aRETURN0.getName());
      assertEquals((short)176, aRETURN0.getOpcode());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, aRETURN0.getLength());
      assertEquals("areturn", aRETURN0.getName());
      assertEquals((short)176, aRETURN0.getOpcode());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals("ifnonnull", iFNONNULL0.getName());
      assertEquals(3, iFNONNULL0.getLength());
      assertNotNull(iFNONNULL0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iFNONNULL0, (Instruction) aRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ifnonnull[199](3) -> -1 is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BranchInstruction branchInstruction0 = null;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(branchInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = (-1172);
      intArray0[0] = int0;
      int int1 = 1159;
      intArray0[1] = int1;
      int int2 = (-3311);
      intArray0[2] = int2;
      int int3 = (-5622);
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = (-1994);
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = 764;
      intArray0[8] = int8;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[3];
      int int9 = 0;
      int int10 = (-1);
      InstructionHandle instructionHandle0 = InstructionList.findHandle(instructionHandleArray0, intArray0, int9, int10);
      assertArrayEquals(new int[] {(-1172), 1159, (-3311), (-5622), 0, (-1994), 0, 0, 764}, intArray0);
      assertFalse(int9 == int2);
      assertFalse(int9 == int3);
      assertFalse(int9 == int8);
      assertFalse(int9 == int10);
      assertFalse(int9 == int0);
      assertFalse(int9 == int5);
      assertFalse(int9 == int1);
      assertFalse(int10 == int0);
      assertFalse(int10 == int7);
      assertFalse(int10 == int1);
      assertFalse(int10 == int9);
      assertFalse(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int6);
      assertFalse(int10 == int5);
      assertFalse(int10 == int8);
      assertFalse(int10 == int4);
      assertNull(instructionHandle0);
      assertEquals(9, intArray0.length);
      assertEquals(3, instructionHandleArray0.length);
      
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      assertArrayEquals(new int[] {(-1172), 1159, (-3311), (-5622), 0, (-1994), 0, 0, 764}, intArray0);
      assertFalse(int9 == int2);
      assertFalse(int9 == int3);
      assertFalse(int9 == int8);
      assertFalse(int9 == int10);
      assertFalse(int9 == int0);
      assertFalse(int9 == int5);
      assertFalse(int9 == int1);
      assertFalse(int10 == int0);
      assertFalse(int10 == int7);
      assertFalse(int10 == int1);
      assertFalse(int10 == int9);
      assertFalse(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int6);
      assertFalse(int10 == int5);
      assertFalse(int10 == int8);
      assertFalse(int10 == int4);
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertNotNull(iF_ICMPLT0);
      assertEquals(9, intArray0.length);
      assertEquals(3, instructionHandleArray0.length);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPLT0);
      assertArrayEquals(new int[] {(-1172), 1159, (-3311), (-5622), 0, (-1994), 0, 0, 764}, intArray0);
      assertFalse(int9 == int2);
      assertFalse(int9 == int3);
      assertFalse(int9 == int8);
      assertFalse(int9 == int10);
      assertFalse(int9 == int0);
      assertFalse(int9 == int5);
      assertFalse(int9 == int1);
      assertFalse(int10 == int0);
      assertFalse(int10 == int7);
      assertFalse(int10 == int1);
      assertFalse(int10 == int9);
      assertFalse(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int6);
      assertFalse(int10 == int5);
      assertFalse(int10 == int8);
      assertFalse(int10 == int4);
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      assertEquals(9, intArray0.length);
      assertEquals(3, instructionHandleArray0.length);
      
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, (Instruction) iF_ICMPLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction if_icmplt[161](3) -> null to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertNotNull(iF_ICMPGT0);
      
      IfInstruction ifInstruction0 = iF_ICMPGT0.negate();
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertNotNull(ifInstruction0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertEquals((short) (-1), iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, iF_ICMPGT0.getLength());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmple", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)164, ifInstruction0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      CompoundInstruction compoundInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.insert(compoundInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      LOR lOR0 = (LOR)InstructionConstants.LOR;
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertNotNull(lOR0);
      
      InstructionList instructionList0 = new InstructionList(lOR0);
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lOR0);
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      instructionList0.delete(instructionHandle0);
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionArray0);
      assertEquals(1, instructionArray0.length);
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle0.getTargeters();
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionTargeterArray0);
      assertEquals(0, instructionTargeterArray0.length);
      
      String string1 = instructionList0.toString();
      assertEquals("   0: lor[129](1)\n", string1);
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(string1);
      
      InstructionList instructionList1 = null;
      instructionList0.update();
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      instructionHandle0.removeAllTargeters();
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) lOR0, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      NOP nOP0 = (NOP)InstructionConstants.NOP;
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals(1, nOP0.getLength());
      assertEquals("nop", nOP0.getName());
      assertNotNull(nOP0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      Instruction instruction0 = nOP0.copy();
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals(1, nOP0.getLength());
      assertEquals("nop", nOP0.getName());
      assertEquals((short)0, instruction0.getOpcode());
      assertEquals("nop", instruction0.getName());
      assertEquals(1, instruction0.getLength());
      assertNotNull(instruction0);
      assertSame(nOP0, instruction0);
      assertSame(instruction0, nOP0);
      
      long long0 = (-3848L);
      PUSH pUSH0 = new PUSH(constantPoolGen0, long0);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) nOP0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction nop[0](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FCONST fCONST0 = (FCONST)InstructionConstants.FCONST_0;
      assertEquals((short)11, fCONST0.getOpcode());
      assertEquals(1, fCONST0.getLength());
      assertEquals("fconst_0", fCONST0.getName());
      assertNotNull(fCONST0);
      
      InstructionList instructionList0 = new InstructionList(fCONST0);
      assertEquals((short)11, fCONST0.getOpcode());
      assertEquals(1, fCONST0.getLength());
      assertEquals("fconst_0", fCONST0.getName());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      CompoundInstruction compoundInstruction0 = null;
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) fCONST0, compoundInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = null;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertNotNull(iF_ICMPGE0);
      
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((Instruction) iF_ICMPGE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      CompoundInstruction compoundInstruction0 = null;
      InstructionList instructionList1 = null;
      try {
        instructionList1 = new InstructionList(compoundInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IASTORE iASTORE0 = (IASTORE)InstructionConstants.IASTORE;
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertNotNull(iASTORE0);
      
      InstructionList instructionList0 = new InstructionList(iASTORE0);
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionArray0);
      assertEquals(1, instructionArray0.length);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals("iastore", iASTORE0.getName());
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals(1, iASTORE0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      float float0 = (-638.8737F);
      FADD fADD0 = new FADD();
      assertEquals(1, fADD0.getLength());
      assertEquals("fadd", fADD0.getName());
      assertEquals((short)98, fADD0.getOpcode());
      assertNotNull(fADD0);
      
      // Undeclared exception!
      try { 
        instructionList1.append((Instruction) fADD0, (Instruction) fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction fadd[98](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      boolean boolean0 = instructionList0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      int int0 = 0;
      InstructionHandle instructionHandle0 = instructionList0.findHandle(int0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertNull(instructionHandle0);
      
      LASTORE lASTORE0 = (LASTORE)InstructionConstants.LASTORE;
      assertEquals("lastore", lASTORE0.getName());
      assertEquals((short)80, lASTORE0.getOpcode());
      assertEquals(1, lASTORE0.getLength());
      assertNotNull(lASTORE0);
      
      InstructionHandle instructionHandle1 = InstructionHandle.getInstructionHandle(lASTORE0);
      assertEquals("lastore", lASTORE0.getName());
      assertEquals((short)80, lASTORE0.getOpcode());
      assertEquals(1, lASTORE0.getLength());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertNotNull(iF_ICMPGT0);
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals("if_icmpgt", iF_ICMPGT0.getName());
      assertEquals(3, iF_ICMPGT0.getLength());
      assertEquals((short)163, iF_ICMPGT0.getOpcode());
      assertEquals(0, iF_ICMPGT0.getIndex());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iF_ICMPGT0, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction if_icmpgt[163](3) -> null is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InstructionList instructionList0 = null;
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn(instructionList0).when(compoundInstruction0).getInstructionList();
      InstructionList instructionList1 = null;
      try {
        instructionList1 = new InstructionList(compoundInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ISUB iSUB0 = (ISUB)InstructionConstants.ISUB;
      assertEquals("isub", iSUB0.getName());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertNotNull(iSUB0);
      
      InstructionList instructionList0 = new InstructionList(iSUB0);
      assertEquals("isub", iSUB0.getName());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      int int0 = (-1908);
      PUSH pUSH0 = new PUSH(constantPoolGen0, int0);
      assertNotNull(pUSH0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      String string0 = pUSH0.toString();
      assertEquals("sipush[17](3) -1908 (PUSH)", string0);
      assertNotNull(string0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals("isub", iSUB0.getName());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[1];
      instructionHandleArray0[0] = instructionHandle0;
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      int int1 = 0;
      InstructionHandle instructionHandle1 = InstructionList.findHandle(instructionHandleArray0, intArray0, int1, int1);
      assertArrayEquals(new int[] {(-1908), (-1908), (-1908), (-1908), (-1908)}, intArray0);
      assertFalse(int1 == int0);
      assertNull(instructionHandle1);
      assertEquals(1, instructionHandleArray0.length);
      assertEquals(5, intArray0.length);
      
      int int2 = instructionList0.getLength();
      assertEquals(2, int2);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("isub", iSUB0.getName());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotSame(instructionList0, instructionList1);
      
      InstructionList instructionList2 = new InstructionList(pUSH0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertEquals(1, instructionList2.getLength());
      assertFalse(instructionList2.isEmpty());
      assertEquals(1, instructionList2.size());
      assertNotNull(instructionList2);
      
      InstructionHandle instructionHandle2 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertEquals("isub", iSUB0.getName());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertNull(instructionHandle2);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      
      InstructionHandle instructionHandle3 = instructionList1.insert(instructionList2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertEquals(0, instructionList2.getLength());
      assertEquals(0, instructionList2.size());
      assertTrue(instructionList2.isEmpty());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionHandle3);
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandleArray0[0]);
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertNotNull(iF_ACMPEQ0);
      assertEquals(1, instructionHandleArray0.length);
      
      BranchHandle branchHandle0 = instructionList2.insert(instructionHandle0, (BranchInstruction) iF_ACMPEQ0);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertEquals("isub", iSUB0.getName());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList2.getLength());
      assertFalse(instructionList2.isEmpty());
      assertEquals(1, instructionList2.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      assertEquals(1, instructionHandleArray0.length);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      assertNotSame(instructionHandle0, instructionHandle3);
      
      BranchHandle branchHandle1 = instructionList0.insert(instructionHandleArray0[0], (BranchInstruction) iF_ACMPEQ0);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertEquals("isub", iSUB0.getName());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertNotNull(branchHandle1);
      assertEquals(1, instructionHandleArray0.length);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(branchHandle1, branchHandle0);
      
      int int3 = 74;
      PrivateAccess.setVariable((Class<InstructionList>) InstructionList.class, instructionList2, "length", (Object) int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(74, instructionList2.size());
      assertFalse(instructionList2.isEmpty());
      assertEquals(74, instructionList2.getLength());
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      
      PrivateAccess.setVariable((Class<InstructionList>) InstructionList.class, instructionList1, "end", (Object) instructionHandle3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertEquals(74, instructionList2.size());
      assertFalse(instructionList2.isEmpty());
      assertEquals(74, instructionList2.getLength());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      
      PrivateAccess.setVariable((Class<InstructionList>) InstructionList.class, instructionList1, "byte_positions", (Object) intArray0);
      assertArrayEquals(new int[] {(-1908), (-1908), (-1908), (-1908), (-1908)}, intArray0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertEquals(5, intArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      
      InstructionHandle instructionHandle4 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(instructionHandle4.equals((Object)instructionHandle0));
      assertFalse(instructionHandle4.equals((Object)instructionHandle3));
      assertEquals("isub", iSUB0.getName());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals(4, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertFalse(instructionHandle4.hasTargeters());
      assertEquals((-1), instructionHandle4.getPosition());
      assertNotNull(instructionHandle4);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle4, instructionHandle0);
      assertNotSame(instructionHandle4, instructionHandle3);
      
      Object object0 = PrivateAccess.callMethod((Class<InstructionList>) InstructionList.class, instructionList0, "insert", (Object) instructionHandle4, (Class<?>) InstructionHandle.class);
      assertFalse(instructionList0.equals((Object)instructionList2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(instructionHandle4.equals((Object)instructionHandle0));
      assertFalse(instructionHandle4.equals((Object)instructionHandle3));
      assertEquals("isub", iSUB0.getName());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals(5, instructionList0.getLength());
      assertEquals(5, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle4.hasTargeters());
      assertEquals((-1), instructionHandle4.getPosition());
      assertNull(object0);
      assertNotSame(instructionList0, instructionList2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle4, instructionHandle0);
      assertNotSame(instructionHandle4, instructionHandle3);
      
      // Undeclared exception!
      try { 
        instructionList1.insert(instructionHandle2, (BranchInstruction) iF_ACMPEQ0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      int int0 = 170;
      PUSH pUSH0 = new PUSH(constantPoolGen0, int0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      RET rET0 = new RET();
      assertEquals(0, rET0.getIndex());
      assertEquals(1, rET0.getLength());
      assertEquals((short) (-1), rET0.getOpcode());
      assertNotNull(rET0);
      
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) rET0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionList) null).when(compoundInstruction0).getInstructionList();
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(compoundInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      assertEquals((byte)9, basicType0.getType());
      assertEquals(1, basicType0.getSize());
      assertEquals("S", basicType0.getSignature());
      assertNotNull(basicType0);
      
      NEWARRAY nEWARRAY0 = new NEWARRAY(basicType0);
      assertEquals((byte)9, basicType0.getType());
      assertEquals(1, basicType0.getSize());
      assertEquals("S", basicType0.getSignature());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)9, nEWARRAY0.getTypecode());
      assertNotNull(nEWARRAY0);
      
      InstructionList instructionList0 = new InstructionList(nEWARRAY0);
      assertEquals((byte)9, basicType0.getType());
      assertEquals(1, basicType0.getSize());
      assertEquals("S", basicType0.getSignature());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)9, nEWARRAY0.getTypecode());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      boolean boolean0 = instructionList0.contains((Instruction) nEWARRAY0);
      assertTrue(boolean0);
      assertEquals((byte)9, basicType0.getType());
      assertEquals(1, basicType0.getSize());
      assertEquals("S", basicType0.getSignature());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)9, nEWARRAY0.getTypecode());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals((byte)9, basicType0.getType());
      assertEquals(1, basicType0.getSize());
      assertEquals("S", basicType0.getSignature());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)9, nEWARRAY0.getTypecode());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionHandleArray0);
      assertEquals(1, instructionHandleArray0.length);
      
      InstructionList instructionList1 = null;
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) nEWARRAY0, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IASTORE iASTORE0 = (IASTORE)InstructionConstants.IASTORE;
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals(1, iASTORE0.getLength());
      assertNotNull(iASTORE0);
      
      InstructionList instructionList0 = new InstructionList(iASTORE0);
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals(1, iASTORE0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      Class<?>[] classArray0 = iASTORE0.getExceptions();
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals(1, iASTORE0.getLength());
      assertNotNull(classArray0);
      assertEquals(2, classArray0.length);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals(1, iASTORE0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionArray0);
      assertEquals(1, instructionArray0.length);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals(1, iASTORE0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray0 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals(1, iASTORE0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      Instruction[] instructionArray1 = instructionList1.getInstructions();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionArray1.equals((Object)instructionArray0));
      assertEquals((short)79, iASTORE0.getOpcode());
      assertEquals("iastore", iASTORE0.getName());
      assertEquals(1, iASTORE0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionArray1);
      assertEquals(1, instructionArray1.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionArray1, instructionArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = mock(ConstantPoolGen.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      boolean boolean1 = true;
      String string0 = instructionList0.toString(boolean1);
      assertEquals("  -1: iconst_0[3](1)\n", string0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(string0);
      
      Iterator<InstructionHandle> iterator0 = instructionList0.iterator();
      assertFalse(boolean0 == boolean1);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(iterator0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[8];
      CodeExceptionGen codeExceptionGen0 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen0).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen0).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen0).getStartPC();
      codeExceptionGenArray0[0] = codeExceptionGen0;
      CodeExceptionGen codeExceptionGen1 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen1).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen1).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen1).getStartPC();
      codeExceptionGenArray0[1] = codeExceptionGen1;
      CodeExceptionGen codeExceptionGen2 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen2).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen2).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen2).getStartPC();
      codeExceptionGenArray0[2] = codeExceptionGen2;
      CodeExceptionGen codeExceptionGen3 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen3).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen3).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen3).getStartPC();
      codeExceptionGenArray0[3] = codeExceptionGen3;
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      CodeExceptionGen codeExceptionGen4 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(codeExceptionGen4.equals((Object)codeExceptionGen0));
      assertFalse(codeExceptionGen4.equals((Object)codeExceptionGen2));
      assertFalse(codeExceptionGen4.equals((Object)codeExceptionGen1));
      assertFalse(codeExceptionGen4.equals((Object)codeExceptionGen3));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertNotNull(codeExceptionGen4);
      
      codeExceptionGenArray0[4] = codeExceptionGen4;
      CodeExceptionGen codeExceptionGen5 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen5).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen5).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen5).getStartPC();
      codeExceptionGenArray0[5] = codeExceptionGen5;
      CodeExceptionGen codeExceptionGen6 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen6).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen6).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen6).getStartPC();
      codeExceptionGenArray0[6] = codeExceptionGen6;
      CodeExceptionGen codeExceptionGen7 = mock(CodeExceptionGen.class, new ViolatedAssumptionAnswer());
      doReturn((InstructionHandle) null).when(codeExceptionGen7).getEndPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen7).getHandlerPC();
      doReturn((InstructionHandle) null).when(codeExceptionGen7).getStartPC();
      codeExceptionGenArray0[7] = codeExceptionGen7;
      instructionList0.redirectExceptionHandlers(codeExceptionGenArray0, instructionHandle0, instructionHandle0);
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(8, codeExceptionGenArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertNotNull(iF_ACMPEQ0);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ACMPEQ0);
      assertFalse(boolean0 == boolean1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(3, iF_ACMPEQ0.getLength());
      assertEquals((short)165, iF_ACMPEQ0.getOpcode());
      assertEquals("if_acmpeq", iF_ACMPEQ0.getName());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      assertNotSame(instructionList0, instructionList1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 2644;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      IFLT iFLT0 = new IFLT();
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(1, iFLT0.getLength());
      assertNotNull(iFLT0);
      
      IFGE iFGE0 = new IFGE();
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertNotNull(iFGE0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGE0);
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      int int1 = 0;
      int int2 = 215;
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle1, instructionHandle0);
      
      Instruction instruction0 = null;
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn(instructionList1).when(compoundInstruction0).getInstructionList();
      // Undeclared exception!
      try { 
        instructionList1.append(instruction0, compoundInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction null is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DCMPG dCMPG0 = (DCMPG)InstructionConstants.DCMPG;
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertEquals("dcmpg", dCMPG0.getName());
      assertNotNull(dCMPG0);
      
      InstructionHandle instructionHandle0 = new InstructionHandle(dCMPG0);
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE(instructionHandle0);
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertNotNull(iF_ICMPNE0);
      
      IfInstruction ifInstruction0 = iF_ICMPNE0.negate();
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)159, ifInstruction0.getOpcode());
      assertNotNull(ifInstruction0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)159, ifInstruction0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      boolean boolean1 = false;
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string0 = null;
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string0);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      instructionList0.setPositions(boolean1);
      assertFalse(boolean1 == boolean3);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean1 == boolean4);
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)159, ifInstruction0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)159, ifInstruction0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) ifInstruction0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)159, ifInstruction0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      instructionList1.redirectBranches(instructionHandle0, instructionHandle0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)159, ifInstruction0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle1 = instructionList1.append(instructionList0);
      assertFalse(instructionHandle1.equals((Object)branchHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertEquals("dcmpg", dCMPG0.getName());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)159, ifInstruction0.getOpcode());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals(3, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, instructionList1.getLength());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle1, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)49;
      byteArray0[0] = byte0;
      byte byte1 = (byte)44;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-18);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)98;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-44);
      byteArray0[5] = byte5;
      byte byte6 = (byte)64;
      byteArray0[6] = byteArray0[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)44, (byte) (-18), (byte)0, (byte)98, (byte) (-44), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertArrayEquals(new byte[] {(byte)49, (byte)44, (byte) (-18), (byte)0, (byte)98, (byte) (-44), (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, instruction0.getLength());
      assertEquals("daload", instruction0.getName());
      assertEquals((short)49, instruction0.getOpcode());
      assertNotNull(instruction0);
      assertEquals(7, byteArray0.length);
      
      int int0 = instructionList1.size();
      assertEquals(3, int0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_icmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)159, ifInstruction0.getOpcode());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals(3, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, instructionList1.getLength());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      instructionHandle0.setInstruction(dCMPG0);
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) ifInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction if_icmpeq[159](3) -> -1 to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      char char0 = 'y';
      Character character0 = new Character(char0);
      assertEquals('y', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle0 = instructionList1.append((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(character0.equals((Object)char0));
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle1, instructionHandle0);
      
      boolean boolean0 = true;
      instructionList1.setPositions(boolean0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      int int0 = instructionList0.size();
      assertEquals(1, int0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotSame(instructionList0, instructionList1);
      
      instructionList1.update();
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle2 = instructionList1.append((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(character0.equals((Object)char0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertNotNull(instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionHandle2, instructionHandle0);
      
      PUSH pUSH1 = new PUSH(constantPoolGen0, (float) int0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(pUSH1.equals((Object)pUSH0));
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH1);
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle2, instructionHandle2, instructionHandle2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid range: From   -1: bipush[16](2) 121 to   -1: bipush[16](2) 121 contains target   -1: bipush[16](2) 121
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = null;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-95);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)33;
      byteArray0[6] = byte6;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertEquals(5, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(7, byteArray0.length);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instructionList0.forEach(consumer0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertEquals(5, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = true;
      instructionList0.setPositions(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertEquals(5, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertEquals(7, byteArray0.length);
      
      CompoundInstruction compoundInstruction0 = null;
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          LSTORE lSTORE0 = new LSTORE();
          assertEquals(1, lSTORE0.getLength());
          assertEquals((short)55, lSTORE0.getCanonicalTag());
          assertEquals((-1), lSTORE0.getIndex());
          assertEquals((short) (-1), lSTORE0.getOpcode());
          assertNotNull(lSTORE0);
          
          EvoSuiteFile evoSuiteFile0 = null;
          byte[] byteArray0 = new byte[1];
          byte byte0 = (byte)0;
          byteArray0[0] = byte0;
          boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
          assertFalse(boolean0);
          assertArrayEquals(new byte[] {(byte)0}, byteArray0);
          assertEquals(1, byteArray0.length);
          
          InstructionList instructionList0 = new InstructionList(lSTORE0);
          assertEquals(1, lSTORE0.getLength());
          assertEquals((short)55, lSTORE0.getCanonicalTag());
          assertEquals((-1), lSTORE0.getIndex());
          assertEquals((short) (-1), lSTORE0.getOpcode());
          assertFalse(instructionList0.isEmpty());
          assertEquals(1, instructionList0.size());
          assertEquals(1, instructionList0.getLength());
          assertNotNull(instructionList0);
          
          boolean boolean1 = false;
          instructionList0.setPositions(boolean1);
          assertTrue(boolean1 == boolean0);
          assertEquals(1, lSTORE0.getLength());
          assertEquals((short)55, lSTORE0.getCanonicalTag());
          assertEquals((-1), lSTORE0.getIndex());
          assertEquals((short) (-1), lSTORE0.getOpcode());
          assertFalse(instructionList0.isEmpty());
          assertEquals(1, instructionList0.size());
          assertEquals(1, instructionList0.getLength());
          
          byte[] byteArray1 = new byte[4];
          assertFalse(byteArray1.equals((Object)byteArray0));
          
          byte byte1 = (byte) (-3);
          ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
          assertEquals(1, constantPoolGen0.getSize());
          assertNotNull(constantPoolGen0);
          
          instructionList0.replaceConstantPool(constantPoolGen0, constantPoolGen0);
          assertEquals(1, lSTORE0.getLength());
          assertEquals((short)55, lSTORE0.getCanonicalTag());
          assertEquals((-1), lSTORE0.getIndex());
          assertEquals((short) (-1), lSTORE0.getOpcode());
          assertFalse(instructionList0.isEmpty());
          assertEquals(1, instructionList0.size());
          assertEquals(1, instructionList0.getLength());
          assertEquals(1, constantPoolGen0.getSize());
          
          byteArray1[0] = byte1;
          byte byte2 = (byte) (-104);
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          assertNotNull(fileSystemHandling0);
          
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          assertFalse(fileDescriptor0.valid());
          assertNotNull(fileDescriptor0);
          
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1556)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor103.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LSTORE lSTORE0 = new LSTORE();
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertNotNull(lSTORE0);
      
      InstructionList instructionList0 = new InstructionList(lSTORE0);
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      boolean boolean0 = false;
      instructionList0.setPositions(boolean0);
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      byte byte0 = (byte) (-3);
      byte byte1 = (byte) (-104);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte byte2 = (byte) (-21);
      byte byte3 = (byte)102;
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      instructionList0.delete((Instruction) lSTORE0, (Instruction) lSTORE0);
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lSTORE0);
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((Instruction) lSTORE0, (Instruction) lSTORE0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      byte byte4 = Constants.ATTR_ANNOTATION_DEFAULT;
      assertEquals((byte)16, byte4);
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte1);
      assertFalse(byte4 == byte3);
      assertFalse(byte4 == byte0);
      
      instructionList0.delete(instructionHandle1, instructionHandle0);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNotNull(instructionList1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      String string0 = instructionList1.toString();
      assertEquals("", string0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNotNull(string0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      CompoundInstruction compoundInstruction0 = mock(CompoundInstruction.class, new ViolatedAssumptionAnswer());
      doReturn(instructionList1).when(compoundInstruction0).getInstructionList();
      InstructionHandle instructionHandle2 = instructionList1.insert(compoundInstruction0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short) (-1), lSTORE0.getOpcode());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertNull(instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle2, instructionHandle1, instructionHandle1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertEquals(0, byteArray0.length);
      
      LDC lDC0 = new LDC();
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertNotNull(lDC0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDC0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertEquals(0, byteArray0.length);
      
      instructionList0.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, byteArray0.length);
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertNotNull(iF_ICMPGE0);
      assertEquals(0, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      assertEquals(0, byteArray0.length);
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      BranchHandle branchHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPGE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, lDC0.getLength());
      assertEquals(0, lDC0.getIndex());
      assertEquals((short) (-1), lDC0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)162, iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals("if_icmpge", iF_ICMPGE0.getName());
      assertEquals(3, iF_ICMPGE0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(0, branchHandle1.getPosition());
      assertNotNull(branchHandle1);
      assertEquals(0, byteArray0.length);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(branchHandle1, branchHandle0);
      
      instructionHandleArray0[0] = (InstructionHandle) branchHandle1;
      instructionHandleArray0[1] = (InstructionHandle) branchHandle0;
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 46;
      intArray0[1] = int1;
      int int2 = 2367;
      intArray0[2] = int2;
      int int3 = 2522;
      // Undeclared exception!
      try { 
        InstructionList.findHandle(instructionHandleArray0, intArray0, int3, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1260
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-106);
      byteArray0[3] = byte3;
      byte byte4 = (byte)106;
      byteArray0[4] = byte4;
      byte byte5 = (byte)59;
      byteArray0[5] = byte5;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertEquals(6, byteArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertEquals(6, byteArray0.length);
      
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(iLOAD0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) iLOAD0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(instructionHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionList instructionList1 = new InstructionList(iLOAD0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(instructionList1);
      
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle1.getTargeters();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(instructionTargeterArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, instructionTargeterArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      IFNE iFNE0 = new IFNE(instructionHandle1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(iFNE0);
      assertEquals(6, byteArray0.length);
      
      BranchHandle branchHandle0 = instructionList1.insert((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(5, instructionHandle0.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(branchHandle0);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      instructionList1.delete(instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(instructionHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      int[] intArray0 = instructionList1.getInstructionPositions();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNull(intArray0);
      assertNotSame(instructionList1, instructionList0);
      
      byte[] byteArray1 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = false;
      String string0 = instructionHandle2.toString(boolean0);
      assertEquals("  -1: ifne -> -1", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      String string1 = instructionHandle2.toString();
      assertEquals("  -1: ifne[154](3) -> -1", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(8, instructionList0.size());
      assertEquals(8, instructionList0.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(string1, string0);
      assertNotSame(instructionList0, instructionList1);
      
      BranchHandle branchHandle1 = instructionList0.append((BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(branchHandle1);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(branchHandle1, instructionHandle2);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      
      byte[] byteArray2 = instructionList1.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      int int0 = 1644;
      InstructionHandle instructionHandle3 = new InstructionHandle(iLOAD0);
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(instructionHandle3);
      
      InstructionHandle instructionHandle4 = null;
      String string2 = instructionHandle1.toString(boolean0);
      assertEquals("  -1: iload_2", string2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle3);
      
      instructionList1.redirectBranches(instructionHandle3, instructionHandle4);
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      
      instructionList0.move(instructionHandle2, (InstructionHandle) branchHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(branchHandle0.equals((Object)branchHandle1));
      assertFalse(instructionHandle2.equals((Object)branchHandle1));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList1, instructionList0);
      assertSame(branchHandle0, instructionHandle2);
      assertNotSame(branchHandle0, branchHandle1);
      assertNotSame(instructionHandle2, branchHandle1);
      assertSame(instructionHandle2, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle3);
      
      instructionList0.dispose();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(instructionList0, instructionList1);
      
      BranchHandle branchHandle2 = instructionList0.append((InstructionHandle) branchHandle1, (BranchInstruction) iFNE0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-106), (byte)106, (byte)59}, byteArray0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(branchHandle2.equals((Object)instructionHandle2));
      assertFalse(branchHandle2.equals((Object)branchHandle0));
      assertFalse(branchHandle1.equals((Object)instructionHandle2));
      assertFalse(branchHandle1.equals((Object)branchHandle0));
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle3));
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals("ifne", iFNE0.getName());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(branchHandle2.hasTargeters());
      assertEquals((-1), branchHandle2.getPosition());
      assertEquals((-1), branchHandle1.getPosition());
      assertFalse(branchHandle1.hasTargeters());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("iload_2", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(1, iLOAD0.getLength());
      assertEquals((short)28, iLOAD0.getOpcode());
      assertEquals(2, iLOAD0.getIndex());
      assertNotNull(branchHandle2);
      assertEquals(6, byteArray0.length);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionHandle1, instructionHandle3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(branchHandle2, branchHandle1);
      assertNotSame(branchHandle2, instructionHandle2);
      assertNotSame(branchHandle2, branchHandle0);
      assertNotSame(branchHandle1, instructionHandle2);
      assertSame(branchHandle1, branchHandle2);
      assertNotSame(branchHandle1, branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle3);
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iLOAD0, instructionList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction iload_2[28](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)49;
      byteArray0[0] = byte0;
      byte byte1 = (byte)65;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)95;
      byteArray0[3] = byte3;
      byteArray0[1] = byteArray0[0];
      byte byte4 = (byte)70;
      byteArray0[5] = byte4;
      byte byte5 = (byte) (-101);
      byteArray0[6] = byte5;
      byte byte6 = (byte)74;
      byteArray0[7] = byte6;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SWAP sWAP0 = new SWAP();
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertNotNull(sWAP0);
      
      InstructionList instructionList0 = new InstructionList(sWAP0);
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[7];
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      String string0 = "/vL";
      ObjectType objectType0 = new ObjectType(string0);
      assertEquals(".vL", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L/vL;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(".vL", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L/vL;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(codeExceptionGen0);
      
      codeExceptionGenArray0[1] = codeExceptionGen0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = true;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionHandle instructionHandle1 = instructionList0.append((Instruction) sWAP0, (CompoundInstruction) pUSH0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      try { 
        instructionList0.delete((Instruction) sWAP0, (Instruction) sWAP0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // {   -1: swap[95](1) }
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[7];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      boolean boolean0 = false;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      instructionHandleArray0[0] = instructionHandle0;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      float float0 = 2.0F;
      FCONST fCONST0 = new FCONST(float0);
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertNotNull(fCONST0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (Instruction) fCONST0);
      assertTrue(boolean0 == boolean2);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      instructionHandleArray0[1] = instructionHandle1;
      IFNE iFNE0 = new IFNE(instructionHandleArray0[1]);
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertNotNull(iFNE0);
      assertEquals(7, instructionHandleArray0.length);
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iFNE0);
      assertTrue(boolean0 == boolean2);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.size());
      assertEquals(4, instructionList0.getLength());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      assertEquals(7, instructionHandleArray0.length);
      
      instructionHandleArray0[2] = (InstructionHandle) branchHandle0;
      InstructionList instructionList1 = new InstructionList(fCONST0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle2 = instructionList0.insert((Instruction) iFNE0, instructionList1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertTrue(boolean0 == boolean2);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertEquals(5, instructionList0.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertNotNull(instructionHandle2);
      assertEquals(7, instructionHandleArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionHandle2, instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      instructionHandleArray0[3] = instructionHandle2;
      int int0 = 11;
      PrivateAccess.setVariable((Class<InstructionList>) InstructionList.class, instructionList1, "length", (Object) int0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(11, instructionList1.getLength());
      assertEquals(11, instructionList1.size());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle3 = instructionList1.insert(instructionHandleArray0[0], (CompoundInstruction) pUSH0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(boolean0 == boolean2);
      assertFalse(instructionHandle3.equals((Object)instructionHandle0));
      assertFalse(instructionHandle3.equals((Object)instructionHandle1));
      assertFalse(instructionHandle3.equals((Object)instructionHandle2));
      assertTrue(instructionList1.isEmpty());
      assertEquals(12, instructionList1.getLength());
      assertEquals(12, instructionList1.size());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle3.getPosition());
      assertFalse(instructionHandle3.hasTargeters());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals(1, fCONST0.getLength());
      assertEquals((short)13, fCONST0.getOpcode());
      assertNotNull(instructionHandle3);
      assertEquals(7, instructionHandleArray0.length);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle3, instructionHandle0);
      assertNotSame(instructionHandle3, instructionHandle1);
      assertNotSame(instructionHandle3, instructionHandle2);
      
      // Undeclared exception!
      try { 
        instructionList1.delete(instructionHandleArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(1, byteArray0.length);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(instructionList1);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      Iterator<InstructionHandle> iterator0 = instructionList1.iterator();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(iterator0);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.removeObserver(instructionListObserver0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      boolean boolean0 = true;
      String string0 = instructionList1.toString(boolean0);
      assertEquals("  -1: nop[0](1)\n", string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, instructionArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList0.findHandle((int) byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      Constant[] constantArray0 = new Constant[8];
      int int0 = (-254);
      int int1 = (-152);
      int int2 = (-3272);
      ConstantString constantString0 = new ConstantString(int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((-3272), constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      URI uRI0 = MockURI.aFileURI;
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertNotNull(mockFile0);
      
      String string1 = "";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionList0);
      assertEquals(1, byteArray0.length);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(instructionList1);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      Iterator<InstructionHandle> iterator0 = instructionList1.iterator();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(iterator0);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.removeObserver(instructionListObserver0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      boolean boolean0 = true;
      String string0 = instructionList1.toString(boolean0);
      assertEquals("  -1: nop[0](1)\n", string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertNotNull(instructionArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, instructionArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList0.findHandle((int) byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertEquals(1, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      Constant[] constantArray0 = new Constant[8];
      int int0 = (-254);
      int int1 = (-152);
      int int2 = (-3260);
      ConstantString constantString0 = new ConstantString(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((-3260), constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      constantArray0[2] = (Constant) constantString0;
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(mockFile0);
      
      String string1 = "";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = null;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-95);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)33;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[6] = byte6;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertEquals(5, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = true;
      instructionList0.setPositions(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertEquals(5, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertEquals(7, byteArray0.length);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(5, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertEquals(5, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(5, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertEquals(7, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      SALOAD sALOAD0 = new SALOAD();
      assertEquals(1, sALOAD0.getLength());
      assertEquals((short)53, sALOAD0.getOpcode());
      assertEquals("saload", sALOAD0.getName());
      assertNotNull(sALOAD0);
      
      sALOAD0.dispose();
      assertEquals(1, sALOAD0.getLength());
      assertEquals((short)53, sALOAD0.getOpcode());
      assertEquals("saload", sALOAD0.getName());
      
      LOOKUPSWITCH lOOKUPSWITCH0 = new LOOKUPSWITCH();
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertNotNull(lOOKUPSWITCH0);
      
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(lOOKUPSWITCH0);
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      int int0 = 168;
      InstructionHandle instructionHandle0 = instructionList0.findHandle(int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(5, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.size());
      assertNull(instructionHandle0);
      assertEquals(7, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList0.insert((InstructionHandle) branchHandle0, instructionList1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)33}, byteArray0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList0.isEmpty());
      assertEquals(10, instructionList0.size());
      assertEquals(10, instructionList0.getLength());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertEquals(7, byteArray0.length);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      SWITCH sWITCH0 = null;
      try {
        sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, branchHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SWITCH", e);
      }
  }
}
