/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:27:10 GMT 2018
 */

package org.apache.commons.jxpath.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.GenericDeclaration;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.util.MethodLookupUtils;
import org.apache.commons.jxpath.util.TypeConverter;
import org.apache.commons.jxpath.util.TypeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodLookupUtils_ESTest extends MethodLookupUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = null;
      Class<Object> class0 = Object.class;
      Object object0 = PrivateAccess.callMethod((Class<MethodLookupUtils>) MethodLookupUtils.class, methodLookupUtils0, "matchType", (Object) class0, (Class<?>) Class.class, (Object) methodLookupUtils0, (Class<?>) Object.class);
      assertEquals(1, object0);
      assertNotNull(object0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      classArray0[2] = class0;
      classArray0[3] = class0;
      classArray0[4] = class0;
      Class<Object> class2 = Object.class;
      classArray0[5] = class2;
      classArray0[6] = class0;
      Object[] objectArray0 = null;
      Object object1 = PrivateAccess.callMethod((Class<MethodLookupUtils>) MethodLookupUtils.class, methodLookupUtils0, "matchParameterTypes", (Object) classArray0, (Class<?>) Class[].class, (Object) objectArray0, (Class<?>) Object[].class);
      assertEquals(0, object1);
      assertEquals(7, classArray0.length);
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Class<Object> class3 = Object.class;
      String string0 = null;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class3, string0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      Constructor constructor0 = MethodLookupUtils.lookupConstructor(class0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      String string0 = "H\"mS6_!";
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(typeConverter0).convert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "replaceFirst";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) string0;
      objectArray0[2] = (Object) class0;
      String string1 = "substring";
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, string1, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/ConvertUtils
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = null;
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      assertNotNull(methodLookupUtils0);
      
      Class<GenericDeclaration>[] classArray0 = (Class<GenericDeclaration>[]) Array.newInstance(Class.class, 0);
      Object object0 = PrivateAccess.callMethod((Class<MethodLookupUtils>) MethodLookupUtils.class, methodLookupUtils0, "matchParameterTypes", (Object) classArray0, (Class<?>) Class[].class, (Object) objectArray0, (Class<?>) Object[].class);
      assertEquals(2, object0);
      assertEquals(0, classArray0.length);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "replaceFirst";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) string0;
      String string1 = "substring";
      Method method0 = MethodLookupUtils.lookupMethod(class0, string1, objectArray0);
      assertEquals(3, objectArray0.length);
      assertNotNull(method0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertEquals("substring", method0.getName());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isVarArgs());
      assertEquals("public java.lang.String java.lang.String.substring(int,int)", method0.toString());
      assertFalse(method0.isBridge());
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      String string0 = "getComponentType";
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertNotNull(method0);
      assertEquals("public native java.lang.Class java.lang.Class.getComponentType()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals("getComponentType", method0.getName());
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertEquals(257, method0.getModifiers());
      assertFalse(method0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "replaceFirst";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) string0;
      objectArray0[2] = (Object) class0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertEquals(3, objectArray0.length);
      assertNotNull(method0);
      assertFalse(method0.isBridge());
      assertEquals("replaceFirst", method0.getName());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isAccessible());
      assertEquals("public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)", method0.toString());
      assertFalse(method0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(typeConverter0).canConvert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      String string0 = "Ambigous method call: ";
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, classArray0);
      assertEquals(7, classArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "getComponentType";
      Object[] objectArray0 = new Object[0];
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "replaceFirst";
      Object[] objectArray0 = new Object[3];
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertEquals(3, objectArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "replaceFirst";
      Object[] objectArray0 = null;
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "j";
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Method method0 = MethodLookupUtils.lookupStaticMethod(classArray0[0], string0, classArray0);
      assertEquals(4, classArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[0];
      String string0 = "hashCode";
      Method method0 = MethodLookupUtils.lookupStaticMethod(class0, string0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertNotNull(method0);
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertEquals(257, method0.getModifiers());
      assertFalse(method0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "replaceFirst";
      Object[] objectArray0 = null;
      Method method0 = MethodLookupUtils.lookupStaticMethod(class0, string0, objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class0, classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous constructor [null, null, null, null]
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = null;
      Constructor constructor0 = MethodLookupUtils.lookupConstructor(class0, objectArray0);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      assertNotNull(methodLookupUtils0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(typeConverter0).canConvert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      Object object0 = PrivateAccess.callMethod((Class<MethodLookupUtils>) MethodLookupUtils.class, methodLookupUtils0, "matchParameterTypes", (Object) classArray0, (Class<?>) Class[].class, (Object) classArray0, (Class<?>) Object[].class);
      assertEquals(0, object0);
      assertEquals(7, classArray0.length);
      assertNotNull(object0);
  }
}
