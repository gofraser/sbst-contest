/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 19:57:11 GMT 2018
 */

package org.apache.commons.jxpath.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.util.MethodLookupUtils;
import org.apache.commons.jxpath.util.TypeConverter;
import org.apache.commons.jxpath.util.TypeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodLookupUtils_ESTest extends MethodLookupUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = null;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class0, string0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(typeConverter0).convert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      String string0 = "org.apache.commons.jxpath.util.MethodLookupUtils";
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "replace";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) string0;
      objectArray0[2] = (Object) class0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/ConvertUtils
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "replace";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) string0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: replace
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "~-Vr(!aVW'";
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertEquals(6, objectArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = null;
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      assertNotNull(methodLookupUtils0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      classArray0[0] = class0;
      Object object0 = PrivateAccess.callMethod((Class<MethodLookupUtils>) MethodLookupUtils.class, methodLookupUtils0, "matchParameterTypes", (Object) classArray0, (Class<?>) Class[].class, (Object) objectArray0, (Class<?>) Object[].class);
      assertEquals(2, classArray0.length);
      assertEquals(0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      String string0 = "getMethod";
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertEquals(8, objectArray0.length);
      assertNull(method0);
      
      String string1 = "replaceAll";
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) string0;
      Method method1 = MethodLookupUtils.lookupMethod(class0, string1, objectArray1);
      assertEquals(3, objectArray1.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(method1.isBridge());
      assertFalse(method1.isSynthetic());
      assertEquals("public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)", method1.toString());
      assertFalse(method1.isVarArgs());
      assertFalse(method1.isAccessible());
      assertEquals("replaceAll", method1.getName());
      assertEquals(1, method1.getModifiers());
      assertNotSame(string1, string0);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(method1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class0;
      String string0 = "getDeclaredMethod";
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertEquals(3, objectArray0.length);
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isAccessible());
      assertEquals(129, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertEquals("public java.lang.reflect.Method java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class[]) throws java.lang.NoSuchMethodException,java.lang.SecurityException", method0.toString());
      assertEquals("getDeclaredMethod", method0.getName());
      assertTrue(method0.isVarArgs());
      assertNotNull(method0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class0;
      String string0 = "notifyAll";
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertEquals(3, objectArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      String string0 = "notifyAll";
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(method0.isAccessible());
      assertEquals(273, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isSynthetic());
      assertEquals("notifyAll", method0.getName());
      assertEquals("public final native void java.lang.Object.notifyAll()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertNotNull(method0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      String string0 = "~-Vr(!aVW'";
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "toUpperCase";
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[0];
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      String string0 = "~-Vr(!aVW'";
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "~-Vr(!aVW'";
      Object[] objectArray0 = null;
      Method method0 = MethodLookupUtils.lookupMethod(class0, string0, objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<String> class0 = String.class;
      String string0 = "_0})$l:PBw8";
      Method method0 = MethodLookupUtils.lookupStaticMethod(class0, string0, classArray0);
      assertEquals(3, classArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "notifyAll";
      Object[] objectArray0 = null;
      Method method0 = MethodLookupUtils.lookupStaticMethod(class0, string0, objectArray0);
      assertEquals("notifyAll", method0.getName());
      assertFalse(method0.isBridge());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isAccessible());
      assertEquals(273, method0.getModifiers());
      assertEquals("public final native void java.lang.Object.notifyAll()", method0.toString());
      assertFalse(method0.isSynthetic());
      assertNotNull(method0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      String string0 = "~-Vr(!aVW'";
      Method method0 = MethodLookupUtils.lookupStaticMethod(class0, string0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      Constructor constructor0 = MethodLookupUtils.lookupConstructor(class0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = null;
      Constructor constructor0 = MethodLookupUtils.lookupConstructor(class0, objectArray0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      assertNotNull(methodLookupUtils0);
      
      boolean boolean0 = false;
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(typeConverter0).canConvert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 9);
      Class<Method> class0 = Method.class;
      classArray0[0] = class0;
      Object object0 = PrivateAccess.callMethod((Class<MethodLookupUtils>) MethodLookupUtils.class, methodLookupUtils0, "matchParameterTypes", (Object) classArray0, (Class<?>) Class[].class, (Object) classArray0, (Class<?>) Object[].class);
      assertEquals(9, classArray0.length);
      assertEquals(0, object0);
      assertNotNull(object0);
  }
}
