/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:02:38 GMT 2018
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.Class2HTML;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Class2HTML_ESTest extends Class2HTML_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "bcel.maxcached.size";
      String string1 = Class2HTML.referenceType(string0);
      assertEquals("<A HREF=\"bcel.maxcached.size.html\" TARGET=_top>bcel.maxcached.size</A>", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      java.lang.ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      java.lang.ClassLoader classLoader2 = java.lang.ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader0);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotNull(classLoader2);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("`java.lang.Object_attributes.html");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertNotNull(classLoaderRepository0);
      
      java.lang.ClassLoader classLoader3 = java.lang.ClassLoader.getSystemClassLoader();
      assertSame(classLoader3, classLoader0);
      assertSame(classLoader3, classLoader2);
      assertFalse(classLoader3.equals((Object)classLoader1));
      assertNotNull(classLoader3);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isPrivate());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertSame(classLoader0, classLoader2);
      assertSame(classLoader0, classLoader3);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader3));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertNotNull(javaClass0);
      
      String string2 = "`";
      Class2HTML class2HTML0 = null;
      try {
        class2HTML0 = new Class2HTML(javaClass0, string2);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSuper());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      
      String string0 = "Q]N.}";
      javaClass0.dump(string0);
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSuper());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      
      String string1 = "";
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, string1);
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSuper());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(class2HTML0);
      
      String string2 = "RS(-P";
      String string3 = Class2HTML.referenceType(string2);
      assertEquals("<A HREF=\"RS(-P.html\" TARGET=_top>RS(-P</A>", string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string3;
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "Qo%Y6%b/tN[x@Z[DBd(";
      String string1 = Class2HTML.referenceType(string0);
      assertEquals("<A HREF=\"Qo%Y6%b/tN.html\" TARGET=_top>Qo%Y6%b.tN[x@Z[DBd(</A>", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 2603;
      // Undeclared exception!
      try { 
        Class2HTML.referenceClass(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      String string1 = Class2HTML.toHTML(string0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Class2HTML.referenceType(string1);
      assertEquals("<A HREF=\".html\" TARGET=_top></A>", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "wqNdM=Nc)'";
      String string4 = Class2HTML.referenceType(string3);
      assertEquals("<A HREF=\"wqNdM=Nc)'.html\" TARGET=_top>wqNdM=Nc)'</A>", string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      ClassPath classPath0 = null;
      ClassPath classPath1 = new ClassPath(classPath0, string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(classPath1);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(classPathRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(javaClass0);
      
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, string1);
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(class2HTML0);
      
      int int0 = 2072;
      // Undeclared exception!
      try { 
        Class2HTML.referenceClass(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2072. Constant pool size is: 78
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "bu^[]w?4HON";
      String string1 = Class2HTML.referenceType(string0);
      assertEquals("<A HREF=\"bu^.html\" TARGET=_top>bu^[]w?4HON</A>", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 0;
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Class2HTML.toHTML(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Class2HTML.referenceType(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      String string1 = Class2HTML.referenceType(string0);
      assertEquals("<A HREF=\".html\" TARGET=_top></A>", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[6];
      String string2 = "";
      stringArray0[0] = string2;
      stringArray0[1] = string0;
      String string3 = "{-!$16{~v)B";
      stringArray0[2] = string3;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = string1;
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "6};5m{lCJgcTLp#*";
      String string1 = Class2HTML.toHTML(string0);
      assertEquals("6};5m{lCJgcTLp#*", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      String string3 = Class2HTML.toHTML(string2);
      assertEquals("", string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "9g>u)EfHsNz1xYs[]:>";
      ClassPath classPath0 = new ClassPath(string0);
      assertNotNull(classPath0);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      assertNotNull(classPathRepository0);
      
      JavaClass javaClass0 = classPathRepository0.findClass(string0);
      assertNull(javaClass0);
      
      Class2HTML class2HTML0 = null;
      try {
        class2HTML0 = new Class2HTML(javaClass0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "</A></TD></TR>\n</TABLE>\n";
      String string1 = Class2HTML.toHTML(string0);
      assertEquals("&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;\\n&lt;/TABLE&gt;\\n", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 6;
      // Undeclared exception!
      try { 
        Class2HTML.referenceClass(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string0 = "2 6hADDt@IsXbFu";
      boolean boolean0 = true;
      classLoader0.setClassAssertionStatus(string0, boolean0);
      java.lang.ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(javaClass0);
      
      String string1 = "*rmHSCW%";
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, string1);
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(class2HTML0);
      
      String string2 = "";
      String string3 = Class2HTML.referenceType(string2);
      assertEquals("<A HREF=\".html\" TARGET=_top></A>", string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Class2HTML.toHTML(string1);
      assertEquals("*rmHSCW%", string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string4;
      String string5 = "z7J,<$fwZw";
      stringArray0[1] = string5;
      stringArray0[2] = string4;
      stringArray0[3] = string4;
      stringArray0[4] = string4;
      stringArray0[5] = string1;
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-1747);
      // Undeclared exception!
      try { 
        Class2HTML.referenceClass(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 13;
      // Undeclared exception!
      try { 
        Class2HTML.referenceClass(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "<illegal opcode>";
      stringArray0[0] = string0;
      String string1 = "-W";
      stringArray0[1] = string1;
      String string2 = "-zip";
      stringArray0[2] = string2;
      stringArray0[3] = stringArray0[2];
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // -zip (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Class2HTML.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = "ZN&Weq{";
      String string1 = Class2HTML.toHTML(string0);
      assertEquals("ZN&Weq{", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "bcel.maxcached.size";
      String string1 = Class2HTML.referenceType(string0);
      assertEquals("<A HREF=\"bcel.maxcached.size.html\" TARGET=_top>bcel.maxcached.size</A>", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      java.lang.ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isClass());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isNative());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(javaClass0);
      
      String string2 = "`";
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, string2);
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isClass());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isNative());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(class2HTML0);
      
      String string3 = "9 5OLT[)>J;G";
      String string4 = Class2HTML.referenceType(string3);
      assertEquals("<A HREF=\"9 5OLT.html\" TARGET=_top>9 5OLT[)>J;G</A>", string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = Class2HTML.referenceType(string1);
      assertEquals("<A HREF=\"<A HREF=\"bcel.maxcached.size.html\" TARGET=_top>bcel.maxcached.size</A>.html\" TARGET=_top><A HREF=\"bcel.maxcached.size.html\" TARGET=_top>bcel.maxcached.size<.A></A>", string5);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = Class2HTML.referenceClass(javaClass0.HEAP);
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isClass());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isNative());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("<A HREF=\"java.lang.Object_cp.html#cp1\" TARGET=ConstantPool>StringBuilder</A>", string6);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
  }
}
