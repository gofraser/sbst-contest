/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 21:11:06 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = 3784;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(3784, sparseVector0.length());
      assertNotNull(sparseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toRowMatrix();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(3784, sparseVector0.length());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3784, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(cRSMatrix0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(3784, sparseVector0.length());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3784, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(5, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      assertEquals(3, doubleArray0.length);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(5, denseMatrix0.columns());
      assertNotNull(singularValueDecompositor0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = singularValueDecompositor0.applicableTo(denseMatrix0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(5, denseMatrix0.columns());
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[4];
      double double0 = 330.279656983;
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      double double1 = (-839.849840138065);
      doubleArray1[2] = double1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = double0;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      assertEquals(3, doubleArray0.length);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(singularValueDecompositor0);
      assertEquals(3, doubleArray0.length);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(4, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(matrixArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, matrixArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[4];
      double double0 = 330.279656983;
      doubleArray1[0] = double0;
      double double1 = (-839.849840138065);
      doubleArray1[2] = double1;
      doubleArray1[3] = doubleArray1[2];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double1;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      assertEquals(3, doubleArray0.length);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(singularValueDecompositor0);
      assertEquals(3, doubleArray0.length);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(4, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(matrixArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, matrixArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[4];
      double double0 = 330.279656983;
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = doubleArray1[0];
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      assertEquals(3, doubleArray0.length);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(singularValueDecompositor0);
      assertEquals(3, doubleArray0.length);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(4, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(matrixArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, matrixArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = 2925;
      int int1 = 0;
      Matrix matrix0 = Matrix.unit(int0, int1);
      assertEquals(0, matrix0.columns());
      assertEquals(2925, matrix0.rows());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(matrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      assertEquals(0, matrix0.columns());
      assertEquals(2925, matrix0.rows());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      double[] doubleArray0 = new double[5];
      double double0 = (-2000.7635674986);
      doubleArray0[0] = double0;
      double double1 = (-1343.29796661945);
      doubleArray0[2] = double1;
      double double2 = 2209.608549;
      doubleArray0[4] = double2;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(5, sparseVector0.length());
      assertEquals(3, sparseVector0.cardinality());
      assertEquals(0.6, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2000.7635674986), 0.0, (-1343.29796661945), 0.0, 2209.608549}, doubleArray0, 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      assertEquals(5, sparseVector0.length());
      assertEquals(3, sparseVector0.cardinality());
      assertEquals(0.6, sparseVector0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(0.36, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4882369.939813886, cRSMatrix0.max(), 0.01);
      assertEquals((-4420904.283272645), cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2000.7635674986), 0.0, (-1343.29796661945), 0.0, 2209.608549}, doubleArray0, 0.01);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(cRSMatrix0);
      assertEquals(5, sparseVector0.length());
      assertEquals(3, sparseVector0.cardinality());
      assertEquals(0.6, sparseVector0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(0.36, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4882369.939813886, cRSMatrix0.max(), 0.01);
      assertEquals((-4420904.283272645), cRSMatrix0.min(), 0.01);
      assertNotNull(singularValueDecompositor0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2000.7635674986), 0.0, (-1343.29796661945), 0.0, 2209.608549}, doubleArray0, 0.01);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(5, sparseVector0.length());
      assertEquals(3, sparseVector0.cardinality());
      assertEquals(0.6, sparseVector0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(0.36, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4882369.939813886, cRSMatrix0.max(), 0.01);
      assertEquals((-4420904.283272645), cRSMatrix0.min(), 0.01);
      assertNotNull(matrixArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, matrixArray0.length);
      assertArrayEquals(new double[] {(-2000.7635674986), 0.0, (-1343.29796661945), 0.0, 2209.608549}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Matrix matrix0 = null;
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.SingularValueDecompositor", e);
      }
  }
}
