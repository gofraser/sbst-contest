/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:35:36 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = 292;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int0, int0);
      assertEquals(292, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(292.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(292, rowMajorSparseMatrix0.rows());
      assertEquals(0.003424657534246575, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(292, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      assertEquals(292, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(292.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(292, rowMajorSparseMatrix0.rows());
      assertEquals(0.003424657534246575, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(292, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, int0);
      assertEquals(0.3333333333333333, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      assertEquals(0.3333333333333333, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertNotNull(singularValueDecompositor0);
      
      boolean boolean0 = singularValueDecompositor0.applicableTo(columnMajorSparseMatrix0);
      assertEquals(0.3333333333333333, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 0;
      SparseVector sparseVector0 = SparseVector.zero(int0, int0);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toRowMatrix();
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(cRSMatrix0);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 5;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      assertEquals(5, denseMatrix0.rows());
      assertEquals(5, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(5, denseMatrix0.rows());
      assertEquals(5, denseMatrix0.columns());
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(3, matrixArray0.length);
      assertEquals(5, denseMatrix0.rows());
      assertEquals(5, denseMatrix0.columns());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = 3;
      double double0 = (-2128.921865481727);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int0, double0);
      assertEquals(0.3333333333333333, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals((-2128.921865481727), columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      assertEquals(0.3333333333333333, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals((-2128.921865481727), columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(3, matrixArray0.length);
      assertEquals(0.3333333333333333, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals((-2128.921865481727), columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 3;
      int int1 = 8;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(3, matrixArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Matrix matrix0 = null;
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.SingularValueDecompositor", e);
      }
  }
}
