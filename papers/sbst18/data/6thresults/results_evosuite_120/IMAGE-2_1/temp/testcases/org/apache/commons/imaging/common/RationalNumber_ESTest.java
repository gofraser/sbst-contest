/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:17:31 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 2.147483647E9;
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertNotNull(rationalNumber0);
      assertEquals(Integer.MAX_VALUE, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.14748365E9F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals(2147483647L, rationalNumber0.longValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertNotNull(rationalNumber1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(Integer.MAX_VALUE, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2147483647), rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.14748365E9F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals(2147483647L, rationalNumber0.longValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals((-2147483647L), rationalNumber1.longValue());
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals((-2147483647), rationalNumber1.intValue());
      assertEquals((-2.14748365E9F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-2.147483647E9), rationalNumber1.doubleValue(), 0.01);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("-2147483647", string0);
      assertNotNull(string0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(Integer.MAX_VALUE, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2147483647), rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.14748365E9F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals(2147483647L, rationalNumber0.longValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals((-2147483647L), rationalNumber1.longValue());
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals((-2147483647), rationalNumber1.intValue());
      assertEquals((-2.14748365E9F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-2.147483647E9), rationalNumber1.doubleValue(), 0.01);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 0.0;
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertNotNull(rationalNumber0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertNotNull(rationalNumber1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      assertNotNull(rationalNumber2);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals(0.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber2.shortValue());
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      
      String string0 = rationalNumber0.toString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      
      double double1 = rationalNumber0.doubleValue();
      assertEquals(0.0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertEquals(double1, double0, 0.01);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      assertEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      
      String string1 = rationalNumber0.toString();
      assertEquals("0", string1);
      assertNotNull(string1);
      assertEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(string1, string0);
      
      String string2 = rationalNumber2.toString();
      assertEquals("0", string2);
      assertNotNull(string2);
      assertEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals(0.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber2.shortValue());
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = rationalNumber2.toString();
      assertEquals("0", string3);
      assertNotNull(string3);
      assertEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals(0.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber2.shortValue());
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      long long1 = rationalNumber0.longValue();
      assertEquals(0L, long1);
      assertEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertTrue(long1 == long0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      
      long long2 = rationalNumber0.longValue();
      assertEquals(0L, long2);
      assertEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      
      String string4 = rationalNumber0.toString();
      assertEquals("0", string4);
      assertNotNull(string4);
      assertEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      
      double double2 = rationalNumber0.doubleValue();
      assertEquals(0.0, double2, 0.01);
      assertEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      
      long long3 = rationalNumber0.longValue();
      assertEquals(0L, long3);
      assertEquals(double0, double1, 0.01);
      assertEquals(double0, double2, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertTrue(long3 == long1);
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      
      RationalNumber rationalNumber3 = rationalNumber2.negate();
      assertNotNull(rationalNumber3);
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertEquals(double0, double1, 0.01);
      assertEquals(double0, double2, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(0, rationalNumber3.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals(0.0F, rationalNumber3.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber3.doubleValue(), 0.01);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals(0.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber2.shortValue());
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      
      double double3 = rationalNumber2.doubleValue();
      assertEquals(0.0, double3, 0.01);
      assertEquals(double0, double1, 0.01);
      assertEquals(double0, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals(0.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber2.shortValue());
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      
      String string5 = rationalNumber1.toString();
      assertEquals("0", string5);
      assertNotNull(string5);
      assertEquals(double0, double3, 0.01);
      assertEquals(double0, double1, 0.01);
      assertEquals(double0, double2, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      assertEquals(double0, double3, 0.01);
      assertEquals(double0, double1, 0.01);
      assertEquals(double0, double2, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      
      RationalNumber rationalNumber4 = rationalNumber0.negate();
      assertNotNull(rationalNumber4);
      assertEquals(double0, double3, 0.01);
      assertEquals(double0, double1, 0.01);
      assertEquals(double0, double2, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(0, rationalNumber4.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals(0.0, rationalNumber4.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber2);
      
      RationalNumber rationalNumber5 = rationalNumber4.negate();
      assertNotNull(rationalNumber5);
      assertEquals(double0, double3, 0.01);
      assertEquals(double0, double1, 0.01);
      assertEquals(double0, double2, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(0, rationalNumber4.numerator);
      assertEquals(0, rationalNumber5.numerator);
      assertEquals(1, rationalNumber5.divisor);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals(0.0, rationalNumber4.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertEquals(0L, rationalNumber5.longValue());
      assertEquals(0.0, rationalNumber5.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber5.byteValue());
      assertEquals(0.0F, rationalNumber5.floatValue(), 0.01F);
      assertEquals(0, rationalNumber5.intValue());
      assertEquals((short)0, rationalNumber5.shortValue());
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber3);
      
      String string6 = rationalNumber4.toString();
      assertEquals("0", string6);
      assertNotNull(string6);
      assertEquals(double0, double3, 0.01);
      assertEquals(double0, double1, 0.01);
      assertEquals(double0, double2, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(0, rationalNumber4.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals(0.0, rationalNumber4.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      
      String string7 = rationalNumber4.toDisplayString();
      assertEquals("0", string7);
      assertNotNull(string7);
      assertEquals(double0, double3, 0.01);
      assertEquals(double0, double1, 0.01);
      assertEquals(double0, double2, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(0, rationalNumber4.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals(0.0, rationalNumber4.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      
      int int1 = rationalNumber0.intValue();
      assertEquals(0, int1);
      assertEquals(double0, double3, 0.01);
      assertEquals(double0, double1, 0.01);
      assertEquals(double0, double2, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertTrue(int1 == int0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber5);
      
      long long4 = (-1L);
      long long5 = 0L;
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(long4, long5);
      assertNotNull(rationalNumber6);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long5);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertTrue(long5 == long1);
      assertTrue(long5 == long0);
      assertTrue(long5 == long2);
      assertFalse(long5 == long4);
      assertTrue(long5 == long3);
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertEquals(0, rationalNumber6.divisor);
      assertEquals(1, rationalNumber6.numerator);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber6.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber6.floatValue(), 0.01F);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber4);
      
      RationalNumber rationalNumber7 = rationalNumber6.negate();
      assertNotNull(rationalNumber7);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long5);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertTrue(long5 == long1);
      assertTrue(long5 == long0);
      assertTrue(long5 == long2);
      assertFalse(long5 == long4);
      assertTrue(long5 == long3);
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertEquals(0, rationalNumber6.divisor);
      assertEquals(1, rationalNumber6.numerator);
      assertEquals(0, rationalNumber7.divisor);
      assertEquals((-1), rationalNumber7.numerator);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber6.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber6.floatValue(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, rationalNumber7.floatValue(), 0.01F);
      assertEquals(Double.NEGATIVE_INFINITY, rationalNumber7.doubleValue(), 0.01);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber7);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber4);
      
      RationalNumber rationalNumber8 = rationalNumber1.negate();
      assertNotNull(rationalNumber8);
      assertEquals(double0, double3, 0.01);
      assertEquals(double0, double1, 0.01);
      assertEquals(double0, double2, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber8.divisor);
      assertEquals(0, rationalNumber8.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0, rationalNumber8.intValue());
      assertEquals(0.0, rationalNumber8.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber8.longValue());
      assertEquals((short)0, rationalNumber8.shortValue());
      assertEquals((byte)0, rationalNumber8.byteValue());
      assertEquals(0.0F, rationalNumber8.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber6);
      
      RationalNumber rationalNumber9 = rationalNumber8.negate();
      assertNotNull(rationalNumber9);
      assertEquals(double0, double3, 0.01);
      assertEquals(double0, double1, 0.01);
      assertEquals(double0, double2, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber9.equals((Object)rationalNumber4));
      assertFalse(rationalNumber9.equals((Object)rationalNumber5));
      assertFalse(rationalNumber9.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber2));
      assertFalse(rationalNumber9.equals((Object)rationalNumber7));
      assertFalse(rationalNumber9.equals((Object)rationalNumber8));
      assertFalse(rationalNumber9.equals((Object)rationalNumber3));
      assertFalse(rationalNumber9.equals((Object)rationalNumber1));
      assertFalse(rationalNumber9.equals((Object)rationalNumber6));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber8.divisor);
      assertEquals(0, rationalNumber8.numerator);
      assertEquals(1, rationalNumber9.divisor);
      assertEquals(0, rationalNumber9.numerator);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0, rationalNumber8.intValue());
      assertEquals(0.0, rationalNumber8.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber8.longValue());
      assertEquals((short)0, rationalNumber8.shortValue());
      assertEquals((byte)0, rationalNumber8.byteValue());
      assertEquals(0.0F, rationalNumber8.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber9.shortValue());
      assertEquals(0.0F, rationalNumber9.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber9.longValue());
      assertEquals(0, rationalNumber9.intValue());
      assertEquals(0.0, rationalNumber9.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber9.byteValue());
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber9);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber9, rationalNumber4);
      assertNotSame(rationalNumber9, rationalNumber5);
      assertNotSame(rationalNumber9, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber2);
      assertNotSame(rationalNumber9, rationalNumber7);
      assertNotSame(rationalNumber9, rationalNumber8);
      assertNotSame(rationalNumber9, rationalNumber3);
      assertNotSame(rationalNumber9, rationalNumber1);
      assertNotSame(rationalNumber9, rationalNumber6);
      
      float float1 = rationalNumber3.floatValue();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber9));
      assertFalse(rationalNumber3.equals((Object)rationalNumber8));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertEquals(double0, double3, 0.01);
      assertEquals(double0, double1, 0.01);
      assertEquals(double0, double2, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber9));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber8));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertEquals(float1, float0, 0.01F);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(0, rationalNumber3.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals(0.0F, rationalNumber3.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber3.doubleValue(), 0.01);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals(0.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber2.shortValue());
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber9);
      assertNotSame(rationalNumber3, rationalNumber8);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber9);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber7);
      
      double double4 = rationalNumber6.doubleValue();
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long5);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertTrue(long5 == long1);
      assertTrue(long5 == long0);
      assertTrue(long5 == long2);
      assertFalse(long5 == long4);
      assertTrue(long5 == long3);
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber7));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber9));
      assertFalse(rationalNumber6.equals((Object)rationalNumber8));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertEquals(0, rationalNumber6.divisor);
      assertEquals(1, rationalNumber6.numerator);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber6.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber6.floatValue(), 0.01F);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber7);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber9);
      assertNotSame(rationalNumber6, rationalNumber8);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber4);
      
      // Undeclared exception!
      try { 
        rationalNumber6.intValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertNotNull(rationalNumber0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      
      String string0 = rationalNumber0.toString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      
      long long0 = 2147483647L;
      long long1 = 0L;
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(long0, long1);
      assertNotNull(rationalNumber1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(0, rationalNumber1.divisor);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber1.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber1.doubleValue(), 0.01);
      assertNotSame(rationalNumber1, rationalNumber0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertNotSame(rationalNumber0, rationalNumber1);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("0", string1);
      assertNotNull(string1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(string1, string0);
      
      long long2 = 0L;
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(long2, long2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 0.0;
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertNotNull(rationalNumber0);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      
      double double1 = rationalNumber0.doubleValue();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertNotNull(rationalNumber1);
      assertEquals(double0, double1, 0.01);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber1.shortValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = (-1.0);
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertNotNull(rationalNumber0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      
      long long0 = rationalNumber0.longValue();
      assertEquals((-1L), long0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = (-624);
      RationalNumber rationalNumber0 = new RationalNumber(int0, int0);
      assertNotNull(rationalNumber0);
      assertEquals((-624), rationalNumber0.numerator);
      assertEquals((-624), rationalNumber0.divisor);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1, rationalNumber0.intValue());
      
      long long0 = 2355L;
      long long1 = (-2486L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(long0, long1);
      assertNotNull(rationalNumber1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(2486, rationalNumber1.divisor);
      assertEquals((-2355), rationalNumber1.numerator);
      assertEquals((-0.9473049074818987), rationalNumber1.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((-0.9473049F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertNotSame(rationalNumber1, rationalNumber0);
      
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      assertNotNull(rationalNumber2);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertEquals((-624), rationalNumber0.numerator);
      assertEquals((-624), rationalNumber0.divisor);
      assertEquals((-624), rationalNumber2.divisor);
      assertEquals(624, rationalNumber2.numerator);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((-1), rationalNumber2.intValue());
      assertEquals((-1L), rationalNumber2.longValue());
      assertEquals((-1.0), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber2.byteValue());
      assertEquals((short) (-1), rationalNumber2.shortValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      assertNotNull(string0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertEquals((-624), rationalNumber0.numerator);
      assertEquals((-624), rationalNumber0.divisor);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1, rationalNumber0.intValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      
      String string1 = rationalNumber0.toString();
      assertEquals("1", string1);
      assertNotNull(string1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertTrue(string1.equals((Object)string0));
      assertEquals((-624), rationalNumber0.numerator);
      assertEquals((-624), rationalNumber0.divisor);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1, rationalNumber0.intValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(string1, string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertEquals((-624), rationalNumber0.numerator);
      assertEquals((-624), rationalNumber0.divisor);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1, rationalNumber0.intValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      
      float float1 = rationalNumber0.floatValue();
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertEquals(float1, float0, 0.01F);
      assertEquals((-624), rationalNumber0.numerator);
      assertEquals((-624), rationalNumber0.divisor);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1, rationalNumber0.intValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      
      int int1 = rationalNumber0.intValue();
      assertEquals(1, int1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(int1 == int0);
      assertEquals((-624), rationalNumber0.numerator);
      assertEquals((-624), rationalNumber0.divisor);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1, rationalNumber0.intValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      
      String string2 = rationalNumber2.toDisplayString();
      assertEquals("-1", string2);
      assertNotNull(string2);
      assertFalse(int0 == int1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-624), rationalNumber0.numerator);
      assertEquals((-624), rationalNumber0.divisor);
      assertEquals((-624), rationalNumber2.divisor);
      assertEquals(624, rationalNumber2.numerator);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((-1), rationalNumber2.intValue());
      assertEquals((-1L), rationalNumber2.longValue());
      assertEquals((-1.0), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber2.byteValue());
      assertEquals((short) (-1), rationalNumber2.shortValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      int int2 = rationalNumber2.intValue();
      assertEquals((-1), int2);
      assertFalse(int0 == int1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-624), rationalNumber0.numerator);
      assertEquals((-624), rationalNumber0.divisor);
      assertEquals((-624), rationalNumber2.divisor);
      assertEquals(624, rationalNumber2.numerator);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((-1), rationalNumber2.intValue());
      assertEquals((-1L), rationalNumber2.longValue());
      assertEquals((-1.0), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber2.byteValue());
      assertEquals((short) (-1), rationalNumber2.shortValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 3111.7;
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertNotNull(rationalNumber0);
      assertEquals(31117, rationalNumber0.numerator);
      assertEquals(10, rationalNumber0.divisor);
      assertEquals((short)3111, rationalNumber0.shortValue());
      assertEquals(3111.7F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)39, rationalNumber0.byteValue());
      assertEquals(3111.7, rationalNumber0.doubleValue(), 0.01);
      assertEquals(3111, rationalNumber0.intValue());
      assertEquals(3111L, rationalNumber0.longValue());
      
      int int0 = rationalNumber0.intValue();
      assertEquals(3111, int0);
      assertEquals(31117, rationalNumber0.numerator);
      assertEquals(10, rationalNumber0.divisor);
      assertEquals((short)3111, rationalNumber0.shortValue());
      assertEquals(3111.7F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)39, rationalNumber0.byteValue());
      assertEquals(3111.7, rationalNumber0.doubleValue(), 0.01);
      assertEquals(3111, rationalNumber0.intValue());
      assertEquals(3111L, rationalNumber0.longValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1078;
      RationalNumber rationalNumber0 = new RationalNumber(int0, int0);
      assertNotNull(rationalNumber0);
      assertEquals(1078, rationalNumber0.numerator);
      assertEquals(1078, rationalNumber0.divisor);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      assertNotNull(string0);
      assertEquals(1078, rationalNumber0.numerator);
      assertEquals(1078, rationalNumber0.divisor);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      
      String string1 = rationalNumber0.toString();
      assertEquals("1", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1078, rationalNumber0.numerator);
      assertEquals(1078, rationalNumber0.divisor);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertNotSame(string1, string0);
      
      long long0 = (-2147483648L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(long0, long0);
      assertNotNull(rationalNumber1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertNotSame(rationalNumber1, rationalNumber0);
      
      long long1 = rationalNumber1.longValue();
      assertEquals(1L, long1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(long1 == long0);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertNotSame(rationalNumber1, rationalNumber0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      RationalNumber rationalNumber0 = new RationalNumber(int0, int0);
      assertNotNull(rationalNumber0);
      assertEquals(0, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(Double.NaN, rationalNumber0.doubleValue(), 0.01);
      assertEquals(Float.NaN, rationalNumber0.floatValue(), 0.01F);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(Float.NaN, float0, 0.01F);
      assertEquals(0, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(Double.NaN, rationalNumber0.doubleValue(), 0.01);
      assertEquals(Float.NaN, rationalNumber0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try { 
        rationalNumber0.longValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 6598L;
      long long1 = (-14L);
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(long0, long1);
      assertNotNull(rationalNumber0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-471.286", string0);
      assertNotNull(string0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      
      String string1 = rationalNumber0.toString();
      assertEquals("-3299/7 (-471.286)", string1);
      assertNotNull(string1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      assertNotSame(string1, string0);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertNotNull(rationalNumber1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals(3299, rationalNumber1.numerator);
      assertEquals(7, rationalNumber1.divisor);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      assertEquals(471L, rationalNumber1.longValue());
      assertEquals(471, rationalNumber1.intValue());
      assertEquals((short)471, rationalNumber1.shortValue());
      assertEquals(471.2857142857143, rationalNumber1.doubleValue(), 0.01);
      assertEquals(471.2857F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte) (-41), rationalNumber1.byteValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      
      String string2 = rationalNumber0.toDisplayString();
      assertEquals("-471.286", string2);
      assertNotNull(string2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = rationalNumber1.toString();
      assertEquals("3299/7 (471.286)", string3);
      assertNotNull(string3);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals(3299, rationalNumber1.numerator);
      assertEquals(7, rationalNumber1.divisor);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      assertEquals(471L, rationalNumber1.longValue());
      assertEquals(471, rationalNumber1.intValue());
      assertEquals((short)471, rationalNumber1.shortValue());
      assertEquals(471.2857142857143, rationalNumber1.doubleValue(), 0.01);
      assertEquals(471.2857F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte) (-41), rationalNumber1.byteValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      long long2 = (-1466L);
      long long3 = (-1L);
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(long2, long3);
      assertNotNull(rationalNumber2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertEquals(1466, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((byte) (-70), rationalNumber2.byteValue());
      assertEquals(1466, rationalNumber2.intValue());
      assertEquals((short)1466, rationalNumber2.shortValue());
      assertEquals(1466.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(1466L, rationalNumber2.longValue());
      assertEquals(1466.0, rationalNumber2.doubleValue(), 0.01);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      
      String string4 = rationalNumber0.toDisplayString();
      assertEquals("-471.286", string4);
      assertNotNull(string4);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(rationalNumber0.divisor, rationalNumber0.numerator);
      assertNotNull(rationalNumber3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals(7, rationalNumber3.numerator);
      assertEquals((-3299), rationalNumber3.divisor);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((-0.002121855107608366), rationalNumber3.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals((-0.002121855F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0, rationalNumber3.intValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      
      String string5 = rationalNumber3.toString();
      assertEquals("7/-3299 (-0.002)", string5);
      assertNotNull(string5);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals(7, rationalNumber3.numerator);
      assertEquals((-3299), rationalNumber3.divisor);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((-0.002121855107608366), rationalNumber3.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals((-0.002121855F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0, rationalNumber3.intValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf(long2);
      assertNotNull(rationalNumber4);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertEquals((-1466), rationalNumber4.numerator);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals((short) (-1466), rationalNumber4.shortValue());
      assertEquals((byte)70, rationalNumber4.byteValue());
      assertEquals((-1466.0F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((-1466L), rationalNumber4.longValue());
      assertEquals((-1466), rationalNumber4.intValue());
      assertEquals((-1466.0), rationalNumber4.doubleValue(), 0.01);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber3);
      
      String string6 = rationalNumber3.toDisplayString();
      assertEquals("-0.002", string6);
      assertNotNull(string6);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals(7, rationalNumber3.numerator);
      assertEquals((-3299), rationalNumber3.divisor);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((-0.002121855107608366), rationalNumber3.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals((-0.002121855F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0, rationalNumber3.intValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      
      double double0 = (-470.2237871533798);
      RationalNumber rationalNumber5 = RationalNumber.valueOf(double0);
      assertNotNull(rationalNumber5);
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertEquals((-300473), rationalNumber5.numerator);
      assertEquals(639, rationalNumber5.divisor);
      assertEquals((short) (-470), rationalNumber5.shortValue());
      assertEquals((-470.22378716744913), rationalNumber5.doubleValue(), 0.01);
      assertEquals((-470L), rationalNumber5.longValue());
      assertEquals((-470.2238F), rationalNumber5.floatValue(), 0.01F);
      assertEquals((byte)42, rationalNumber5.byteValue());
      assertEquals((-470), rationalNumber5.intValue());
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber3);
      
      RationalNumber rationalNumber6 = rationalNumber4.negate();
      assertNotNull(rationalNumber6);
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertEquals(1466, rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals((-1466), rationalNumber4.numerator);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(1466L, rationalNumber6.longValue());
      assertEquals(1466.0, rationalNumber6.doubleValue(), 0.01);
      assertEquals(1466, rationalNumber6.intValue());
      assertEquals((byte) (-70), rationalNumber6.byteValue());
      assertEquals((short)1466, rationalNumber6.shortValue());
      assertEquals(1466.0F, rationalNumber6.floatValue(), 0.01F);
      assertEquals((short) (-1466), rationalNumber4.shortValue());
      assertEquals((byte)70, rationalNumber4.byteValue());
      assertEquals((-1466.0F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((-1466L), rationalNumber4.longValue());
      assertEquals((-1466), rationalNumber4.intValue());
      assertEquals((-1466.0), rationalNumber4.doubleValue(), 0.01);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber6);
      
      RationalNumber rationalNumber7 = rationalNumber6.negate();
      assertNotNull(rationalNumber7);
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertEquals(1466, rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals(1, rationalNumber7.divisor);
      assertEquals((-1466), rationalNumber7.numerator);
      assertEquals((-1466), rationalNumber4.numerator);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(1466L, rationalNumber6.longValue());
      assertEquals(1466.0, rationalNumber6.doubleValue(), 0.01);
      assertEquals(1466, rationalNumber6.intValue());
      assertEquals((byte) (-70), rationalNumber6.byteValue());
      assertEquals((short)1466, rationalNumber6.shortValue());
      assertEquals(1466.0F, rationalNumber6.floatValue(), 0.01F);
      assertEquals((-1466L), rationalNumber7.longValue());
      assertEquals((-1466), rationalNumber7.intValue());
      assertEquals((-1466.0F), rationalNumber7.floatValue(), 0.01F);
      assertEquals((short) (-1466), rationalNumber7.shortValue());
      assertEquals((byte)70, rationalNumber7.byteValue());
      assertEquals((-1466.0), rationalNumber7.doubleValue(), 0.01);
      assertEquals((short) (-1466), rationalNumber4.shortValue());
      assertEquals((byte)70, rationalNumber4.byteValue());
      assertEquals((-1466.0F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((-1466L), rationalNumber4.longValue());
      assertEquals((-1466), rationalNumber4.intValue());
      assertEquals((-1466.0), rationalNumber4.doubleValue(), 0.01);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber7);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber7);
      
      RationalNumber rationalNumber8 = RationalNumber.valueOf(rationalNumber0.divisor);
      assertNotNull(rationalNumber8);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals(7, rationalNumber8.numerator);
      assertEquals(1, rationalNumber8.divisor);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      assertEquals((byte)7, rationalNumber8.byteValue());
      assertEquals(7, rationalNumber8.intValue());
      assertEquals((short)7, rationalNumber8.shortValue());
      assertEquals(7.0, rationalNumber8.doubleValue(), 0.01);
      assertEquals(7L, rationalNumber8.longValue());
      assertEquals(7.0F, rationalNumber8.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber7);
      
      double double1 = (-2387.65075666939);
      RationalNumber rationalNumber9 = RationalNumber.valueOf(double1);
      assertNotNull(rationalNumber9);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber9.equals((Object)rationalNumber6));
      assertFalse(rationalNumber9.equals((Object)rationalNumber2));
      assertFalse(rationalNumber9.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber1));
      assertFalse(rationalNumber9.equals((Object)rationalNumber8));
      assertFalse(rationalNumber9.equals((Object)rationalNumber5));
      assertFalse(rationalNumber9.equals((Object)rationalNumber7));
      assertFalse(rationalNumber9.equals((Object)rationalNumber4));
      assertFalse(rationalNumber9.equals((Object)rationalNumber3));
      assertEquals(33899, rationalNumber9.divisor);
      assertEquals((-80938973), rationalNumber9.numerator);
      assertEquals((byte) (-83), rationalNumber9.byteValue());
      assertEquals((-2387.651F), rationalNumber9.floatValue(), 0.01F);
      assertEquals((-2387), rationalNumber9.intValue());
      assertEquals((-2387L), rationalNumber9.longValue());
      assertEquals((-2387.6507566594887), rationalNumber9.doubleValue(), 0.01);
      assertEquals((short) (-2387), rationalNumber9.shortValue());
      assertNotSame(rationalNumber9, rationalNumber6);
      assertNotSame(rationalNumber9, rationalNumber2);
      assertNotSame(rationalNumber9, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber1);
      assertNotSame(rationalNumber9, rationalNumber8);
      assertNotSame(rationalNumber9, rationalNumber5);
      assertNotSame(rationalNumber9, rationalNumber7);
      assertNotSame(rationalNumber9, rationalNumber4);
      assertNotSame(rationalNumber9, rationalNumber3);
      
      String string7 = rationalNumber4.toString();
      assertEquals("-1,466", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber9));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber8));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber7));
      assertEquals((-1466), rationalNumber4.numerator);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals((short) (-1466), rationalNumber4.shortValue());
      assertEquals((byte)70, rationalNumber4.byteValue());
      assertEquals((-1466.0F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((-1466L), rationalNumber4.longValue());
      assertEquals((-1466), rationalNumber4.intValue());
      assertEquals((-1466.0), rationalNumber4.doubleValue(), 0.01);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber9);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber8);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber7);
      
      String string8 = rationalNumber3.toDisplayString();
      assertEquals("-0.002", string8);
      assertNotNull(string8);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber9));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber8));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals(7, rationalNumber3.numerator);
      assertEquals((-3299), rationalNumber3.divisor);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((-0.002121855107608366), rationalNumber3.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals((-0.002121855F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0, rationalNumber3.intValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber9);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber8);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber7);
      
      RationalNumber rationalNumber10 = rationalNumber3.negate();
      assertNotNull(rationalNumber10);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber9));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber8));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals((-7), rationalNumber10.numerator);
      assertEquals((-3299), rationalNumber10.divisor);
      assertEquals(7, rationalNumber3.numerator);
      assertEquals((-3299), rationalNumber3.divisor);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      assertEquals(0L, rationalNumber10.longValue());
      assertEquals((short)0, rationalNumber10.shortValue());
      assertEquals(0.002121855107608366, rationalNumber10.doubleValue(), 0.01);
      assertEquals(0.002121855F, rationalNumber10.floatValue(), 0.01F);
      assertEquals(0, rationalNumber10.intValue());
      assertEquals((byte)0, rationalNumber10.byteValue());
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((-0.002121855107608366), rationalNumber3.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals((-0.002121855F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0, rationalNumber3.intValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber1);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber2);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber9);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber8);
      assertNotSame(rationalNumber3, rationalNumber10);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber7);
      
      long long4 = 1L;
      long long5 = (-1466L);
      RationalNumber rationalNumber11 = RationalNumber.valueOf(rationalNumber2.numerator);
      assertNotNull(rationalNumber11);
      assertTrue(long2 == long5);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long4);
      assertFalse(long2 == long3);
      assertFalse(long3 == long4);
      assertFalse(long3 == long5);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber9));
      assertFalse(rationalNumber2.equals((Object)rationalNumber8));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber10));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber11.equals((Object)rationalNumber2));
      assertFalse(rationalNumber11.equals((Object)rationalNumber0));
      assertFalse(rationalNumber11.equals((Object)rationalNumber8));
      assertFalse(rationalNumber11.equals((Object)rationalNumber9));
      assertFalse(rationalNumber11.equals((Object)rationalNumber1));
      assertFalse(rationalNumber11.equals((Object)rationalNumber4));
      assertFalse(rationalNumber11.equals((Object)rationalNumber3));
      assertFalse(rationalNumber11.equals((Object)rationalNumber10));
      assertFalse(rationalNumber11.equals((Object)rationalNumber7));
      assertFalse(rationalNumber11.equals((Object)rationalNumber5));
      assertFalse(rationalNumber11.equals((Object)rationalNumber6));
      assertEquals(1466, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals(1466, rationalNumber11.numerator);
      assertEquals(1, rationalNumber11.divisor);
      assertEquals((byte) (-70), rationalNumber2.byteValue());
      assertEquals(1466, rationalNumber2.intValue());
      assertEquals((short)1466, rationalNumber2.shortValue());
      assertEquals(1466.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(1466L, rationalNumber2.longValue());
      assertEquals(1466.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals(1466, rationalNumber11.intValue());
      assertEquals((byte) (-70), rationalNumber11.byteValue());
      assertEquals(1466L, rationalNumber11.longValue());
      assertEquals(1466.0F, rationalNumber11.floatValue(), 0.01F);
      assertEquals((short)1466, rationalNumber11.shortValue());
      assertEquals(1466.0, rationalNumber11.doubleValue(), 0.01);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber9);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber11);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber10);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber11, rationalNumber2);
      assertNotSame(rationalNumber11, rationalNumber0);
      assertNotSame(rationalNumber11, rationalNumber8);
      assertNotSame(rationalNumber11, rationalNumber9);
      assertNotSame(rationalNumber11, rationalNumber1);
      assertNotSame(rationalNumber11, rationalNumber4);
      assertNotSame(rationalNumber11, rationalNumber3);
      assertNotSame(rationalNumber11, rationalNumber10);
      assertNotSame(rationalNumber11, rationalNumber7);
      assertNotSame(rationalNumber11, rationalNumber5);
      assertNotSame(rationalNumber11, rationalNumber6);
      
      RationalNumber rationalNumber12 = RationalNumber.factoryMethod(long2, rationalNumber0.divisor);
      assertNotNull(rationalNumber12);
      assertFalse(long0 == long4);
      assertFalse(long0 == long5);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long5);
      assertFalse(long1 == long0);
      assertFalse(long1 == long4);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertTrue(long2 == long5);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long4);
      assertFalse(long2 == long3);
      assertFalse(rationalNumber12.equals((Object)rationalNumber6));
      assertFalse(rationalNumber12.equals((Object)rationalNumber5));
      assertFalse(rationalNumber12.equals((Object)rationalNumber8));
      assertFalse(rationalNumber12.equals((Object)rationalNumber9));
      assertFalse(rationalNumber12.equals((Object)rationalNumber2));
      assertFalse(rationalNumber12.equals((Object)rationalNumber0));
      assertFalse(rationalNumber12.equals((Object)rationalNumber3));
      assertFalse(rationalNumber12.equals((Object)rationalNumber10));
      assertFalse(rationalNumber12.equals((Object)rationalNumber4));
      assertFalse(rationalNumber12.equals((Object)rationalNumber11));
      assertFalse(rationalNumber12.equals((Object)rationalNumber7));
      assertFalse(rationalNumber12.equals((Object)rationalNumber1));
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals(7, rationalNumber12.divisor);
      assertEquals((-1466), rationalNumber12.numerator);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      assertEquals((-209), rationalNumber12.intValue());
      assertEquals((-209L), rationalNumber12.longValue());
      assertEquals((-209.42857F), rationalNumber12.floatValue(), 0.01F);
      assertEquals((short) (-209), rationalNumber12.shortValue());
      assertEquals((byte)47, rationalNumber12.byteValue());
      assertEquals((-209.42857142857142), rationalNumber12.doubleValue(), 0.01);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber12, rationalNumber6);
      assertNotSame(rationalNumber12, rationalNumber5);
      assertNotSame(rationalNumber12, rationalNumber8);
      assertNotSame(rationalNumber12, rationalNumber9);
      assertNotSame(rationalNumber12, rationalNumber2);
      assertNotSame(rationalNumber12, rationalNumber0);
      assertNotSame(rationalNumber12, rationalNumber3);
      assertNotSame(rationalNumber12, rationalNumber10);
      assertNotSame(rationalNumber12, rationalNumber4);
      assertNotSame(rationalNumber12, rationalNumber11);
      assertNotSame(rationalNumber12, rationalNumber7);
      assertNotSame(rationalNumber12, rationalNumber1);
      
      String string9 = rationalNumber3.toString();
      assertEquals("7/-3299 (-0.002)", string9);
      assertNotNull(string9);
      assertFalse(long0 == long4);
      assertFalse(long0 == long5);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long5);
      assertFalse(long1 == long0);
      assertFalse(long1 == long4);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber12));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber9));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber11));
      assertFalse(rationalNumber3.equals((Object)rationalNumber8));
      assertFalse(rationalNumber3.equals((Object)rationalNumber10));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber12));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertEquals(7, rationalNumber0.divisor);
      assertEquals((-3299), rationalNumber0.numerator);
      assertEquals(7, rationalNumber3.numerator);
      assertEquals((-3299), rationalNumber3.divisor);
      assertEquals((-471.2857142857143), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-471.2857F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-471), rationalNumber0.intValue());
      assertEquals((byte)41, rationalNumber0.byteValue());
      assertEquals((short) (-471), rationalNumber0.shortValue());
      assertEquals((-471L), rationalNumber0.longValue());
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((-0.002121855107608366), rationalNumber3.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals((-0.002121855F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0, rationalNumber3.intValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber9);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber11);
      assertNotSame(rationalNumber3, rationalNumber8);
      assertNotSame(rationalNumber3, rationalNumber10);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber12);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotSame(string9, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string7);
      assertNotSame(string9, string6);
      assertNotSame(string9, string5);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string3);
      assertNotSame(string9, string2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-775);
      int int1 = 1;
      RationalNumber rationalNumber0 = new RationalNumber(int0, int1);
      assertNotNull(rationalNumber0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-775), rationalNumber0.numerator);
      assertEquals((-775), rationalNumber0.intValue());
      assertEquals((-775L), rationalNumber0.longValue());
      assertEquals((-775.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-775), rationalNumber0.shortValue());
      assertEquals((byte) (-7), rationalNumber0.byteValue());
      assertEquals((-775.0F), rationalNumber0.floatValue(), 0.01F);
      
      double double0 = 1436.800073062;
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-775", string0);
      assertNotNull(string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-775), rationalNumber0.numerator);
      assertEquals((-775), rationalNumber0.intValue());
      assertEquals((-775L), rationalNumber0.longValue());
      assertEquals((-775.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-775), rationalNumber0.shortValue());
      assertEquals((byte) (-7), rationalNumber0.byteValue());
      assertEquals((-775.0F), rationalNumber0.floatValue(), 0.01F);
      
      String string1 = rationalNumber0.toString();
      assertEquals("-775", string1);
      assertNotNull(string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-775), rationalNumber0.numerator);
      assertEquals((-775), rationalNumber0.intValue());
      assertEquals((-775L), rationalNumber0.longValue());
      assertEquals((-775.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-775), rationalNumber0.shortValue());
      assertEquals((byte) (-7), rationalNumber0.byteValue());
      assertEquals((-775.0F), rationalNumber0.floatValue(), 0.01F);
      assertNotSame(string1, string0);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(double0);
      assertNotNull(rationalNumber1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(7184, rationalNumber1.numerator);
      assertEquals(5, rationalNumber1.divisor);
      assertEquals(1436, rationalNumber1.intValue());
      assertEquals(1436.8F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte) (-100), rationalNumber1.byteValue());
      assertEquals(1436L, rationalNumber1.longValue());
      assertEquals((short)1436, rationalNumber1.shortValue());
      assertEquals(1436.8, rationalNumber1.doubleValue(), 0.01);
      assertNotSame(rationalNumber1, rationalNumber0);
      
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      assertNotNull(rationalNumber2);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertEquals(7184, rationalNumber1.numerator);
      assertEquals(5, rationalNumber1.divisor);
      assertEquals((-7184), rationalNumber2.numerator);
      assertEquals(5, rationalNumber2.divisor);
      assertEquals(1436, rationalNumber1.intValue());
      assertEquals(1436.8F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte) (-100), rationalNumber1.byteValue());
      assertEquals(1436L, rationalNumber1.longValue());
      assertEquals((short)1436, rationalNumber1.shortValue());
      assertEquals(1436.8, rationalNumber1.doubleValue(), 0.01);
      assertEquals((-1436), rationalNumber2.intValue());
      assertEquals((byte)100, rationalNumber2.byteValue());
      assertEquals((-1436L), rationalNumber2.longValue());
      assertEquals((-1436.8F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-1436), rationalNumber2.shortValue());
      assertEquals((-1436.8), rationalNumber2.doubleValue(), 0.01);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      
      long long0 = 2147483647L;
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(rationalNumber1.numerator, long0);
      assertNotNull(rationalNumber3);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertEquals(7184, rationalNumber1.numerator);
      assertEquals(5, rationalNumber1.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber3.divisor);
      assertEquals(7184, rationalNumber3.numerator);
      assertEquals(1436, rationalNumber1.intValue());
      assertEquals(1436.8F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte) (-100), rationalNumber1.byteValue());
      assertEquals(1436L, rationalNumber1.longValue());
      assertEquals((short)1436, rationalNumber1.shortValue());
      assertEquals(1436.8, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals(3.3453106895765805E-6, rationalNumber3.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals(3.3453107E-6F, rationalNumber3.floatValue(), 0.01F);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber0);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(rationalNumber1.divisor, int0);
      assertNotNull(rationalNumber4);
      assertFalse(int0 == int1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertEquals(7184, rationalNumber1.numerator);
      assertEquals(5, rationalNumber1.divisor);
      assertEquals(1, rationalNumber4.numerator);
      assertEquals((-155), rationalNumber4.divisor);
      assertEquals(1436, rationalNumber1.intValue());
      assertEquals(1436.8F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte) (-100), rationalNumber1.byteValue());
      assertEquals(1436L, rationalNumber1.longValue());
      assertEquals((short)1436, rationalNumber1.shortValue());
      assertEquals(1436.8, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber4.intValue());
      assertEquals((-0.0064516129032258064), rationalNumber4.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals((-0.006451613F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber3);
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf(int0);
      assertNotNull(rationalNumber5);
      assertFalse(int0 == int1);
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertEquals(1, rationalNumber5.divisor);
      assertEquals((-775), rationalNumber5.numerator);
      assertEquals((-775.0F), rationalNumber5.floatValue(), 0.01F);
      assertEquals((byte) (-7), rationalNumber5.byteValue());
      assertEquals((-775), rationalNumber5.intValue());
      assertEquals((-775.0), rationalNumber5.doubleValue(), 0.01);
      assertEquals((short) (-775), rationalNumber5.shortValue());
      assertEquals((-775L), rationalNumber5.longValue());
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber4);
      
      String string2 = rationalNumber5.toDisplayString();
      assertEquals("-775", string2);
      assertNotNull(string2);
      assertFalse(int0 == int1);
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(1, rationalNumber5.divisor);
      assertEquals((-775), rationalNumber5.numerator);
      assertEquals((-775.0F), rationalNumber5.floatValue(), 0.01F);
      assertEquals((byte) (-7), rationalNumber5.byteValue());
      assertEquals((-775), rationalNumber5.intValue());
      assertEquals((-775.0), rationalNumber5.doubleValue(), 0.01);
      assertEquals((short) (-775), rationalNumber5.shortValue());
      assertEquals((-775L), rationalNumber5.longValue());
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = rationalNumber0.toString();
      assertEquals("-775", string3);
      assertNotNull(string3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-775), rationalNumber0.numerator);
      assertEquals((-775), rationalNumber0.intValue());
      assertEquals((-775L), rationalNumber0.longValue());
      assertEquals((-775.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-775), rationalNumber0.shortValue());
      assertEquals((byte) (-7), rationalNumber0.byteValue());
      assertEquals((-775.0F), rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      String string4 = rationalNumber0.toString();
      assertEquals("-775", string4);
      assertNotNull(string4);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-775), rationalNumber0.numerator);
      assertEquals((-775), rationalNumber0.intValue());
      assertEquals((-775L), rationalNumber0.longValue());
      assertEquals((-775.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-775), rationalNumber0.shortValue());
      assertEquals((byte) (-7), rationalNumber0.byteValue());
      assertEquals((-775.0F), rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      
      RationalNumber rationalNumber6 = rationalNumber0.negate();
      assertNotNull(rationalNumber6);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-775), rationalNumber0.numerator);
      assertEquals(775, rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals((-775), rationalNumber0.intValue());
      assertEquals((-775L), rationalNumber0.longValue());
      assertEquals((-775.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-775), rationalNumber0.shortValue());
      assertEquals((byte) (-7), rationalNumber0.byteValue());
      assertEquals((-775.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals(775, rationalNumber6.intValue());
      assertEquals((byte)7, rationalNumber6.byteValue());
      assertEquals(775.0F, rationalNumber6.floatValue(), 0.01F);
      assertEquals(775L, rationalNumber6.longValue());
      assertEquals((short)775, rationalNumber6.shortValue());
      assertEquals(775.0, rationalNumber6.doubleValue(), 0.01);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber0);
      
      long long1 = 902L;
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(long1, rationalNumber1.numerator);
      assertNotNull(rationalNumber7);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertEquals(3592, rationalNumber7.divisor);
      assertEquals(451, rationalNumber7.numerator);
      assertEquals(7184, rationalNumber1.numerator);
      assertEquals(5, rationalNumber1.divisor);
      assertEquals(0.1255568F, rationalNumber7.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber7.longValue());
      assertEquals(0, rationalNumber7.intValue());
      assertEquals((short)0, rationalNumber7.shortValue());
      assertEquals((byte)0, rationalNumber7.byteValue());
      assertEquals(0.12555679287305122, rationalNumber7.doubleValue(), 0.01);
      assertEquals(1436, rationalNumber1.intValue());
      assertEquals(1436.8F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte) (-100), rationalNumber1.byteValue());
      assertEquals(1436L, rationalNumber1.longValue());
      assertEquals((short)1436, rationalNumber1.shortValue());
      assertEquals(1436.8, rationalNumber1.doubleValue(), 0.01);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber5);
      
      long long2 = (-2147483654L);
      RationalNumber rationalNumber8 = RationalNumber.factoryMethod(long2, int1);
      assertNotNull(rationalNumber8);
      assertFalse(int1 == int0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertEquals(1, rationalNumber8.divisor);
      assertEquals(2147483642, rationalNumber8.numerator);
      assertEquals(2.14748365E9F, rationalNumber8.floatValue(), 0.01F);
      assertEquals((byte) (-6), rationalNumber8.byteValue());
      assertEquals(2.147483642E9, rationalNumber8.doubleValue(), 0.01);
      assertEquals(2147483642L, rationalNumber8.longValue());
      assertEquals(2147483642, rationalNumber8.intValue());
      assertEquals((short) (-6), rationalNumber8.shortValue());
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber6);
      
      RationalNumber rationalNumber9 = RationalNumber.valueOf(rationalNumber8.numerator);
      assertNotNull(rationalNumber9);
      assertFalse(int1 == int0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber9.equals((Object)rationalNumber7));
      assertFalse(rationalNumber9.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber8));
      assertFalse(rationalNumber9.equals((Object)rationalNumber2));
      assertFalse(rationalNumber9.equals((Object)rationalNumber4));
      assertFalse(rationalNumber9.equals((Object)rationalNumber6));
      assertFalse(rationalNumber9.equals((Object)rationalNumber5));
      assertFalse(rationalNumber9.equals((Object)rationalNumber3));
      assertFalse(rationalNumber9.equals((Object)rationalNumber1));
      assertEquals(1, rationalNumber8.divisor);
      assertEquals(2147483642, rationalNumber8.numerator);
      assertEquals(1, rationalNumber9.divisor);
      assertEquals(2147483642, rationalNumber9.numerator);
      assertEquals(2.14748365E9F, rationalNumber8.floatValue(), 0.01F);
      assertEquals((byte) (-6), rationalNumber8.byteValue());
      assertEquals(2.147483642E9, rationalNumber8.doubleValue(), 0.01);
      assertEquals(2147483642L, rationalNumber8.longValue());
      assertEquals(2147483642, rationalNumber8.intValue());
      assertEquals((short) (-6), rationalNumber8.shortValue());
      assertEquals(2147483642, rationalNumber9.intValue());
      assertEquals(2147483642L, rationalNumber9.longValue());
      assertEquals(2.14748365E9F, rationalNumber9.floatValue(), 0.01F);
      assertEquals((short) (-6), rationalNumber9.shortValue());
      assertEquals((byte) (-6), rationalNumber9.byteValue());
      assertEquals(2.147483642E9, rationalNumber9.doubleValue(), 0.01);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber8, rationalNumber9);
      assertNotSame(rationalNumber9, rationalNumber7);
      assertNotSame(rationalNumber9, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber8);
      assertNotSame(rationalNumber9, rationalNumber2);
      assertNotSame(rationalNumber9, rationalNumber4);
      assertNotSame(rationalNumber9, rationalNumber6);
      assertNotSame(rationalNumber9, rationalNumber5);
      assertNotSame(rationalNumber9, rationalNumber3);
      assertNotSame(rationalNumber9, rationalNumber1);
      
      double double1 = 1.0;
      RationalNumber rationalNumber10 = RationalNumber.valueOf(rationalNumber0.divisor);
      assertNotNull(rationalNumber10);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-775), rationalNumber0.numerator);
      assertEquals(1, rationalNumber10.divisor);
      assertEquals(1, rationalNumber10.numerator);
      assertEquals((-775), rationalNumber0.intValue());
      assertEquals((-775L), rationalNumber0.longValue());
      assertEquals((-775.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-775), rationalNumber0.shortValue());
      assertEquals((byte) (-7), rationalNumber0.byteValue());
      assertEquals((-775.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber10.byteValue());
      assertEquals(1, rationalNumber10.intValue());
      assertEquals((short)1, rationalNumber10.shortValue());
      assertEquals(1L, rationalNumber10.longValue());
      assertEquals(1.0, rationalNumber10.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber10.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber1);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber2);
      
      RationalNumber rationalNumber11 = RationalNumber.valueOf(double1);
      assertNotNull(rationalNumber11);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber11.equals((Object)rationalNumber6));
      assertFalse(rationalNumber11.equals((Object)rationalNumber5));
      assertFalse(rationalNumber11.equals((Object)rationalNumber9));
      assertFalse(rationalNumber11.equals((Object)rationalNumber8));
      assertFalse(rationalNumber11.equals((Object)rationalNumber2));
      assertFalse(rationalNumber11.equals((Object)rationalNumber3));
      assertFalse(rationalNumber11.equals((Object)rationalNumber7));
      assertFalse(rationalNumber11.equals((Object)rationalNumber1));
      assertFalse(rationalNumber11.equals((Object)rationalNumber10));
      assertFalse(rationalNumber11.equals((Object)rationalNumber0));
      assertFalse(rationalNumber11.equals((Object)rationalNumber4));
      assertEquals(1, rationalNumber11.divisor);
      assertEquals(1, rationalNumber11.numerator);
      assertEquals(1L, rationalNumber11.longValue());
      assertEquals((byte)1, rationalNumber11.byteValue());
      assertEquals(1.0F, rationalNumber11.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber11.shortValue());
      assertEquals(1, rationalNumber11.intValue());
      assertEquals(1.0, rationalNumber11.doubleValue(), 0.01);
      assertNotSame(rationalNumber11, rationalNumber6);
      assertNotSame(rationalNumber11, rationalNumber5);
      assertNotSame(rationalNumber11, rationalNumber9);
      assertNotSame(rationalNumber11, rationalNumber8);
      assertNotSame(rationalNumber11, rationalNumber2);
      assertNotSame(rationalNumber11, rationalNumber3);
      assertNotSame(rationalNumber11, rationalNumber7);
      assertNotSame(rationalNumber11, rationalNumber1);
      assertNotSame(rationalNumber11, rationalNumber10);
      assertNotSame(rationalNumber11, rationalNumber0);
      assertNotSame(rationalNumber11, rationalNumber4);
      
      String string5 = rationalNumber11.toString();
      assertEquals("1", string5);
      assertNotNull(string5);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber11.equals((Object)rationalNumber6));
      assertFalse(rationalNumber11.equals((Object)rationalNumber5));
      assertFalse(rationalNumber11.equals((Object)rationalNumber9));
      assertFalse(rationalNumber11.equals((Object)rationalNumber8));
      assertFalse(rationalNumber11.equals((Object)rationalNumber2));
      assertFalse(rationalNumber11.equals((Object)rationalNumber3));
      assertFalse(rationalNumber11.equals((Object)rationalNumber7));
      assertFalse(rationalNumber11.equals((Object)rationalNumber1));
      assertFalse(rationalNumber11.equals((Object)rationalNumber10));
      assertFalse(rationalNumber11.equals((Object)rationalNumber0));
      assertFalse(rationalNumber11.equals((Object)rationalNumber4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(1, rationalNumber11.divisor);
      assertEquals(1, rationalNumber11.numerator);
      assertEquals(1L, rationalNumber11.longValue());
      assertEquals((byte)1, rationalNumber11.byteValue());
      assertEquals(1.0F, rationalNumber11.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber11.shortValue());
      assertEquals(1, rationalNumber11.intValue());
      assertEquals(1.0, rationalNumber11.doubleValue(), 0.01);
      assertNotSame(rationalNumber11, rationalNumber6);
      assertNotSame(rationalNumber11, rationalNumber5);
      assertNotSame(rationalNumber11, rationalNumber9);
      assertNotSame(rationalNumber11, rationalNumber8);
      assertNotSame(rationalNumber11, rationalNumber2);
      assertNotSame(rationalNumber11, rationalNumber3);
      assertNotSame(rationalNumber11, rationalNumber7);
      assertNotSame(rationalNumber11, rationalNumber1);
      assertNotSame(rationalNumber11, rationalNumber10);
      assertNotSame(rationalNumber11, rationalNumber0);
      assertNotSame(rationalNumber11, rationalNumber4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      
      String string6 = rationalNumber8.toDisplayString();
      assertEquals("2147483642", string6);
      assertNotNull(string6);
      assertFalse(int1 == int0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber8.equals((Object)rationalNumber11));
      assertFalse(rationalNumber8.equals((Object)rationalNumber10));
      assertFalse(rationalNumber8.equals((Object)rationalNumber9));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals(1, rationalNumber8.divisor);
      assertEquals(2147483642, rationalNumber8.numerator);
      assertEquals(2.14748365E9F, rationalNumber8.floatValue(), 0.01F);
      assertEquals((byte) (-6), rationalNumber8.byteValue());
      assertEquals(2.147483642E9, rationalNumber8.doubleValue(), 0.01);
      assertEquals(2147483642L, rationalNumber8.longValue());
      assertEquals(2147483642, rationalNumber8.intValue());
      assertEquals((short) (-6), rationalNumber8.shortValue());
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber8, rationalNumber11);
      assertNotSame(rationalNumber8, rationalNumber10);
      assertNotSame(rationalNumber8, rationalNumber9);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      
      String string7 = rationalNumber7.toDisplayString();
      assertEquals("0.126", string7);
      assertNotNull(string7);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber11));
      assertFalse(rationalNumber7.equals((Object)rationalNumber8));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber9));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber10));
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber1.equals((Object)rationalNumber11));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals(3592, rationalNumber7.divisor);
      assertEquals(451, rationalNumber7.numerator);
      assertEquals(7184, rationalNumber1.numerator);
      assertEquals(5, rationalNumber1.divisor);
      assertEquals(0.1255568F, rationalNumber7.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber7.longValue());
      assertEquals(0, rationalNumber7.intValue());
      assertEquals((short)0, rationalNumber7.shortValue());
      assertEquals((byte)0, rationalNumber7.byteValue());
      assertEquals(0.12555679287305122, rationalNumber7.doubleValue(), 0.01);
      assertEquals(1436, rationalNumber1.intValue());
      assertEquals(1436.8F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte) (-100), rationalNumber1.byteValue());
      assertEquals(1436L, rationalNumber1.longValue());
      assertEquals((short)1436, rationalNumber1.shortValue());
      assertEquals(1436.8, rationalNumber1.doubleValue(), 0.01);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber11);
      assertNotSame(rationalNumber7, rationalNumber8);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber9);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber11);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      
      double double2 = 1.0000000003187713E-16;
      RationalNumber rationalNumber12 = RationalNumber.valueOf(double2);
      assertNotNull(rationalNumber12);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(rationalNumber12.equals((Object)rationalNumber6));
      assertFalse(rationalNumber12.equals((Object)rationalNumber11));
      assertFalse(rationalNumber12.equals((Object)rationalNumber4));
      assertFalse(rationalNumber12.equals((Object)rationalNumber9));
      assertFalse(rationalNumber12.equals((Object)rationalNumber5));
      assertFalse(rationalNumber12.equals((Object)rationalNumber7));
      assertFalse(rationalNumber12.equals((Object)rationalNumber8));
      assertFalse(rationalNumber12.equals((Object)rationalNumber2));
      assertFalse(rationalNumber12.equals((Object)rationalNumber1));
      assertFalse(rationalNumber12.equals((Object)rationalNumber3));
      assertFalse(rationalNumber12.equals((Object)rationalNumber0));
      assertFalse(rationalNumber12.equals((Object)rationalNumber10));
      assertEquals(Integer.MAX_VALUE, rationalNumber12.divisor);
      assertEquals(1, rationalNumber12.numerator);
      assertEquals(4.656612875245797E-10, rationalNumber12.doubleValue(), 0.01);
      assertEquals(0, rationalNumber12.intValue());
      assertEquals((byte)0, rationalNumber12.byteValue());
      assertEquals((short)0, rationalNumber12.shortValue());
      assertEquals(0L, rationalNumber12.longValue());
      assertEquals(4.656613E-10F, rationalNumber12.floatValue(), 0.01F);
      assertNotSame(rationalNumber12, rationalNumber6);
      assertNotSame(rationalNumber12, rationalNumber11);
      assertNotSame(rationalNumber12, rationalNumber4);
      assertNotSame(rationalNumber12, rationalNumber9);
      assertNotSame(rationalNumber12, rationalNumber5);
      assertNotSame(rationalNumber12, rationalNumber7);
      assertNotSame(rationalNumber12, rationalNumber8);
      assertNotSame(rationalNumber12, rationalNumber2);
      assertNotSame(rationalNumber12, rationalNumber1);
      assertNotSame(rationalNumber12, rationalNumber3);
      assertNotSame(rationalNumber12, rationalNumber0);
      assertNotSame(rationalNumber12, rationalNumber10);
      
      RationalNumber rationalNumber13 = rationalNumber0.negate();
      assertNotNull(rationalNumber13);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber12));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber13.equals((Object)rationalNumber4));
      assertFalse(rationalNumber13.equals((Object)rationalNumber10));
      assertFalse(rationalNumber13.equals((Object)rationalNumber3));
      assertFalse(rationalNumber13.equals((Object)rationalNumber2));
      assertFalse(rationalNumber13.equals((Object)rationalNumber12));
      assertFalse(rationalNumber13.equals((Object)rationalNumber8));
      assertFalse(rationalNumber13.equals((Object)rationalNumber6));
      assertFalse(rationalNumber13.equals((Object)rationalNumber11));
      assertFalse(rationalNumber13.equals((Object)rationalNumber5));
      assertFalse(rationalNumber13.equals((Object)rationalNumber1));
      assertFalse(rationalNumber13.equals((Object)rationalNumber7));
      assertFalse(rationalNumber13.equals((Object)rationalNumber0));
      assertFalse(rationalNumber13.equals((Object)rationalNumber9));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-775), rationalNumber0.numerator);
      assertEquals(775, rationalNumber13.numerator);
      assertEquals(1, rationalNumber13.divisor);
      assertEquals((-775), rationalNumber0.intValue());
      assertEquals((-775L), rationalNumber0.longValue());
      assertEquals((-775.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-775), rationalNumber0.shortValue());
      assertEquals((byte) (-7), rationalNumber0.byteValue());
      assertEquals((-775.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals(775.0, rationalNumber13.doubleValue(), 0.01);
      assertEquals((short)775, rationalNumber13.shortValue());
      assertEquals(775.0F, rationalNumber13.floatValue(), 0.01F);
      assertEquals((byte)7, rationalNumber13.byteValue());
      assertEquals(775, rationalNumber13.intValue());
      assertEquals(775L, rationalNumber13.longValue());
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber13);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber13, rationalNumber4);
      assertNotSame(rationalNumber13, rationalNumber10);
      assertNotSame(rationalNumber13, rationalNumber3);
      assertNotSame(rationalNumber13, rationalNumber2);
      assertNotSame(rationalNumber13, rationalNumber12);
      assertNotSame(rationalNumber13, rationalNumber8);
      assertNotSame(rationalNumber13, rationalNumber6);
      assertNotSame(rationalNumber13, rationalNumber11);
      assertNotSame(rationalNumber13, rationalNumber5);
      assertNotSame(rationalNumber13, rationalNumber1);
      assertNotSame(rationalNumber13, rationalNumber7);
      assertNotSame(rationalNumber13, rationalNumber0);
      assertNotSame(rationalNumber13, rationalNumber9);
      
      long long3 = (-2L);
      long long4 = (-757L);
      RationalNumber rationalNumber14 = RationalNumber.factoryMethod(long3, long4);
      assertNotNull(rationalNumber14);
      assertFalse(rationalNumber14.equals((Object)rationalNumber13));
      assertFalse(rationalNumber14.equals((Object)rationalNumber4));
      assertFalse(rationalNumber14.equals((Object)rationalNumber12));
      assertFalse(rationalNumber14.equals((Object)rationalNumber11));
      assertFalse(rationalNumber14.equals((Object)rationalNumber1));
      assertFalse(rationalNumber14.equals((Object)rationalNumber8));
      assertFalse(rationalNumber14.equals((Object)rationalNumber2));
      assertFalse(rationalNumber14.equals((Object)rationalNumber9));
      assertFalse(rationalNumber14.equals((Object)rationalNumber7));
      assertFalse(rationalNumber14.equals((Object)rationalNumber6));
      assertFalse(rationalNumber14.equals((Object)rationalNumber5));
      assertFalse(rationalNumber14.equals((Object)rationalNumber10));
      assertFalse(rationalNumber14.equals((Object)rationalNumber0));
      assertFalse(rationalNumber14.equals((Object)rationalNumber3));
      assertFalse(long3 == long1);
      assertFalse(long3 == long4);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertEquals(2, rationalNumber14.numerator);
      assertEquals(757, rationalNumber14.divisor);
      assertEquals(0.002642008F, rationalNumber14.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber14.shortValue());
      assertEquals((byte)0, rationalNumber14.byteValue());
      assertEquals(0L, rationalNumber14.longValue());
      assertEquals(0.002642007926023778, rationalNumber14.doubleValue(), 0.01);
      assertEquals(0, rationalNumber14.intValue());
      assertNotSame(rationalNumber14, rationalNumber13);
      assertNotSame(rationalNumber14, rationalNumber4);
      assertNotSame(rationalNumber14, rationalNumber12);
      assertNotSame(rationalNumber14, rationalNumber11);
      assertNotSame(rationalNumber14, rationalNumber1);
      assertNotSame(rationalNumber14, rationalNumber8);
      assertNotSame(rationalNumber14, rationalNumber2);
      assertNotSame(rationalNumber14, rationalNumber9);
      assertNotSame(rationalNumber14, rationalNumber7);
      assertNotSame(rationalNumber14, rationalNumber6);
      assertNotSame(rationalNumber14, rationalNumber5);
      assertNotSame(rationalNumber14, rationalNumber10);
      assertNotSame(rationalNumber14, rationalNumber0);
      assertNotSame(rationalNumber14, rationalNumber3);
      
      String string8 = rationalNumber12.toDisplayString();
      assertEquals("0", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(rationalNumber12.equals((Object)rationalNumber4));
      assertFalse(rationalNumber12.equals((Object)rationalNumber13));
      assertFalse(rationalNumber12.equals((Object)rationalNumber14));
      assertFalse(rationalNumber12.equals((Object)rationalNumber8));
      assertFalse(rationalNumber12.equals((Object)rationalNumber2));
      assertFalse(rationalNumber12.equals((Object)rationalNumber6));
      assertFalse(rationalNumber12.equals((Object)rationalNumber11));
      assertFalse(rationalNumber12.equals((Object)rationalNumber9));
      assertFalse(rationalNumber12.equals((Object)rationalNumber5));
      assertFalse(rationalNumber12.equals((Object)rationalNumber7));
      assertFalse(rationalNumber12.equals((Object)rationalNumber1));
      assertFalse(rationalNumber12.equals((Object)rationalNumber3));
      assertFalse(rationalNumber12.equals((Object)rationalNumber0));
      assertFalse(rationalNumber12.equals((Object)rationalNumber10));
      assertEquals(Integer.MAX_VALUE, rationalNumber12.divisor);
      assertEquals(1, rationalNumber12.numerator);
      assertEquals(4.656612875245797E-10, rationalNumber12.doubleValue(), 0.01);
      assertEquals(0, rationalNumber12.intValue());
      assertEquals((byte)0, rationalNumber12.byteValue());
      assertEquals((short)0, rationalNumber12.shortValue());
      assertEquals(0L, rationalNumber12.longValue());
      assertEquals(4.656613E-10F, rationalNumber12.floatValue(), 0.01F);
      assertNotSame(string8, string6);
      assertNotSame(string8, string1);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string4);
      assertNotSame(string8, string7);
      assertNotSame(string8, string3);
      assertNotSame(string8, string2);
      assertNotSame(rationalNumber12, rationalNumber4);
      assertNotSame(rationalNumber12, rationalNumber13);
      assertNotSame(rationalNumber12, rationalNumber14);
      assertNotSame(rationalNumber12, rationalNumber8);
      assertNotSame(rationalNumber12, rationalNumber2);
      assertNotSame(rationalNumber12, rationalNumber6);
      assertNotSame(rationalNumber12, rationalNumber11);
      assertNotSame(rationalNumber12, rationalNumber9);
      assertNotSame(rationalNumber12, rationalNumber5);
      assertNotSame(rationalNumber12, rationalNumber7);
      assertNotSame(rationalNumber12, rationalNumber1);
      assertNotSame(rationalNumber12, rationalNumber3);
      assertNotSame(rationalNumber12, rationalNumber0);
      assertNotSame(rationalNumber12, rationalNumber10);
      
      long long5 = (-784L);
      RationalNumber rationalNumber15 = RationalNumber.factoryMethod(rationalNumber5.numerator, long5);
      assertNotNull(rationalNumber15);
      assertFalse(int0 == int1);
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
      assertFalse(long5 == long3);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(rationalNumber15.equals((Object)rationalNumber12));
      assertFalse(rationalNumber15.equals((Object)rationalNumber5));
      assertFalse(rationalNumber15.equals((Object)rationalNumber14));
      assertFalse(rationalNumber15.equals((Object)rationalNumber11));
      assertFalse(rationalNumber15.equals((Object)rationalNumber2));
      assertFalse(rationalNumber15.equals((Object)rationalNumber4));
      assertFalse(rationalNumber15.equals((Object)rationalNumber0));
      assertFalse(rationalNumber15.equals((Object)rationalNumber7));
      assertFalse(rationalNumber15.equals((Object)rationalNumber1));
      assertFalse(rationalNumber15.equals((Object)rationalNumber8));
      assertFalse(rationalNumber15.equals((Object)rationalNumber13));
      assertFalse(rationalNumber15.equals((Object)rationalNumber9));
      assertFalse(rationalNumber15.equals((Object)rationalNumber3));
      assertFalse(rationalNumber15.equals((Object)rationalNumber6));
      assertFalse(rationalNumber15.equals((Object)rationalNumber10));
      assertFalse(rationalNumber5.equals((Object)rationalNumber14));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber13));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber7));
      assertFalse(rationalNumber5.equals((Object)rationalNumber6));
      assertFalse(rationalNumber5.equals((Object)rationalNumber10));
      assertFalse(rationalNumber5.equals((Object)rationalNumber9));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber8));
      assertFalse(rationalNumber5.equals((Object)rationalNumber12));
      assertFalse(rationalNumber5.equals((Object)rationalNumber11));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertEquals(784, rationalNumber15.divisor);
      assertEquals(775, rationalNumber15.numerator);
      assertEquals(1, rationalNumber5.divisor);
      assertEquals((-775), rationalNumber5.numerator);
      assertEquals(0L, rationalNumber15.longValue());
      assertEquals((short)0, rationalNumber15.shortValue());
      assertEquals(0.9885204F, rationalNumber15.floatValue(), 0.01F);
      assertEquals(0.9885204081632653, rationalNumber15.doubleValue(), 0.01);
      assertEquals(0, rationalNumber15.intValue());
      assertEquals((byte)0, rationalNumber15.byteValue());
      assertEquals((-775.0F), rationalNumber5.floatValue(), 0.01F);
      assertEquals((byte) (-7), rationalNumber5.byteValue());
      assertEquals((-775), rationalNumber5.intValue());
      assertEquals((-775.0), rationalNumber5.doubleValue(), 0.01);
      assertEquals((short) (-775), rationalNumber5.shortValue());
      assertEquals((-775L), rationalNumber5.longValue());
      assertNotSame(rationalNumber15, rationalNumber12);
      assertNotSame(rationalNumber15, rationalNumber5);
      assertNotSame(rationalNumber15, rationalNumber14);
      assertNotSame(rationalNumber15, rationalNumber11);
      assertNotSame(rationalNumber15, rationalNumber2);
      assertNotSame(rationalNumber15, rationalNumber4);
      assertNotSame(rationalNumber15, rationalNumber0);
      assertNotSame(rationalNumber15, rationalNumber7);
      assertNotSame(rationalNumber15, rationalNumber1);
      assertNotSame(rationalNumber15, rationalNumber8);
      assertNotSame(rationalNumber15, rationalNumber13);
      assertNotSame(rationalNumber15, rationalNumber9);
      assertNotSame(rationalNumber15, rationalNumber3);
      assertNotSame(rationalNumber15, rationalNumber6);
      assertNotSame(rationalNumber15, rationalNumber10);
      assertNotSame(rationalNumber5, rationalNumber14);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber13);
      assertNotSame(rationalNumber5, rationalNumber15);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber7);
      assertNotSame(rationalNumber5, rationalNumber6);
      assertNotSame(rationalNumber5, rationalNumber10);
      assertNotSame(rationalNumber5, rationalNumber9);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber8);
      assertNotSame(rationalNumber5, rationalNumber12);
      assertNotSame(rationalNumber5, rationalNumber11);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber4);
      
      long long6 = 81L;
      RationalNumber rationalNumber16 = RationalNumber.factoryMethod(long6, rationalNumber4.numerator);
      assertNotNull(rationalNumber16);
      assertFalse(int0 == int1);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(long6 == long3);
      assertFalse(long6 == long0);
      assertFalse(long6 == long4);
      assertFalse(long6 == long1);
      assertFalse(long6 == long5);
      assertFalse(long6 == long2);
      assertFalse(rationalNumber16.equals((Object)rationalNumber0));
      assertFalse(rationalNumber16.equals((Object)rationalNumber1));
      assertFalse(rationalNumber16.equals((Object)rationalNumber8));
      assertFalse(rationalNumber16.equals((Object)rationalNumber13));
      assertFalse(rationalNumber16.equals((Object)rationalNumber14));
      assertFalse(rationalNumber16.equals((Object)rationalNumber4));
      assertFalse(rationalNumber16.equals((Object)rationalNumber2));
      assertFalse(rationalNumber16.equals((Object)rationalNumber15));
      assertFalse(rationalNumber16.equals((Object)rationalNumber12));
      assertFalse(rationalNumber16.equals((Object)rationalNumber11));
      assertFalse(rationalNumber16.equals((Object)rationalNumber5));
      assertFalse(rationalNumber16.equals((Object)rationalNumber3));
      assertFalse(rationalNumber16.equals((Object)rationalNumber9));
      assertFalse(rationalNumber16.equals((Object)rationalNumber6));
      assertFalse(rationalNumber16.equals((Object)rationalNumber7));
      assertFalse(rationalNumber16.equals((Object)rationalNumber10));
      assertFalse(rationalNumber1.equals((Object)rationalNumber11));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber12));
      assertFalse(rationalNumber1.equals((Object)rationalNumber15));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber13));
      assertFalse(rationalNumber1.equals((Object)rationalNumber14));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber13));
      assertFalse(rationalNumber4.equals((Object)rationalNumber14));
      assertFalse(rationalNumber4.equals((Object)rationalNumber10));
      assertFalse(rationalNumber4.equals((Object)rationalNumber8));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber11));
      assertFalse(rationalNumber4.equals((Object)rationalNumber15));
      assertFalse(rationalNumber4.equals((Object)rationalNumber9));
      assertFalse(rationalNumber4.equals((Object)rationalNumber12));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber7));
      assertEquals(1, rationalNumber16.divisor);
      assertEquals(81, rationalNumber16.numerator);
      assertEquals(7184, rationalNumber1.numerator);
      assertEquals(5, rationalNumber1.divisor);
      assertEquals(1, rationalNumber4.numerator);
      assertEquals((-155), rationalNumber4.divisor);
      assertEquals(81L, rationalNumber16.longValue());
      assertEquals((short)81, rationalNumber16.shortValue());
      assertEquals(81.0F, rationalNumber16.floatValue(), 0.01F);
      assertEquals(81.0, rationalNumber16.doubleValue(), 0.01);
      assertEquals(81, rationalNumber16.intValue());
      assertEquals((byte)81, rationalNumber16.byteValue());
      assertEquals(1436, rationalNumber1.intValue());
      assertEquals(1436.8F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte) (-100), rationalNumber1.byteValue());
      assertEquals(1436L, rationalNumber1.longValue());
      assertEquals((short)1436, rationalNumber1.shortValue());
      assertEquals(1436.8, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber4.intValue());
      assertEquals((-0.0064516129032258064), rationalNumber4.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals((-0.006451613F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertNotSame(rationalNumber16, rationalNumber0);
      assertNotSame(rationalNumber16, rationalNumber1);
      assertNotSame(rationalNumber16, rationalNumber8);
      assertNotSame(rationalNumber16, rationalNumber13);
      assertNotSame(rationalNumber16, rationalNumber14);
      assertNotSame(rationalNumber16, rationalNumber4);
      assertNotSame(rationalNumber16, rationalNumber2);
      assertNotSame(rationalNumber16, rationalNumber15);
      assertNotSame(rationalNumber16, rationalNumber12);
      assertNotSame(rationalNumber16, rationalNumber11);
      assertNotSame(rationalNumber16, rationalNumber5);
      assertNotSame(rationalNumber16, rationalNumber3);
      assertNotSame(rationalNumber16, rationalNumber9);
      assertNotSame(rationalNumber16, rationalNumber6);
      assertNotSame(rationalNumber16, rationalNumber7);
      assertNotSame(rationalNumber16, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber11);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber12);
      assertNotSame(rationalNumber1, rationalNumber15);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber16);
      assertNotSame(rationalNumber1, rationalNumber13);
      assertNotSame(rationalNumber1, rationalNumber14);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber13);
      assertNotSame(rationalNumber4, rationalNumber14);
      assertNotSame(rationalNumber4, rationalNumber10);
      assertNotSame(rationalNumber4, rationalNumber8);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber11);
      assertNotSame(rationalNumber4, rationalNumber15);
      assertNotSame(rationalNumber4, rationalNumber9);
      assertNotSame(rationalNumber4, rationalNumber12);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotSame(rationalNumber4, rationalNumber16);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-504.33206250537484);
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertNotNull(rationalNumber0);
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-504.332", string0);
      assertNotNull(string0);
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertNotNull(rationalNumber1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals(2623, rationalNumber1.divisor);
      assertEquals(1322863, rationalNumber1.numerator);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      assertEquals((byte) (-8), rationalNumber1.byteValue());
      assertEquals(504.33206F, rationalNumber1.floatValue(), 0.01F);
      assertEquals(504, rationalNumber1.intValue());
      assertEquals(504.3320625238277, rationalNumber1.doubleValue(), 0.01);
      assertEquals(504L, rationalNumber1.longValue());
      assertEquals((short)504, rationalNumber1.shortValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      assertNotNull(rationalNumber2);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals(2623, rationalNumber2.divisor);
      assertEquals(1322863, rationalNumber2.numerator);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      assertEquals(504L, rationalNumber2.longValue());
      assertEquals(504.33206F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(504.3320625238277, rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte) (-8), rationalNumber2.byteValue());
      assertEquals(504, rationalNumber2.intValue());
      assertEquals((short)504, rationalNumber2.shortValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      
      long long0 = 1L;
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(long0, rationalNumber2.divisor);
      assertNotNull(rationalNumber3);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals(2623, rationalNumber2.divisor);
      assertEquals(1322863, rationalNumber2.numerator);
      assertEquals(1, rationalNumber3.numerator);
      assertEquals(2623, rationalNumber3.divisor);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      assertEquals(504L, rationalNumber2.longValue());
      assertEquals(504.33206F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(504.3320625238277, rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte) (-8), rationalNumber2.byteValue());
      assertEquals(504, rationalNumber2.intValue());
      assertEquals((short)504, rationalNumber2.shortValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals(3.812428516965307E-4, rationalNumber3.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals(3.8124286E-4F, rationalNumber3.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber2);
      
      RationalNumber rationalNumber4 = rationalNumber2.negate();
      assertNotNull(rationalNumber4);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals(2623, rationalNumber2.divisor);
      assertEquals(1322863, rationalNumber2.numerator);
      assertEquals((-1322863), rationalNumber4.numerator);
      assertEquals(2623, rationalNumber4.divisor);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      assertEquals(504L, rationalNumber2.longValue());
      assertEquals(504.33206F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(504.3320625238277, rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte) (-8), rationalNumber2.byteValue());
      assertEquals(504, rationalNumber2.intValue());
      assertEquals((short)504, rationalNumber2.shortValue());
      assertEquals((byte)8, rationalNumber4.byteValue());
      assertEquals((-504), rationalNumber4.intValue());
      assertEquals((short) (-504), rationalNumber4.shortValue());
      assertEquals((-504L), rationalNumber4.longValue());
      assertEquals((-504.33206F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((-504.3320625238277), rationalNumber4.doubleValue(), 0.01);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber2);
      
      String string1 = rationalNumber2.toString();
      assertEquals("1322863/2623 (504.332)", string1);
      assertNotNull(string1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals(2623, rationalNumber2.divisor);
      assertEquals(1322863, rationalNumber2.numerator);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      assertEquals(504L, rationalNumber2.longValue());
      assertEquals(504.33206F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(504.3320625238277, rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte) (-8), rationalNumber2.byteValue());
      assertEquals(504, rationalNumber2.intValue());
      assertEquals((short)504, rationalNumber2.shortValue());
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(string1, string0);
      
      String string2 = rationalNumber4.toString();
      assertEquals("-1322863/2623 (-504.332)", string2);
      assertNotNull(string2);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals(2623, rationalNumber2.divisor);
      assertEquals(1322863, rationalNumber2.numerator);
      assertEquals((-1322863), rationalNumber4.numerator);
      assertEquals(2623, rationalNumber4.divisor);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      assertEquals(504L, rationalNumber2.longValue());
      assertEquals(504.33206F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(504.3320625238277, rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte) (-8), rationalNumber2.byteValue());
      assertEquals(504, rationalNumber2.intValue());
      assertEquals((short)504, rationalNumber2.shortValue());
      assertEquals((byte)8, rationalNumber4.byteValue());
      assertEquals((-504), rationalNumber4.intValue());
      assertEquals((short) (-504), rationalNumber4.shortValue());
      assertEquals((-504L), rationalNumber4.longValue());
      assertEquals((-504.33206F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((-504.3320625238277), rationalNumber4.doubleValue(), 0.01);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      double double1 = 0.0;
      RationalNumber rationalNumber5 = RationalNumber.valueOf(double1);
      assertNotNull(rationalNumber5);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertEquals(0, rationalNumber5.numerator);
      assertEquals(1, rationalNumber5.divisor);
      assertEquals(0.0, rationalNumber5.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber5.byteValue());
      assertEquals((short)0, rationalNumber5.shortValue());
      assertEquals(0.0F, rationalNumber5.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber5.longValue());
      assertEquals(0, rationalNumber5.intValue());
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber2);
      
      long long1 = 0L;
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(long1, rationalNumber4.numerator);
      assertNotNull(rationalNumber6);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(long1 == long0);
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals(2623, rationalNumber2.divisor);
      assertEquals(1322863, rationalNumber2.numerator);
      assertEquals((-1322863), rationalNumber4.numerator);
      assertEquals(2623, rationalNumber4.divisor);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals(0, rationalNumber6.numerator);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      assertEquals(504L, rationalNumber2.longValue());
      assertEquals(504.33206F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(504.3320625238277, rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte) (-8), rationalNumber2.byteValue());
      assertEquals(504, rationalNumber2.intValue());
      assertEquals((short)504, rationalNumber2.shortValue());
      assertEquals((byte)8, rationalNumber4.byteValue());
      assertEquals((-504), rationalNumber4.intValue());
      assertEquals((short) (-504), rationalNumber4.shortValue());
      assertEquals((-504L), rationalNumber4.longValue());
      assertEquals((-504.33206F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((-504.3320625238277), rationalNumber4.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber6.longValue());
      assertEquals((short)0, rationalNumber6.shortValue());
      assertEquals((byte)0, rationalNumber6.byteValue());
      assertEquals(0, rationalNumber6.intValue());
      assertEquals(0.0, rationalNumber6.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber6.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber5);
      
      long long2 = 4068L;
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(long2, rationalNumber4.divisor);
      assertNotNull(rationalNumber7);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals(2623, rationalNumber2.divisor);
      assertEquals(1322863, rationalNumber2.numerator);
      assertEquals((-1322863), rationalNumber4.numerator);
      assertEquals(2623, rationalNumber4.divisor);
      assertEquals(4068, rationalNumber7.numerator);
      assertEquals(2623, rationalNumber7.divisor);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      assertEquals(504L, rationalNumber2.longValue());
      assertEquals(504.33206F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(504.3320625238277, rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte) (-8), rationalNumber2.byteValue());
      assertEquals(504, rationalNumber2.intValue());
      assertEquals((short)504, rationalNumber2.shortValue());
      assertEquals((byte)8, rationalNumber4.byteValue());
      assertEquals((-504), rationalNumber4.intValue());
      assertEquals((short) (-504), rationalNumber4.shortValue());
      assertEquals((-504L), rationalNumber4.longValue());
      assertEquals((-504.33206F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((-504.3320625238277), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber7.shortValue());
      assertEquals(1L, rationalNumber7.longValue());
      assertEquals(1, rationalNumber7.intValue());
      assertEquals(1.5508959F, rationalNumber7.floatValue(), 0.01F);
      assertEquals(1.5508959207014867, rationalNumber7.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber7.byteValue());
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber0);
      
      String string3 = rationalNumber7.toDisplayString();
      assertEquals("1.551", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber7));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals(2623, rationalNumber2.divisor);
      assertEquals(1322863, rationalNumber2.numerator);
      assertEquals((-1322863), rationalNumber4.numerator);
      assertEquals(2623, rationalNumber4.divisor);
      assertEquals(4068, rationalNumber7.numerator);
      assertEquals(2623, rationalNumber7.divisor);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      assertEquals(504L, rationalNumber2.longValue());
      assertEquals(504.33206F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(504.3320625238277, rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte) (-8), rationalNumber2.byteValue());
      assertEquals(504, rationalNumber2.intValue());
      assertEquals((short)504, rationalNumber2.shortValue());
      assertEquals((byte)8, rationalNumber4.byteValue());
      assertEquals((-504), rationalNumber4.intValue());
      assertEquals((short) (-504), rationalNumber4.shortValue());
      assertEquals((-504L), rationalNumber4.longValue());
      assertEquals((-504.33206F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((-504.3320625238277), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber7.shortValue());
      assertEquals(1L, rationalNumber7.longValue());
      assertEquals(1, rationalNumber7.intValue());
      assertEquals(1.5508959F, rationalNumber7.floatValue(), 0.01F);
      assertEquals(1.5508959207014867, rationalNumber7.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber7.byteValue());
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber0);
      
      RationalNumber rationalNumber8 = RationalNumber.valueOf(double0);
      assertNotNull(rationalNumber8);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertEquals((-1322863), rationalNumber8.numerator);
      assertEquals(2623, rationalNumber8.divisor);
      assertEquals((short) (-504), rationalNumber8.shortValue());
      assertEquals((-504.3320625238277), rationalNumber8.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber8.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber8.byteValue());
      assertEquals((-504L), rationalNumber8.longValue());
      assertEquals((-504), rationalNumber8.intValue());
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber7);
      
      double double2 = 1.0;
      long long3 = (-2147483648L);
      RationalNumber rationalNumber9 = RationalNumber.factoryMethod(long3, long3);
      assertNotNull(rationalNumber9);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(rationalNumber9.equals((Object)rationalNumber2));
      assertFalse(rationalNumber9.equals((Object)rationalNumber7));
      assertFalse(rationalNumber9.equals((Object)rationalNumber3));
      assertFalse(rationalNumber9.equals((Object)rationalNumber1));
      assertFalse(rationalNumber9.equals((Object)rationalNumber5));
      assertFalse(rationalNumber9.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber4));
      assertFalse(rationalNumber9.equals((Object)rationalNumber8));
      assertFalse(rationalNumber9.equals((Object)rationalNumber6));
      assertEquals(1, rationalNumber9.numerator);
      assertEquals(1, rationalNumber9.divisor);
      assertEquals(1, rationalNumber9.intValue());
      assertEquals(1L, rationalNumber9.longValue());
      assertEquals(1.0F, rationalNumber9.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber9.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber9.shortValue());
      assertEquals((byte)1, rationalNumber9.byteValue());
      assertNotSame(rationalNumber9, rationalNumber2);
      assertNotSame(rationalNumber9, rationalNumber7);
      assertNotSame(rationalNumber9, rationalNumber3);
      assertNotSame(rationalNumber9, rationalNumber1);
      assertNotSame(rationalNumber9, rationalNumber5);
      assertNotSame(rationalNumber9, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber4);
      assertNotSame(rationalNumber9, rationalNumber8);
      assertNotSame(rationalNumber9, rationalNumber6);
      
      long long4 = (-568L);
      long long5 = 2147483647L;
      RationalNumber rationalNumber10 = RationalNumber.factoryMethod(long5, rationalNumber1.numerator);
      assertNotNull(rationalNumber10);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(long5 == long4);
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
      assertFalse(long5 == long3);
      assertFalse(long5 == long2);
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals(2623, rationalNumber1.divisor);
      assertEquals(1322863, rationalNumber1.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber10.numerator);
      assertEquals(1322863, rationalNumber10.divisor);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      assertEquals((byte) (-8), rationalNumber1.byteValue());
      assertEquals(504.33206F, rationalNumber1.floatValue(), 0.01F);
      assertEquals(504, rationalNumber1.intValue());
      assertEquals(504.3320625238277, rationalNumber1.doubleValue(), 0.01);
      assertEquals(504L, rationalNumber1.longValue());
      assertEquals((short)504, rationalNumber1.shortValue());
      assertEquals(1623L, rationalNumber10.longValue());
      assertEquals(1623.3606F, rationalNumber10.floatValue(), 0.01F);
      assertEquals(1623.360580044948, rationalNumber10.doubleValue(), 0.01);
      assertEquals(1623, rationalNumber10.intValue());
      assertEquals((short)1623, rationalNumber10.shortValue());
      assertEquals((byte)87, rationalNumber10.byteValue());
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertNotSame(rationalNumber10, rationalNumber2);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber1);
      
      RationalNumber rationalNumber11 = rationalNumber10.negate();
      assertNotNull(rationalNumber11);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(long5 == long4);
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
      assertFalse(long5 == long3);
      assertFalse(long5 == long2);
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertFalse(rationalNumber11.equals((Object)rationalNumber1));
      assertFalse(rationalNumber11.equals((Object)rationalNumber8));
      assertFalse(rationalNumber11.equals((Object)rationalNumber0));
      assertFalse(rationalNumber11.equals((Object)rationalNumber4));
      assertFalse(rationalNumber11.equals((Object)rationalNumber6));
      assertFalse(rationalNumber11.equals((Object)rationalNumber2));
      assertFalse(rationalNumber11.equals((Object)rationalNumber5));
      assertFalse(rationalNumber11.equals((Object)rationalNumber9));
      assertFalse(rationalNumber11.equals((Object)rationalNumber7));
      assertFalse(rationalNumber11.equals((Object)rationalNumber10));
      assertFalse(rationalNumber11.equals((Object)rationalNumber3));
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals(2623, rationalNumber1.divisor);
      assertEquals(1322863, rationalNumber1.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber10.numerator);
      assertEquals(1322863, rationalNumber10.divisor);
      assertEquals(1322863, rationalNumber11.divisor);
      assertEquals((-2147483647), rationalNumber11.numerator);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      assertEquals((byte) (-8), rationalNumber1.byteValue());
      assertEquals(504.33206F, rationalNumber1.floatValue(), 0.01F);
      assertEquals(504, rationalNumber1.intValue());
      assertEquals(504.3320625238277, rationalNumber1.doubleValue(), 0.01);
      assertEquals(504L, rationalNumber1.longValue());
      assertEquals((short)504, rationalNumber1.shortValue());
      assertEquals(1623L, rationalNumber10.longValue());
      assertEquals(1623.3606F, rationalNumber10.floatValue(), 0.01F);
      assertEquals(1623.360580044948, rationalNumber10.doubleValue(), 0.01);
      assertEquals(1623, rationalNumber10.intValue());
      assertEquals((short)1623, rationalNumber10.shortValue());
      assertEquals((byte)87, rationalNumber10.byteValue());
      assertEquals((-1623.3606F), rationalNumber11.floatValue(), 0.01F);
      assertEquals((-1623.360580044948), rationalNumber11.doubleValue(), 0.01);
      assertEquals((byte) (-87), rationalNumber11.byteValue());
      assertEquals((-1623), rationalNumber11.intValue());
      assertEquals((short) (-1623), rationalNumber11.shortValue());
      assertEquals((-1623L), rationalNumber11.longValue());
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber11);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber11);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertNotSame(rationalNumber10, rationalNumber2);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber1);
      assertNotSame(rationalNumber11, rationalNumber1);
      assertNotSame(rationalNumber11, rationalNumber8);
      assertNotSame(rationalNumber11, rationalNumber0);
      assertNotSame(rationalNumber11, rationalNumber4);
      assertNotSame(rationalNumber11, rationalNumber6);
      assertNotSame(rationalNumber11, rationalNumber2);
      assertNotSame(rationalNumber11, rationalNumber5);
      assertNotSame(rationalNumber11, rationalNumber9);
      assertNotSame(rationalNumber11, rationalNumber7);
      assertNotSame(rationalNumber11, rationalNumber10);
      assertNotSame(rationalNumber11, rationalNumber3);
      
      RationalNumber rationalNumber12 = RationalNumber.factoryMethod(rationalNumber8.divisor, long4);
      assertNotNull(rationalNumber12);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber8.equals((Object)rationalNumber11));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber9));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber8.equals((Object)rationalNumber10));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long1);
      assertFalse(rationalNumber12.equals((Object)rationalNumber0));
      assertFalse(rationalNumber12.equals((Object)rationalNumber8));
      assertFalse(rationalNumber12.equals((Object)rationalNumber1));
      assertFalse(rationalNumber12.equals((Object)rationalNumber5));
      assertFalse(rationalNumber12.equals((Object)rationalNumber7));
      assertFalse(rationalNumber12.equals((Object)rationalNumber2));
      assertFalse(rationalNumber12.equals((Object)rationalNumber9));
      assertFalse(rationalNumber12.equals((Object)rationalNumber3));
      assertFalse(rationalNumber12.equals((Object)rationalNumber11));
      assertFalse(rationalNumber12.equals((Object)rationalNumber6));
      assertFalse(rationalNumber12.equals((Object)rationalNumber10));
      assertFalse(rationalNumber12.equals((Object)rationalNumber4));
      assertEquals((-1322863), rationalNumber8.numerator);
      assertEquals(2623, rationalNumber8.divisor);
      assertEquals((-2623), rationalNumber12.numerator);
      assertEquals(568, rationalNumber12.divisor);
      assertEquals((short) (-504), rationalNumber8.shortValue());
      assertEquals((-504.3320625238277), rationalNumber8.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber8.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber8.byteValue());
      assertEquals((-504L), rationalNumber8.longValue());
      assertEquals((-504), rationalNumber8.intValue());
      assertEquals((short) (-4), rationalNumber12.shortValue());
      assertEquals((byte) (-4), rationalNumber12.byteValue());
      assertEquals((-4L), rationalNumber12.longValue());
      assertEquals((-4), rationalNumber12.intValue());
      assertEquals((-4.6179576F), rationalNumber12.floatValue(), 0.01F);
      assertEquals((-4.617957746478873), rationalNumber12.doubleValue(), 0.01);
      assertNotSame(rationalNumber8, rationalNumber11);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber9);
      assertNotSame(rationalNumber8, rationalNumber12);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber8, rationalNumber10);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber12, rationalNumber0);
      assertNotSame(rationalNumber12, rationalNumber8);
      assertNotSame(rationalNumber12, rationalNumber1);
      assertNotSame(rationalNumber12, rationalNumber5);
      assertNotSame(rationalNumber12, rationalNumber7);
      assertNotSame(rationalNumber12, rationalNumber2);
      assertNotSame(rationalNumber12, rationalNumber9);
      assertNotSame(rationalNumber12, rationalNumber3);
      assertNotSame(rationalNumber12, rationalNumber11);
      assertNotSame(rationalNumber12, rationalNumber6);
      assertNotSame(rationalNumber12, rationalNumber10);
      assertNotSame(rationalNumber12, rationalNumber4);
      
      double double3 = (-153.5094433586327);
      RationalNumber rationalNumber13 = RationalNumber.valueOf(double3);
      assertNotNull(rationalNumber13);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertFalse(rationalNumber13.equals((Object)rationalNumber12));
      assertFalse(rationalNumber13.equals((Object)rationalNumber3));
      assertFalse(rationalNumber13.equals((Object)rationalNumber5));
      assertFalse(rationalNumber13.equals((Object)rationalNumber6));
      assertFalse(rationalNumber13.equals((Object)rationalNumber10));
      assertFalse(rationalNumber13.equals((Object)rationalNumber0));
      assertFalse(rationalNumber13.equals((Object)rationalNumber8));
      assertFalse(rationalNumber13.equals((Object)rationalNumber9));
      assertFalse(rationalNumber13.equals((Object)rationalNumber2));
      assertFalse(rationalNumber13.equals((Object)rationalNumber11));
      assertFalse(rationalNumber13.equals((Object)rationalNumber7));
      assertFalse(rationalNumber13.equals((Object)rationalNumber1));
      assertFalse(rationalNumber13.equals((Object)rationalNumber4));
      assertEquals((-2771613), rationalNumber13.numerator);
      assertEquals(18055, rationalNumber13.divisor);
      assertEquals((short) (-153), rationalNumber13.shortValue());
      assertEquals((-153L), rationalNumber13.longValue());
      assertEquals((-153), rationalNumber13.intValue());
      assertEquals((-153.50944336748822), rationalNumber13.doubleValue(), 0.01);
      assertEquals((-153.50945F), rationalNumber13.floatValue(), 0.01F);
      assertEquals((byte)103, rationalNumber13.byteValue());
      assertNotSame(rationalNumber13, rationalNumber12);
      assertNotSame(rationalNumber13, rationalNumber3);
      assertNotSame(rationalNumber13, rationalNumber5);
      assertNotSame(rationalNumber13, rationalNumber6);
      assertNotSame(rationalNumber13, rationalNumber10);
      assertNotSame(rationalNumber13, rationalNumber0);
      assertNotSame(rationalNumber13, rationalNumber8);
      assertNotSame(rationalNumber13, rationalNumber9);
      assertNotSame(rationalNumber13, rationalNumber2);
      assertNotSame(rationalNumber13, rationalNumber11);
      assertNotSame(rationalNumber13, rationalNumber7);
      assertNotSame(rationalNumber13, rationalNumber1);
      assertNotSame(rationalNumber13, rationalNumber4);
      
      String string4 = rationalNumber13.toString();
      assertEquals("-2771613/18055 (-153.509)", string4);
      assertNotNull(string4);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertFalse(rationalNumber13.equals((Object)rationalNumber12));
      assertFalse(rationalNumber13.equals((Object)rationalNumber3));
      assertFalse(rationalNumber13.equals((Object)rationalNumber5));
      assertFalse(rationalNumber13.equals((Object)rationalNumber6));
      assertFalse(rationalNumber13.equals((Object)rationalNumber10));
      assertFalse(rationalNumber13.equals((Object)rationalNumber0));
      assertFalse(rationalNumber13.equals((Object)rationalNumber8));
      assertFalse(rationalNumber13.equals((Object)rationalNumber9));
      assertFalse(rationalNumber13.equals((Object)rationalNumber2));
      assertFalse(rationalNumber13.equals((Object)rationalNumber11));
      assertFalse(rationalNumber13.equals((Object)rationalNumber7));
      assertFalse(rationalNumber13.equals((Object)rationalNumber1));
      assertFalse(rationalNumber13.equals((Object)rationalNumber4));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals((-2771613), rationalNumber13.numerator);
      assertEquals(18055, rationalNumber13.divisor);
      assertEquals((short) (-153), rationalNumber13.shortValue());
      assertEquals((-153L), rationalNumber13.longValue());
      assertEquals((-153), rationalNumber13.intValue());
      assertEquals((-153.50944336748822), rationalNumber13.doubleValue(), 0.01);
      assertEquals((-153.50945F), rationalNumber13.floatValue(), 0.01F);
      assertEquals((byte)103, rationalNumber13.byteValue());
      assertNotSame(rationalNumber13, rationalNumber12);
      assertNotSame(rationalNumber13, rationalNumber3);
      assertNotSame(rationalNumber13, rationalNumber5);
      assertNotSame(rationalNumber13, rationalNumber6);
      assertNotSame(rationalNumber13, rationalNumber10);
      assertNotSame(rationalNumber13, rationalNumber0);
      assertNotSame(rationalNumber13, rationalNumber8);
      assertNotSame(rationalNumber13, rationalNumber9);
      assertNotSame(rationalNumber13, rationalNumber2);
      assertNotSame(rationalNumber13, rationalNumber11);
      assertNotSame(rationalNumber13, rationalNumber7);
      assertNotSame(rationalNumber13, rationalNumber1);
      assertNotSame(rationalNumber13, rationalNumber4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      
      String string5 = rationalNumber3.toString();
      assertEquals("1/2623 (0)", string5);
      assertNotNull(string5);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber13));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber12));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber13));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertFalse(rationalNumber2.equals((Object)rationalNumber8));
      assertFalse(rationalNumber2.equals((Object)rationalNumber10));
      assertFalse(rationalNumber2.equals((Object)rationalNumber11));
      assertFalse(rationalNumber2.equals((Object)rationalNumber12));
      assertFalse(rationalNumber2.equals((Object)rationalNumber9));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(long0 == long4);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long0 == long5);
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber12));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber11));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber8));
      assertFalse(rationalNumber3.equals((Object)rationalNumber10));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertFalse(rationalNumber3.equals((Object)rationalNumber13));
      assertFalse(rationalNumber3.equals((Object)rationalNumber9));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(2623, rationalNumber0.divisor);
      assertEquals((-1322863), rationalNumber0.numerator);
      assertEquals(2623, rationalNumber2.divisor);
      assertEquals(1322863, rationalNumber2.numerator);
      assertEquals(1, rationalNumber3.numerator);
      assertEquals(2623, rationalNumber3.divisor);
      assertEquals((short) (-504), rationalNumber0.shortValue());
      assertEquals((-504.3320625238277), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber0.byteValue());
      assertEquals((-504), rationalNumber0.intValue());
      assertEquals((-504L), rationalNumber0.longValue());
      assertEquals(504L, rationalNumber2.longValue());
      assertEquals(504.33206F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(504.3320625238277, rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte) (-8), rationalNumber2.byteValue());
      assertEquals(504, rationalNumber2.intValue());
      assertEquals((short)504, rationalNumber2.shortValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals(3.812428516965307E-4, rationalNumber3.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals(3.8124286E-4F, rationalNumber3.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber13);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber13);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber10);
      assertNotSame(rationalNumber2, rationalNumber11);
      assertNotSame(rationalNumber2, rationalNumber12);
      assertNotSame(rationalNumber2, rationalNumber9);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber12);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber11);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber8);
      assertNotSame(rationalNumber3, rationalNumber10);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotSame(rationalNumber3, rationalNumber13);
      assertNotSame(rationalNumber3, rationalNumber9);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      
      double double4 = 1.0E-8;
      RationalNumber rationalNumber14 = RationalNumber.valueOf(double4);
      assertNotNull(rationalNumber14);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertFalse(rationalNumber14.equals((Object)rationalNumber11));
      assertFalse(rationalNumber14.equals((Object)rationalNumber2));
      assertFalse(rationalNumber14.equals((Object)rationalNumber9));
      assertFalse(rationalNumber14.equals((Object)rationalNumber8));
      assertFalse(rationalNumber14.equals((Object)rationalNumber13));
      assertFalse(rationalNumber14.equals((Object)rationalNumber10));
      assertFalse(rationalNumber14.equals((Object)rationalNumber7));
      assertFalse(rationalNumber14.equals((Object)rationalNumber4));
      assertFalse(rationalNumber14.equals((Object)rationalNumber1));
      assertFalse(rationalNumber14.equals((Object)rationalNumber0));
      assertFalse(rationalNumber14.equals((Object)rationalNumber6));
      assertFalse(rationalNumber14.equals((Object)rationalNumber5));
      assertFalse(rationalNumber14.equals((Object)rationalNumber12));
      assertFalse(rationalNumber14.equals((Object)rationalNumber3));
      assertEquals(1, rationalNumber14.numerator);
      assertEquals(100000000, rationalNumber14.divisor);
      assertEquals((byte)0, rationalNumber14.byteValue());
      assertEquals(0, rationalNumber14.intValue());
      assertEquals((short)0, rationalNumber14.shortValue());
      assertEquals(0L, rationalNumber14.longValue());
      assertEquals(1.0E-8F, rationalNumber14.floatValue(), 0.01F);
      assertEquals(1.0E-8, rationalNumber14.doubleValue(), 0.01);
      assertNotSame(rationalNumber14, rationalNumber11);
      assertNotSame(rationalNumber14, rationalNumber2);
      assertNotSame(rationalNumber14, rationalNumber9);
      assertNotSame(rationalNumber14, rationalNumber8);
      assertNotSame(rationalNumber14, rationalNumber13);
      assertNotSame(rationalNumber14, rationalNumber10);
      assertNotSame(rationalNumber14, rationalNumber7);
      assertNotSame(rationalNumber14, rationalNumber4);
      assertNotSame(rationalNumber14, rationalNumber1);
      assertNotSame(rationalNumber14, rationalNumber0);
      assertNotSame(rationalNumber14, rationalNumber6);
      assertNotSame(rationalNumber14, rationalNumber5);
      assertNotSame(rationalNumber14, rationalNumber12);
      assertNotSame(rationalNumber14, rationalNumber3);
      
      RationalNumber rationalNumber15 = rationalNumber12.negate();
      assertNotNull(rationalNumber15);
      assertFalse(rationalNumber15.equals((Object)rationalNumber10));
      assertFalse(rationalNumber15.equals((Object)rationalNumber11));
      assertFalse(rationalNumber15.equals((Object)rationalNumber3));
      assertFalse(rationalNumber15.equals((Object)rationalNumber2));
      assertFalse(rationalNumber15.equals((Object)rationalNumber4));
      assertFalse(rationalNumber15.equals((Object)rationalNumber12));
      assertFalse(rationalNumber15.equals((Object)rationalNumber6));
      assertFalse(rationalNumber15.equals((Object)rationalNumber1));
      assertFalse(rationalNumber15.equals((Object)rationalNumber0));
      assertFalse(rationalNumber15.equals((Object)rationalNumber5));
      assertFalse(rationalNumber15.equals((Object)rationalNumber7));
      assertFalse(rationalNumber15.equals((Object)rationalNumber13));
      assertFalse(rationalNumber15.equals((Object)rationalNumber9));
      assertFalse(rationalNumber15.equals((Object)rationalNumber14));
      assertFalse(rationalNumber15.equals((Object)rationalNumber8));
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber9));
      assertFalse(rationalNumber8.equals((Object)rationalNumber12));
      assertFalse(rationalNumber8.equals((Object)rationalNumber13));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber11));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber14));
      assertFalse(rationalNumber8.equals((Object)rationalNumber10));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long1);
      assertFalse(rationalNumber12.equals((Object)rationalNumber0));
      assertFalse(rationalNumber12.equals((Object)rationalNumber1));
      assertFalse(rationalNumber12.equals((Object)rationalNumber5));
      assertFalse(rationalNumber12.equals((Object)rationalNumber2));
      assertFalse(rationalNumber12.equals((Object)rationalNumber3));
      assertFalse(rationalNumber12.equals((Object)rationalNumber11));
      assertFalse(rationalNumber12.equals((Object)rationalNumber4));
      assertFalse(rationalNumber12.equals((Object)rationalNumber8));
      assertFalse(rationalNumber12.equals((Object)rationalNumber7));
      assertFalse(rationalNumber12.equals((Object)rationalNumber9));
      assertFalse(rationalNumber12.equals((Object)rationalNumber6));
      assertFalse(rationalNumber12.equals((Object)rationalNumber10));
      assertFalse(rationalNumber12.equals((Object)rationalNumber13));
      assertFalse(rationalNumber12.equals((Object)rationalNumber14));
      assertEquals(2623, rationalNumber15.numerator);
      assertEquals(568, rationalNumber15.divisor);
      assertEquals((-1322863), rationalNumber8.numerator);
      assertEquals(2623, rationalNumber8.divisor);
      assertEquals((-2623), rationalNumber12.numerator);
      assertEquals(568, rationalNumber12.divisor);
      assertEquals(4.6179576F, rationalNumber15.floatValue(), 0.01F);
      assertEquals((short)4, rationalNumber15.shortValue());
      assertEquals(4, rationalNumber15.intValue());
      assertEquals(4L, rationalNumber15.longValue());
      assertEquals((byte)4, rationalNumber15.byteValue());
      assertEquals(4.617957746478873, rationalNumber15.doubleValue(), 0.01);
      assertEquals((short) (-504), rationalNumber8.shortValue());
      assertEquals((-504.3320625238277), rationalNumber8.doubleValue(), 0.01);
      assertEquals((-504.33206F), rationalNumber8.floatValue(), 0.01F);
      assertEquals((byte)8, rationalNumber8.byteValue());
      assertEquals((-504L), rationalNumber8.longValue());
      assertEquals((-504), rationalNumber8.intValue());
      assertEquals((short) (-4), rationalNumber12.shortValue());
      assertEquals((byte) (-4), rationalNumber12.byteValue());
      assertEquals((-4L), rationalNumber12.longValue());
      assertEquals((-4), rationalNumber12.intValue());
      assertEquals((-4.6179576F), rationalNumber12.floatValue(), 0.01F);
      assertEquals((-4.617957746478873), rationalNumber12.doubleValue(), 0.01);
      assertNotSame(rationalNumber15, rationalNumber10);
      assertNotSame(rationalNumber15, rationalNumber11);
      assertNotSame(rationalNumber15, rationalNumber3);
      assertNotSame(rationalNumber15, rationalNumber2);
      assertNotSame(rationalNumber15, rationalNumber4);
      assertNotSame(rationalNumber15, rationalNumber12);
      assertNotSame(rationalNumber15, rationalNumber6);
      assertNotSame(rationalNumber15, rationalNumber1);
      assertNotSame(rationalNumber15, rationalNumber0);
      assertNotSame(rationalNumber15, rationalNumber5);
      assertNotSame(rationalNumber15, rationalNumber7);
      assertNotSame(rationalNumber15, rationalNumber13);
      assertNotSame(rationalNumber15, rationalNumber9);
      assertNotSame(rationalNumber15, rationalNumber14);
      assertNotSame(rationalNumber15, rationalNumber8);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber9);
      assertNotSame(rationalNumber8, rationalNumber12);
      assertNotSame(rationalNumber8, rationalNumber13);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber15);
      assertNotSame(rationalNumber8, rationalNumber11);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber14);
      assertNotSame(rationalNumber8, rationalNumber10);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber12, rationalNumber0);
      assertNotSame(rationalNumber12, rationalNumber1);
      assertNotSame(rationalNumber12, rationalNumber5);
      assertNotSame(rationalNumber12, rationalNumber2);
      assertNotSame(rationalNumber12, rationalNumber3);
      assertNotSame(rationalNumber12, rationalNumber15);
      assertNotSame(rationalNumber12, rationalNumber11);
      assertNotSame(rationalNumber12, rationalNumber4);
      assertNotSame(rationalNumber12, rationalNumber8);
      assertNotSame(rationalNumber12, rationalNumber7);
      assertNotSame(rationalNumber12, rationalNumber9);
      assertNotSame(rationalNumber12, rationalNumber6);
      assertNotSame(rationalNumber12, rationalNumber10);
      assertNotSame(rationalNumber12, rationalNumber13);
      assertNotSame(rationalNumber12, rationalNumber14);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = (-290L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = (-1384L);
      long long1 = (-2147483653L);
      RationalNumber rationalNumber0 = RationalNumber.valueOf(long0);
      assertNotNull(rationalNumber0);
      assertFalse(long0 == long1);
      assertEquals((-1384), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((byte) (-104), rationalNumber0.byteValue());
      assertEquals((short) (-1384), rationalNumber0.shortValue());
      assertEquals((-1384.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1384), rationalNumber0.intValue());
      assertEquals((-1384L), rationalNumber0.longValue());
      assertEquals((-1384.0F), rationalNumber0.floatValue(), 0.01F);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(long0, long1);
      assertNotNull(rationalNumber1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(1073741827, rationalNumber1.divisor);
      assertEquals(692, rationalNumber1.numerator);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(6.444752198332682E-7, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(6.444752E-7F, rationalNumber1.floatValue(), 0.01F);
      assertNotSame(rationalNumber1, rationalNumber0);
      
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(1073741827, rationalNumber1.divisor);
      assertEquals(692, rationalNumber1.numerator);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(6.444752198332682E-7, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(6.444752E-7F, rationalNumber1.floatValue(), 0.01F);
      assertNotSame(rationalNumber1, rationalNumber0);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(rationalNumber1.divisor);
      assertNotNull(rationalNumber2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertEquals(1073741827, rationalNumber1.divisor);
      assertEquals(692, rationalNumber1.numerator);
      assertEquals(1073741827, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(6.444752198332682E-7, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(6.444752E-7F, rationalNumber1.floatValue(), 0.01F);
      assertEquals(1073741827L, rationalNumber2.longValue());
      assertEquals(1.073741827E9, rationalNumber2.doubleValue(), 0.01);
      assertEquals(1.07374182E9F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(1073741827, rationalNumber2.intValue());
      assertEquals((byte)3, rationalNumber2.byteValue());
      assertEquals((short)3, rationalNumber2.shortValue());
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      
      double double0 = rationalNumber1.doubleValue();
      assertEquals(6.444752198332682E-7, double0, 0.01);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertEquals(1073741827, rationalNumber1.divisor);
      assertEquals(692, rationalNumber1.numerator);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(6.444752198332682E-7, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(6.444752E-7F, rationalNumber1.floatValue(), 0.01F);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      
      RationalNumber rationalNumber3 = rationalNumber1.negate();
      assertNotNull(rationalNumber3);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertEquals(1073741827, rationalNumber1.divisor);
      assertEquals(692, rationalNumber1.numerator);
      assertEquals((-692), rationalNumber3.numerator);
      assertEquals(1073741827, rationalNumber3.divisor);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(6.444752198332682E-7, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(6.444752E-7F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals((-6.444752198332682E-7), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-6.444752E-7F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      
      String string1 = rationalNumber0.toString();
      assertEquals("-1,384", string1);
      assertNotNull(string1);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1384), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((byte) (-104), rationalNumber0.byteValue());
      assertEquals((short) (-1384), rationalNumber0.shortValue());
      assertEquals((-1384.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1384), rationalNumber0.intValue());
      assertEquals((-1384L), rationalNumber0.longValue());
      assertEquals((-1384.0F), rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(string1, string0);
      
      String string2 = rationalNumber3.toString();
      assertEquals("-692/1073741827 (-0)", string2);
      assertNotNull(string2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1073741827, rationalNumber1.divisor);
      assertEquals(692, rationalNumber1.numerator);
      assertEquals((-692), rationalNumber3.numerator);
      assertEquals(1073741827, rationalNumber3.divisor);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(6.444752198332682E-7, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(6.444752E-7F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals((-6.444752198332682E-7), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-6.444752E-7F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = rationalNumber3.toString();
      assertEquals("-692/1073741827 (-0)", string3);
      assertNotNull(string3);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(1073741827, rationalNumber1.divisor);
      assertEquals(692, rationalNumber1.numerator);
      assertEquals((-692), rationalNumber3.numerator);
      assertEquals(1073741827, rationalNumber3.divisor);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(6.444752198332682E-7, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(6.444752E-7F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals((-6.444752198332682E-7), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-6.444752E-7F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      float float0 = rationalNumber1.floatValue();
      assertEquals(6.444752E-7F, float0, 0.01F);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertEquals(1073741827, rationalNumber1.divisor);
      assertEquals(692, rationalNumber1.numerator);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(6.444752198332682E-7, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(6.444752E-7F, rationalNumber1.floatValue(), 0.01F);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      
      String string4 = rationalNumber0.toString();
      assertEquals("-1,384", string4);
      assertNotNull(string4);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals((-1384), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((byte) (-104), rationalNumber0.byteValue());
      assertEquals((short) (-1384), rationalNumber0.shortValue());
      assertEquals((-1384.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1384), rationalNumber0.intValue());
      assertEquals((-1384L), rationalNumber0.longValue());
      assertEquals((-1384.0F), rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      
      float float1 = rationalNumber3.floatValue();
      assertEquals((-6.444752E-7F), float1, 0.01F);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertEquals(float1, float0, 0.01F);
      assertEquals(1073741827, rationalNumber1.divisor);
      assertEquals(692, rationalNumber1.numerator);
      assertEquals((-692), rationalNumber3.numerator);
      assertEquals(1073741827, rationalNumber3.divisor);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(6.444752198332682E-7, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(6.444752E-7F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals((-6.444752198332682E-7), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-6.444752E-7F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      
      long long2 = rationalNumber1.longValue();
      assertEquals(0L, long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(1073741827, rationalNumber1.divisor);
      assertEquals(692, rationalNumber1.numerator);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(6.444752198332682E-7, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(6.444752E-7F, rationalNumber1.floatValue(), 0.01F);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      
      double double1 = rationalNumber1.doubleValue();
      assertEquals(6.444752198332682E-7, double1, 0.01);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertEquals(double1, double0, 0.01);
      assertEquals(1073741827, rationalNumber1.divisor);
      assertEquals(692, rationalNumber1.numerator);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(6.444752198332682E-7, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(6.444752E-7F, rationalNumber1.floatValue(), 0.01F);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1217;
      int int1 = 472;
      RationalNumber rationalNumber0 = new RationalNumber(int0, int1);
      assertNotNull(rationalNumber0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(472, rationalNumber0.divisor);
      assertEquals(1217, rationalNumber0.numerator);
      assertEquals(2L, rationalNumber0.longValue());
      assertEquals((short)2, rationalNumber0.shortValue());
      assertEquals((byte)2, rationalNumber0.byteValue());
      assertEquals(2.5783898305084745, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.57839F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(2, rationalNumber0.intValue());
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2.578", string0);
      assertNotNull(string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(472, rationalNumber0.divisor);
      assertEquals(1217, rationalNumber0.numerator);
      assertEquals(2L, rationalNumber0.longValue());
      assertEquals((short)2, rationalNumber0.shortValue());
      assertEquals((byte)2, rationalNumber0.byteValue());
      assertEquals(2.5783898305084745, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.57839F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(2, rationalNumber0.intValue());
      
      long long0 = 176L;
      long long1 = 0L;
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(long0, long1);
      assertNotNull(rationalNumber1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(0, rationalNumber1.divisor);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber1.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber1.doubleValue(), 0.01);
      assertNotSame(rationalNumber1, rationalNumber0);
      
      String string1 = rationalNumber1.toString();
      assertEquals("Invalid rational (1/0)", string1);
      assertNotNull(string1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(0, rationalNumber1.divisor);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber1.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber1.doubleValue(), 0.01);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(string1, string0);
      
      String string2 = rationalNumber0.toDisplayString();
      assertEquals("2.578", string2);
      assertNotNull(string2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(472, rationalNumber0.divisor);
      assertEquals(1217, rationalNumber0.numerator);
      assertEquals(2L, rationalNumber0.longValue());
      assertEquals((short)2, rationalNumber0.shortValue());
      assertEquals((byte)2, rationalNumber0.byteValue());
      assertEquals(2.5783898305084745, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.57839F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(2, rationalNumber0.intValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      long long2 = rationalNumber0.longValue();
      assertEquals(2L, long2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(472, rationalNumber0.divisor);
      assertEquals(1217, rationalNumber0.numerator);
      assertEquals(2L, rationalNumber0.longValue());
      assertEquals((short)2, rationalNumber0.shortValue());
      assertEquals((byte)2, rationalNumber0.byteValue());
      assertEquals(2.5783898305084745, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.57839F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(2, rationalNumber0.intValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      assertNotNull(rationalNumber2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertEquals(472, rationalNumber0.divisor);
      assertEquals(1217, rationalNumber0.numerator);
      assertEquals((-1217), rationalNumber2.numerator);
      assertEquals(472, rationalNumber2.divisor);
      assertEquals(2L, rationalNumber0.longValue());
      assertEquals((short)2, rationalNumber0.shortValue());
      assertEquals((byte)2, rationalNumber0.byteValue());
      assertEquals(2.5783898305084745, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.57839F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(2, rationalNumber0.intValue());
      assertEquals((byte) (-2), rationalNumber2.byteValue());
      assertEquals((-2), rationalNumber2.intValue());
      assertEquals((-2L), rationalNumber2.longValue());
      assertEquals((-2.57839F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-2.5783898305084745), rationalNumber2.doubleValue(), 0.01);
      assertEquals((short) (-2), rationalNumber2.shortValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(long1);
      assertNotNull(rationalNumber3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(0, rationalNumber3.numerator);
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals(0.0F, rationalNumber3.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals(0.0, rationalNumber3.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber3.longValue());
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      
      long long3 = (-3813L);
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(rationalNumber0.numerator, long3);
      assertNotNull(rationalNumber4);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertEquals(472, rationalNumber0.divisor);
      assertEquals(1217, rationalNumber0.numerator);
      assertEquals(1217, rationalNumber4.numerator);
      assertEquals((-3813), rationalNumber4.divisor);
      assertEquals(2L, rationalNumber0.longValue());
      assertEquals((short)2, rationalNumber0.shortValue());
      assertEquals((byte)2, rationalNumber0.byteValue());
      assertEquals(2.5783898305084745, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.57839F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(2, rationalNumber0.intValue());
      assertEquals((-0.3191712562286913), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals((-0.31917125F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber1);
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf(rationalNumber2.divisor);
      assertNotNull(rationalNumber5);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertEquals(472, rationalNumber0.divisor);
      assertEquals(1217, rationalNumber0.numerator);
      assertEquals((-1217), rationalNumber2.numerator);
      assertEquals(472, rationalNumber2.divisor);
      assertEquals(472, rationalNumber5.numerator);
      assertEquals(1, rationalNumber5.divisor);
      assertEquals(2L, rationalNumber0.longValue());
      assertEquals((short)2, rationalNumber0.shortValue());
      assertEquals((byte)2, rationalNumber0.byteValue());
      assertEquals(2.5783898305084745, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.57839F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(2, rationalNumber0.intValue());
      assertEquals((byte) (-2), rationalNumber2.byteValue());
      assertEquals((-2), rationalNumber2.intValue());
      assertEquals((-2L), rationalNumber2.longValue());
      assertEquals((-2.57839F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-2.5783898305084745), rationalNumber2.doubleValue(), 0.01);
      assertEquals((short) (-2), rationalNumber2.shortValue());
      assertEquals(472.0F, rationalNumber5.floatValue(), 0.01F);
      assertEquals((byte) (-40), rationalNumber5.byteValue());
      assertEquals(472, rationalNumber5.intValue());
      assertEquals((short)472, rationalNumber5.shortValue());
      assertEquals(472L, rationalNumber5.longValue());
      assertEquals(472.0, rationalNumber5.doubleValue(), 0.01);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber3);
      
      String string3 = rationalNumber5.toDisplayString();
      assertEquals("472", string3);
      assertNotNull(string3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(472, rationalNumber0.divisor);
      assertEquals(1217, rationalNumber0.numerator);
      assertEquals((-1217), rationalNumber2.numerator);
      assertEquals(472, rationalNumber2.divisor);
      assertEquals(472, rationalNumber5.numerator);
      assertEquals(1, rationalNumber5.divisor);
      assertEquals(2L, rationalNumber0.longValue());
      assertEquals((short)2, rationalNumber0.shortValue());
      assertEquals((byte)2, rationalNumber0.byteValue());
      assertEquals(2.5783898305084745, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.57839F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(2, rationalNumber0.intValue());
      assertEquals((byte) (-2), rationalNumber2.byteValue());
      assertEquals((-2), rationalNumber2.intValue());
      assertEquals((-2L), rationalNumber2.longValue());
      assertEquals((-2.57839F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-2.5783898305084745), rationalNumber2.doubleValue(), 0.01);
      assertEquals((short) (-2), rationalNumber2.shortValue());
      assertEquals(472.0F, rationalNumber5.floatValue(), 0.01F);
      assertEquals((byte) (-40), rationalNumber5.byteValue());
      assertEquals(472, rationalNumber5.intValue());
      assertEquals((short)472, rationalNumber5.shortValue());
      assertEquals(472L, rationalNumber5.longValue());
      assertEquals(472.0, rationalNumber5.doubleValue(), 0.01);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      
      RationalNumber rationalNumber6 = RationalNumber.valueOf(long1);
      assertNotNull(rationalNumber6);
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertEquals(0, rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals(0L, rationalNumber6.longValue());
      assertEquals(0.0, rationalNumber6.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber6.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber6.byteValue());
      assertEquals(0, rationalNumber6.intValue());
      assertEquals((short)0, rationalNumber6.shortValue());
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber0);
      
      String string4 = rationalNumber4.toString();
      assertEquals("1217/-3813 (-0.319)", string4);
      assertNotNull(string4);
      assertFalse(int0 == int1);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertEquals(472, rationalNumber0.divisor);
      assertEquals(1217, rationalNumber0.numerator);
      assertEquals(1217, rationalNumber4.numerator);
      assertEquals((-3813), rationalNumber4.divisor);
      assertEquals(2L, rationalNumber0.longValue());
      assertEquals((short)2, rationalNumber0.shortValue());
      assertEquals((byte)2, rationalNumber0.byteValue());
      assertEquals(2.5783898305084745, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.57839F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(2, rationalNumber0.intValue());
      assertEquals((-0.3191712562286913), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals((-0.31917125F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber5);
      
      float float0 = rationalNumber1.floatValue();
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(0, rationalNumber1.divisor);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber1.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber1.doubleValue(), 0.01);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber3);
      
      RationalNumber rationalNumber7 = RationalNumber.valueOf(float0);
      assertNotNull(rationalNumber7);
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertEquals(1, rationalNumber7.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber7.numerator);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(0, rationalNumber1.divisor);
      assertEquals(2147483647L, rationalNumber7.longValue());
      assertEquals((short) (-1), rationalNumber7.shortValue());
      assertEquals(2.14748365E9F, rationalNumber7.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber7.byteValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber7.intValue());
      assertEquals(2.147483647E9, rationalNumber7.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber1.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber1.doubleValue(), 0.01);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber7);
      
      String string5 = rationalNumber7.toString();
      assertEquals("2,147,483,647", string5);
      assertNotNull(string5);
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertEquals(1, rationalNumber7.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber7.numerator);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(0, rationalNumber1.divisor);
      assertEquals(2147483647L, rationalNumber7.longValue());
      assertEquals((short) (-1), rationalNumber7.shortValue());
      assertEquals(2.14748365E9F, rationalNumber7.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber7.byteValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber7.intValue());
      assertEquals(2.147483647E9, rationalNumber7.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber1.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber1.doubleValue(), 0.01);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber7);
      
      RationalNumber rationalNumber8 = RationalNumber.valueOf(long0);
      assertNotNull(rationalNumber8);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertEquals(1, rationalNumber8.divisor);
      assertEquals(176, rationalNumber8.numerator);
      assertEquals(176.0F, rationalNumber8.floatValue(), 0.01F);
      assertEquals((byte) (-80), rationalNumber8.byteValue());
      assertEquals(176.0, rationalNumber8.doubleValue(), 0.01);
      assertEquals(176L, rationalNumber8.longValue());
      assertEquals(176, rationalNumber8.intValue());
      assertEquals((short)176, rationalNumber8.shortValue());
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber2);
      
      int int2 = rationalNumber4.intValue();
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber8));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber7));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertEquals(472, rationalNumber0.divisor);
      assertEquals(1217, rationalNumber0.numerator);
      assertEquals(1217, rationalNumber4.numerator);
      assertEquals((-3813), rationalNumber4.divisor);
      assertEquals(2L, rationalNumber0.longValue());
      assertEquals((short)2, rationalNumber0.shortValue());
      assertEquals((byte)2, rationalNumber0.byteValue());
      assertEquals(2.5783898305084745, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.57839F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(2, rationalNumber0.intValue());
      assertEquals((-0.3191712562286913), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals((-0.31917125F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber8);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotSame(rationalNumber4, rationalNumber5);
      
      double double0 = rationalNumber4.doubleValue();
      assertEquals((-0.3191712562286913), double0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber8));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber7));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertEquals(472, rationalNumber0.divisor);
      assertEquals(1217, rationalNumber0.numerator);
      assertEquals(1217, rationalNumber4.numerator);
      assertEquals((-3813), rationalNumber4.divisor);
      assertEquals(2L, rationalNumber0.longValue());
      assertEquals((short)2, rationalNumber0.shortValue());
      assertEquals((byte)2, rationalNumber0.byteValue());
      assertEquals(2.5783898305084745, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.57839F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(2, rationalNumber0.intValue());
      assertEquals((-0.3191712562286913), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals((-0.31917125F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber8);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotSame(rationalNumber4, rationalNumber5);
      
      RationalNumber rationalNumber9 = RationalNumber.valueOf(rationalNumber3.numerator);
      assertNotNull(rationalNumber9);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber9.equals((Object)rationalNumber2));
      assertFalse(rationalNumber9.equals((Object)rationalNumber4));
      assertFalse(rationalNumber9.equals((Object)rationalNumber1));
      assertFalse(rationalNumber9.equals((Object)rationalNumber3));
      assertFalse(rationalNumber9.equals((Object)rationalNumber5));
      assertFalse(rationalNumber9.equals((Object)rationalNumber8));
      assertFalse(rationalNumber9.equals((Object)rationalNumber7));
      assertFalse(rationalNumber9.equals((Object)rationalNumber6));
      assertFalse(rationalNumber9.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertFalse(rationalNumber3.equals((Object)rationalNumber8));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertEquals(0, rationalNumber9.numerator);
      assertEquals(1, rationalNumber9.divisor);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(0, rationalNumber3.numerator);
      assertEquals((byte)0, rationalNumber9.byteValue());
      assertEquals(0.0F, rationalNumber9.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber9.shortValue());
      assertEquals(0.0, rationalNumber9.doubleValue(), 0.01);
      assertEquals(0, rationalNumber9.intValue());
      assertEquals(0L, rationalNumber9.longValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals(0.0F, rationalNumber3.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals(0.0, rationalNumber3.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber3.longValue());
      assertNotSame(rationalNumber9, rationalNumber2);
      assertNotSame(rationalNumber9, rationalNumber4);
      assertNotSame(rationalNumber9, rationalNumber1);
      assertNotSame(rationalNumber9, rationalNumber3);
      assertNotSame(rationalNumber9, rationalNumber5);
      assertNotSame(rationalNumber9, rationalNumber8);
      assertNotSame(rationalNumber9, rationalNumber7);
      assertNotSame(rationalNumber9, rationalNumber6);
      assertNotSame(rationalNumber9, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotSame(rationalNumber3, rationalNumber8);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber9);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber1);
      
      long long4 = rationalNumber0.longValue();
      assertEquals(2L, long4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertTrue(long4 == long2);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertEquals(472, rationalNumber0.divisor);
      assertEquals(1217, rationalNumber0.numerator);
      assertEquals(2L, rationalNumber0.longValue());
      assertEquals((short)2, rationalNumber0.shortValue());
      assertEquals((byte)2, rationalNumber0.byteValue());
      assertEquals(2.5783898305084745, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2.57839F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(2, rationalNumber0.intValue());
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      
      // Undeclared exception!
      try { 
        rationalNumber1.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = (-2.147483647E9);
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertNotNull(rationalNumber0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2147483647), rationalNumber0.numerator);
      assertEquals((-2147483647L), rationalNumber0.longValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((-2147483647), rationalNumber0.intValue());
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber0.floatValue(), 0.01F);
      
      String string0 = rationalNumber0.toString();
      assertEquals("-2,147,483,647", string0);
      assertNotNull(string0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2147483647), rationalNumber0.numerator);
      assertEquals((-2147483647L), rationalNumber0.longValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((-2147483647), rationalNumber0.intValue());
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber0.floatValue(), 0.01F);
      
      double double1 = 1437.3860115927;
      RationalNumber rationalNumber1 = RationalNumber.valueOf(double1);
      assertNotNull(rationalNumber1);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(10523, rationalNumber1.divisor);
      assertEquals(15125613, rationalNumber1.numerator);
      assertEquals(1437.386011593652, rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-99), rationalNumber1.byteValue());
      assertEquals(1437.386F, rationalNumber1.floatValue(), 0.01F);
      assertEquals(1437, rationalNumber1.intValue());
      assertEquals((short)1437, rationalNumber1.shortValue());
      assertEquals(1437L, rationalNumber1.longValue());
      assertNotSame(rationalNumber1, rationalNumber0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string1);
      assertNotNull(string1);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2147483647), rationalNumber0.numerator);
      assertEquals((-2147483647L), rationalNumber0.longValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((-2147483647), rationalNumber0.intValue());
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(string1, string0);
      
      long long0 = (-2147483663L);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(long0);
      assertNotNull(rationalNumber2);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2147483647), rationalNumber2.numerator);
      assertEquals((-2147483647L), rationalNumber2.longValue());
      assertEquals((short)1, rationalNumber2.shortValue());
      assertEquals((-2147483647), rationalNumber2.intValue());
      assertEquals((-2.147483647E9), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber2.byteValue());
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      
      String string2 = rationalNumber0.toString();
      assertEquals("-2,147,483,647", string2);
      assertNotNull(string2);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2147483647), rationalNumber0.numerator);
      assertEquals((-2147483647L), rationalNumber0.longValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((-2147483647), rationalNumber0.intValue());
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(long0, rationalNumber1.numerator);
      assertNotNull(rationalNumber3);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertEquals(10523, rationalNumber1.divisor);
      assertEquals(15125613, rationalNumber1.numerator);
      assertEquals(3781403, rationalNumber3.divisor);
      assertEquals((-536870916), rationalNumber3.numerator);
      assertEquals(1437.386011593652, rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-99), rationalNumber1.byteValue());
      assertEquals(1437.386F, rationalNumber1.floatValue(), 0.01F);
      assertEquals(1437, rationalNumber1.intValue());
      assertEquals((short)1437, rationalNumber1.shortValue());
      assertEquals(1437L, rationalNumber1.longValue());
      assertEquals((short) (-141), rationalNumber3.shortValue());
      assertEquals((-141.97664F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((byte)115, rationalNumber3.byteValue());
      assertEquals((-141), rationalNumber3.intValue());
      assertEquals((-141L), rationalNumber3.longValue());
      assertEquals((-141.9766462342152), rationalNumber3.doubleValue(), 0.01);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber0);
      
      String string3 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string3);
      assertNotNull(string3);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2147483647), rationalNumber0.numerator);
      assertEquals((-2147483647L), rationalNumber0.longValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((-2147483647), rationalNumber0.intValue());
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber0.floatValue(), 0.01F);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      
      double double2 = (-2164.71801788);
      String string4 = rationalNumber1.toString();
      assertEquals("15125613/10523 (1,437.386)", string4);
      assertNotNull(string4);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(10523, rationalNumber1.divisor);
      assertEquals(15125613, rationalNumber1.numerator);
      assertEquals(1437.386011593652, rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-99), rationalNumber1.byteValue());
      assertEquals(1437.386F, rationalNumber1.floatValue(), 0.01F);
      assertEquals(1437, rationalNumber1.intValue());
      assertEquals((short)1437, rationalNumber1.shortValue());
      assertEquals(1437L, rationalNumber1.longValue());
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf(double2);
      assertNotNull(rationalNumber4);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertEquals((-28089381), rationalNumber4.numerator);
      assertEquals(12976, rationalNumber4.divisor);
      assertEquals((byte) (-116), rationalNumber4.byteValue());
      assertEquals((-2164.7180178791614), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short) (-2164), rationalNumber4.shortValue());
      assertEquals((-2164L), rationalNumber4.longValue());
      assertEquals((-2164), rationalNumber4.intValue());
      assertEquals((-2164.718F), rationalNumber4.floatValue(), 0.01F);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber1);
      
      long long1 = (-2845L);
      long long2 = 0L;
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(long1, long2);
      assertNotNull(rationalNumber5);
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(1, rationalNumber5.numerator);
      assertEquals(0, rationalNumber5.divisor);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber5.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber5.floatValue(), 0.01F);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber4);
      
      String string5 = rationalNumber4.toDisplayString();
      assertEquals("-2,164.718", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertEquals((-28089381), rationalNumber4.numerator);
      assertEquals(12976, rationalNumber4.divisor);
      assertEquals((byte) (-116), rationalNumber4.byteValue());
      assertEquals((-2164.7180178791614), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short) (-2164), rationalNumber4.shortValue());
      assertEquals((-2164L), rationalNumber4.longValue());
      assertEquals((-2164), rationalNumber4.intValue());
      assertEquals((-2164.718F), rationalNumber4.floatValue(), 0.01F);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber1);
      
      RationalNumber rationalNumber6 = RationalNumber.valueOf(rationalNumber2.divisor);
      assertNotNull(rationalNumber6);
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertEquals(1, rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2147483647), rationalNumber2.numerator);
      assertEquals(1L, rationalNumber6.longValue());
      assertEquals(1, rationalNumber6.intValue());
      assertEquals((short)1, rationalNumber6.shortValue());
      assertEquals((byte)1, rationalNumber6.byteValue());
      assertEquals(1.0F, rationalNumber6.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber6.doubleValue(), 0.01);
      assertEquals((-2147483647L), rationalNumber2.longValue());
      assertEquals((short)1, rationalNumber2.shortValue());
      assertEquals((-2147483647), rationalNumber2.intValue());
      assertEquals((-2.147483647E9), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber2.byteValue());
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber3);
      
      String string6 = rationalNumber2.toString();
      assertEquals("-2,147,483,647", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2147483647), rationalNumber2.numerator);
      assertEquals((-2147483647L), rationalNumber2.longValue());
      assertEquals((short)1, rationalNumber2.shortValue());
      assertEquals((-2147483647), rationalNumber2.intValue());
      assertEquals((-2.147483647E9), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber2.byteValue());
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber3);
      
      String string7 = rationalNumber6.toDisplayString();
      assertEquals("1", string7);
      assertNotNull(string7);
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertEquals(1, rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2147483647), rationalNumber2.numerator);
      assertEquals(1L, rationalNumber6.longValue());
      assertEquals(1, rationalNumber6.intValue());
      assertEquals((short)1, rationalNumber6.shortValue());
      assertEquals((byte)1, rationalNumber6.byteValue());
      assertEquals(1.0F, rationalNumber6.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber6.doubleValue(), 0.01);
      assertEquals((-2147483647L), rationalNumber2.longValue());
      assertEquals((short)1, rationalNumber2.shortValue());
      assertEquals((-2147483647), rationalNumber2.intValue());
      assertEquals((-2.147483647E9), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber2.byteValue());
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber3);
      
      String string8 = rationalNumber6.toDisplayString();
      assertEquals("1", string8);
      assertNotNull(string8);
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertEquals(1, rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2147483647), rationalNumber2.numerator);
      assertEquals(1L, rationalNumber6.longValue());
      assertEquals(1, rationalNumber6.intValue());
      assertEquals((short)1, rationalNumber6.shortValue());
      assertEquals((byte)1, rationalNumber6.byteValue());
      assertEquals(1.0F, rationalNumber6.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber6.doubleValue(), 0.01);
      assertEquals((-2147483647L), rationalNumber2.longValue());
      assertEquals((short)1, rationalNumber2.shortValue());
      assertEquals((-2147483647), rationalNumber2.intValue());
      assertEquals((-2.147483647E9), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber2.byteValue());
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertNotSame(string8, string4);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string2);
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber3);
      
      String string9 = rationalNumber6.toString();
      assertEquals("1", string9);
      assertNotNull(string9);
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertEquals(1, rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2147483647), rationalNumber2.numerator);
      assertEquals(1L, rationalNumber6.longValue());
      assertEquals(1, rationalNumber6.intValue());
      assertEquals((short)1, rationalNumber6.shortValue());
      assertEquals((byte)1, rationalNumber6.byteValue());
      assertEquals(1.0F, rationalNumber6.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber6.doubleValue(), 0.01);
      assertEquals((-2147483647L), rationalNumber2.longValue());
      assertEquals((short)1, rationalNumber2.shortValue());
      assertEquals((-2147483647), rationalNumber2.intValue());
      assertEquals((-2.147483647E9), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber2.byteValue());
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(string9, string6);
      assertNotSame(string9, string7);
      assertNotSame(string9, string2);
      assertNotSame(string9, string0);
      assertNotSame(string9, string8);
      assertNotSame(string9, string5);
      assertNotSame(string9, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string3);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber3);
      
      double double3 = rationalNumber1.doubleValue();
      assertEquals(1437.386011593652, double3, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(10523, rationalNumber1.divisor);
      assertEquals(15125613, rationalNumber1.numerator);
      assertEquals(1437.386011593652, rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-99), rationalNumber1.byteValue());
      assertEquals(1437.386F, rationalNumber1.floatValue(), 0.01F);
      assertEquals(1437, rationalNumber1.intValue());
      assertEquals((short)1437, rationalNumber1.shortValue());
      assertEquals(1437L, rationalNumber1.longValue());
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber5);
      
      long long3 = (-854L);
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(rationalNumber6.divisor, long3);
      assertNotNull(rationalNumber7);
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertEquals(1, rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2147483647), rationalNumber2.numerator);
      assertEquals((-854), rationalNumber7.divisor);
      assertEquals(1, rationalNumber7.numerator);
      assertEquals(1L, rationalNumber6.longValue());
      assertEquals(1, rationalNumber6.intValue());
      assertEquals((short)1, rationalNumber6.shortValue());
      assertEquals((byte)1, rationalNumber6.byteValue());
      assertEquals(1.0F, rationalNumber6.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber6.doubleValue(), 0.01);
      assertEquals((-2147483647L), rationalNumber2.longValue());
      assertEquals((short)1, rationalNumber2.shortValue());
      assertEquals((-2147483647), rationalNumber2.intValue());
      assertEquals((-2.147483647E9), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber2.byteValue());
      assertEquals((-0.0011709601F), rationalNumber7.floatValue(), 0.01F);
      assertEquals((-0.00117096018735363), rationalNumber7.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber7.byteValue());
      assertEquals(0L, rationalNumber7.longValue());
      assertEquals((short)0, rationalNumber7.shortValue());
      assertEquals(0, rationalNumber7.intValue());
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber7);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber0);
      
      RationalNumber rationalNumber8 = RationalNumber.valueOf(rationalNumber7.divisor);
      assertNotNull(rationalNumber8);
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber7));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertEquals(1, rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2147483647), rationalNumber2.numerator);
      assertEquals((-854), rationalNumber7.divisor);
      assertEquals(1, rationalNumber7.numerator);
      assertEquals((-854), rationalNumber8.numerator);
      assertEquals(1, rationalNumber8.divisor);
      assertEquals(1L, rationalNumber6.longValue());
      assertEquals(1, rationalNumber6.intValue());
      assertEquals((short)1, rationalNumber6.shortValue());
      assertEquals((byte)1, rationalNumber6.byteValue());
      assertEquals(1.0F, rationalNumber6.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber6.doubleValue(), 0.01);
      assertEquals((-2147483647L), rationalNumber2.longValue());
      assertEquals((short)1, rationalNumber2.shortValue());
      assertEquals((-2147483647), rationalNumber2.intValue());
      assertEquals((-2.147483647E9), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber2.byteValue());
      assertEquals((-0.0011709601F), rationalNumber7.floatValue(), 0.01F);
      assertEquals((-0.00117096018735363), rationalNumber7.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber7.byteValue());
      assertEquals(0L, rationalNumber7.longValue());
      assertEquals((short)0, rationalNumber7.shortValue());
      assertEquals(0, rationalNumber7.intValue());
      assertEquals((-854L), rationalNumber8.longValue());
      assertEquals((-854.0F), rationalNumber8.floatValue(), 0.01F);
      assertEquals((short) (-854), rationalNumber8.shortValue());
      assertEquals((byte) (-86), rationalNumber8.byteValue());
      assertEquals((-854), rationalNumber8.intValue());
      assertEquals((-854.0), rationalNumber8.doubleValue(), 0.01);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber7);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber8);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber8);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber1);
      
      long long4 = rationalNumber6.longValue();
      assertEquals(1L, long4);
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber7));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber8));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber8));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertEquals(1, rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2147483647), rationalNumber2.numerator);
      assertEquals(1L, rationalNumber6.longValue());
      assertEquals(1, rationalNumber6.intValue());
      assertEquals((short)1, rationalNumber6.shortValue());
      assertEquals((byte)1, rationalNumber6.byteValue());
      assertEquals(1.0F, rationalNumber6.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber6.doubleValue(), 0.01);
      assertEquals((-2147483647L), rationalNumber2.longValue());
      assertEquals((short)1, rationalNumber2.shortValue());
      assertEquals((-2147483647), rationalNumber2.intValue());
      assertEquals((-2.147483647E9), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2.14748365E9F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber2.byteValue());
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber7);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber8);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber3);
      
      double double4 = rationalNumber4.doubleValue();
      assertEquals((-2164.7180178791614), double4, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber7));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber8));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertEquals((-28089381), rationalNumber4.numerator);
      assertEquals(12976, rationalNumber4.divisor);
      assertEquals((byte) (-116), rationalNumber4.byteValue());
      assertEquals((-2164.7180178791614), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short) (-2164), rationalNumber4.shortValue());
      assertEquals((-2164L), rationalNumber4.longValue());
      assertEquals((-2164), rationalNumber4.intValue());
      assertEquals((-2164.718F), rationalNumber4.floatValue(), 0.01F);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber8);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = (-4081L);
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(long0, long0);
      assertNotNull(rationalNumber0);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = (-1149.829661);
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertNotNull(rationalNumber0);
      assertEquals((-37207338), rationalNumber0.numerator);
      assertEquals(32359, rationalNumber0.divisor);
      assertEquals((-1149), rationalNumber0.intValue());
      assertEquals((-1149L), rationalNumber0.longValue());
      assertEquals((byte) (-125), rationalNumber0.byteValue());
      assertEquals((-1149.8296F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-1149.82966099076), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-1149), rationalNumber0.shortValue());
      
      String string0 = rationalNumber0.toString();
      assertEquals("-37207338/32359 (-1,149.83)", string0);
      assertNotNull(string0);
      assertEquals((-37207338), rationalNumber0.numerator);
      assertEquals(32359, rationalNumber0.divisor);
      assertEquals((-1149), rationalNumber0.intValue());
      assertEquals((-1149L), rationalNumber0.longValue());
      assertEquals((byte) (-125), rationalNumber0.byteValue());
      assertEquals((-1149.8296F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-1149.82966099076), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-1149), rationalNumber0.shortValue());
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(rationalNumber0.divisor);
      assertNotNull(rationalNumber1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals((-37207338), rationalNumber0.numerator);
      assertEquals(32359, rationalNumber0.divisor);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(32359, rationalNumber1.numerator);
      assertEquals((-1149), rationalNumber0.intValue());
      assertEquals((-1149L), rationalNumber0.longValue());
      assertEquals((byte) (-125), rationalNumber0.byteValue());
      assertEquals((-1149.8296F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-1149.82966099076), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-1149), rationalNumber0.shortValue());
      assertEquals(32359.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(32359, rationalNumber1.intValue());
      assertEquals(32359L, rationalNumber1.longValue());
      assertEquals(32359.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)103, rationalNumber1.byteValue());
      assertEquals((short)32359, rationalNumber1.shortValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      
      String string1 = rationalNumber0.toString();
      assertEquals("-37207338/32359 (-1,149.83)", string1);
      assertNotNull(string1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertTrue(string1.equals((Object)string0));
      assertEquals((-37207338), rationalNumber0.numerator);
      assertEquals(32359, rationalNumber0.divisor);
      assertEquals((-1149), rationalNumber0.intValue());
      assertEquals((-1149L), rationalNumber0.longValue());
      assertEquals((byte) (-125), rationalNumber0.byteValue());
      assertEquals((-1149.8296F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-1149.82966099076), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-1149), rationalNumber0.shortValue());
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(string1, string0);
      
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      assertNotNull(rationalNumber2);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertEquals((-37207338), rationalNumber0.numerator);
      assertEquals(32359, rationalNumber0.divisor);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(32359, rationalNumber1.numerator);
      assertEquals((-32359), rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-1149), rationalNumber0.intValue());
      assertEquals((-1149L), rationalNumber0.longValue());
      assertEquals((byte) (-125), rationalNumber0.byteValue());
      assertEquals((-1149.8296F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-1149.82966099076), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-1149), rationalNumber0.shortValue());
      assertEquals(32359.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(32359, rationalNumber1.intValue());
      assertEquals(32359L, rationalNumber1.longValue());
      assertEquals(32359.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)103, rationalNumber1.byteValue());
      assertEquals((short)32359, rationalNumber1.shortValue());
      assertEquals((-32359.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-32359.0), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-32359), rationalNumber2.intValue());
      assertEquals((byte) (-103), rationalNumber2.byteValue());
      assertEquals((-32359L), rationalNumber2.longValue());
      assertEquals((short) (-32359), rationalNumber2.shortValue());
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      
      String string2 = rationalNumber2.toDisplayString();
      assertEquals("-32359", string2);
      assertNotNull(string2);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-37207338), rationalNumber0.numerator);
      assertEquals(32359, rationalNumber0.divisor);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(32359, rationalNumber1.numerator);
      assertEquals((-32359), rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-1149), rationalNumber0.intValue());
      assertEquals((-1149L), rationalNumber0.longValue());
      assertEquals((byte) (-125), rationalNumber0.byteValue());
      assertEquals((-1149.8296F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-1149.82966099076), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-1149), rationalNumber0.shortValue());
      assertEquals(32359.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(32359, rationalNumber1.intValue());
      assertEquals(32359L, rationalNumber1.longValue());
      assertEquals(32359.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)103, rationalNumber1.byteValue());
      assertEquals((short)32359, rationalNumber1.shortValue());
      assertEquals((-32359.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-32359.0), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-32359), rationalNumber2.intValue());
      assertEquals((byte) (-103), rationalNumber2.byteValue());
      assertEquals((-32359L), rationalNumber2.longValue());
      assertEquals((short) (-32359), rationalNumber2.shortValue());
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      double double1 = 1.0E-8;
      RationalNumber rationalNumber3 = RationalNumber.valueOf(double1);
      assertNotNull(rationalNumber3);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertEquals(100000000, rationalNumber3.divisor);
      assertEquals(1, rationalNumber3.numerator);
      assertEquals(1.0E-8F, rationalNumber3.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals(1.0E-8, rationalNumber3.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber3.longValue());
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber0);
      
      double double2 = 0.0;
      RationalNumber rationalNumber4 = RationalNumber.valueOf(double2);
      assertNotNull(rationalNumber4);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(0, rationalNumber4.numerator);
      assertEquals(0, rationalNumber4.intValue());
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber4.doubleValue(), 0.01);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber1);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals((-1149.8296F), float0, 0.01F);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertEquals((-37207338), rationalNumber0.numerator);
      assertEquals(32359, rationalNumber0.divisor);
      assertEquals((-1149), rationalNumber0.intValue());
      assertEquals((-1149L), rationalNumber0.longValue());
      assertEquals((byte) (-125), rationalNumber0.byteValue());
      assertEquals((-1149.8296F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-1149.82966099076), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-1149), rationalNumber0.shortValue());
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf(double0);
      assertNotNull(rationalNumber5);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertEquals((-37207338), rationalNumber5.numerator);
      assertEquals(32359, rationalNumber5.divisor);
      assertEquals((short) (-1149), rationalNumber5.shortValue());
      assertEquals((-1149.8296F), rationalNumber5.floatValue(), 0.01F);
      assertEquals((-1149.82966099076), rationalNumber5.doubleValue(), 0.01);
      assertEquals((-1149L), rationalNumber5.longValue());
      assertEquals((byte) (-125), rationalNumber5.byteValue());
      assertEquals((-1149), rationalNumber5.intValue());
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber3);
      
      String string3 = rationalNumber5.toString();
      assertEquals("-37207338/32359 (-1,149.83)", string3);
      assertNotNull(string3);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals((-37207338), rationalNumber5.numerator);
      assertEquals(32359, rationalNumber5.divisor);
      assertEquals((short) (-1149), rationalNumber5.shortValue());
      assertEquals((-1149.8296F), rationalNumber5.floatValue(), 0.01F);
      assertEquals((-1149.82966099076), rationalNumber5.doubleValue(), 0.01);
      assertEquals((-1149L), rationalNumber5.longValue());
      assertEquals((byte) (-125), rationalNumber5.byteValue());
      assertEquals((-1149), rationalNumber5.intValue());
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      float float1 = rationalNumber1.floatValue();
      assertEquals(32359.0F, float1, 0.01F);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-37207338), rationalNumber0.numerator);
      assertEquals(32359, rationalNumber0.divisor);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(32359, rationalNumber1.numerator);
      assertEquals((-1149), rationalNumber0.intValue());
      assertEquals((-1149L), rationalNumber0.longValue());
      assertEquals((byte) (-125), rationalNumber0.byteValue());
      assertEquals((-1149.8296F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-1149.82966099076), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-1149), rationalNumber0.shortValue());
      assertEquals(32359.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(32359, rationalNumber1.intValue());
      assertEquals(32359L, rationalNumber1.longValue());
      assertEquals(32359.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)103, rationalNumber1.byteValue());
      assertEquals((short)32359, rationalNumber1.shortValue());
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber3);
      
      String string4 = rationalNumber1.toDisplayString();
      assertEquals("32359", string4);
      assertNotNull(string4);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals((-37207338), rationalNumber0.numerator);
      assertEquals(32359, rationalNumber0.divisor);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(32359, rationalNumber1.numerator);
      assertEquals((-1149), rationalNumber0.intValue());
      assertEquals((-1149L), rationalNumber0.longValue());
      assertEquals((byte) (-125), rationalNumber0.byteValue());
      assertEquals((-1149.8296F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-1149.82966099076), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-1149), rationalNumber0.shortValue());
      assertEquals(32359.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(32359, rationalNumber1.intValue());
      assertEquals(32359L, rationalNumber1.longValue());
      assertEquals(32359.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)103, rationalNumber1.byteValue());
      assertEquals((short)32359, rationalNumber1.shortValue());
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      
      String string5 = rationalNumber0.toString();
      assertEquals("-37207338/32359 (-1,149.83)", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertEquals((-37207338), rationalNumber0.numerator);
      assertEquals(32359, rationalNumber0.divisor);
      assertEquals((-1149), rationalNumber0.intValue());
      assertEquals((-1149L), rationalNumber0.longValue());
      assertEquals((byte) (-125), rationalNumber0.byteValue());
      assertEquals((-1149.8296F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-1149.82966099076), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-1149), rationalNumber0.shortValue());
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      
      RationalNumber rationalNumber6 = rationalNumber1.negate();
      assertNotNull(rationalNumber6);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertEquals(1, rationalNumber6.divisor);
      assertEquals((-32359), rationalNumber6.numerator);
      assertEquals((-37207338), rationalNumber0.numerator);
      assertEquals(32359, rationalNumber0.divisor);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(32359, rationalNumber1.numerator);
      assertEquals((-32359.0), rationalNumber6.doubleValue(), 0.01);
      assertEquals((byte) (-103), rationalNumber6.byteValue());
      assertEquals((short) (-32359), rationalNumber6.shortValue());
      assertEquals((-32359L), rationalNumber6.longValue());
      assertEquals((-32359), rationalNumber6.intValue());
      assertEquals((-32359.0F), rationalNumber6.floatValue(), 0.01F);
      assertEquals((-1149), rationalNumber0.intValue());
      assertEquals((-1149L), rationalNumber0.longValue());
      assertEquals((byte) (-125), rationalNumber0.byteValue());
      assertEquals((-1149.8296F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-1149.82966099076), rationalNumber0.doubleValue(), 0.01);
      assertEquals((short) (-1149), rationalNumber0.shortValue());
      assertEquals(32359.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(32359, rationalNumber1.intValue());
      assertEquals(32359L, rationalNumber1.longValue());
      assertEquals(32359.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)103, rationalNumber1.byteValue());
      assertEquals((short)32359, rationalNumber1.shortValue());
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber3);
      
      String string6 = rationalNumber3.toString();
      assertEquals("1/100000000 (0)", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(double1, double2, 0.01);
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertEquals(100000000, rationalNumber3.divisor);
      assertEquals(1, rationalNumber3.numerator);
      assertEquals(1.0E-8F, rationalNumber3.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals(1.0E-8, rationalNumber3.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber3.longValue());
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber5);
      
      long long0 = 0L;
      long long1 = 0L;
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }
}
