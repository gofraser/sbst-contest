/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:52:04 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = 1L;
      long long1 = 0L;
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(long0, long1);
      assertEquals(0, rationalNumber0.divisor);
      assertEquals(1, rationalNumber0.numerator);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber0.doubleValue(), 0.01);
      assertNotNull(rationalNumber0);
      
      // Undeclared exception!
      try { 
        rationalNumber0.longValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-3125);
      int int1 = 0;
      RationalNumber rationalNumber0 = new RationalNumber(int0, int1);
      assertEquals((-3125), rationalNumber0.numerator);
      assertEquals(0, rationalNumber0.divisor);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Double.NEGATIVE_INFINITY, rationalNumber0.doubleValue(), 0.01);
      assertEquals(Float.NEGATIVE_INFINITY, rationalNumber0.floatValue(), 0.01F);
      assertNotNull(rationalNumber0);
      
      // Undeclared exception!
      try { 
        rationalNumber0.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 0L;
      long long1 = 0L;
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-1320);
      RationalNumber rationalNumber0 = new RationalNumber(int0, int0);
      assertEquals((-1320), rationalNumber0.numerator);
      assertEquals((-1320), rationalNumber0.divisor);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertNotNull(rationalNumber0);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals((-1320), rationalNumber0.numerator);
      assertEquals((-1320), rationalNumber0.divisor);
      assertEquals(1320, rationalNumber1.numerator);
      assertEquals((-1320), rationalNumber1.divisor);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((-1.0F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber1.shortValue());
      assertEquals((-1.0), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals((-1L), rationalNumber1.longValue());
      assertEquals((-1), rationalNumber1.intValue());
      assertNotNull(rationalNumber1);
      
      float float0 = rationalNumber1.floatValue();
      assertEquals((-1320), rationalNumber0.numerator);
      assertEquals((-1320), rationalNumber0.divisor);
      assertEquals(1320, rationalNumber1.numerator);
      assertEquals((-1320), rationalNumber1.divisor);
      assertEquals((-1.0F), float0, 0.01F);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((-1.0F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber1.shortValue());
      assertEquals((-1.0), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals((-1L), rationalNumber1.longValue());
      assertEquals((-1), rationalNumber1.intValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = (-1L);
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(long0, long0);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertNotNull(rationalNumber0);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("1", string0);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertNotNull(string0);
      
      double double0 = 2.147483647E9;
      RationalNumber rationalNumber1 = RationalNumber.valueOf(double0);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber1.numerator);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber1.intValue());
      assertEquals((short) (-1), rationalNumber1.shortValue());
      assertEquals(2147483647L, rationalNumber1.longValue());
      assertEquals(2.147483647E9, rationalNumber1.doubleValue(), 0.01);
      assertEquals(2.14748365E9F, rationalNumber1.floatValue(), 0.01F);
      assertNotNull(rationalNumber1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      RationalNumber rationalNumber0 = new RationalNumber(int0, int1);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertNotNull(rationalNumber0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0.0, double0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-2.147483647E9);
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2147483647), rationalNumber0.numerator);
      assertEquals((-2.14748365E9F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((-2147483647), rationalNumber0.intValue());
      assertEquals((-2147483647L), rationalNumber0.longValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
      assertNotNull(rationalNumber0);
      
      String string0 = rationalNumber0.toString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2147483647), rationalNumber0.numerator);
      assertEquals("-2,147,483,647", string0);
      assertEquals((-2.14748365E9F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((-2147483647), rationalNumber0.intValue());
      assertEquals((-2147483647L), rationalNumber0.longValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
      assertNotNull(string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2147483647), rationalNumber0.numerator);
      assertEquals((-2147483647L), long0);
      assertEquals((-2.14748365E9F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((-2147483647), rationalNumber0.intValue());
      assertEquals((-2147483647L), rationalNumber0.longValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 1691L;
      long long1 = 2147483647L;
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(long0, long1);
      assertEquals(1691, rationalNumber0.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber0.divisor);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(7.874332372040643E-7, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(7.8743324E-7F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertNotNull(rationalNumber0);
      
      double double0 = 0.0;
      String string0 = rationalNumber0.toString();
      assertEquals(1691, rationalNumber0.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber0.divisor);
      assertEquals("1691/2147483647 (0)", string0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(7.874332372040643E-7, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(7.8743324E-7F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertNotNull(string0);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(double0);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0, rationalNumber1.numerator);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertNotNull(rationalNumber1);
      
      long long2 = 791L;
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(rationalNumber1.numerator, long2);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(0, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals(0, rationalNumber2.intValue());
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals((short)0, rationalNumber2.shortValue());
      assertEquals(0.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertNotNull(rationalNumber2);
      
      RationalNumber rationalNumber3 = rationalNumber1.negate();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(0, rationalNumber3.numerator);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals(0.0, rationalNumber3.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals(0.0F, rationalNumber3.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals(0L, rationalNumber3.longValue());
      assertNotNull(rationalNumber3);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(1691, rationalNumber0.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber0.divisor);
      assertEquals(0, int0);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(7.874332372040643E-7, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(7.8743324E-7F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      
      float float0 = rationalNumber1.floatValue();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber1.intValue());
      assertEquals((byte)0, rationalNumber1.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 0.0;
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertNotNull(rationalNumber0);
      
      long long0 = 0L;
      long long1 = 2147483647L;
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(long0, long1);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0, rationalNumber1.numerator);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      assertNotNull(rationalNumber1);
      
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals(0, rationalNumber2.numerator);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals((short)0, rationalNumber2.shortValue());
      assertNotNull(rationalNumber2);
      
      long long2 = rationalNumber2.longValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals(0, rationalNumber2.numerator);
      assertEquals(0L, long2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals((short)0, rationalNumber2.shortValue());
      
      int int0 = rationalNumber1.intValue();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0, rationalNumber1.numerator);
      assertEquals(0, int0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-485);
      RationalNumber rationalNumber0 = new RationalNumber(int0, int0);
      assertEquals((-485), rationalNumber0.divisor);
      assertEquals((-485), rationalNumber0.numerator);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotNull(rationalNumber0);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(int0);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals((-485), rationalNumber1.numerator);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals((-485L), rationalNumber1.longValue());
      assertEquals((byte)27, rationalNumber1.byteValue());
      assertEquals((short) (-485), rationalNumber1.shortValue());
      assertEquals((-485.0F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-485), rationalNumber1.intValue());
      assertEquals((-485.0), rationalNumber1.doubleValue(), 0.01);
      assertNotNull(rationalNumber1);
      
      String string0 = rationalNumber0.toString();
      assertEquals((-485), rationalNumber0.divisor);
      assertEquals((-485), rationalNumber0.numerator);
      assertEquals("1", string0);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotNull(string0);
      
      String string1 = rationalNumber0.toString();
      assertEquals((-485), rationalNumber0.divisor);
      assertEquals((-485), rationalNumber0.numerator);
      assertEquals("1", string1);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(string1, string0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertTrue(string1.equals((Object)string0));
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotNull(string1);
      
      Object object0 = PrivateAccess.callMethod((Class<RationalNumber>) RationalNumber.class, rationalNumber0, "gcd", (Object) int0, (Class<?>) long.class, (Object) int0, (Class<?>) long.class);
      assertEquals((-485), rationalNumber0.divisor);
      assertEquals((-485), rationalNumber0.numerator);
      assertEquals((-485L), object0);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotNull(object0);
      
      long long0 = (-2147483648L);
      long long1 = (-2279L);
      String string2 = rationalNumber0.toDisplayString();
      assertEquals((-485), rationalNumber0.divisor);
      assertEquals((-485), rationalNumber0.numerator);
      assertEquals("1", string2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotNull(string2);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(long0, long1);
      assertEquals(Integer.MIN_VALUE, rationalNumber2.numerator);
      assertEquals(2279, rationalNumber2.divisor);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertEquals((-942292.06F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-942292.0789820097), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-942292L), rationalNumber2.longValue());
      assertEquals((byte)44, rationalNumber2.byteValue());
      assertEquals((short) (-24788), rationalNumber2.shortValue());
      assertEquals((-942292), rationalNumber2.intValue());
      assertNotNull(rationalNumber2);
      
      String string3 = rationalNumber2.toString();
      assertEquals(Integer.MIN_VALUE, rationalNumber2.numerator);
      assertEquals(2279, rationalNumber2.divisor);
      assertEquals("-2147483648/2279 (-942,292.079)", string3);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals((-942292.06F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-942292.0789820097), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-942292L), rationalNumber2.longValue());
      assertEquals((byte)44, rationalNumber2.byteValue());
      assertEquals((short) (-24788), rationalNumber2.shortValue());
      assertEquals((-942292), rationalNumber2.intValue());
      assertNotNull(string3);
      
      Object object1 = PrivateAccess.callMethod((Class<RationalNumber>) RationalNumber.class, rationalNumber0, "gcd", (Object) int0, (Class<?>) long.class, (Object) int0, (Class<?>) long.class);
      assertEquals((-485), rationalNumber0.divisor);
      assertEquals((-485), rationalNumber0.numerator);
      assertEquals((-485L), object1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(object1.equals((Object)long1));
      assertTrue(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)long0));
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotNull(object1);
      
      String string4 = rationalNumber0.toDisplayString();
      assertEquals((-485), rationalNumber0.divisor);
      assertEquals((-485), rationalNumber0.numerator);
      assertEquals("1", string4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotNull(string4);
      
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      assertEquals((-485), rationalNumber0.divisor);
      assertEquals((-485), rationalNumber0.numerator);
      assertEquals((-485), rationalNumber3.divisor);
      assertEquals(485, rationalNumber3.numerator);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber3.byteValue());
      assertEquals((-1.0F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber3.shortValue());
      assertEquals((-1.0), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-1), rationalNumber3.intValue());
      assertEquals((-1L), rationalNumber3.longValue());
      assertNotNull(rationalNumber3);
      
      long long2 = 0L;
      Object object2 = PrivateAccess.callMethod((Class<RationalNumber>) RationalNumber.class, rationalNumber3, "gcd", (Object) long2, (Class<?>) long.class, (Object) rationalNumber1.numerator, (Class<?>) long.class);
      assertEquals((-485), rationalNumber0.divisor);
      assertEquals((-485), rationalNumber0.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals((-485), rationalNumber1.numerator);
      assertEquals((-485), rationalNumber3.divisor);
      assertEquals(485, rationalNumber3.numerator);
      assertEquals((-485L), object2);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(object2.equals((Object)long2));
      assertFalse(object2.equals((Object)long0));
      assertFalse(object2.equals((Object)long1));
      assertTrue(object2.equals((Object)object0));
      assertTrue(object2.equals((Object)object1));
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((-485L), rationalNumber1.longValue());
      assertEquals((byte)27, rationalNumber1.byteValue());
      assertEquals((short) (-485), rationalNumber1.shortValue());
      assertEquals((-485.0F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-485), rationalNumber1.intValue());
      assertEquals((-485.0), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber3.byteValue());
      assertEquals((-1.0F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber3.shortValue());
      assertEquals((-1.0), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-1), rationalNumber3.intValue());
      assertEquals((-1L), rationalNumber3.longValue());
      assertNotNull(object2);
      
      String string5 = rationalNumber0.toString();
      assertEquals((-485), rationalNumber0.divisor);
      assertEquals((-485), rationalNumber0.numerator);
      assertEquals("1", string5);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotNull(string5);
      
      double double0 = 0.0;
      RationalNumber rationalNumber4 = RationalNumber.valueOf(double0);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(0, rationalNumber4.numerator);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals(0.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals(0, rationalNumber4.intValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0.0, rationalNumber4.doubleValue(), 0.01);
      assertNotNull(rationalNumber4);
      
      long long3 = 3854L;
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(long1, long3);
      assertEquals(3854, rationalNumber5.divisor);
      assertEquals((-2279), rationalNumber5.numerator);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(long1 == long0);
      assertFalse(long1 == long3);
      assertFalse(long1 == long2);
      assertEquals(0, rationalNumber5.intValue());
      assertEquals((-0.5913337F), rationalNumber5.floatValue(), 0.01F);
      assertEquals((-0.5913336792942397), rationalNumber5.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber5.longValue());
      assertEquals((short)0, rationalNumber5.shortValue());
      assertEquals((byte)0, rationalNumber5.byteValue());
      assertNotNull(rationalNumber5);
      
      long long4 = (-2079L);
      Object object3 = PrivateAccess.callMethod((Class<RationalNumber>) RationalNumber.class, rationalNumber0, "gcd", (Object) long4, (Class<?>) long.class, (Object) rationalNumber0.divisor, (Class<?>) long.class);
      assertEquals((-485), rationalNumber0.divisor);
      assertEquals((-485), rationalNumber0.numerator);
      assertEquals((-1L), object3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(object3.equals((Object)long2));
      assertFalse(object3.equals((Object)long1));
      assertFalse(object3.equals((Object)long0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)long3));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)long4));
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotNull(object3);
      
      long long5 = 535L;
      Object object4 = PrivateAccess.callMethod((Class<RationalNumber>) RationalNumber.class, rationalNumber4, "gcd", (Object) int0, (Class<?>) long.class, (Object) long5, (Class<?>) long.class);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(0, rationalNumber4.numerator);
      assertEquals((-5L), object4);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
      assertFalse(long5 == long3);
      assertFalse(long5 == long4);
      assertFalse(long5 == long2);
      assertFalse(object4.equals((Object)long4));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)long2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)long1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)long5));
      assertFalse(object4.equals((Object)long0));
      assertFalse(object4.equals((Object)long3));
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals(0.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals(0, rationalNumber4.intValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0.0, rationalNumber4.doubleValue(), 0.01);
      assertNotNull(object4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 538.0586;
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertNotNull(rationalNumber0);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(5000, rationalNumber1.divisor);
      assertEquals((-2690293), rationalNumber1.numerator);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte) (-26), rationalNumber1.byteValue());
      assertEquals((short) (-538), rationalNumber1.shortValue());
      assertEquals((-538), rationalNumber1.intValue());
      assertEquals((-538.0586F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-538L), rationalNumber1.longValue());
      assertEquals((-538.0586), rationalNumber1.doubleValue(), 0.01);
      assertNotNull(rationalNumber1);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(rationalNumber1.numerator);
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(5000, rationalNumber1.divisor);
      assertEquals((-2690293), rationalNumber1.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2690293), rationalNumber2.numerator);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte) (-26), rationalNumber1.byteValue());
      assertEquals((short) (-538), rationalNumber1.shortValue());
      assertEquals((-538), rationalNumber1.intValue());
      assertEquals((-538.0586F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-538L), rationalNumber1.longValue());
      assertEquals((-538.0586), rationalNumber1.doubleValue(), 0.01);
      assertEquals((-2690293L), rationalNumber2.longValue());
      assertEquals((-2690293.0), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2690293.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-3317), rationalNumber2.shortValue());
      assertEquals((-2690293), rationalNumber2.intValue());
      assertEquals((byte)11, rationalNumber2.byteValue());
      assertNotNull(rationalNumber2);
      
      long long0 = (-2147483661L);
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(rationalNumber0.numerator, long0);
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(1073741831, rationalNumber3.divisor);
      assertEquals((-1345146), rationalNumber3.numerator);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals((-0.0012527648277866153), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-0.0012527648F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals(0, rationalNumber3.intValue());
      assertNotNull(rationalNumber3);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf(rationalNumber1.divisor);
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(5000, rationalNumber1.divisor);
      assertEquals((-2690293), rationalNumber1.numerator);
      assertEquals(5000, rationalNumber4.numerator);
      assertEquals(1, rationalNumber4.divisor);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte) (-26), rationalNumber1.byteValue());
      assertEquals((short) (-538), rationalNumber1.shortValue());
      assertEquals((-538), rationalNumber1.intValue());
      assertEquals((-538.0586F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-538L), rationalNumber1.longValue());
      assertEquals((-538.0586), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-120), rationalNumber4.byteValue());
      assertEquals(5000.0, rationalNumber4.doubleValue(), 0.01);
      assertEquals(5000, rationalNumber4.intValue());
      assertEquals(5000.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals(5000L, rationalNumber4.longValue());
      assertEquals((short)5000, rationalNumber4.shortValue());
      assertNotNull(rationalNumber4);
      
      long long1 = (-1L);
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(rationalNumber2.numerator, long1);
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(5000, rationalNumber1.divisor);
      assertEquals((-2690293), rationalNumber1.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2690293), rationalNumber2.numerator);
      assertEquals(2690293, rationalNumber5.numerator);
      assertEquals(1, rationalNumber5.divisor);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(long1 == long0);
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte) (-26), rationalNumber1.byteValue());
      assertEquals((short) (-538), rationalNumber1.shortValue());
      assertEquals((-538), rationalNumber1.intValue());
      assertEquals((-538.0586F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-538L), rationalNumber1.longValue());
      assertEquals((-538.0586), rationalNumber1.doubleValue(), 0.01);
      assertEquals((-2690293L), rationalNumber2.longValue());
      assertEquals((-2690293.0), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2690293.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-3317), rationalNumber2.shortValue());
      assertEquals((-2690293), rationalNumber2.intValue());
      assertEquals((byte)11, rationalNumber2.byteValue());
      assertEquals((byte) (-11), rationalNumber5.byteValue());
      assertEquals(2690293L, rationalNumber5.longValue());
      assertEquals(2690293.0F, rationalNumber5.floatValue(), 0.01F);
      assertEquals(2690293, rationalNumber5.intValue());
      assertEquals((short)3317, rationalNumber5.shortValue());
      assertEquals(2690293.0, rationalNumber5.doubleValue(), 0.01);
      assertNotNull(rationalNumber5);
      
      RationalNumber rationalNumber6 = rationalNumber3.negate();
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(1073741831, rationalNumber3.divisor);
      assertEquals((-1345146), rationalNumber3.numerator);
      assertEquals(1345146, rationalNumber6.numerator);
      assertEquals(1073741831, rationalNumber6.divisor);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(long0 == long1);
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals((-0.0012527648277866153), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-0.0012527648F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals(0L, rationalNumber6.longValue());
      assertEquals(0.0012527648F, rationalNumber6.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber6.byteValue());
      assertEquals((short)0, rationalNumber6.shortValue());
      assertEquals(0.0012527648277866153, rationalNumber6.doubleValue(), 0.01);
      assertEquals(0, rationalNumber6.intValue());
      assertNotNull(rationalNumber6);
      
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(rationalNumber2.divisor, rationalNumber4.numerator);
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(5000, rationalNumber1.divisor);
      assertEquals((-2690293), rationalNumber1.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2690293), rationalNumber2.numerator);
      assertEquals(5000, rationalNumber4.numerator);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(1, rationalNumber7.numerator);
      assertEquals(5000, rationalNumber7.divisor);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte) (-26), rationalNumber1.byteValue());
      assertEquals((short) (-538), rationalNumber1.shortValue());
      assertEquals((-538), rationalNumber1.intValue());
      assertEquals((-538.0586F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-538L), rationalNumber1.longValue());
      assertEquals((-538.0586), rationalNumber1.doubleValue(), 0.01);
      assertEquals((-2690293L), rationalNumber2.longValue());
      assertEquals((-2690293.0), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2690293.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-3317), rationalNumber2.shortValue());
      assertEquals((-2690293), rationalNumber2.intValue());
      assertEquals((byte)11, rationalNumber2.byteValue());
      assertEquals((byte) (-120), rationalNumber4.byteValue());
      assertEquals(5000.0, rationalNumber4.doubleValue(), 0.01);
      assertEquals(5000, rationalNumber4.intValue());
      assertEquals(5000.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals(5000L, rationalNumber4.longValue());
      assertEquals((short)5000, rationalNumber4.shortValue());
      assertEquals(2.0E-4F, rationalNumber7.floatValue(), 0.01F);
      assertEquals(0, rationalNumber7.intValue());
      assertEquals(2.0E-4, rationalNumber7.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber7.byteValue());
      assertEquals(0L, rationalNumber7.longValue());
      assertEquals((short)0, rationalNumber7.shortValue());
      assertNotNull(rationalNumber7);
      
      RationalNumber rationalNumber8 = RationalNumber.valueOf(rationalNumber0.divisor);
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(5000, rationalNumber8.numerator);
      assertEquals(1, rationalNumber8.divisor);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte) (-120), rationalNumber8.byteValue());
      assertEquals(5000, rationalNumber8.intValue());
      assertEquals(5000.0, rationalNumber8.doubleValue(), 0.01);
      assertEquals((short)5000, rationalNumber8.shortValue());
      assertEquals(5000L, rationalNumber8.longValue());
      assertEquals(5000.0F, rationalNumber8.floatValue(), 0.01F);
      assertNotNull(rationalNumber8);
      
      double double1 = 1.0;
      RationalNumber rationalNumber9 = RationalNumber.valueOf(double1);
      assertEquals(1, rationalNumber9.numerator);
      assertEquals(1, rationalNumber9.divisor);
      assertNotSame(rationalNumber9, rationalNumber7);
      assertNotSame(rationalNumber9, rationalNumber3);
      assertNotSame(rationalNumber9, rationalNumber2);
      assertNotSame(rationalNumber9, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber5);
      assertNotSame(rationalNumber9, rationalNumber4);
      assertNotSame(rationalNumber9, rationalNumber1);
      assertNotSame(rationalNumber9, rationalNumber8);
      assertNotSame(rationalNumber9, rationalNumber6);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber9.equals((Object)rationalNumber7));
      assertFalse(rationalNumber9.equals((Object)rationalNumber3));
      assertFalse(rationalNumber9.equals((Object)rationalNumber2));
      assertFalse(rationalNumber9.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber5));
      assertFalse(rationalNumber9.equals((Object)rationalNumber4));
      assertFalse(rationalNumber9.equals((Object)rationalNumber1));
      assertFalse(rationalNumber9.equals((Object)rationalNumber8));
      assertFalse(rationalNumber9.equals((Object)rationalNumber6));
      assertEquals(1.0, rationalNumber9.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber9.byteValue());
      assertEquals((short)1, rationalNumber9.shortValue());
      assertEquals(1.0F, rationalNumber9.floatValue(), 0.01F);
      assertEquals(1, rationalNumber9.intValue());
      assertEquals(1L, rationalNumber9.longValue());
      assertNotNull(rationalNumber9);
      
      double double2 = (-635.6752723);
      RationalNumber rationalNumber10 = RationalNumber.valueOf(double2);
      assertEquals((-12138855), rationalNumber10.numerator);
      assertEquals(19096, rationalNumber10.divisor);
      assertNotSame(rationalNumber10, rationalNumber2);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber1);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertEquals((byte) (-123), rationalNumber10.byteValue());
      assertEquals((short) (-635), rationalNumber10.shortValue());
      assertEquals((-635), rationalNumber10.intValue());
      assertEquals((-635.6753F), rationalNumber10.floatValue(), 0.01F);
      assertEquals((-635L), rationalNumber10.longValue());
      assertEquals((-635.6752723083368), rationalNumber10.doubleValue(), 0.01);
      assertNotNull(rationalNumber10);
      
      String string0 = rationalNumber3.toDisplayString();
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(1073741831, rationalNumber3.divisor);
      assertEquals((-1345146), rationalNumber3.numerator);
      assertEquals("-0.001", string0);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber10);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber9);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber8);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(long0 == long1);
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber10));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber9));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber8));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals((-0.0012527648277866153), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-0.0012527648F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals(0, rationalNumber3.intValue());
      assertNotNull(string0);
      
      long long2 = (-1218L);
      String string1 = rationalNumber2.toString();
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(5000, rationalNumber1.divisor);
      assertEquals((-2690293), rationalNumber1.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2690293), rationalNumber2.numerator);
      assertEquals("-2,690,293", string1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(string1, string0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber9);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber10);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber9));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber10));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber8));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte) (-26), rationalNumber1.byteValue());
      assertEquals((short) (-538), rationalNumber1.shortValue());
      assertEquals((-538), rationalNumber1.intValue());
      assertEquals((-538.0586F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-538L), rationalNumber1.longValue());
      assertEquals((-538.0586), rationalNumber1.doubleValue(), 0.01);
      assertEquals((-2690293L), rationalNumber2.longValue());
      assertEquals((-2690293.0), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2690293.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-3317), rationalNumber2.shortValue());
      assertEquals((-2690293), rationalNumber2.intValue());
      assertEquals((byte)11, rationalNumber2.byteValue());
      assertNotNull(string1);
      
      RationalNumber rationalNumber11 = RationalNumber.factoryMethod(rationalNumber5.numerator, long2);
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(5000, rationalNumber1.divisor);
      assertEquals((-2690293), rationalNumber1.numerator);
      assertEquals(2690293, rationalNumber11.numerator);
      assertEquals((-1218), rationalNumber11.divisor);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2690293), rationalNumber2.numerator);
      assertEquals(2690293, rationalNumber5.numerator);
      assertEquals(1, rationalNumber5.divisor);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber11);
      assertNotSame(rationalNumber11, rationalNumber1);
      assertNotSame(rationalNumber11, rationalNumber8);
      assertNotSame(rationalNumber11, rationalNumber3);
      assertNotSame(rationalNumber11, rationalNumber7);
      assertNotSame(rationalNumber11, rationalNumber10);
      assertNotSame(rationalNumber11, rationalNumber6);
      assertNotSame(rationalNumber11, rationalNumber2);
      assertNotSame(rationalNumber11, rationalNumber0);
      assertNotSame(rationalNumber11, rationalNumber4);
      assertNotSame(rationalNumber11, rationalNumber9);
      assertNotSame(rationalNumber11, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber9);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber10);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber11);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber8);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber10);
      assertNotSame(rationalNumber5, rationalNumber9);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber7);
      assertNotSame(rationalNumber5, rationalNumber11);
      assertNotSame(rationalNumber5, rationalNumber6);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber11.equals((Object)rationalNumber1));
      assertFalse(rationalNumber11.equals((Object)rationalNumber8));
      assertFalse(rationalNumber11.equals((Object)rationalNumber3));
      assertFalse(rationalNumber11.equals((Object)rationalNumber7));
      assertFalse(rationalNumber11.equals((Object)rationalNumber10));
      assertFalse(rationalNumber11.equals((Object)rationalNumber6));
      assertFalse(rationalNumber11.equals((Object)rationalNumber2));
      assertFalse(rationalNumber11.equals((Object)rationalNumber0));
      assertFalse(rationalNumber11.equals((Object)rationalNumber4));
      assertFalse(rationalNumber11.equals((Object)rationalNumber9));
      assertFalse(rationalNumber11.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber9));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber10));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber8));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber8));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber10));
      assertFalse(rationalNumber5.equals((Object)rationalNumber9));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber7));
      assertFalse(rationalNumber5.equals((Object)rationalNumber6));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte) (-26), rationalNumber1.byteValue());
      assertEquals((short) (-538), rationalNumber1.shortValue());
      assertEquals((-538), rationalNumber1.intValue());
      assertEquals((-538.0586F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-538L), rationalNumber1.longValue());
      assertEquals((-538.0586), rationalNumber1.doubleValue(), 0.01);
      assertEquals((-2208L), rationalNumber11.longValue());
      assertEquals((-2208), rationalNumber11.intValue());
      assertEquals((-2208.779F), rationalNumber11.floatValue(), 0.01F);
      assertEquals((byte)96, rationalNumber11.byteValue());
      assertEquals((short) (-2208), rationalNumber11.shortValue());
      assertEquals((-2208.7791461412153), rationalNumber11.doubleValue(), 0.01);
      assertEquals((-2690293L), rationalNumber2.longValue());
      assertEquals((-2690293.0), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2690293.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-3317), rationalNumber2.shortValue());
      assertEquals((-2690293), rationalNumber2.intValue());
      assertEquals((byte)11, rationalNumber2.byteValue());
      assertEquals((byte) (-11), rationalNumber5.byteValue());
      assertEquals(2690293L, rationalNumber5.longValue());
      assertEquals(2690293.0F, rationalNumber5.floatValue(), 0.01F);
      assertEquals(2690293, rationalNumber5.intValue());
      assertEquals((short)3317, rationalNumber5.shortValue());
      assertEquals(2690293.0, rationalNumber5.doubleValue(), 0.01);
      assertNotNull(rationalNumber11);
      
      String string2 = rationalNumber2.toString();
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(5000, rationalNumber1.divisor);
      assertEquals((-2690293), rationalNumber1.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2690293), rationalNumber2.numerator);
      assertEquals("-2,690,293", string2);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber11);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber9);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber10);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber11);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber11));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber9));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber10));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber8));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertFalse(rationalNumber2.equals((Object)rationalNumber11));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte) (-26), rationalNumber1.byteValue());
      assertEquals((short) (-538), rationalNumber1.shortValue());
      assertEquals((-538), rationalNumber1.intValue());
      assertEquals((-538.0586F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-538L), rationalNumber1.longValue());
      assertEquals((-538.0586), rationalNumber1.doubleValue(), 0.01);
      assertEquals((-2690293L), rationalNumber2.longValue());
      assertEquals((-2690293.0), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2690293.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-3317), rationalNumber2.shortValue());
      assertEquals((-2690293), rationalNumber2.intValue());
      assertEquals((byte)11, rationalNumber2.byteValue());
      assertNotNull(string2);
      
      String string3 = rationalNumber4.toDisplayString();
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(5000, rationalNumber1.divisor);
      assertEquals((-2690293), rationalNumber1.numerator);
      assertEquals(5000, rationalNumber4.numerator);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals("5000", string3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber11);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber8);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber11);
      assertNotSame(rationalNumber4, rationalNumber9);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber10);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber11));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber8));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber11));
      assertFalse(rationalNumber4.equals((Object)rationalNumber9));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber10));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber7));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte) (-26), rationalNumber1.byteValue());
      assertEquals((short) (-538), rationalNumber1.shortValue());
      assertEquals((-538), rationalNumber1.intValue());
      assertEquals((-538.0586F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-538L), rationalNumber1.longValue());
      assertEquals((-538.0586), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-120), rationalNumber4.byteValue());
      assertEquals(5000.0, rationalNumber4.doubleValue(), 0.01);
      assertEquals(5000, rationalNumber4.intValue());
      assertEquals(5000.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals(5000L, rationalNumber4.longValue());
      assertEquals((short)5000, rationalNumber4.shortValue());
      assertNotNull(string3);
      
      RationalNumber rationalNumber12 = RationalNumber.factoryMethod(rationalNumber0.numerator, rationalNumber9.numerator);
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(1, rationalNumber12.divisor);
      assertEquals(2690293, rationalNumber12.numerator);
      assertEquals(1, rationalNumber9.numerator);
      assertEquals(1, rationalNumber9.divisor);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber12, rationalNumber9);
      assertNotSame(rationalNumber12, rationalNumber6);
      assertNotSame(rationalNumber12, rationalNumber0);
      assertNotSame(rationalNumber12, rationalNumber4);
      assertNotSame(rationalNumber12, rationalNumber1);
      assertNotSame(rationalNumber12, rationalNumber8);
      assertNotSame(rationalNumber12, rationalNumber11);
      assertNotSame(rationalNumber12, rationalNumber7);
      assertNotSame(rationalNumber12, rationalNumber2);
      assertNotSame(rationalNumber12, rationalNumber5);
      assertNotSame(rationalNumber12, rationalNumber10);
      assertNotSame(rationalNumber12, rationalNumber3);
      assertNotSame(rationalNumber9, rationalNumber7);
      assertNotSame(rationalNumber9, rationalNumber12);
      assertNotSame(rationalNumber9, rationalNumber11);
      assertNotSame(rationalNumber9, rationalNumber3);
      assertNotSame(rationalNumber9, rationalNumber10);
      assertNotSame(rationalNumber9, rationalNumber2);
      assertNotSame(rationalNumber9, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber5);
      assertNotSame(rationalNumber9, rationalNumber4);
      assertNotSame(rationalNumber9, rationalNumber1);
      assertNotSame(rationalNumber9, rationalNumber8);
      assertNotSame(rationalNumber9, rationalNumber6);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber12.equals((Object)rationalNumber9));
      assertFalse(rationalNumber12.equals((Object)rationalNumber6));
      assertFalse(rationalNumber12.equals((Object)rationalNumber0));
      assertFalse(rationalNumber12.equals((Object)rationalNumber4));
      assertFalse(rationalNumber12.equals((Object)rationalNumber1));
      assertFalse(rationalNumber12.equals((Object)rationalNumber8));
      assertFalse(rationalNumber12.equals((Object)rationalNumber11));
      assertFalse(rationalNumber12.equals((Object)rationalNumber7));
      assertFalse(rationalNumber12.equals((Object)rationalNumber2));
      assertFalse(rationalNumber12.equals((Object)rationalNumber5));
      assertFalse(rationalNumber12.equals((Object)rationalNumber10));
      assertFalse(rationalNumber12.equals((Object)rationalNumber3));
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertFalse(rationalNumber9.equals((Object)rationalNumber7));
      assertFalse(rationalNumber9.equals((Object)rationalNumber11));
      assertFalse(rationalNumber9.equals((Object)rationalNumber3));
      assertFalse(rationalNumber9.equals((Object)rationalNumber10));
      assertFalse(rationalNumber9.equals((Object)rationalNumber2));
      assertFalse(rationalNumber9.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber5));
      assertFalse(rationalNumber9.equals((Object)rationalNumber4));
      assertFalse(rationalNumber9.equals((Object)rationalNumber1));
      assertFalse(rationalNumber9.equals((Object)rationalNumber8));
      assertFalse(rationalNumber9.equals((Object)rationalNumber6));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals(2690293.0, rationalNumber12.doubleValue(), 0.01);
      assertEquals((byte) (-11), rationalNumber12.byteValue());
      assertEquals(2690293L, rationalNumber12.longValue());
      assertEquals((short)3317, rationalNumber12.shortValue());
      assertEquals(2690293, rationalNumber12.intValue());
      assertEquals(2690293.0F, rationalNumber12.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber9.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber9.byteValue());
      assertEquals((short)1, rationalNumber9.shortValue());
      assertEquals(1.0F, rationalNumber9.floatValue(), 0.01F);
      assertEquals(1, rationalNumber9.intValue());
      assertEquals(1L, rationalNumber9.longValue());
      assertNotNull(rationalNumber12);
      
      String string4 = rationalNumber10.toDisplayString();
      assertEquals((-12138855), rationalNumber10.numerator);
      assertEquals(19096, rationalNumber10.divisor);
      assertEquals("-635.675", string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(rationalNumber10, rationalNumber2);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber12);
      assertNotSame(rationalNumber10, rationalNumber11);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber1);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber12));
      assertFalse(rationalNumber10.equals((Object)rationalNumber11));
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertEquals((byte) (-123), rationalNumber10.byteValue());
      assertEquals((short) (-635), rationalNumber10.shortValue());
      assertEquals((-635), rationalNumber10.intValue());
      assertEquals((-635.6753F), rationalNumber10.floatValue(), 0.01F);
      assertEquals((-635L), rationalNumber10.longValue());
      assertEquals((-635.6752723083368), rationalNumber10.doubleValue(), 0.01);
      assertNotNull(string4);
      
      RationalNumber rationalNumber13 = rationalNumber3.negate();
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(1073741831, rationalNumber3.divisor);
      assertEquals((-1345146), rationalNumber3.numerator);
      assertEquals(1345146, rationalNumber13.numerator);
      assertEquals(1073741831, rationalNumber13.divisor);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber13);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber13);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber9);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotSame(rationalNumber3, rationalNumber11);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber12);
      assertNotSame(rationalNumber3, rationalNumber10);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber8);
      assertNotSame(rationalNumber13, rationalNumber5);
      assertNotSame(rationalNumber13, rationalNumber3);
      assertNotSame(rationalNumber13, rationalNumber2);
      assertNotSame(rationalNumber13, rationalNumber12);
      assertNotSame(rationalNumber13, rationalNumber6);
      assertNotSame(rationalNumber13, rationalNumber0);
      assertNotSame(rationalNumber13, rationalNumber11);
      assertNotSame(rationalNumber13, rationalNumber1);
      assertNotSame(rationalNumber13, rationalNumber8);
      assertNotSame(rationalNumber13, rationalNumber4);
      assertNotSame(rationalNumber13, rationalNumber9);
      assertNotSame(rationalNumber13, rationalNumber10);
      assertNotSame(rationalNumber13, rationalNumber7);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber12));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(rationalNumber3.equals((Object)rationalNumber11));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber12));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber10));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber9));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber8));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertFalse(rationalNumber13.equals((Object)rationalNumber5));
      assertFalse(rationalNumber13.equals((Object)rationalNumber3));
      assertFalse(rationalNumber13.equals((Object)rationalNumber2));
      assertFalse(rationalNumber13.equals((Object)rationalNumber12));
      assertFalse(rationalNumber13.equals((Object)rationalNumber6));
      assertFalse(rationalNumber13.equals((Object)rationalNumber0));
      assertFalse(rationalNumber13.equals((Object)rationalNumber11));
      assertFalse(rationalNumber13.equals((Object)rationalNumber1));
      assertFalse(rationalNumber13.equals((Object)rationalNumber8));
      assertFalse(rationalNumber13.equals((Object)rationalNumber4));
      assertFalse(rationalNumber13.equals((Object)rationalNumber9));
      assertFalse(rationalNumber13.equals((Object)rationalNumber10));
      assertFalse(rationalNumber13.equals((Object)rationalNumber7));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals((-0.0012527648277866153), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-0.0012527648F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals(0L, rationalNumber13.longValue());
      assertEquals(0.0012527648F, rationalNumber13.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber13.byteValue());
      assertEquals(0.0012527648277866153, rationalNumber13.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber13.shortValue());
      assertEquals(0, rationalNumber13.intValue());
      assertNotNull(rationalNumber13);
      
      String string5 = rationalNumber10.toDisplayString();
      assertEquals((-12138855), rationalNumber10.numerator);
      assertEquals(19096, rationalNumber10.divisor);
      assertEquals("-635.675", string5);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertNotSame(rationalNumber10, rationalNumber2);
      assertNotSame(rationalNumber10, rationalNumber13);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber12);
      assertNotSame(rationalNumber10, rationalNumber11);
      assertNotSame(rationalNumber10, rationalNumber1);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertFalse(rationalNumber10.equals((Object)rationalNumber13));
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber12));
      assertFalse(rationalNumber10.equals((Object)rationalNumber11));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertEquals((byte) (-123), rationalNumber10.byteValue());
      assertEquals((short) (-635), rationalNumber10.shortValue());
      assertEquals((-635), rationalNumber10.intValue());
      assertEquals((-635.6753F), rationalNumber10.floatValue(), 0.01F);
      assertEquals((-635L), rationalNumber10.longValue());
      assertEquals((-635.6752723083368), rationalNumber10.doubleValue(), 0.01);
      assertNotNull(string5);
      
      String string6 = rationalNumber1.toString();
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(5000, rationalNumber1.divisor);
      assertEquals((-2690293), rationalNumber1.numerator);
      assertEquals("-2690293/5000 (-538.059)", string6);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber13);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber12);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber13);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber11);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber13));
      assertFalse(rationalNumber0.equals((Object)rationalNumber12));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber12));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber13));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber11));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte) (-26), rationalNumber1.byteValue());
      assertEquals((short) (-538), rationalNumber1.shortValue());
      assertEquals((-538), rationalNumber1.intValue());
      assertEquals((-538.0586F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-538L), rationalNumber1.longValue());
      assertEquals((-538.0586), rationalNumber1.doubleValue(), 0.01);
      assertNotNull(string6);
      
      long long3 = 147L;
      RationalNumber rationalNumber14 = RationalNumber.factoryMethod(rationalNumber11.numerator, long3);
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(5000, rationalNumber1.divisor);
      assertEquals((-2690293), rationalNumber1.numerator);
      assertEquals(2690293, rationalNumber11.numerator);
      assertEquals((-1218), rationalNumber11.divisor);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-2690293), rationalNumber2.numerator);
      assertEquals(2690293, rationalNumber5.numerator);
      assertEquals(1, rationalNumber5.divisor);
      assertEquals(2690293, rationalNumber14.numerator);
      assertEquals(147, rationalNumber14.divisor);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber13);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber14);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber12);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber13);
      assertNotSame(rationalNumber1, rationalNumber14);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber11);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber11, rationalNumber8);
      assertNotSame(rationalNumber11, rationalNumber7);
      assertNotSame(rationalNumber11, rationalNumber6);
      assertNotSame(rationalNumber11, rationalNumber13);
      assertNotSame(rationalNumber11, rationalNumber9);
      assertNotSame(rationalNumber11, rationalNumber1);
      assertNotSame(rationalNumber11, rationalNumber3);
      assertNotSame(rationalNumber11, rationalNumber12);
      assertNotSame(rationalNumber11, rationalNumber10);
      assertNotSame(rationalNumber11, rationalNumber2);
      assertNotSame(rationalNumber11, rationalNumber0);
      assertNotSame(rationalNumber11, rationalNumber14);
      assertNotSame(rationalNumber11, rationalNumber4);
      assertNotSame(rationalNumber11, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber9);
      assertNotSame(rationalNumber2, rationalNumber10);
      assertNotSame(rationalNumber2, rationalNumber14);
      assertNotSame(rationalNumber2, rationalNumber12);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber11);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber13);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber14);
      assertNotSame(rationalNumber5, rationalNumber13);
      assertNotSame(rationalNumber5, rationalNumber11);
      assertNotSame(rationalNumber5, rationalNumber6);
      assertNotSame(rationalNumber5, rationalNumber12);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber8);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber10);
      assertNotSame(rationalNumber5, rationalNumber9);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber7);
      assertNotSame(rationalNumber14, rationalNumber13);
      assertNotSame(rationalNumber14, rationalNumber2);
      assertNotSame(rationalNumber14, rationalNumber7);
      assertNotSame(rationalNumber14, rationalNumber11);
      assertNotSame(rationalNumber14, rationalNumber5);
      assertNotSame(rationalNumber14, rationalNumber10);
      assertNotSame(rationalNumber14, rationalNumber0);
      assertNotSame(rationalNumber14, rationalNumber3);
      assertNotSame(rationalNumber14, rationalNumber9);
      assertNotSame(rationalNumber14, rationalNumber4);
      assertNotSame(rationalNumber14, rationalNumber1);
      assertNotSame(rationalNumber14, rationalNumber8);
      assertNotSame(rationalNumber14, rationalNumber6);
      assertNotSame(rationalNumber14, rationalNumber12);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long3);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber13));
      assertFalse(rationalNumber0.equals((Object)rationalNumber12));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber12));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber13));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber11));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber11.equals((Object)rationalNumber8));
      assertFalse(rationalNumber11.equals((Object)rationalNumber7));
      assertFalse(rationalNumber11.equals((Object)rationalNumber6));
      assertFalse(rationalNumber11.equals((Object)rationalNumber13));
      assertFalse(rationalNumber11.equals((Object)rationalNumber9));
      assertFalse(rationalNumber11.equals((Object)rationalNumber1));
      assertFalse(rationalNumber11.equals((Object)rationalNumber3));
      assertFalse(rationalNumber11.equals((Object)rationalNumber12));
      assertFalse(rationalNumber11.equals((Object)rationalNumber10));
      assertFalse(rationalNumber11.equals((Object)rationalNumber2));
      assertFalse(rationalNumber11.equals((Object)rationalNumber0));
      assertFalse(rationalNumber11.equals((Object)rationalNumber4));
      assertFalse(rationalNumber11.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber9));
      assertFalse(rationalNumber2.equals((Object)rationalNumber10));
      assertFalse(rationalNumber2.equals((Object)rationalNumber12));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber11));
      assertFalse(rationalNumber2.equals((Object)rationalNumber8));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber13));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber13));
      assertFalse(rationalNumber5.equals((Object)rationalNumber11));
      assertFalse(rationalNumber5.equals((Object)rationalNumber6));
      assertFalse(rationalNumber5.equals((Object)rationalNumber12));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber8));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber10));
      assertFalse(rationalNumber5.equals((Object)rationalNumber9));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber7));
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(rationalNumber14.equals((Object)rationalNumber13));
      assertFalse(rationalNumber14.equals((Object)rationalNumber2));
      assertFalse(rationalNumber14.equals((Object)rationalNumber7));
      assertFalse(rationalNumber14.equals((Object)rationalNumber11));
      assertFalse(rationalNumber14.equals((Object)rationalNumber5));
      assertFalse(rationalNumber14.equals((Object)rationalNumber10));
      assertFalse(rationalNumber14.equals((Object)rationalNumber0));
      assertFalse(rationalNumber14.equals((Object)rationalNumber3));
      assertFalse(rationalNumber14.equals((Object)rationalNumber9));
      assertFalse(rationalNumber14.equals((Object)rationalNumber4));
      assertFalse(rationalNumber14.equals((Object)rationalNumber1));
      assertFalse(rationalNumber14.equals((Object)rationalNumber8));
      assertFalse(rationalNumber14.equals((Object)rationalNumber6));
      assertFalse(rationalNumber14.equals((Object)rationalNumber12));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte) (-26), rationalNumber1.byteValue());
      assertEquals((short) (-538), rationalNumber1.shortValue());
      assertEquals((-538), rationalNumber1.intValue());
      assertEquals((-538.0586F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-538L), rationalNumber1.longValue());
      assertEquals((-538.0586), rationalNumber1.doubleValue(), 0.01);
      assertEquals((-2208L), rationalNumber11.longValue());
      assertEquals((-2208), rationalNumber11.intValue());
      assertEquals((-2208.779F), rationalNumber11.floatValue(), 0.01F);
      assertEquals((byte)96, rationalNumber11.byteValue());
      assertEquals((short) (-2208), rationalNumber11.shortValue());
      assertEquals((-2208.7791461412153), rationalNumber11.doubleValue(), 0.01);
      assertEquals((-2690293L), rationalNumber2.longValue());
      assertEquals((-2690293.0), rationalNumber2.doubleValue(), 0.01);
      assertEquals((-2690293.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-3317), rationalNumber2.shortValue());
      assertEquals((-2690293), rationalNumber2.intValue());
      assertEquals((byte)11, rationalNumber2.byteValue());
      assertEquals((byte) (-11), rationalNumber5.byteValue());
      assertEquals(2690293L, rationalNumber5.longValue());
      assertEquals(2690293.0F, rationalNumber5.floatValue(), 0.01F);
      assertEquals(2690293, rationalNumber5.intValue());
      assertEquals((short)3317, rationalNumber5.shortValue());
      assertEquals(2690293.0, rationalNumber5.doubleValue(), 0.01);
      assertEquals((byte)125, rationalNumber14.byteValue());
      assertEquals(18301L, rationalNumber14.longValue());
      assertEquals(18301.312925170067, rationalNumber14.doubleValue(), 0.01);
      assertEquals((short)18301, rationalNumber14.shortValue());
      assertEquals(18301.312F, rationalNumber14.floatValue(), 0.01F);
      assertEquals(18301, rationalNumber14.intValue());
      assertNotNull(rationalNumber14);
      
      String string7 = rationalNumber13.toString();
      assertEquals(5000, rationalNumber0.divisor);
      assertEquals(2690293, rationalNumber0.numerator);
      assertEquals(1073741831, rationalNumber3.divisor);
      assertEquals((-1345146), rationalNumber3.numerator);
      assertEquals(1345146, rationalNumber13.numerator);
      assertEquals(1073741831, rationalNumber13.divisor);
      assertEquals("1345146/1073741831 (0.001)", string7);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber13);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber14);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber13);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber9);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotSame(rationalNumber3, rationalNumber11);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber12);
      assertNotSame(rationalNumber3, rationalNumber10);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber14);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber8);
      assertNotSame(rationalNumber13, rationalNumber5);
      assertNotSame(rationalNumber13, rationalNumber3);
      assertNotSame(rationalNumber13, rationalNumber2);
      assertNotSame(rationalNumber13, rationalNumber14);
      assertNotSame(rationalNumber13, rationalNumber12);
      assertNotSame(rationalNumber13, rationalNumber6);
      assertNotSame(rationalNumber13, rationalNumber0);
      assertNotSame(rationalNumber13, rationalNumber11);
      assertNotSame(rationalNumber13, rationalNumber1);
      assertNotSame(rationalNumber13, rationalNumber8);
      assertNotSame(rationalNumber13, rationalNumber4);
      assertNotSame(rationalNumber13, rationalNumber9);
      assertNotSame(rationalNumber13, rationalNumber10);
      assertNotSame(rationalNumber13, rationalNumber7);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber13));
      assertFalse(rationalNumber0.equals((Object)rationalNumber12));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber14));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(rationalNumber3.equals((Object)rationalNumber13));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber9));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertFalse(rationalNumber3.equals((Object)rationalNumber11));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber12));
      assertFalse(rationalNumber3.equals((Object)rationalNumber10));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber14));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber8));
      assertFalse(rationalNumber13.equals((Object)rationalNumber5));
      assertFalse(rationalNumber13.equals((Object)rationalNumber3));
      assertFalse(rationalNumber13.equals((Object)rationalNumber2));
      assertFalse(rationalNumber13.equals((Object)rationalNumber14));
      assertFalse(rationalNumber13.equals((Object)rationalNumber12));
      assertFalse(rationalNumber13.equals((Object)rationalNumber6));
      assertFalse(rationalNumber13.equals((Object)rationalNumber0));
      assertFalse(rationalNumber13.equals((Object)rationalNumber11));
      assertFalse(rationalNumber13.equals((Object)rationalNumber1));
      assertFalse(rationalNumber13.equals((Object)rationalNumber8));
      assertFalse(rationalNumber13.equals((Object)rationalNumber4));
      assertFalse(rationalNumber13.equals((Object)rationalNumber9));
      assertFalse(rationalNumber13.equals((Object)rationalNumber10));
      assertFalse(rationalNumber13.equals((Object)rationalNumber7));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals(538, rationalNumber0.intValue());
      assertEquals((byte)26, rationalNumber0.byteValue());
      assertEquals(538.0586, rationalNumber0.doubleValue(), 0.01);
      assertEquals(538.0586F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(538L, rationalNumber0.longValue());
      assertEquals((short)538, rationalNumber0.shortValue());
      assertEquals((byte)0, rationalNumber3.byteValue());
      assertEquals((short)0, rationalNumber3.shortValue());
      assertEquals((-0.0012527648277866153), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-0.0012527648F), rationalNumber3.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber3.longValue());
      assertEquals(0, rationalNumber3.intValue());
      assertEquals(0L, rationalNumber13.longValue());
      assertEquals(0.0012527648F, rationalNumber13.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber13.byteValue());
      assertEquals(0.0012527648277866153, rationalNumber13.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber13.shortValue());
      assertEquals(0, rationalNumber13.intValue());
      assertNotNull(string7);
      
      String string8 = rationalNumber9.toString();
      assertEquals(1, rationalNumber9.numerator);
      assertEquals(1, rationalNumber9.divisor);
      assertEquals("1", string8);
      assertNotSame(rationalNumber9, rationalNumber12);
      assertNotSame(rationalNumber9, rationalNumber11);
      assertNotSame(rationalNumber9, rationalNumber3);
      assertNotSame(rationalNumber9, rationalNumber10);
      assertNotSame(rationalNumber9, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber5);
      assertNotSame(rationalNumber9, rationalNumber4);
      assertNotSame(rationalNumber9, rationalNumber1);
      assertNotSame(rationalNumber9, rationalNumber8);
      assertNotSame(rationalNumber9, rationalNumber6);
      assertNotSame(rationalNumber9, rationalNumber7);
      assertNotSame(rationalNumber9, rationalNumber14);
      assertNotSame(rationalNumber9, rationalNumber13);
      assertNotSame(rationalNumber9, rationalNumber2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string6);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertFalse(rationalNumber9.equals((Object)rationalNumber12));
      assertFalse(rationalNumber9.equals((Object)rationalNumber11));
      assertFalse(rationalNumber9.equals((Object)rationalNumber3));
      assertFalse(rationalNumber9.equals((Object)rationalNumber10));
      assertFalse(rationalNumber9.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber5));
      assertFalse(rationalNumber9.equals((Object)rationalNumber4));
      assertFalse(rationalNumber9.equals((Object)rationalNumber1));
      assertFalse(rationalNumber9.equals((Object)rationalNumber8));
      assertFalse(rationalNumber9.equals((Object)rationalNumber6));
      assertFalse(rationalNumber9.equals((Object)rationalNumber7));
      assertFalse(rationalNumber9.equals((Object)rationalNumber14));
      assertFalse(rationalNumber9.equals((Object)rationalNumber13));
      assertFalse(rationalNumber9.equals((Object)rationalNumber2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertEquals(1.0, rationalNumber9.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber9.byteValue());
      assertEquals((short)1, rationalNumber9.shortValue());
      assertEquals(1.0F, rationalNumber9.floatValue(), 0.01F);
      assertEquals(1, rationalNumber9.intValue());
      assertEquals(1L, rationalNumber9.longValue());
      assertNotNull(string8);
      
      long long4 = (-719L);
      long long5 = 1L;
      RationalNumber rationalNumber15 = RationalNumber.factoryMethod(long4, long5);
      assertEquals((-719), rationalNumber15.numerator);
      assertEquals(1, rationalNumber15.divisor);
      assertNotSame(rationalNumber15, rationalNumber8);
      assertNotSame(rationalNumber15, rationalNumber7);
      assertNotSame(rationalNumber15, rationalNumber4);
      assertNotSame(rationalNumber15, rationalNumber14);
      assertNotSame(rationalNumber15, rationalNumber10);
      assertNotSame(rationalNumber15, rationalNumber2);
      assertNotSame(rationalNumber15, rationalNumber0);
      assertNotSame(rationalNumber15, rationalNumber5);
      assertNotSame(rationalNumber15, rationalNumber1);
      assertNotSame(rationalNumber15, rationalNumber3);
      assertNotSame(rationalNumber15, rationalNumber11);
      assertNotSame(rationalNumber15, rationalNumber6);
      assertNotSame(rationalNumber15, rationalNumber9);
      assertNotSame(rationalNumber15, rationalNumber12);
      assertNotSame(rationalNumber15, rationalNumber13);
      assertFalse(long5 == long4);
      assertFalse(long5 == long0);
      assertFalse(long5 == long1);
      assertFalse(long5 == long3);
      assertFalse(long5 == long2);
      assertFalse(rationalNumber15.equals((Object)rationalNumber8));
      assertFalse(rationalNumber15.equals((Object)rationalNumber7));
      assertFalse(rationalNumber15.equals((Object)rationalNumber4));
      assertFalse(rationalNumber15.equals((Object)rationalNumber14));
      assertFalse(rationalNumber15.equals((Object)rationalNumber10));
      assertFalse(rationalNumber15.equals((Object)rationalNumber2));
      assertFalse(rationalNumber15.equals((Object)rationalNumber0));
      assertFalse(rationalNumber15.equals((Object)rationalNumber5));
      assertFalse(rationalNumber15.equals((Object)rationalNumber1));
      assertFalse(rationalNumber15.equals((Object)rationalNumber3));
      assertFalse(rationalNumber15.equals((Object)rationalNumber11));
      assertFalse(rationalNumber15.equals((Object)rationalNumber6));
      assertFalse(rationalNumber15.equals((Object)rationalNumber9));
      assertFalse(rationalNumber15.equals((Object)rationalNumber12));
      assertFalse(rationalNumber15.equals((Object)rationalNumber13));
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long5);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertEquals((-719.0F), rationalNumber15.floatValue(), 0.01F);
      assertEquals((-719L), rationalNumber15.longValue());
      assertEquals((-719.0), rationalNumber15.doubleValue(), 0.01);
      assertEquals((short) (-719), rationalNumber15.shortValue());
      assertEquals((byte)49, rationalNumber15.byteValue());
      assertEquals((-719), rationalNumber15.intValue());
      assertNotNull(rationalNumber15);
      
      long long6 = 3526L;
      long long7 = 0L;
      RationalNumber rationalNumber16 = RationalNumber.factoryMethod(long6, long7);
      assertEquals(1, rationalNumber16.numerator);
      assertEquals(0, rationalNumber16.divisor);
      assertNotSame(rationalNumber16, rationalNumber15);
      assertNotSame(rationalNumber16, rationalNumber1);
      assertNotSame(rationalNumber16, rationalNumber6);
      assertNotSame(rationalNumber16, rationalNumber7);
      assertNotSame(rationalNumber16, rationalNumber12);
      assertNotSame(rationalNumber16, rationalNumber13);
      assertNotSame(rationalNumber16, rationalNumber9);
      assertNotSame(rationalNumber16, rationalNumber4);
      assertNotSame(rationalNumber16, rationalNumber8);
      assertNotSame(rationalNumber16, rationalNumber11);
      assertNotSame(rationalNumber16, rationalNumber14);
      assertNotSame(rationalNumber16, rationalNumber3);
      assertNotSame(rationalNumber16, rationalNumber10);
      assertNotSame(rationalNumber16, rationalNumber2);
      assertNotSame(rationalNumber16, rationalNumber0);
      assertNotSame(rationalNumber16, rationalNumber5);
      assertFalse(long6 == long2);
      assertFalse(long6 == long3);
      assertFalse(long6 == long5);
      assertFalse(long6 == long4);
      assertFalse(long6 == long7);
      assertFalse(long6 == long0);
      assertFalse(long6 == long1);
      assertFalse(long7 == long2);
      assertFalse(long7 == long0);
      assertFalse(long7 == long5);
      assertFalse(long7 == long4);
      assertFalse(long7 == long1);
      assertFalse(long7 == long3);
      assertFalse(long7 == long6);
      assertFalse(rationalNumber16.equals((Object)rationalNumber15));
      assertFalse(rationalNumber16.equals((Object)rationalNumber1));
      assertFalse(rationalNumber16.equals((Object)rationalNumber6));
      assertFalse(rationalNumber16.equals((Object)rationalNumber7));
      assertFalse(rationalNumber16.equals((Object)rationalNumber12));
      assertFalse(rationalNumber16.equals((Object)rationalNumber13));
      assertFalse(rationalNumber16.equals((Object)rationalNumber9));
      assertFalse(rationalNumber16.equals((Object)rationalNumber4));
      assertFalse(rationalNumber16.equals((Object)rationalNumber8));
      assertFalse(rationalNumber16.equals((Object)rationalNumber11));
      assertFalse(rationalNumber16.equals((Object)rationalNumber14));
      assertFalse(rationalNumber16.equals((Object)rationalNumber3));
      assertFalse(rationalNumber16.equals((Object)rationalNumber10));
      assertFalse(rationalNumber16.equals((Object)rationalNumber2));
      assertFalse(rationalNumber16.equals((Object)rationalNumber0));
      assertFalse(rationalNumber16.equals((Object)rationalNumber5));
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber16.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber16.doubleValue(), 0.01);
      assertNotNull(rationalNumber16);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1516;
      int int1 = 3103;
      RationalNumber rationalNumber0 = new RationalNumber(int0, int1);
      assertEquals(1516, rationalNumber0.numerator);
      assertEquals(3103, rationalNumber0.divisor);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0.48855945F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0.4885594585884628, rationalNumber0.doubleValue(), 0.01);
      assertNotNull(rationalNumber0);
      
      String string0 = rationalNumber0.toString();
      assertEquals(1516, rationalNumber0.numerator);
      assertEquals(3103, rationalNumber0.divisor);
      assertEquals("1516/3103 (0.489)", string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0.48855945F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0.4885594585884628, rationalNumber0.doubleValue(), 0.01);
      assertNotNull(string0);
      
      long long0 = 2147483647L;
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(rationalNumber0.divisor, long0);
      assertEquals(1516, rationalNumber0.numerator);
      assertEquals(3103, rationalNumber0.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber1.divisor);
      assertEquals(3103, rationalNumber1.numerator);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0.48855945F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0.4885594585884628, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(1.444947E-6F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(1.4449469751887708E-6, rationalNumber1.doubleValue(), 0.01);
      assertNotNull(rationalNumber1);
      
      long long1 = (-1455L);
      double double0 = 1093.16665633026;
      String string1 = rationalNumber1.toString();
      assertEquals(1516, rationalNumber0.numerator);
      assertEquals(3103, rationalNumber0.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber1.divisor);
      assertEquals(3103, rationalNumber1.numerator);
      assertEquals("3103/2147483647 (0)", string1);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(long0 == long1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(string1.equals((Object)string0));
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0.48855945F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0.4885594585884628, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(1.444947E-6F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(1.4449469751887708E-6, rationalNumber1.doubleValue(), 0.01);
      assertNotNull(string1);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(double0);
      assertEquals(6, rationalNumber2.divisor);
      assertEquals(6559, rationalNumber2.numerator);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertEquals(1093.1666F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(1093, rationalNumber2.intValue());
      assertEquals((byte)69, rationalNumber2.byteValue());
      assertEquals(1093.1666666666667, rationalNumber2.doubleValue(), 0.01);
      assertEquals(1093L, rationalNumber2.longValue());
      assertEquals((short)1093, rationalNumber2.shortValue());
      assertNotNull(rationalNumber2);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(rationalNumber1.numerator, long1);
      assertEquals(1516, rationalNumber0.numerator);
      assertEquals(3103, rationalNumber0.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber1.divisor);
      assertEquals(3103, rationalNumber1.numerator);
      assertEquals((-3103), rationalNumber3.numerator);
      assertEquals(1455, rationalNumber3.divisor);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(long0 == long1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(long1 == long0);
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0.48855945F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0.4885594585884628, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(1.444947E-6F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(1.4449469751887708E-6, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short) (-2), rationalNumber3.shortValue());
      assertEquals((-2.132646F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((byte) (-2), rationalNumber3.byteValue());
      assertEquals((-2L), rationalNumber3.longValue());
      assertEquals((-2.1326460481099656), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-2), rationalNumber3.intValue());
      assertNotNull(rationalNumber3);
      
      RationalNumber rationalNumber4 = rationalNumber3.negate();
      assertEquals(1516, rationalNumber0.numerator);
      assertEquals(3103, rationalNumber0.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber1.divisor);
      assertEquals(3103, rationalNumber1.numerator);
      assertEquals((-3103), rationalNumber3.numerator);
      assertEquals(1455, rationalNumber3.divisor);
      assertEquals(3103, rationalNumber4.numerator);
      assertEquals(1455, rationalNumber4.divisor);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(long0 == long1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(long1 == long0);
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0.48855945F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0.4885594585884628, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(1.444947E-6F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(1.4449469751887708E-6, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short) (-2), rationalNumber3.shortValue());
      assertEquals((-2.132646F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((byte) (-2), rationalNumber3.byteValue());
      assertEquals((-2L), rationalNumber3.longValue());
      assertEquals((-2.1326460481099656), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-2), rationalNumber3.intValue());
      assertEquals(2.1326460481099656, rationalNumber4.doubleValue(), 0.01);
      assertEquals((byte)2, rationalNumber4.byteValue());
      assertEquals((short)2, rationalNumber4.shortValue());
      assertEquals(2.132646F, rationalNumber4.floatValue(), 0.01F);
      assertEquals(2, rationalNumber4.intValue());
      assertEquals(2L, rationalNumber4.longValue());
      assertNotNull(rationalNumber4);
      
      RationalNumber rationalNumber5 = rationalNumber1.negate();
      assertEquals(1516, rationalNumber0.numerator);
      assertEquals(3103, rationalNumber0.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber1.divisor);
      assertEquals(3103, rationalNumber1.numerator);
      assertEquals((-3103), rationalNumber5.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber5.divisor);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(long0 == long1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0.48855945F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0.4885594585884628, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(1.444947E-6F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(1.4449469751887708E-6, rationalNumber1.doubleValue(), 0.01);
      assertEquals((-1.4449469751887708E-6), rationalNumber5.doubleValue(), 0.01);
      assertEquals(0, rationalNumber5.intValue());
      assertEquals(0L, rationalNumber5.longValue());
      assertEquals((short)0, rationalNumber5.shortValue());
      assertEquals((-1.444947E-6F), rationalNumber5.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber5.byteValue());
      assertNotNull(rationalNumber5);
      
      RationalNumber rationalNumber6 = rationalNumber4.negate();
      assertEquals(1516, rationalNumber0.numerator);
      assertEquals(3103, rationalNumber0.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber1.divisor);
      assertEquals(3103, rationalNumber1.numerator);
      assertEquals((-3103), rationalNumber3.numerator);
      assertEquals(1455, rationalNumber3.divisor);
      assertEquals(3103, rationalNumber4.numerator);
      assertEquals(1455, rationalNumber4.divisor);
      assertEquals(1455, rationalNumber6.divisor);
      assertEquals((-3103), rationalNumber6.numerator);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(long0 == long1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(long1 == long0);
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0.48855945F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0.4885594585884628, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(1.444947E-6F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(1.4449469751887708E-6, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short) (-2), rationalNumber3.shortValue());
      assertEquals((-2.132646F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((byte) (-2), rationalNumber3.byteValue());
      assertEquals((-2L), rationalNumber3.longValue());
      assertEquals((-2.1326460481099656), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-2), rationalNumber3.intValue());
      assertEquals(2.1326460481099656, rationalNumber4.doubleValue(), 0.01);
      assertEquals((byte)2, rationalNumber4.byteValue());
      assertEquals((short)2, rationalNumber4.shortValue());
      assertEquals(2.132646F, rationalNumber4.floatValue(), 0.01F);
      assertEquals(2, rationalNumber4.intValue());
      assertEquals(2L, rationalNumber4.longValue());
      assertEquals((byte) (-2), rationalNumber6.byteValue());
      assertEquals((-2.132646F), rationalNumber6.floatValue(), 0.01F);
      assertEquals((-2), rationalNumber6.intValue());
      assertEquals((-2L), rationalNumber6.longValue());
      assertEquals((short) (-2), rationalNumber6.shortValue());
      assertEquals((-2.1326460481099656), rationalNumber6.doubleValue(), 0.01);
      assertNotNull(rationalNumber6);
      
      String string2 = rationalNumber0.toString();
      assertEquals(1516, rationalNumber0.numerator);
      assertEquals(3103, rationalNumber0.divisor);
      assertEquals("1516/3103 (0.489)", string2);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0.48855945F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0.4885594585884628, rationalNumber0.doubleValue(), 0.01);
      assertNotNull(string2);
      
      String string3 = rationalNumber5.toString();
      assertEquals(1516, rationalNumber0.numerator);
      assertEquals(3103, rationalNumber0.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber1.divisor);
      assertEquals(3103, rationalNumber1.numerator);
      assertEquals((-3103), rationalNumber5.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber5.divisor);
      assertEquals("-3103/2147483647 (-0)", string3);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber6);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(long0 == long1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber6));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0.48855945F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0.4885594585884628, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(1.444947E-6F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(1.4449469751887708E-6, rationalNumber1.doubleValue(), 0.01);
      assertEquals((-1.4449469751887708E-6), rationalNumber5.doubleValue(), 0.01);
      assertEquals(0, rationalNumber5.intValue());
      assertEquals(0L, rationalNumber5.longValue());
      assertEquals((short)0, rationalNumber5.shortValue());
      assertEquals((-1.444947E-6F), rationalNumber5.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber5.byteValue());
      assertNotNull(string3);
      
      double double1 = 1.0E-8;
      RationalNumber rationalNumber7 = RationalNumber.valueOf(double1);
      assertEquals(100000000, rationalNumber7.divisor);
      assertEquals(1, rationalNumber7.numerator);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertEquals(0L, rationalNumber7.longValue());
      assertEquals((byte)0, rationalNumber7.byteValue());
      assertEquals(0, rationalNumber7.intValue());
      assertEquals(1.0E-8, rationalNumber7.doubleValue(), 0.01);
      assertEquals(1.0E-8F, rationalNumber7.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber7.shortValue());
      assertNotNull(rationalNumber7);
      
      String string4 = rationalNumber7.toString();
      assertEquals(100000000, rationalNumber7.divisor);
      assertEquals(1, rationalNumber7.numerator);
      assertEquals("1/100000000 (0)", string4);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(0L, rationalNumber7.longValue());
      assertEquals((byte)0, rationalNumber7.byteValue());
      assertEquals(0, rationalNumber7.intValue());
      assertEquals(1.0E-8, rationalNumber7.doubleValue(), 0.01);
      assertEquals(1.0E-8F, rationalNumber7.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber7.shortValue());
      assertNotNull(string4);
      
      String string5 = rationalNumber0.toString();
      assertEquals(1516, rationalNumber0.numerator);
      assertEquals(3103, rationalNumber0.divisor);
      assertEquals("1516/3103 (0.489)", string5);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0.48855945F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0.4885594585884628, rationalNumber0.doubleValue(), 0.01);
      assertNotNull(string5);
      
      String string6 = rationalNumber7.toString();
      assertEquals(100000000, rationalNumber7.divisor);
      assertEquals(1, rationalNumber7.numerator);
      assertEquals("1/100000000 (0)", string6);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals(0L, rationalNumber7.longValue());
      assertEquals((byte)0, rationalNumber7.byteValue());
      assertEquals(0, rationalNumber7.intValue());
      assertEquals(1.0E-8, rationalNumber7.doubleValue(), 0.01);
      assertEquals(1.0E-8F, rationalNumber7.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber7.shortValue());
      assertNotNull(string6);
      
      double double2 = 2654.8294;
      RationalNumber rationalNumber8 = RationalNumber.valueOf(double2);
      assertEquals(5000, rationalNumber8.divisor);
      assertEquals(13274147, rationalNumber8.numerator);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertEquals(2654.8294, rationalNumber8.doubleValue(), 0.01);
      assertEquals((byte)94, rationalNumber8.byteValue());
      assertEquals(2654.8293F, rationalNumber8.floatValue(), 0.01F);
      assertEquals(2654L, rationalNumber8.longValue());
      assertEquals((short)2654, rationalNumber8.shortValue());
      assertEquals(2654, rationalNumber8.intValue());
      assertNotNull(rationalNumber8);
      
      String string7 = rationalNumber7.toString();
      assertEquals(100000000, rationalNumber7.divisor);
      assertEquals(1, rationalNumber7.numerator);
      assertEquals("1/100000000 (0)", string7);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber8);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber8));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals(0L, rationalNumber7.longValue());
      assertEquals((byte)0, rationalNumber7.byteValue());
      assertEquals(0, rationalNumber7.intValue());
      assertEquals(1.0E-8, rationalNumber7.doubleValue(), 0.01);
      assertEquals(1.0E-8F, rationalNumber7.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber7.shortValue());
      assertNotNull(string7);
      
      String string8 = rationalNumber6.toString();
      assertEquals(1516, rationalNumber0.numerator);
      assertEquals(3103, rationalNumber0.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber1.divisor);
      assertEquals(3103, rationalNumber1.numerator);
      assertEquals((-3103), rationalNumber3.numerator);
      assertEquals(1455, rationalNumber3.divisor);
      assertEquals(3103, rationalNumber4.numerator);
      assertEquals(1455, rationalNumber4.divisor);
      assertEquals(1455, rationalNumber6.divisor);
      assertEquals((-3103), rationalNumber6.numerator);
      assertEquals("-3103/1455 (-2.133)", string8);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string0);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string3);
      assertNotSame(string8, string1);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber8);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber8);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber8);
      assertNotSame(rationalNumber6, rationalNumber7);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(long0 == long1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(long1 == long0);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber8));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber8));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber7));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber8));
      assertFalse(rationalNumber6.equals((Object)rationalNumber7));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0.48855945F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0.4885594585884628, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(1.444947E-6F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(1.4449469751887708E-6, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short) (-2), rationalNumber3.shortValue());
      assertEquals((-2.132646F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((byte) (-2), rationalNumber3.byteValue());
      assertEquals((-2L), rationalNumber3.longValue());
      assertEquals((-2.1326460481099656), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-2), rationalNumber3.intValue());
      assertEquals(2.1326460481099656, rationalNumber4.doubleValue(), 0.01);
      assertEquals((byte)2, rationalNumber4.byteValue());
      assertEquals((short)2, rationalNumber4.shortValue());
      assertEquals(2.132646F, rationalNumber4.floatValue(), 0.01F);
      assertEquals(2, rationalNumber4.intValue());
      assertEquals(2L, rationalNumber4.longValue());
      assertEquals((byte) (-2), rationalNumber6.byteValue());
      assertEquals((-2.132646F), rationalNumber6.floatValue(), 0.01F);
      assertEquals((-2), rationalNumber6.intValue());
      assertEquals((-2L), rationalNumber6.longValue());
      assertEquals((short) (-2), rationalNumber6.shortValue());
      assertEquals((-2.1326460481099656), rationalNumber6.doubleValue(), 0.01);
      assertNotNull(string8);
      
      double double3 = (-860.4750732644331);
      RationalNumber rationalNumber9 = RationalNumber.valueOf(double3);
      assertEquals((-293422), rationalNumber9.numerator);
      assertEquals(341, rationalNumber9.divisor);
      assertNotSame(rationalNumber9, rationalNumber1);
      assertNotSame(rationalNumber9, rationalNumber6);
      assertNotSame(rationalNumber9, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber3);
      assertNotSame(rationalNumber9, rationalNumber2);
      assertNotSame(rationalNumber9, rationalNumber5);
      assertNotSame(rationalNumber9, rationalNumber7);
      assertNotSame(rationalNumber9, rationalNumber8);
      assertNotSame(rationalNumber9, rationalNumber4);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertFalse(rationalNumber9.equals((Object)rationalNumber1));
      assertFalse(rationalNumber9.equals((Object)rationalNumber6));
      assertFalse(rationalNumber9.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber3));
      assertFalse(rationalNumber9.equals((Object)rationalNumber2));
      assertFalse(rationalNumber9.equals((Object)rationalNumber5));
      assertFalse(rationalNumber9.equals((Object)rationalNumber7));
      assertFalse(rationalNumber9.equals((Object)rationalNumber8));
      assertFalse(rationalNumber9.equals((Object)rationalNumber4));
      assertEquals((short) (-860), rationalNumber9.shortValue());
      assertEquals((-860.4751F), rationalNumber9.floatValue(), 0.01F);
      assertEquals((-860.475073313783), rationalNumber9.doubleValue(), 0.01);
      assertEquals((byte) (-92), rationalNumber9.byteValue());
      assertEquals((-860), rationalNumber9.intValue());
      assertEquals((-860L), rationalNumber9.longValue());
      assertNotNull(rationalNumber9);
      
      RationalNumber rationalNumber10 = rationalNumber5.negate();
      assertEquals(1516, rationalNumber0.numerator);
      assertEquals(3103, rationalNumber0.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber1.divisor);
      assertEquals(3103, rationalNumber1.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber10.divisor);
      assertEquals(3103, rationalNumber10.numerator);
      assertEquals((-3103), rationalNumber5.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber5.divisor);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber1);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber2);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber6);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber10);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber7);
      assertNotSame(rationalNumber5, rationalNumber8);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber9);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(long0 == long1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber6));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber7));
      assertFalse(rationalNumber5.equals((Object)rationalNumber8));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber9));
      assertEquals((byte)0, rationalNumber0.byteValue());
      assertEquals(0, rationalNumber0.intValue());
      assertEquals(0.48855945F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber0.longValue());
      assertEquals((short)0, rationalNumber0.shortValue());
      assertEquals(0.4885594585884628, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(1.444947E-6F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(1.4449469751887708E-6, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0, rationalNumber10.intValue());
      assertEquals(1.444947E-6F, rationalNumber10.floatValue(), 0.01F);
      assertEquals(1.4449469751887708E-6, rationalNumber10.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber10.shortValue());
      assertEquals((byte)0, rationalNumber10.byteValue());
      assertEquals(0L, rationalNumber10.longValue());
      assertEquals((-1.4449469751887708E-6), rationalNumber5.doubleValue(), 0.01);
      assertEquals(0, rationalNumber5.intValue());
      assertEquals(0L, rationalNumber5.longValue());
      assertEquals((short)0, rationalNumber5.shortValue());
      assertEquals((-1.444947E-6F), rationalNumber5.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber5.byteValue());
      assertNotNull(rationalNumber10);
      
      String string9 = rationalNumber9.toString();
      assertEquals((-293422), rationalNumber9.numerator);
      assertEquals(341, rationalNumber9.divisor);
      assertEquals("-293422/341 (-860.475)", string9);
      assertNotSame(rationalNumber9, rationalNumber1);
      assertNotSame(rationalNumber9, rationalNumber6);
      assertNotSame(rationalNumber9, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber3);
      assertNotSame(rationalNumber9, rationalNumber10);
      assertNotSame(rationalNumber9, rationalNumber2);
      assertNotSame(rationalNumber9, rationalNumber5);
      assertNotSame(rationalNumber9, rationalNumber7);
      assertNotSame(rationalNumber9, rationalNumber8);
      assertNotSame(rationalNumber9, rationalNumber4);
      assertNotSame(string9, string0);
      assertNotSame(string9, string5);
      assertNotSame(string9, string7);
      assertNotSame(string9, string4);
      assertNotSame(string9, string8);
      assertNotSame(string9, string3);
      assertNotSame(string9, string6);
      assertNotSame(string9, string2);
      assertNotSame(string9, string1);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertFalse(rationalNumber9.equals((Object)rationalNumber1));
      assertFalse(rationalNumber9.equals((Object)rationalNumber6));
      assertFalse(rationalNumber9.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber3));
      assertFalse(rationalNumber9.equals((Object)rationalNumber10));
      assertFalse(rationalNumber9.equals((Object)rationalNumber2));
      assertFalse(rationalNumber9.equals((Object)rationalNumber5));
      assertFalse(rationalNumber9.equals((Object)rationalNumber7));
      assertFalse(rationalNumber9.equals((Object)rationalNumber8));
      assertFalse(rationalNumber9.equals((Object)rationalNumber4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertEquals((short) (-860), rationalNumber9.shortValue());
      assertEquals((-860.4751F), rationalNumber9.floatValue(), 0.01F);
      assertEquals((-860.475073313783), rationalNumber9.doubleValue(), 0.01);
      assertEquals((byte) (-92), rationalNumber9.byteValue());
      assertEquals((-860), rationalNumber9.intValue());
      assertEquals((-860L), rationalNumber9.longValue());
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = (-1.0);
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertNotNull(rationalNumber0);
      
      String string0 = rationalNumber0.toString();
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("-1", string0);
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertNotNull(string0);
      
      long long0 = (-2147483648L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(rationalNumber0.divisor, long0);
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(Integer.MIN_VALUE, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals((-4.6566128730773926E-10), rationalNumber1.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals((-4.656613E-10F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertNotNull(rationalNumber1);
      
      String string1 = rationalNumber1.toDisplayString();
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(Integer.MIN_VALUE, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals("-0", string1);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(string1, string0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals((-4.6566128730773926E-10), rationalNumber1.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals((-4.656613E-10F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertNotNull(string1);
      
      long long1 = (-2703L);
      long long2 = 1255L;
      long long3 = (-1344L);
      long long4 = 2147483658L;
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(long3, long4);
      assertEquals(357913943, rationalNumber2.divisor);
      assertEquals((-224), rationalNumber2.numerator);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long4);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals((short)0, rationalNumber2.shortValue());
      assertEquals((-6.2584877E-7F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-6.258487672272661E-7), rationalNumber2.doubleValue(), 0.01);
      assertNotNull(rationalNumber2);
      
      long long5 = 8L;
      RationalNumber rationalNumber3 = RationalNumber.valueOf(rationalNumber1.divisor);
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(Integer.MIN_VALUE, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals((-2147483647), rationalNumber3.numerator);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(long0 == long1);
      assertFalse(long0 == long4);
      assertFalse(long0 == long2);
      assertFalse(long0 == long5);
      assertFalse(long0 == long3);
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals((-4.6566128730773926E-10), rationalNumber1.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals((-4.656613E-10F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((short)1, rationalNumber3.shortValue());
      assertEquals((-2147483647L), rationalNumber3.longValue());
      assertEquals((-2.14748365E9F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((-2.147483647E9), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-2147483647), rationalNumber3.intValue());
      assertEquals((byte)1, rationalNumber3.byteValue());
      assertNotNull(rationalNumber3);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(long5, rationalNumber2.numerator);
      assertEquals(357913943, rationalNumber2.divisor);
      assertEquals((-224), rationalNumber2.numerator);
      assertEquals((-28), rationalNumber4.divisor);
      assertEquals(1, rationalNumber4.numerator);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertFalse(long3 == long5);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long4);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(long5 == long4);
      assertFalse(long5 == long1);
      assertFalse(long5 == long2);
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals((short)0, rationalNumber2.shortValue());
      assertEquals((-6.2584877E-7F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-6.258487672272661E-7), rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals((-0.03571428571428571), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertEquals((-0.035714287F), rationalNumber4.floatValue(), 0.01F);
      assertNotNull(rationalNumber4);
      
      String string2 = rationalNumber4.toString();
      assertEquals(357913943, rationalNumber2.divisor);
      assertEquals((-224), rationalNumber2.numerator);
      assertEquals((-28), rationalNumber4.divisor);
      assertEquals(1, rationalNumber4.numerator);
      assertEquals("1/-28 (-0.036)", string2);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(long3 == long5);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long4);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long1);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(long5 == long4);
      assertFalse(long5 == long1);
      assertFalse(long5 == long2);
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals((short)0, rationalNumber2.shortValue());
      assertEquals((-6.2584877E-7F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-6.258487672272661E-7), rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals((-0.03571428571428571), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertEquals((-0.035714287F), rationalNumber4.floatValue(), 0.01F);
      assertNotNull(string2);
      
      RationalNumber rationalNumber5 = rationalNumber3.negate();
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(Integer.MIN_VALUE, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals((-2147483647), rationalNumber3.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber5.numerator);
      assertEquals(1, rationalNumber5.divisor);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(long0 == long1);
      assertFalse(long0 == long4);
      assertFalse(long0 == long2);
      assertFalse(long0 == long5);
      assertFalse(long0 == long3);
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals((-4.6566128730773926E-10), rationalNumber1.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals((-4.656613E-10F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals((short)1, rationalNumber3.shortValue());
      assertEquals((-2147483647L), rationalNumber3.longValue());
      assertEquals((-2.14748365E9F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((-2.147483647E9), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-2147483647), rationalNumber3.intValue());
      assertEquals((byte)1, rationalNumber3.byteValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber5.intValue());
      assertEquals(2.147483647E9, rationalNumber5.doubleValue(), 0.01);
      assertEquals((short) (-1), rationalNumber5.shortValue());
      assertEquals(2147483647L, rationalNumber5.longValue());
      assertEquals((byte) (-1), rationalNumber5.byteValue());
      assertEquals(2.14748365E9F, rationalNumber5.floatValue(), 0.01F);
      assertNotNull(rationalNumber5);
      
      long long6 = 385L;
      long long7 = 84L;
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(long6, long7);
      assertEquals(55, rationalNumber6.numerator);
      assertEquals(12, rationalNumber6.divisor);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertFalse(long6 == long0);
      assertFalse(long6 == long3);
      assertFalse(long6 == long4);
      assertFalse(long6 == long5);
      assertFalse(long6 == long2);
      assertFalse(long6 == long1);
      assertFalse(long6 == long7);
      assertFalse(long7 == long1);
      assertFalse(long7 == long6);
      assertFalse(long7 == long5);
      assertFalse(long7 == long3);
      assertFalse(long7 == long0);
      assertFalse(long7 == long2);
      assertFalse(long7 == long4);
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertEquals(4.5833335F, rationalNumber6.floatValue(), 0.01F);
      assertEquals(4, rationalNumber6.intValue());
      assertEquals(4L, rationalNumber6.longValue());
      assertEquals((short)4, rationalNumber6.shortValue());
      assertEquals((byte)4, rationalNumber6.byteValue());
      assertEquals(4.583333333333333, rationalNumber6.doubleValue(), 0.01);
      assertNotNull(rationalNumber6);
      
      RationalNumber rationalNumber7 = rationalNumber4.negate();
      assertEquals((-1), rationalNumber7.numerator);
      assertEquals((-28), rationalNumber7.divisor);
      assertEquals(357913943, rationalNumber2.divisor);
      assertEquals((-224), rationalNumber2.numerator);
      assertEquals((-28), rationalNumber4.divisor);
      assertEquals(1, rationalNumber4.numerator);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(long3 == long6);
      assertFalse(long3 == long7);
      assertFalse(long3 == long5);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long4);
      assertFalse(long4 == long7);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(long5 == long4);
      assertFalse(long5 == long6);
      assertFalse(long5 == long7);
      assertFalse(long5 == long1);
      assertFalse(long5 == long2);
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertEquals(0.035714287F, rationalNumber7.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber7.byteValue());
      assertEquals((short)0, rationalNumber7.shortValue());
      assertEquals(0.03571428571428571, rationalNumber7.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber7.longValue());
      assertEquals(0, rationalNumber7.intValue());
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals((short)0, rationalNumber2.shortValue());
      assertEquals((-6.2584877E-7F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-6.258487672272661E-7), rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals((-0.03571428571428571), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertEquals((-0.035714287F), rationalNumber4.floatValue(), 0.01F);
      assertNotNull(rationalNumber7);
      
      RationalNumber rationalNumber8 = rationalNumber0.negate();
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1, rationalNumber8.numerator);
      assertEquals(1, rationalNumber8.divisor);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals((short)1, rationalNumber8.shortValue());
      assertEquals(1L, rationalNumber8.longValue());
      assertEquals((byte)1, rationalNumber8.byteValue());
      assertEquals(1, rationalNumber8.intValue());
      assertEquals(1.0F, rationalNumber8.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber8.doubleValue(), 0.01);
      assertNotNull(rationalNumber8);
      
      String string3 = rationalNumber8.toDisplayString();
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1, rationalNumber8.numerator);
      assertEquals(1, rationalNumber8.divisor);
      assertEquals("1", string3);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals((short)1, rationalNumber8.shortValue());
      assertEquals(1L, rationalNumber8.longValue());
      assertEquals((byte)1, rationalNumber8.byteValue());
      assertEquals(1, rationalNumber8.intValue());
      assertEquals(1.0F, rationalNumber8.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber8.doubleValue(), 0.01);
      assertNotNull(string3);
      
      String string4 = rationalNumber4.toString();
      assertEquals(357913943, rationalNumber2.divisor);
      assertEquals((-224), rationalNumber2.numerator);
      assertEquals((-28), rationalNumber4.divisor);
      assertEquals(1, rationalNumber4.numerator);
      assertEquals("1/-28 (-0.036)", string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber8);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(long3 == long6);
      assertFalse(long3 == long7);
      assertFalse(long3 == long5);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long4);
      assertFalse(long4 == long7);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber8));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(long5 == long4);
      assertFalse(long5 == long6);
      assertFalse(long5 == long7);
      assertFalse(long5 == long1);
      assertFalse(long5 == long2);
      assertFalse(rationalNumber4.equals((Object)rationalNumber7));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber8));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals((short)0, rationalNumber2.shortValue());
      assertEquals((-6.2584877E-7F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-6.258487672272661E-7), rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals((-0.03571428571428571), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertEquals((-0.035714287F), rationalNumber4.floatValue(), 0.01F);
      assertNotNull(string4);
      
      long long8 = (-755L);
      RationalNumber rationalNumber9 = RationalNumber.factoryMethod(long0, long8);
      assertEquals(755, rationalNumber9.divisor);
      assertEquals(Integer.MIN_VALUE, rationalNumber9.numerator);
      assertNotSame(rationalNumber9, rationalNumber6);
      assertNotSame(rationalNumber9, rationalNumber2);
      assertNotSame(rationalNumber9, rationalNumber3);
      assertNotSame(rationalNumber9, rationalNumber7);
      assertNotSame(rationalNumber9, rationalNumber1);
      assertNotSame(rationalNumber9, rationalNumber8);
      assertNotSame(rationalNumber9, rationalNumber4);
      assertNotSame(rationalNumber9, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber5);
      assertFalse(long0 == long1);
      assertFalse(long0 == long4);
      assertFalse(long0 == long2);
      assertFalse(long0 == long5);
      assertFalse(long0 == long7);
      assertFalse(long0 == long8);
      assertFalse(long0 == long3);
      assertFalse(long0 == long6);
      assertFalse(long8 == long4);
      assertFalse(long8 == long7);
      assertFalse(long8 == long6);
      assertFalse(long8 == long5);
      assertFalse(long8 == long0);
      assertFalse(long8 == long1);
      assertFalse(long8 == long2);
      assertFalse(long8 == long3);
      assertFalse(rationalNumber9.equals((Object)rationalNumber6));
      assertFalse(rationalNumber9.equals((Object)rationalNumber2));
      assertFalse(rationalNumber9.equals((Object)rationalNumber3));
      assertFalse(rationalNumber9.equals((Object)rationalNumber7));
      assertFalse(rationalNumber9.equals((Object)rationalNumber1));
      assertFalse(rationalNumber9.equals((Object)rationalNumber8));
      assertFalse(rationalNumber9.equals((Object)rationalNumber4));
      assertFalse(rationalNumber9.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber5));
      assertEquals((short) (-26301), rationalNumber9.shortValue());
      assertEquals((-2844349.2F), rationalNumber9.floatValue(), 0.01F);
      assertEquals((-2844349), rationalNumber9.intValue());
      assertEquals((byte)67, rationalNumber9.byteValue());
      assertEquals((-2844349L), rationalNumber9.longValue());
      assertEquals((-2844349.2026490066), rationalNumber9.doubleValue(), 0.01);
      assertNotNull(rationalNumber9);
      
      RationalNumber rationalNumber10 = RationalNumber.valueOf(long4);
      assertEquals(1, rationalNumber10.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber10.numerator);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber2);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber10, rationalNumber1);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(long4 == long7);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long8);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertEquals(2147483647L, rationalNumber10.longValue());
      assertEquals(2.14748365E9F, rationalNumber10.floatValue(), 0.01F);
      assertEquals(2.147483647E9, rationalNumber10.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber10.byteValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber10.intValue());
      assertEquals((short) (-1), rationalNumber10.shortValue());
      assertNotNull(rationalNumber10);
      
      String string5 = rationalNumber10.toString();
      assertEquals(1, rationalNumber10.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber10.numerator);
      assertEquals("2,147,483,647", string5);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber2);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber10, rationalNumber1);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(long4 == long7);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long8);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals(2147483647L, rationalNumber10.longValue());
      assertEquals(2.14748365E9F, rationalNumber10.floatValue(), 0.01F);
      assertEquals(2.147483647E9, rationalNumber10.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber10.byteValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber10.intValue());
      assertEquals((short) (-1), rationalNumber10.shortValue());
      assertNotNull(string5);
      
      RationalNumber rationalNumber11 = RationalNumber.factoryMethod(rationalNumber7.divisor, rationalNumber2.divisor);
      assertEquals((-1), rationalNumber7.numerator);
      assertEquals((-28), rationalNumber7.divisor);
      assertEquals(357913943, rationalNumber2.divisor);
      assertEquals((-224), rationalNumber2.numerator);
      assertEquals((-28), rationalNumber11.numerator);
      assertEquals(357913943, rationalNumber11.divisor);
      assertEquals((-28), rationalNumber4.divisor);
      assertEquals(1, rationalNumber4.numerator);
      assertNotSame(rationalNumber7, rationalNumber11);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber10);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber9);
      assertNotSame(rationalNumber7, rationalNumber8);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber9);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber11);
      assertNotSame(rationalNumber2, rationalNumber10);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber11, rationalNumber1);
      assertNotSame(rationalNumber11, rationalNumber9);
      assertNotSame(rationalNumber11, rationalNumber4);
      assertNotSame(rationalNumber11, rationalNumber8);
      assertNotSame(rationalNumber11, rationalNumber7);
      assertNotSame(rationalNumber11, rationalNumber10);
      assertNotSame(rationalNumber11, rationalNumber5);
      assertNotSame(rationalNumber11, rationalNumber6);
      assertNotSame(rationalNumber11, rationalNumber2);
      assertNotSame(rationalNumber11, rationalNumber0);
      assertNotSame(rationalNumber11, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber9);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber8);
      assertNotSame(rationalNumber4, rationalNumber10);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber11);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber10));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber9));
      assertFalse(rationalNumber7.equals((Object)rationalNumber8));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(long3 == long8);
      assertFalse(long3 == long6);
      assertFalse(long3 == long7);
      assertFalse(long3 == long5);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long4);
      assertFalse(long4 == long7);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long8);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber8));
      assertFalse(rationalNumber2.equals((Object)rationalNumber9));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertFalse(rationalNumber2.equals((Object)rationalNumber10));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber11.equals((Object)rationalNumber1));
      assertFalse(rationalNumber11.equals((Object)rationalNumber9));
      assertFalse(rationalNumber11.equals((Object)rationalNumber4));
      assertFalse(rationalNumber11.equals((Object)rationalNumber8));
      assertFalse(rationalNumber11.equals((Object)rationalNumber7));
      assertFalse(rationalNumber11.equals((Object)rationalNumber10));
      assertFalse(rationalNumber11.equals((Object)rationalNumber5));
      assertFalse(rationalNumber11.equals((Object)rationalNumber6));
      assertFalse(rationalNumber11.equals((Object)rationalNumber2));
      assertFalse(rationalNumber11.equals((Object)rationalNumber0));
      assertFalse(rationalNumber11.equals((Object)rationalNumber3));
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(long5 == long4);
      assertFalse(long5 == long6);
      assertFalse(long5 == long7);
      assertFalse(long5 == long1);
      assertFalse(long5 == long8);
      assertFalse(long5 == long2);
      assertFalse(rationalNumber4.equals((Object)rationalNumber9));
      assertFalse(rationalNumber4.equals((Object)rationalNumber7));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber8));
      assertFalse(rationalNumber4.equals((Object)rationalNumber10));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertEquals(0.035714287F, rationalNumber7.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber7.byteValue());
      assertEquals((short)0, rationalNumber7.shortValue());
      assertEquals(0.03571428571428571, rationalNumber7.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber7.longValue());
      assertEquals(0, rationalNumber7.intValue());
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals((short)0, rationalNumber2.shortValue());
      assertEquals((-6.2584877E-7F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-6.258487672272661E-7), rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber11.byteValue());
      assertEquals(0, rationalNumber11.intValue());
      assertEquals((short)0, rationalNumber11.shortValue());
      assertEquals((-7.823109590340827E-8), rationalNumber11.doubleValue(), 0.01);
      assertEquals((-7.8231096E-8F), rationalNumber11.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber11.longValue());
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals((-0.03571428571428571), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertEquals((-0.035714287F), rationalNumber4.floatValue(), 0.01F);
      assertNotNull(rationalNumber11);
      
      String string6 = rationalNumber1.toDisplayString();
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(Integer.MIN_VALUE, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals("-0", string6);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber11);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(long0 == long1);
      assertFalse(long0 == long4);
      assertFalse(long0 == long2);
      assertFalse(long0 == long5);
      assertFalse(long0 == long7);
      assertFalse(long0 == long8);
      assertFalse(long0 == long3);
      assertFalse(long0 == long6);
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber1.equals((Object)rationalNumber11));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals((-4.6566128730773926E-10), rationalNumber1.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals((-4.656613E-10F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertNotNull(string6);
      
      RationalNumber rationalNumber12 = RationalNumber.factoryMethod(rationalNumber10.divisor, long1);
      assertEquals(1, rationalNumber10.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber10.numerator);
      assertEquals(1, rationalNumber12.numerator);
      assertEquals((-2703), rationalNumber12.divisor);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber2);
      assertNotSame(rationalNumber10, rationalNumber12);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber10, rationalNumber1);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber11);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertNotSame(rationalNumber12, rationalNumber5);
      assertNotSame(rationalNumber12, rationalNumber7);
      assertNotSame(rationalNumber12, rationalNumber0);
      assertNotSame(rationalNumber12, rationalNumber4);
      assertNotSame(rationalNumber12, rationalNumber1);
      assertNotSame(rationalNumber12, rationalNumber8);
      assertNotSame(rationalNumber12, rationalNumber3);
      assertNotSame(rationalNumber12, rationalNumber6);
      assertNotSame(rationalNumber12, rationalNumber2);
      assertNotSame(rationalNumber12, rationalNumber11);
      assertNotSame(rationalNumber12, rationalNumber10);
      assertNotSame(rationalNumber12, rationalNumber9);
      assertFalse(long1 == long2);
      assertFalse(long1 == long6);
      assertFalse(long1 == long3);
      assertFalse(long1 == long7);
      assertFalse(long1 == long8);
      assertFalse(long1 == long0);
      assertFalse(long1 == long4);
      assertFalse(long1 == long5);
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber11));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(long4 == long7);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long8);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertFalse(rationalNumber12.equals((Object)rationalNumber5));
      assertFalse(rationalNumber12.equals((Object)rationalNumber7));
      assertFalse(rationalNumber12.equals((Object)rationalNumber0));
      assertFalse(rationalNumber12.equals((Object)rationalNumber4));
      assertFalse(rationalNumber12.equals((Object)rationalNumber1));
      assertFalse(rationalNumber12.equals((Object)rationalNumber8));
      assertFalse(rationalNumber12.equals((Object)rationalNumber3));
      assertFalse(rationalNumber12.equals((Object)rationalNumber6));
      assertFalse(rationalNumber12.equals((Object)rationalNumber2));
      assertFalse(rationalNumber12.equals((Object)rationalNumber11));
      assertFalse(rationalNumber12.equals((Object)rationalNumber10));
      assertFalse(rationalNumber12.equals((Object)rationalNumber9));
      assertEquals(2147483647L, rationalNumber10.longValue());
      assertEquals(2.14748365E9F, rationalNumber10.floatValue(), 0.01F);
      assertEquals(2.147483647E9, rationalNumber10.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber10.byteValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber10.intValue());
      assertEquals((short) (-1), rationalNumber10.shortValue());
      assertEquals(0, rationalNumber12.intValue());
      assertEquals((-3.699593044765076E-4), rationalNumber12.doubleValue(), 0.01);
      assertEquals((-3.699593E-4F), rationalNumber12.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber12.longValue());
      assertEquals((short)0, rationalNumber12.shortValue());
      assertEquals((byte)0, rationalNumber12.byteValue());
      assertNotNull(rationalNumber12);
      
      String string7 = rationalNumber0.toString();
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("-1", string7);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber12));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertNotNull(string7);
      
      String string8 = rationalNumber7.toDisplayString();
      assertEquals((-1), rationalNumber7.numerator);
      assertEquals((-28), rationalNumber7.divisor);
      assertEquals(357913943, rationalNumber2.divisor);
      assertEquals((-224), rationalNumber2.numerator);
      assertEquals((-28), rationalNumber4.divisor);
      assertEquals(1, rationalNumber4.numerator);
      assertEquals("0.036", string8);
      assertNotSame(rationalNumber7, rationalNumber11);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber10);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber12);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber9);
      assertNotSame(rationalNumber7, rationalNumber8);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber12);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber9);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber11);
      assertNotSame(rationalNumber2, rationalNumber10);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotSame(rationalNumber4, rationalNumber9);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber8);
      assertNotSame(rationalNumber4, rationalNumber10);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber11);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber12);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(string8, string4);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string7);
      assertFalse(rationalNumber7.equals((Object)rationalNumber11));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber10));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber12));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber9));
      assertFalse(rationalNumber7.equals((Object)rationalNumber8));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(long3 == long8);
      assertFalse(long3 == long6);
      assertFalse(long3 == long7);
      assertFalse(long3 == long5);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long4);
      assertFalse(long4 == long7);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long8);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber12));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber8));
      assertFalse(rationalNumber2.equals((Object)rationalNumber9));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertFalse(rationalNumber2.equals((Object)rationalNumber11));
      assertFalse(rationalNumber2.equals((Object)rationalNumber10));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(long5 == long4);
      assertFalse(long5 == long6);
      assertFalse(long5 == long7);
      assertFalse(long5 == long1);
      assertFalse(long5 == long8);
      assertFalse(long5 == long2);
      assertFalse(rationalNumber4.equals((Object)rationalNumber7));
      assertFalse(rationalNumber4.equals((Object)rationalNumber9));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber8));
      assertFalse(rationalNumber4.equals((Object)rationalNumber10));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber11));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber12));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertEquals(0.035714287F, rationalNumber7.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber7.byteValue());
      assertEquals((short)0, rationalNumber7.shortValue());
      assertEquals(0.03571428571428571, rationalNumber7.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber7.longValue());
      assertEquals(0, rationalNumber7.intValue());
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals((short)0, rationalNumber2.shortValue());
      assertEquals((-6.2584877E-7F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-6.258487672272661E-7), rationalNumber2.doubleValue(), 0.01);
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals((-0.03571428571428571), rationalNumber4.doubleValue(), 0.01);
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals(0, rationalNumber4.intValue());
      assertEquals((-0.035714287F), rationalNumber4.floatValue(), 0.01F);
      assertNotNull(string8);
      
      long long9 = 2097L;
      long long10 = 1297L;
      RationalNumber rationalNumber13 = RationalNumber.valueOf(rationalNumber10.divisor);
      assertEquals(1, rationalNumber13.divisor);
      assertEquals(1, rationalNumber13.numerator);
      assertEquals(1, rationalNumber10.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber10.numerator);
      assertNotSame(rationalNumber13, rationalNumber12);
      assertNotSame(rationalNumber13, rationalNumber1);
      assertNotSame(rationalNumber13, rationalNumber3);
      assertNotSame(rationalNumber13, rationalNumber0);
      assertNotSame(rationalNumber13, rationalNumber4);
      assertNotSame(rationalNumber13, rationalNumber9);
      assertNotSame(rationalNumber13, rationalNumber8);
      assertNotSame(rationalNumber13, rationalNumber2);
      assertNotSame(rationalNumber13, rationalNumber6);
      assertNotSame(rationalNumber13, rationalNumber7);
      assertNotSame(rationalNumber13, rationalNumber10);
      assertNotSame(rationalNumber13, rationalNumber11);
      assertNotSame(rationalNumber13, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber12);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber11);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber2);
      assertNotSame(rationalNumber10, rationalNumber13);
      assertNotSame(rationalNumber10, rationalNumber1);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertFalse(rationalNumber13.equals((Object)rationalNumber12));
      assertFalse(rationalNumber13.equals((Object)rationalNumber1));
      assertFalse(rationalNumber13.equals((Object)rationalNumber3));
      assertFalse(rationalNumber13.equals((Object)rationalNumber0));
      assertFalse(rationalNumber13.equals((Object)rationalNumber4));
      assertFalse(rationalNumber13.equals((Object)rationalNumber9));
      assertFalse(rationalNumber13.equals((Object)rationalNumber8));
      assertFalse(rationalNumber13.equals((Object)rationalNumber2));
      assertFalse(rationalNumber13.equals((Object)rationalNumber6));
      assertFalse(rationalNumber13.equals((Object)rationalNumber7));
      assertFalse(rationalNumber13.equals((Object)rationalNumber10));
      assertFalse(rationalNumber13.equals((Object)rationalNumber11));
      assertFalse(rationalNumber13.equals((Object)rationalNumber5));
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertFalse(rationalNumber10.equals((Object)rationalNumber12));
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber11));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(long4 == long7);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long8);
      assertFalse(long4 == long10);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long9);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertEquals(1L, rationalNumber13.longValue());
      assertEquals(1, rationalNumber13.intValue());
      assertEquals(1.0, rationalNumber13.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber13.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber13.byteValue());
      assertEquals((short)1, rationalNumber13.shortValue());
      assertEquals(2147483647L, rationalNumber10.longValue());
      assertEquals(2.14748365E9F, rationalNumber10.floatValue(), 0.01F);
      assertEquals(2.147483647E9, rationalNumber10.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber10.byteValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber10.intValue());
      assertEquals((short) (-1), rationalNumber10.shortValue());
      assertNotNull(rationalNumber13);
      
      String string9 = rationalNumber2.toDisplayString();
      assertEquals(357913943, rationalNumber2.divisor);
      assertEquals((-224), rationalNumber2.numerator);
      assertEquals("-0", string9);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string3);
      assertNotSame(string9, string2);
      assertNotSame(string9, string6);
      assertNotSame(string9, string5);
      assertNotSame(string9, string7);
      assertNotSame(string9, string4);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber13);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber9);
      assertNotSame(rationalNumber2, rationalNumber12);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber11);
      assertNotSame(rationalNumber2, rationalNumber10);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(long3 == long8);
      assertFalse(long3 == long6);
      assertFalse(long3 == long7);
      assertFalse(long3 == long5);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long10);
      assertFalse(long3 == long9);
      assertFalse(long3 == long4);
      assertFalse(long4 == long7);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long8);
      assertFalse(long4 == long10);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long9);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber13));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber8));
      assertFalse(rationalNumber2.equals((Object)rationalNumber9));
      assertFalse(rationalNumber2.equals((Object)rationalNumber12));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertFalse(rationalNumber2.equals((Object)rationalNumber11));
      assertFalse(rationalNumber2.equals((Object)rationalNumber10));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertEquals(0L, rationalNumber2.longValue());
      assertEquals(0, rationalNumber2.intValue());
      assertEquals((byte)0, rationalNumber2.byteValue());
      assertEquals((short)0, rationalNumber2.shortValue());
      assertEquals((-6.2584877E-7F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-6.258487672272661E-7), rationalNumber2.doubleValue(), 0.01);
      assertNotNull(string9);
      
      String string10 = rationalNumber8.toString();
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1, rationalNumber8.numerator);
      assertEquals(1, rationalNumber8.divisor);
      assertEquals("1", string10);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber13);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(string10, string8);
      assertNotSame(string10, string4);
      assertNotSame(string10, string6);
      assertNotSame(string10, string9);
      assertNotSame(string10, string1);
      assertNotSame(string10, string5);
      assertNotSame(string10, string2);
      assertNotSame(string10, string0);
      assertNotSame(string10, string3);
      assertNotSame(string10, string7);
      assertNotSame(rationalNumber8, rationalNumber10);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber13);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber11);
      assertNotSame(rationalNumber8, rationalNumber9);
      assertNotSame(rationalNumber8, rationalNumber12);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber12));
      assertFalse(rationalNumber0.equals((Object)rationalNumber13));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber10));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber13));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber11));
      assertFalse(rationalNumber8.equals((Object)rationalNumber9));
      assertFalse(rationalNumber8.equals((Object)rationalNumber12));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals((short)1, rationalNumber8.shortValue());
      assertEquals(1L, rationalNumber8.longValue());
      assertEquals((byte)1, rationalNumber8.byteValue());
      assertEquals(1, rationalNumber8.intValue());
      assertEquals(1.0F, rationalNumber8.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber8.doubleValue(), 0.01);
      assertNotNull(string10);
      
      RationalNumber rationalNumber14 = rationalNumber8.negate();
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1, rationalNumber8.numerator);
      assertEquals(1, rationalNumber8.divisor);
      assertEquals(1, rationalNumber14.divisor);
      assertEquals((-1), rationalNumber14.numerator);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber14);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber13);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber8, rationalNumber14);
      assertNotSame(rationalNumber8, rationalNumber10);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber13);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber11);
      assertNotSame(rationalNumber8, rationalNumber9);
      assertNotSame(rationalNumber8, rationalNumber12);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber14, rationalNumber2);
      assertNotSame(rationalNumber14, rationalNumber6);
      assertNotSame(rationalNumber14, rationalNumber7);
      assertNotSame(rationalNumber14, rationalNumber12);
      assertNotSame(rationalNumber14, rationalNumber10);
      assertNotSame(rationalNumber14, rationalNumber5);
      assertNotSame(rationalNumber14, rationalNumber11);
      assertNotSame(rationalNumber14, rationalNumber4);
      assertNotSame(rationalNumber14, rationalNumber3);
      assertNotSame(rationalNumber14, rationalNumber0);
      assertNotSame(rationalNumber14, rationalNumber13);
      assertNotSame(rationalNumber14, rationalNumber1);
      assertNotSame(rationalNumber14, rationalNumber8);
      assertNotSame(rationalNumber14, rationalNumber9);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber12));
      assertFalse(rationalNumber0.equals((Object)rationalNumber13));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber8.equals((Object)rationalNumber10));
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber13));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber11));
      assertFalse(rationalNumber8.equals((Object)rationalNumber9));
      assertFalse(rationalNumber8.equals((Object)rationalNumber12));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber14.equals((Object)rationalNumber2));
      assertFalse(rationalNumber14.equals((Object)rationalNumber6));
      assertFalse(rationalNumber14.equals((Object)rationalNumber7));
      assertFalse(rationalNumber14.equals((Object)rationalNumber12));
      assertFalse(rationalNumber14.equals((Object)rationalNumber10));
      assertFalse(rationalNumber14.equals((Object)rationalNumber5));
      assertFalse(rationalNumber14.equals((Object)rationalNumber11));
      assertFalse(rationalNumber14.equals((Object)rationalNumber4));
      assertFalse(rationalNumber14.equals((Object)rationalNumber3));
      assertFalse(rationalNumber14.equals((Object)rationalNumber0));
      assertFalse(rationalNumber14.equals((Object)rationalNumber13));
      assertFalse(rationalNumber14.equals((Object)rationalNumber1));
      assertFalse(rationalNumber14.equals((Object)rationalNumber8));
      assertFalse(rationalNumber14.equals((Object)rationalNumber9));
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals((short)1, rationalNumber8.shortValue());
      assertEquals(1L, rationalNumber8.longValue());
      assertEquals((byte)1, rationalNumber8.byteValue());
      assertEquals(1, rationalNumber8.intValue());
      assertEquals(1.0F, rationalNumber8.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber8.doubleValue(), 0.01);
      assertEquals((-1L), rationalNumber14.longValue());
      assertEquals((-1.0F), rationalNumber14.floatValue(), 0.01F);
      assertEquals((-1.0), rationalNumber14.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber14.byteValue());
      assertEquals((-1), rationalNumber14.intValue());
      assertEquals((short) (-1), rationalNumber14.shortValue());
      assertNotNull(rationalNumber14);
      
      RationalNumber rationalNumber15 = rationalNumber3.negate();
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(Integer.MIN_VALUE, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(1, rationalNumber15.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber15.numerator);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals((-2147483647), rationalNumber3.numerator);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber14);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber13);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber15);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber11);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber12);
      assertNotSame(rationalNumber1, rationalNumber13);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber14);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber15);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber15, rationalNumber11);
      assertNotSame(rationalNumber15, rationalNumber2);
      assertNotSame(rationalNumber15, rationalNumber3);
      assertNotSame(rationalNumber15, rationalNumber13);
      assertNotSame(rationalNumber15, rationalNumber1);
      assertNotSame(rationalNumber15, rationalNumber9);
      assertNotSame(rationalNumber15, rationalNumber4);
      assertNotSame(rationalNumber15, rationalNumber10);
      assertNotSame(rationalNumber15, rationalNumber12);
      assertNotSame(rationalNumber15, rationalNumber5);
      assertNotSame(rationalNumber15, rationalNumber8);
      assertNotSame(rationalNumber15, rationalNumber14);
      assertNotSame(rationalNumber15, rationalNumber7);
      assertNotSame(rationalNumber15, rationalNumber0);
      assertNotSame(rationalNumber15, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber13);
      assertNotSame(rationalNumber3, rationalNumber8);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber14);
      assertNotSame(rationalNumber3, rationalNumber9);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber15);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber10);
      assertNotSame(rationalNumber3, rationalNumber12);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotSame(rationalNumber3, rationalNumber11);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber14));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber12));
      assertFalse(rationalNumber0.equals((Object)rationalNumber13));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(long0 == long9);
      assertFalse(long0 == long10);
      assertFalse(long0 == long1);
      assertFalse(long0 == long4);
      assertFalse(long0 == long2);
      assertFalse(long0 == long5);
      assertFalse(long0 == long7);
      assertFalse(long0 == long8);
      assertFalse(long0 == long3);
      assertFalse(long0 == long6);
      assertFalse(rationalNumber1.equals((Object)rationalNumber11));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber1.equals((Object)rationalNumber12));
      assertFalse(rationalNumber1.equals((Object)rationalNumber13));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber14));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber15.equals((Object)rationalNumber11));
      assertFalse(rationalNumber15.equals((Object)rationalNumber2));
      assertFalse(rationalNumber15.equals((Object)rationalNumber3));
      assertFalse(rationalNumber15.equals((Object)rationalNumber13));
      assertFalse(rationalNumber15.equals((Object)rationalNumber1));
      assertFalse(rationalNumber15.equals((Object)rationalNumber9));
      assertFalse(rationalNumber15.equals((Object)rationalNumber4));
      assertFalse(rationalNumber15.equals((Object)rationalNumber10));
      assertFalse(rationalNumber15.equals((Object)rationalNumber12));
      assertFalse(rationalNumber15.equals((Object)rationalNumber5));
      assertFalse(rationalNumber15.equals((Object)rationalNumber8));
      assertFalse(rationalNumber15.equals((Object)rationalNumber14));
      assertFalse(rationalNumber15.equals((Object)rationalNumber7));
      assertFalse(rationalNumber15.equals((Object)rationalNumber0));
      assertFalse(rationalNumber15.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber13));
      assertFalse(rationalNumber3.equals((Object)rationalNumber8));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber14));
      assertFalse(rationalNumber3.equals((Object)rationalNumber9));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber10));
      assertFalse(rationalNumber3.equals((Object)rationalNumber12));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertFalse(rationalNumber3.equals((Object)rationalNumber11));
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals((-4.6566128730773926E-10), rationalNumber1.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals((-4.656613E-10F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber15.intValue());
      assertEquals(2.147483647E9, rationalNumber15.doubleValue(), 0.01);
      assertEquals(2147483647L, rationalNumber15.longValue());
      assertEquals((short) (-1), rationalNumber15.shortValue());
      assertEquals(2.14748365E9F, rationalNumber15.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber15.byteValue());
      assertEquals((short)1, rationalNumber3.shortValue());
      assertEquals((-2147483647L), rationalNumber3.longValue());
      assertEquals((-2.14748365E9F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((-2.147483647E9), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-2147483647), rationalNumber3.intValue());
      assertEquals((byte)1, rationalNumber3.byteValue());
      assertNotNull(rationalNumber15);
      
      Object object0 = PrivateAccess.callMethod((Class<RationalNumber>) RationalNumber.class, rationalNumber12, "gcd", (Object) rationalNumber5.numerator, (Class<?>) long.class, (Object) rationalNumber10.numerator, (Class<?>) long.class);
      assertEquals((-1), rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(Integer.MIN_VALUE, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(1, rationalNumber10.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber10.numerator);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals((-2147483647), rationalNumber3.numerator);
      assertEquals(1, rationalNumber12.numerator);
      assertEquals((-2703), rationalNumber12.divisor);
      assertEquals(Integer.MAX_VALUE, rationalNumber5.numerator);
      assertEquals(1, rationalNumber5.divisor);
      assertEquals(2147483647L, object0);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber14);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber12);
      assertNotSame(rationalNumber0, rationalNumber13);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber15);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber11);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber1, rationalNumber12);
      assertNotSame(rationalNumber1, rationalNumber13);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber14);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber15);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber10, rationalNumber14);
      assertNotSame(rationalNumber10, rationalNumber12);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertNotSame(rationalNumber10, rationalNumber15);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber11);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber2);
      assertNotSame(rationalNumber10, rationalNumber13);
      assertNotSame(rationalNumber10, rationalNumber1);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber13);
      assertNotSame(rationalNumber3, rationalNumber8);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber14);
      assertNotSame(rationalNumber3, rationalNumber9);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber15);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber10);
      assertNotSame(rationalNumber3, rationalNumber12);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotSame(rationalNumber3, rationalNumber11);
      assertNotSame(rationalNumber12, rationalNumber0);
      assertNotSame(rationalNumber12, rationalNumber4);
      assertNotSame(rationalNumber12, rationalNumber15);
      assertNotSame(rationalNumber12, rationalNumber3);
      assertNotSame(rationalNumber12, rationalNumber2);
      assertNotSame(rationalNumber12, rationalNumber9);
      assertNotSame(rationalNumber12, rationalNumber5);
      assertNotSame(rationalNumber12, rationalNumber14);
      assertNotSame(rationalNumber12, rationalNumber7);
      assertNotSame(rationalNumber12, rationalNumber13);
      assertNotSame(rationalNumber12, rationalNumber1);
      assertNotSame(rationalNumber12, rationalNumber8);
      assertNotSame(rationalNumber12, rationalNumber6);
      assertNotSame(rationalNumber12, rationalNumber11);
      assertNotSame(rationalNumber12, rationalNumber10);
      assertNotSame(rationalNumber5, rationalNumber11);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber13);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber15);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber10);
      assertNotSame(rationalNumber5, rationalNumber12);
      assertNotSame(rationalNumber5, rationalNumber8);
      assertNotSame(rationalNumber5, rationalNumber7);
      assertNotSame(rationalNumber5, rationalNumber9);
      assertNotSame(rationalNumber5, rationalNumber14);
      assertNotSame(rationalNumber5, rationalNumber6);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber11));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber14));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber12));
      assertFalse(rationalNumber0.equals((Object)rationalNumber13));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber15));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(long0 == long9);
      assertFalse(long0 == long10);
      assertFalse(long0 == long1);
      assertFalse(long0 == long4);
      assertFalse(long0 == long2);
      assertFalse(long0 == long5);
      assertFalse(long0 == long7);
      assertFalse(long0 == long8);
      assertFalse(long0 == long3);
      assertFalse(long0 == long6);
      assertFalse(rationalNumber1.equals((Object)rationalNumber11));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber1.equals((Object)rationalNumber12));
      assertFalse(rationalNumber1.equals((Object)rationalNumber13));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber14));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber15));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(long1 == long2);
      assertFalse(long1 == long10);
      assertFalse(long1 == long6);
      assertFalse(long1 == long9);
      assertFalse(long1 == long3);
      assertFalse(long1 == long7);
      assertFalse(long1 == long8);
      assertFalse(long1 == long0);
      assertFalse(long1 == long4);
      assertFalse(long1 == long5);
      assertFalse(object0.equals((Object)long1));
      assertFalse(object0.equals((Object)long2));
      assertFalse(object0.equals((Object)long10));
      assertFalse(object0.equals((Object)long6));
      assertFalse(object0.equals((Object)long9));
      assertFalse(object0.equals((Object)long7));
      assertFalse(object0.equals((Object)long3));
      assertFalse(object0.equals((Object)long5));
      assertFalse(object0.equals((Object)long8));
      assertFalse(object0.equals((Object)long0));
      assertFalse(object0.equals((Object)long4));
      assertFalse(rationalNumber10.equals((Object)rationalNumber14));
      assertFalse(rationalNumber10.equals((Object)rationalNumber12));
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertFalse(rationalNumber10.equals((Object)rationalNumber15));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber11));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertFalse(rationalNumber10.equals((Object)rationalNumber13));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertFalse(long4 == long7);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long8);
      assertFalse(long4 == long10);
      assertFalse(long4 == long2);
      assertFalse(long4 == long5);
      assertFalse(long4 == long9);
      assertFalse(long4 == long1);
      assertFalse(long4 == long6);
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber13));
      assertFalse(rationalNumber3.equals((Object)rationalNumber8));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber14));
      assertFalse(rationalNumber3.equals((Object)rationalNumber9));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber15));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber10));
      assertFalse(rationalNumber3.equals((Object)rationalNumber12));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertFalse(rationalNumber3.equals((Object)rationalNumber11));
      assertFalse(rationalNumber12.equals((Object)rationalNumber0));
      assertFalse(rationalNumber12.equals((Object)rationalNumber4));
      assertFalse(rationalNumber12.equals((Object)rationalNumber15));
      assertFalse(rationalNumber12.equals((Object)rationalNumber3));
      assertFalse(rationalNumber12.equals((Object)rationalNumber2));
      assertFalse(rationalNumber12.equals((Object)rationalNumber9));
      assertFalse(rationalNumber12.equals((Object)rationalNumber5));
      assertFalse(rationalNumber12.equals((Object)rationalNumber14));
      assertFalse(rationalNumber12.equals((Object)rationalNumber7));
      assertFalse(rationalNumber12.equals((Object)rationalNumber13));
      assertFalse(rationalNumber12.equals((Object)rationalNumber1));
      assertFalse(rationalNumber12.equals((Object)rationalNumber8));
      assertFalse(rationalNumber12.equals((Object)rationalNumber6));
      assertFalse(rationalNumber12.equals((Object)rationalNumber11));
      assertFalse(rationalNumber12.equals((Object)rationalNumber10));
      assertFalse(rationalNumber5.equals((Object)rationalNumber11));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber13));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber15));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber10));
      assertFalse(rationalNumber5.equals((Object)rationalNumber12));
      assertFalse(rationalNumber5.equals((Object)rationalNumber8));
      assertFalse(rationalNumber5.equals((Object)rationalNumber7));
      assertFalse(rationalNumber5.equals((Object)rationalNumber9));
      assertFalse(rationalNumber5.equals((Object)rationalNumber14));
      assertFalse(rationalNumber5.equals((Object)rationalNumber6));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertEquals((-1L), rationalNumber0.longValue());
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber0.byteValue());
      assertEquals((-1), rationalNumber0.intValue());
      assertEquals((short) (-1), rationalNumber0.shortValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals((-4.6566128730773926E-10), rationalNumber1.doubleValue(), 0.01);
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals((-4.656613E-10F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(2147483647L, rationalNumber10.longValue());
      assertEquals(2.14748365E9F, rationalNumber10.floatValue(), 0.01F);
      assertEquals(2.147483647E9, rationalNumber10.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber10.byteValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber10.intValue());
      assertEquals((short) (-1), rationalNumber10.shortValue());
      assertEquals((short)1, rationalNumber3.shortValue());
      assertEquals((-2147483647L), rationalNumber3.longValue());
      assertEquals((-2.14748365E9F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((-2.147483647E9), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-2147483647), rationalNumber3.intValue());
      assertEquals((byte)1, rationalNumber3.byteValue());
      assertEquals(0, rationalNumber12.intValue());
      assertEquals((-3.699593044765076E-4), rationalNumber12.doubleValue(), 0.01);
      assertEquals((-3.699593E-4F), rationalNumber12.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber12.longValue());
      assertEquals((short)0, rationalNumber12.shortValue());
      assertEquals((byte)0, rationalNumber12.byteValue());
      assertEquals(Integer.MAX_VALUE, rationalNumber5.intValue());
      assertEquals(2.147483647E9, rationalNumber5.doubleValue(), 0.01);
      assertEquals((short) (-1), rationalNumber5.shortValue());
      assertEquals(2147483647L, rationalNumber5.longValue());
      assertEquals((byte) (-1), rationalNumber5.byteValue());
      assertEquals(2.14748365E9F, rationalNumber5.floatValue(), 0.01F);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-1518);
      RationalNumber rationalNumber0 = new RationalNumber(int0, int0);
      assertEquals((-1518), rationalNumber0.numerator);
      assertEquals((-1518), rationalNumber0.divisor);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertNotNull(rationalNumber0);
      
      String string0 = rationalNumber0.toString();
      assertEquals((-1518), rationalNumber0.numerator);
      assertEquals((-1518), rationalNumber0.divisor);
      assertEquals("1", string0);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertNotNull(string0);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(int0, int0);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertNotNull(rationalNumber1);
      
      long long0 = rationalNumber0.longValue();
      assertEquals((-1518), rationalNumber0.numerator);
      assertEquals((-1518), rationalNumber0.divisor);
      assertEquals(1L, long0);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      
      long long1 = 2147483647L;
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(long1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(long1 == long0);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals(2.147483647E9, rationalNumber2.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, rationalNumber2.intValue());
      assertEquals(2147483647L, rationalNumber2.longValue());
      assertEquals(2.14748365E9F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber2.shortValue());
      assertEquals((byte) (-1), rationalNumber2.byteValue());
      assertNotNull(rationalNumber2);
      
      String string1 = rationalNumber2.toDisplayString();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals("2147483647", string1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(string1, string0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(long1 == long0);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals(2.147483647E9, rationalNumber2.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, rationalNumber2.intValue());
      assertEquals(2147483647L, rationalNumber2.longValue());
      assertEquals(2.14748365E9F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber2.shortValue());
      assertEquals((byte) (-1), rationalNumber2.byteValue());
      assertNotNull(string1);
      
      String string2 = rationalNumber1.toDisplayString();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals("1", string2);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertNotNull(string2);
      
      String string3 = rationalNumber0.toDisplayString();
      assertEquals((-1518), rationalNumber0.numerator);
      assertEquals((-1518), rationalNumber0.divisor);
      assertEquals("1", string3);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertNotNull(string3);
      
      float float0 = rationalNumber2.floatValue();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals(2.14748365E9F, float0, 0.01F);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(long1 == long0);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals(2.147483647E9, rationalNumber2.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, rationalNumber2.intValue());
      assertEquals(2147483647L, rationalNumber2.longValue());
      assertEquals(2.14748365E9F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber2.shortValue());
      assertEquals((byte) (-1), rationalNumber2.byteValue());
      
      long long2 = 0L;
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(long1, long2);
      assertEquals(1, rationalNumber3.numerator);
      assertEquals(0, rationalNumber3.divisor);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber3.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber3.doubleValue(), 0.01);
      assertNotNull(rationalNumber3);
      
      String string4 = rationalNumber2.toDisplayString();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals("2147483647", string4);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals(2.147483647E9, rationalNumber2.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, rationalNumber2.intValue());
      assertEquals(2147483647L, rationalNumber2.longValue());
      assertEquals(2.14748365E9F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber2.shortValue());
      assertEquals((byte) (-1), rationalNumber2.byteValue());
      assertNotNull(string4);
      
      long long3 = 4902L;
      String string5 = rationalNumber1.toDisplayString();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals("1", string5);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertNotNull(string5);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(long2, long3);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(0, rationalNumber4.numerator);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals(0, rationalNumber4.intValue());
      assertEquals(0.0, rationalNumber4.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertNotNull(rationalNumber4);
      
      double double0 = 1348.8076;
      RationalNumber rationalNumber5 = RationalNumber.valueOf(double0);
      assertEquals(3372019, rationalNumber5.numerator);
      assertEquals(2500, rationalNumber5.divisor);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertEquals(1348L, rationalNumber5.longValue());
      assertEquals(1348, rationalNumber5.intValue());
      assertEquals((short)1348, rationalNumber5.shortValue());
      assertEquals(1348.8076F, rationalNumber5.floatValue(), 0.01F);
      assertEquals((byte)68, rationalNumber5.byteValue());
      assertEquals(1348.8076, rationalNumber5.doubleValue(), 0.01);
      assertNotNull(rationalNumber5);
      
      int int1 = rationalNumber1.intValue();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(1, int1);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(rationalNumber0.numerator, rationalNumber1.divisor);
      assertEquals((-1518), rationalNumber0.numerator);
      assertEquals((-1518), rationalNumber0.divisor);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals((-1518), rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertFalse(int0 == int1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals((byte)18, rationalNumber6.byteValue());
      assertEquals((short) (-1518), rationalNumber6.shortValue());
      assertEquals((-1518L), rationalNumber6.longValue());
      assertEquals((-1518.0F), rationalNumber6.floatValue(), 0.01F);
      assertEquals((-1518.0), rationalNumber6.doubleValue(), 0.01);
      assertEquals((-1518), rationalNumber6.intValue());
      assertNotNull(rationalNumber6);
      
      double double1 = rationalNumber2.doubleValue();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals(2.147483647E9, double1, 0.01);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertFalse(int0 == int1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals(2.147483647E9, rationalNumber2.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, rationalNumber2.intValue());
      assertEquals(2147483647L, rationalNumber2.longValue());
      assertEquals(2.14748365E9F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber2.shortValue());
      assertEquals((byte) (-1), rationalNumber2.byteValue());
      
      RationalNumber rationalNumber7 = RationalNumber.valueOf(rationalNumber0.divisor);
      assertEquals((-1518), rationalNumber0.numerator);
      assertEquals((-1518), rationalNumber0.divisor);
      assertEquals((-1518), rationalNumber7.numerator);
      assertEquals(1, rationalNumber7.divisor);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertFalse(int0 == int1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals((-1518.0), rationalNumber7.doubleValue(), 0.01);
      assertEquals((short) (-1518), rationalNumber7.shortValue());
      assertEquals((-1518), rationalNumber7.intValue());
      assertEquals((-1518.0F), rationalNumber7.floatValue(), 0.01F);
      assertEquals((-1518L), rationalNumber7.longValue());
      assertEquals((byte)18, rationalNumber7.byteValue());
      assertNotNull(rationalNumber7);
      
      double double2 = rationalNumber5.doubleValue();
      assertEquals(3372019, rationalNumber5.numerator);
      assertEquals(2500, rationalNumber5.divisor);
      assertEquals(1348.8076, double2, 0.01);
      assertNotSame(rationalNumber5, rationalNumber6);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber7);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber5.equals((Object)rationalNumber6));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber7));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1348L, rationalNumber5.longValue());
      assertEquals(1348, rationalNumber5.intValue());
      assertEquals((short)1348, rationalNumber5.shortValue());
      assertEquals(1348.8076F, rationalNumber5.floatValue(), 0.01F);
      assertEquals((byte)68, rationalNumber5.byteValue());
      assertEquals(1348.8076, rationalNumber5.doubleValue(), 0.01);
      
      float float1 = rationalNumber0.floatValue();
      assertEquals((-1518), rationalNumber0.numerator);
      assertEquals((-1518), rationalNumber0.divisor);
      assertEquals(1.0F, float1, 0.01F);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertFalse(int0 == int1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      
      long long4 = 1L;
      RationalNumber rationalNumber8 = RationalNumber.factoryMethod(int1, long4);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(1, rationalNumber8.numerator);
      assertEquals(1, rationalNumber8.divisor);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber5);
      assertNotSame(rationalNumber8, rationalNumber0);
      assertNotSame(rationalNumber8, rationalNumber7);
      assertNotSame(rationalNumber8, rationalNumber2);
      assertNotSame(rationalNumber8, rationalNumber3);
      assertNotSame(rationalNumber8, rationalNumber4);
      assertNotSame(rationalNumber8, rationalNumber1);
      assertNotSame(rationalNumber8, rationalNumber6);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(long4 == long1);
      assertTrue(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(rationalNumber8.equals((Object)rationalNumber5));
      assertFalse(rationalNumber8.equals((Object)rationalNumber0));
      assertFalse(rationalNumber8.equals((Object)rationalNumber7));
      assertFalse(rationalNumber8.equals((Object)rationalNumber2));
      assertFalse(rationalNumber8.equals((Object)rationalNumber3));
      assertFalse(rationalNumber8.equals((Object)rationalNumber4));
      assertFalse(rationalNumber8.equals((Object)rationalNumber1));
      assertFalse(rationalNumber8.equals((Object)rationalNumber6));
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals((short)1, rationalNumber8.shortValue());
      assertEquals(1L, rationalNumber8.longValue());
      assertEquals((byte)1, rationalNumber8.byteValue());
      assertEquals(1, rationalNumber8.intValue());
      assertEquals(1.0F, rationalNumber8.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber8.doubleValue(), 0.01);
      assertNotNull(rationalNumber8);
      
      RationalNumber rationalNumber9 = RationalNumber.factoryMethod(rationalNumber6.numerator, rationalNumber5.numerator);
      assertEquals((-1518), rationalNumber0.numerator);
      assertEquals((-1518), rationalNumber0.divisor);
      assertEquals(3372019, rationalNumber5.numerator);
      assertEquals(2500, rationalNumber5.divisor);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals((-1518), rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals((-3372019), rationalNumber9.divisor);
      assertEquals(1518, rationalNumber9.numerator);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber5, rationalNumber9);
      assertNotSame(rationalNumber5, rationalNumber6);
      assertNotSame(rationalNumber5, rationalNumber8);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber7);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber8);
      assertNotSame(rationalNumber6, rationalNumber7);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber9);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber5);
      assertNotSame(rationalNumber9, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber2);
      assertNotSame(rationalNumber9, rationalNumber7);
      assertNotSame(rationalNumber9, rationalNumber6);
      assertNotSame(rationalNumber9, rationalNumber1);
      assertNotSame(rationalNumber9, rationalNumber4);
      assertNotSame(rationalNumber9, rationalNumber3);
      assertNotSame(rationalNumber9, rationalNumber8);
      assertFalse(int0 == int1);
      assertEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber5.equals((Object)rationalNumber6));
      assertFalse(rationalNumber5.equals((Object)rationalNumber8));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber7));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber8));
      assertFalse(rationalNumber6.equals((Object)rationalNumber7));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber5));
      assertFalse(rationalNumber9.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber2));
      assertFalse(rationalNumber9.equals((Object)rationalNumber7));
      assertFalse(rationalNumber9.equals((Object)rationalNumber6));
      assertFalse(rationalNumber9.equals((Object)rationalNumber1));
      assertFalse(rationalNumber9.equals((Object)rationalNumber4));
      assertFalse(rationalNumber9.equals((Object)rationalNumber3));
      assertFalse(rationalNumber9.equals((Object)rationalNumber8));
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1348L, rationalNumber5.longValue());
      assertEquals(1348, rationalNumber5.intValue());
      assertEquals((short)1348, rationalNumber5.shortValue());
      assertEquals(1348.8076F, rationalNumber5.floatValue(), 0.01F);
      assertEquals((byte)68, rationalNumber5.byteValue());
      assertEquals(1348.8076, rationalNumber5.doubleValue(), 0.01);
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals((byte)18, rationalNumber6.byteValue());
      assertEquals((short) (-1518), rationalNumber6.shortValue());
      assertEquals((-1518L), rationalNumber6.longValue());
      assertEquals((-1518.0F), rationalNumber6.floatValue(), 0.01F);
      assertEquals((-1518.0), rationalNumber6.doubleValue(), 0.01);
      assertEquals((-1518), rationalNumber6.intValue());
      assertEquals((byte)0, rationalNumber9.byteValue());
      assertEquals((-4.501754E-4F), rationalNumber9.floatValue(), 0.01F);
      assertEquals(0, rationalNumber9.intValue());
      assertEquals(0L, rationalNumber9.longValue());
      assertEquals((short)0, rationalNumber9.shortValue());
      assertEquals((-4.501753993675599E-4), rationalNumber9.doubleValue(), 0.01);
      assertNotNull(rationalNumber9);
      
      RationalNumber rationalNumber10 = rationalNumber4.negate();
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(0, rationalNumber4.numerator);
      assertEquals(0, rationalNumber10.numerator);
      assertEquals(1, rationalNumber10.divisor);
      assertNotSame(rationalNumber4, rationalNumber9);
      assertNotSame(rationalNumber4, rationalNumber6);
      assertNotSame(rationalNumber4, rationalNumber8);
      assertNotSame(rationalNumber4, rationalNumber10);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber4);
      assertNotSame(rationalNumber10, rationalNumber9);
      assertNotSame(rationalNumber10, rationalNumber7);
      assertNotSame(rationalNumber10, rationalNumber6);
      assertNotSame(rationalNumber10, rationalNumber8);
      assertNotSame(rationalNumber10, rationalNumber3);
      assertNotSame(rationalNumber10, rationalNumber1);
      assertNotSame(rationalNumber10, rationalNumber2);
      assertNotSame(rationalNumber10, rationalNumber5);
      assertNotSame(rationalNumber10, rationalNumber0);
      assertFalse(rationalNumber4.equals((Object)rationalNumber9));
      assertFalse(rationalNumber4.equals((Object)rationalNumber6));
      assertFalse(rationalNumber4.equals((Object)rationalNumber8));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber5));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber7));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long4);
      assertFalse(long2 == long3);
      assertFalse(rationalNumber10.equals((Object)rationalNumber4));
      assertFalse(rationalNumber10.equals((Object)rationalNumber9));
      assertFalse(rationalNumber10.equals((Object)rationalNumber7));
      assertFalse(rationalNumber10.equals((Object)rationalNumber6));
      assertFalse(rationalNumber10.equals((Object)rationalNumber8));
      assertFalse(rationalNumber10.equals((Object)rationalNumber3));
      assertFalse(rationalNumber10.equals((Object)rationalNumber1));
      assertFalse(rationalNumber10.equals((Object)rationalNumber2));
      assertFalse(rationalNumber10.equals((Object)rationalNumber5));
      assertFalse(rationalNumber10.equals((Object)rationalNumber0));
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long4);
      assertFalse(long3 == long2);
      assertEquals(0, rationalNumber4.intValue());
      assertEquals(0.0, rationalNumber4.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber4.longValue());
      assertEquals((short)0, rationalNumber4.shortValue());
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals(0.0F, rationalNumber10.floatValue(), 0.01F);
      assertEquals((byte)0, rationalNumber10.byteValue());
      assertEquals((short)0, rationalNumber10.shortValue());
      assertEquals(0, rationalNumber10.intValue());
      assertEquals(0L, rationalNumber10.longValue());
      assertEquals(0.0, rationalNumber10.doubleValue(), 0.01);
      assertNotNull(rationalNumber10);
      
      int int2 = rationalNumber2.intValue();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(Integer.MAX_VALUE, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals(Integer.MAX_VALUE, int2);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber2, rationalNumber9);
      assertNotSame(rationalNumber2, rationalNumber8);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber10);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertFalse(int0 == int1);
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(long1 == long4);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber2.equals((Object)rationalNumber7));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber2.equals((Object)rationalNumber9));
      assertFalse(rationalNumber2.equals((Object)rationalNumber8));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber10));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals(2.147483647E9, rationalNumber2.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, rationalNumber2.intValue());
      assertEquals(2147483647L, rationalNumber2.longValue());
      assertEquals(2.14748365E9F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber2.shortValue());
      assertEquals((byte) (-1), rationalNumber2.byteValue());
      
      double double3 = rationalNumber9.doubleValue();
      assertEquals((-1518), rationalNumber0.numerator);
      assertEquals((-1518), rationalNumber0.divisor);
      assertEquals(3372019, rationalNumber5.numerator);
      assertEquals(2500, rationalNumber5.divisor);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals((-1518), rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals((-3372019), rationalNumber9.divisor);
      assertEquals(1518, rationalNumber9.numerator);
      assertEquals((-4.501753993675599E-4), double3, 0.01);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber5, rationalNumber9);
      assertNotSame(rationalNumber5, rationalNumber6);
      assertNotSame(rationalNumber5, rationalNumber8);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber7);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber10);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber8);
      assertNotSame(rationalNumber6, rationalNumber7);
      assertNotSame(rationalNumber6, rationalNumber10);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber9);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber5);
      assertNotSame(rationalNumber9, rationalNumber10);
      assertNotSame(rationalNumber9, rationalNumber0);
      assertNotSame(rationalNumber9, rationalNumber2);
      assertNotSame(rationalNumber9, rationalNumber7);
      assertNotSame(rationalNumber9, rationalNumber6);
      assertNotSame(rationalNumber9, rationalNumber1);
      assertNotSame(rationalNumber9, rationalNumber4);
      assertNotSame(rationalNumber9, rationalNumber3);
      assertNotSame(rationalNumber9, rationalNumber8);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber5.equals((Object)rationalNumber9));
      assertFalse(rationalNumber5.equals((Object)rationalNumber6));
      assertFalse(rationalNumber5.equals((Object)rationalNumber8));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber7));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber10));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber8));
      assertFalse(rationalNumber6.equals((Object)rationalNumber7));
      assertFalse(rationalNumber6.equals((Object)rationalNumber10));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber9));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber5));
      assertFalse(rationalNumber9.equals((Object)rationalNumber10));
      assertFalse(rationalNumber9.equals((Object)rationalNumber0));
      assertFalse(rationalNumber9.equals((Object)rationalNumber2));
      assertFalse(rationalNumber9.equals((Object)rationalNumber7));
      assertFalse(rationalNumber9.equals((Object)rationalNumber6));
      assertFalse(rationalNumber9.equals((Object)rationalNumber1));
      assertFalse(rationalNumber9.equals((Object)rationalNumber4));
      assertFalse(rationalNumber9.equals((Object)rationalNumber3));
      assertFalse(rationalNumber9.equals((Object)rationalNumber8));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1348L, rationalNumber5.longValue());
      assertEquals(1348, rationalNumber5.intValue());
      assertEquals((short)1348, rationalNumber5.shortValue());
      assertEquals(1348.8076F, rationalNumber5.floatValue(), 0.01F);
      assertEquals((byte)68, rationalNumber5.byteValue());
      assertEquals(1348.8076, rationalNumber5.doubleValue(), 0.01);
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals((byte)18, rationalNumber6.byteValue());
      assertEquals((short) (-1518), rationalNumber6.shortValue());
      assertEquals((-1518L), rationalNumber6.longValue());
      assertEquals((-1518.0F), rationalNumber6.floatValue(), 0.01F);
      assertEquals((-1518.0), rationalNumber6.doubleValue(), 0.01);
      assertEquals((-1518), rationalNumber6.intValue());
      assertEquals((byte)0, rationalNumber9.byteValue());
      assertEquals((-4.501754E-4F), rationalNumber9.floatValue(), 0.01F);
      assertEquals(0, rationalNumber9.intValue());
      assertEquals(0L, rationalNumber9.longValue());
      assertEquals((short)0, rationalNumber9.shortValue());
      assertEquals((-4.501753993675599E-4), rationalNumber9.doubleValue(), 0.01);
      
      RationalNumber rationalNumber11 = rationalNumber6.negate();
      assertEquals((-1518), rationalNumber0.numerator);
      assertEquals((-1518), rationalNumber0.divisor);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals((-1518), rationalNumber6.numerator);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals(1518, rationalNumber11.numerator);
      assertEquals(1, rationalNumber11.divisor);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber8);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber10);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber9);
      assertNotSame(rationalNumber0, rationalNumber11);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber9);
      assertNotSame(rationalNumber1, rationalNumber11);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber8);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber10);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber8);
      assertNotSame(rationalNumber6, rationalNumber7);
      assertNotSame(rationalNumber6, rationalNumber10);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber9);
      assertNotSame(rationalNumber6, rationalNumber11);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber11, rationalNumber7);
      assertNotSame(rationalNumber11, rationalNumber10);
      assertNotSame(rationalNumber11, rationalNumber4);
      assertNotSame(rationalNumber11, rationalNumber5);
      assertNotSame(rationalNumber11, rationalNumber9);
      assertNotSame(rationalNumber11, rationalNumber3);
      assertNotSame(rationalNumber11, rationalNumber8);
      assertNotSame(rationalNumber11, rationalNumber1);
      assertNotSame(rationalNumber11, rationalNumber2);
      assertNotSame(rationalNumber11, rationalNumber0);
      assertNotSame(rationalNumber11, rationalNumber6);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber8));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber10));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber9));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber9));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber8));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber10));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber8));
      assertFalse(rationalNumber6.equals((Object)rationalNumber7));
      assertFalse(rationalNumber6.equals((Object)rationalNumber10));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber9));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber11.equals((Object)rationalNumber7));
      assertFalse(rationalNumber11.equals((Object)rationalNumber10));
      assertFalse(rationalNumber11.equals((Object)rationalNumber4));
      assertFalse(rationalNumber11.equals((Object)rationalNumber5));
      assertFalse(rationalNumber11.equals((Object)rationalNumber9));
      assertFalse(rationalNumber11.equals((Object)rationalNumber3));
      assertFalse(rationalNumber11.equals((Object)rationalNumber8));
      assertFalse(rationalNumber11.equals((Object)rationalNumber1));
      assertFalse(rationalNumber11.equals((Object)rationalNumber2));
      assertFalse(rationalNumber11.equals((Object)rationalNumber0));
      assertFalse(rationalNumber11.equals((Object)rationalNumber6));
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short)1, rationalNumber1.shortValue());
      assertEquals(1, rationalNumber1.intValue());
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber1.byteValue());
      assertEquals((byte)18, rationalNumber6.byteValue());
      assertEquals((short) (-1518), rationalNumber6.shortValue());
      assertEquals((-1518L), rationalNumber6.longValue());
      assertEquals((-1518.0F), rationalNumber6.floatValue(), 0.01F);
      assertEquals((-1518.0), rationalNumber6.doubleValue(), 0.01);
      assertEquals((-1518), rationalNumber6.intValue());
      assertEquals(1518.0F, rationalNumber11.floatValue(), 0.01F);
      assertEquals(1518, rationalNumber11.intValue());
      assertEquals((short)1518, rationalNumber11.shortValue());
      assertEquals(1518L, rationalNumber11.longValue());
      assertEquals((byte) (-18), rationalNumber11.byteValue());
      assertEquals(1518.0, rationalNumber11.doubleValue(), 0.01);
      assertNotNull(rationalNumber11);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-341.8078471183859);
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertEquals((-7727250), rationalNumber0.numerator);
      assertEquals(22607, rationalNumber0.divisor);
      assertEquals((short) (-341), rationalNumber0.shortValue());
      assertEquals((-341.80786F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-341), rationalNumber0.intValue());
      assertEquals((byte) (-85), rationalNumber0.byteValue());
      assertEquals((-341.8078471269961), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-341L), rationalNumber0.longValue());
      assertNotNull(rationalNumber0);
      
      long long0 = (-151L);
      double double1 = 5.2324935495562386E-8;
      RationalNumber rationalNumber1 = RationalNumber.valueOf(double1);
      assertEquals(1, rationalNumber1.numerator);
      assertEquals(19111347, rationalNumber1.divisor);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(5.2324932E-8F, rationalNumber1.floatValue(), 0.01F);
      assertEquals((short)0, rationalNumber1.shortValue());
      assertEquals((byte)0, rationalNumber1.byteValue());
      assertEquals(0, rationalNumber1.intValue());
      assertEquals(5.232493554745252E-8, rationalNumber1.doubleValue(), 0.01);
      assertNotNull(rationalNumber1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 1.0;
      RationalNumber rationalNumber0 = RationalNumber.valueOf(double0);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertNotNull(rationalNumber0);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1), rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((-1.0), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals((-1.0F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber1.shortValue());
      assertEquals((-1L), rationalNumber1.longValue());
      assertEquals((-1), rationalNumber1.intValue());
      assertNotNull(rationalNumber1);
      
      String string0 = rationalNumber0.toString();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("1", string0);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertNotNull(string0);
      
      String string1 = rationalNumber0.toString();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("1", string1);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(string1, string0);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertNotNull(string1);
      
      double double1 = (-1.0);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(double1);
      assertEquals((-1), rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertEquals((-1L), rationalNumber2.longValue());
      assertEquals((short) (-1), rationalNumber2.shortValue());
      assertEquals((-1), rationalNumber2.intValue());
      assertEquals((byte) (-1), rationalNumber2.byteValue());
      assertEquals((-1.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-1.0), rationalNumber2.doubleValue(), 0.01);
      assertNotNull(rationalNumber2);
      
      String string2 = rationalNumber2.toString();
      assertEquals((-1), rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals("-1", string2);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1L), rationalNumber2.longValue());
      assertEquals((short) (-1), rationalNumber2.shortValue());
      assertEquals((-1), rationalNumber2.intValue());
      assertEquals((byte) (-1), rationalNumber2.byteValue());
      assertEquals((-1.0F), rationalNumber2.floatValue(), 0.01F);
      assertEquals((-1.0), rationalNumber2.doubleValue(), 0.01);
      assertNotNull(string2);
      
      double double2 = rationalNumber0.doubleValue();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1.0, double2, 0.01);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(rationalNumber1.numerator);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1), rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals((-1), rationalNumber3.numerator);
      assertEquals(1, rationalNumber3.divisor);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((-1.0), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals((-1.0F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber1.shortValue());
      assertEquals((-1L), rationalNumber1.longValue());
      assertEquals((-1), rationalNumber1.intValue());
      assertEquals((-1), rationalNumber3.intValue());
      assertEquals((-1L), rationalNumber3.longValue());
      assertEquals((short) (-1), rationalNumber3.shortValue());
      assertEquals((byte) (-1), rationalNumber3.byteValue());
      assertEquals((-1.0F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((-1.0), rationalNumber3.doubleValue(), 0.01);
      assertNotNull(rationalNumber3);
      
      int int0 = rationalNumber1.intValue();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1), rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals((-1), int0);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((-1.0), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals((-1.0F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber1.shortValue());
      assertEquals((-1L), rationalNumber1.longValue());
      assertEquals((-1), rationalNumber1.intValue());
      
      RationalNumber rationalNumber4 = rationalNumber1.negate();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1), rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber4.numerator);
      assertEquals(1, rationalNumber4.divisor);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((-1.0), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals((-1.0F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber1.shortValue());
      assertEquals((-1L), rationalNumber1.longValue());
      assertEquals((-1), rationalNumber1.intValue());
      assertEquals((short)1, rationalNumber4.shortValue());
      assertEquals((byte)1, rationalNumber4.byteValue());
      assertEquals(1.0, rationalNumber4.doubleValue(), 0.01);
      assertEquals(1, rationalNumber4.intValue());
      assertEquals(1L, rationalNumber4.longValue());
      assertEquals(1.0F, rationalNumber4.floatValue(), 0.01F);
      assertNotNull(rationalNumber4);
      
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(rationalNumber0.divisor, rationalNumber4.divisor);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1), rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1, rationalNumber4.numerator);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(1, rationalNumber5.divisor);
      assertEquals(1, rationalNumber5.numerator);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber5);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((-1.0), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals((-1.0F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber1.shortValue());
      assertEquals((-1L), rationalNumber1.longValue());
      assertEquals((-1), rationalNumber1.intValue());
      assertEquals((short)1, rationalNumber4.shortValue());
      assertEquals((byte)1, rationalNumber4.byteValue());
      assertEquals(1.0, rationalNumber4.doubleValue(), 0.01);
      assertEquals(1, rationalNumber4.intValue());
      assertEquals(1L, rationalNumber4.longValue());
      assertEquals(1.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber5.byteValue());
      assertEquals(1, rationalNumber5.intValue());
      assertEquals((short)1, rationalNumber5.shortValue());
      assertEquals(1L, rationalNumber5.longValue());
      assertEquals(1.0F, rationalNumber5.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber5.doubleValue(), 0.01);
      assertNotNull(rationalNumber5);
      
      RationalNumber rationalNumber6 = rationalNumber3.negate();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1), rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals((-1), rationalNumber3.numerator);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(1, rationalNumber6.divisor);
      assertEquals(1, rationalNumber6.numerator);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((-1.0), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals((-1.0F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber1.shortValue());
      assertEquals((-1L), rationalNumber1.longValue());
      assertEquals((-1), rationalNumber1.intValue());
      assertEquals((-1), rationalNumber3.intValue());
      assertEquals((-1L), rationalNumber3.longValue());
      assertEquals((short) (-1), rationalNumber3.shortValue());
      assertEquals((byte) (-1), rationalNumber3.byteValue());
      assertEquals((-1.0F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((-1.0), rationalNumber3.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber6.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber6.byteValue());
      assertEquals(1.0, rationalNumber6.doubleValue(), 0.01);
      assertEquals(1L, rationalNumber6.longValue());
      assertEquals(1, rationalNumber6.intValue());
      assertEquals((short)1, rationalNumber6.shortValue());
      assertNotNull(rationalNumber6);
      
      long long0 = 0L;
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(rationalNumber3.numerator, long0);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1), rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals((-1), rationalNumber3.numerator);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(1, rationalNumber7.numerator);
      assertEquals(0, rationalNumber7.divisor);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((-1.0), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals((-1.0F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber1.shortValue());
      assertEquals((-1L), rationalNumber1.longValue());
      assertEquals((-1), rationalNumber1.intValue());
      assertEquals((-1), rationalNumber3.intValue());
      assertEquals((-1L), rationalNumber3.longValue());
      assertEquals((short) (-1), rationalNumber3.shortValue());
      assertEquals((byte) (-1), rationalNumber3.byteValue());
      assertEquals((-1.0F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((-1.0), rationalNumber3.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber7.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber7.floatValue(), 0.01F);
      assertNotNull(rationalNumber7);
      
      String string3 = rationalNumber7.toString();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1), rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals((-1), rationalNumber3.numerator);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(1, rationalNumber7.numerator);
      assertEquals(0, rationalNumber7.divisor);
      assertEquals("Invalid rational (1/0)", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((-1.0), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals((-1.0F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber1.shortValue());
      assertEquals((-1L), rationalNumber1.longValue());
      assertEquals((-1), rationalNumber1.intValue());
      assertEquals((-1), rationalNumber3.intValue());
      assertEquals((-1L), rationalNumber3.longValue());
      assertEquals((short) (-1), rationalNumber3.shortValue());
      assertEquals((byte) (-1), rationalNumber3.byteValue());
      assertEquals((-1.0F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((-1.0), rationalNumber3.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber7.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber7.floatValue(), 0.01F);
      assertNotNull(string3);
      
      String string4 = rationalNumber7.toString();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1), rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals((-1), rationalNumber3.numerator);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(1, rationalNumber7.numerator);
      assertEquals(0, rationalNumber7.divisor);
      assertEquals("Invalid rational (1/0)", string4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber7);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber6);
      assertNotSame(rationalNumber1, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber4));
      assertFalse(rationalNumber1.equals((Object)rationalNumber7));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber6));
      assertFalse(rationalNumber1.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber7));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((-1.0), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals((-1.0F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber1.shortValue());
      assertEquals((-1L), rationalNumber1.longValue());
      assertEquals((-1), rationalNumber1.intValue());
      assertEquals((-1), rationalNumber3.intValue());
      assertEquals((-1L), rationalNumber3.longValue());
      assertEquals((short) (-1), rationalNumber3.shortValue());
      assertEquals((byte) (-1), rationalNumber3.byteValue());
      assertEquals((-1.0F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((-1.0), rationalNumber3.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber7.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber7.floatValue(), 0.01F);
      assertNotNull(string4);
      
      String string5 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("1", string5);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber7));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        rationalNumber7.intValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-1L);
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(long1, long1);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertFalse(long1 == long0);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotNull(rationalNumber0);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("1", string0);
      assertFalse(long1 == long0);
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertNotNull(string0);
      
      double double0 = 2.147483646788381E9;
      RationalNumber rationalNumber1 = RationalNumber.valueOf(double0);
      assertEquals(Integer.MAX_VALUE, rationalNumber1.numerator);
      assertEquals(1, rationalNumber1.divisor);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals(2147483647L, rationalNumber1.longValue());
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals(2.14748365E9F, rationalNumber1.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, rationalNumber1.intValue());
      assertEquals(2.147483647E9, rationalNumber1.doubleValue(), 0.01);
      assertEquals((short) (-1), rationalNumber1.shortValue());
      assertNotNull(rationalNumber1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 1841L;
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(long0, long0);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertNotNull(rationalNumber0);
      
      double double0 = (-5231.75098488806);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(double0);
      assertEquals((-57104562), rationalNumber1.numerator);
      assertEquals(10915, rationalNumber1.divisor);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertEquals((-5231), rationalNumber1.intValue());
      assertEquals((-5231.750984883189), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-111), rationalNumber1.byteValue());
      assertEquals((-5231.751F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-5231L), rationalNumber1.longValue());
      assertEquals((short) (-5231), rationalNumber1.shortValue());
      assertNotNull(rationalNumber1);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(long0, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1841, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1841.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)49, rationalNumber2.byteValue());
      assertEquals((short)1841, rationalNumber2.shortValue());
      assertEquals(1841, rationalNumber2.intValue());
      assertEquals(1841L, rationalNumber2.longValue());
      assertEquals(1841.0, rationalNumber2.doubleValue(), 0.01);
      assertNotNull(rationalNumber2);
      
      RationalNumber rationalNumber3 = rationalNumber2.negate();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1841, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-1841), rationalNumber3.numerator);
      assertEquals(1, rationalNumber3.divisor);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1841.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)49, rationalNumber2.byteValue());
      assertEquals((short)1841, rationalNumber2.shortValue());
      assertEquals(1841, rationalNumber2.intValue());
      assertEquals(1841L, rationalNumber2.longValue());
      assertEquals(1841.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals((-1841.0), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-1841.0F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((byte) (-49), rationalNumber3.byteValue());
      assertEquals((short) (-1841), rationalNumber3.shortValue());
      assertEquals((-1841), rationalNumber3.intValue());
      assertEquals((-1841L), rationalNumber3.longValue());
      assertNotNull(rationalNumber3);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(rationalNumber1.divisor, rationalNumber2.divisor);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-57104562), rationalNumber1.numerator);
      assertEquals(10915, rationalNumber1.divisor);
      assertEquals(1841, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals(1, rationalNumber4.divisor);
      assertEquals(10915, rationalNumber4.numerator);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber4);
      assertNotSame(rationalNumber1, rationalNumber0);
      assertNotSame(rationalNumber1, rationalNumber3);
      assertNotSame(rationalNumber1, rationalNumber2);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber4, rationalNumber3);
      assertNotSame(rationalNumber4, rationalNumber2);
      assertNotSame(rationalNumber4, rationalNumber0);
      assertNotSame(rationalNumber4, rationalNumber1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber0));
      assertFalse(rationalNumber1.equals((Object)rationalNumber3));
      assertFalse(rationalNumber1.equals((Object)rationalNumber2));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber4.equals((Object)rationalNumber3));
      assertFalse(rationalNumber4.equals((Object)rationalNumber2));
      assertFalse(rationalNumber4.equals((Object)rationalNumber0));
      assertFalse(rationalNumber4.equals((Object)rationalNumber1));
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals((-5231), rationalNumber1.intValue());
      assertEquals((-5231.750984883189), rationalNumber1.doubleValue(), 0.01);
      assertEquals((byte) (-111), rationalNumber1.byteValue());
      assertEquals((-5231.751F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-5231L), rationalNumber1.longValue());
      assertEquals((short) (-5231), rationalNumber1.shortValue());
      assertEquals(1841.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)49, rationalNumber2.byteValue());
      assertEquals((short)1841, rationalNumber2.shortValue());
      assertEquals(1841, rationalNumber2.intValue());
      assertEquals(1841L, rationalNumber2.longValue());
      assertEquals(1841.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals(10915.0F, rationalNumber4.floatValue(), 0.01F);
      assertEquals(10915.0, rationalNumber4.doubleValue(), 0.01);
      assertEquals(10915L, rationalNumber4.longValue());
      assertEquals(10915, rationalNumber4.intValue());
      assertEquals((byte) (-93), rationalNumber4.byteValue());
      assertEquals((short)10915, rationalNumber4.shortValue());
      assertNotNull(rationalNumber4);
      
      long long1 = (-956L);
      long long2 = 2048L;
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(long2, rationalNumber3.numerator);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1841, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-1841), rationalNumber3.numerator);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals((-2048), rationalNumber5.numerator);
      assertEquals(1841, rationalNumber5.divisor);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber4);
      assertNotSame(rationalNumber5, rationalNumber2);
      assertNotSame(rationalNumber5, rationalNumber3);
      assertNotSame(rationalNumber5, rationalNumber1);
      assertNotSame(rationalNumber5, rationalNumber0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(rationalNumber5.equals((Object)rationalNumber4));
      assertFalse(rationalNumber5.equals((Object)rationalNumber2));
      assertFalse(rationalNumber5.equals((Object)rationalNumber3));
      assertFalse(rationalNumber5.equals((Object)rationalNumber1));
      assertFalse(rationalNumber5.equals((Object)rationalNumber0));
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1841.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)49, rationalNumber2.byteValue());
      assertEquals((short)1841, rationalNumber2.shortValue());
      assertEquals(1841, rationalNumber2.intValue());
      assertEquals(1841L, rationalNumber2.longValue());
      assertEquals(1841.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals((-1841.0), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-1841.0F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((byte) (-49), rationalNumber3.byteValue());
      assertEquals((short) (-1841), rationalNumber3.shortValue());
      assertEquals((-1841), rationalNumber3.intValue());
      assertEquals((-1841L), rationalNumber3.longValue());
      assertEquals((byte) (-1), rationalNumber5.byteValue());
      assertEquals((short) (-1), rationalNumber5.shortValue());
      assertEquals((-1.1124389F), rationalNumber5.floatValue(), 0.01F);
      assertEquals((-1L), rationalNumber5.longValue());
      assertEquals((-1), rationalNumber5.intValue());
      assertEquals((-1.1124388919065724), rationalNumber5.doubleValue(), 0.01);
      assertNotNull(rationalNumber5);
      
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(rationalNumber2.numerator, long1);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1841, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-956), rationalNumber6.divisor);
      assertEquals(1841, rationalNumber6.numerator);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1841.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)49, rationalNumber2.byteValue());
      assertEquals((short)1841, rationalNumber2.shortValue());
      assertEquals(1841, rationalNumber2.intValue());
      assertEquals(1841L, rationalNumber2.longValue());
      assertEquals(1841.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals((-1.9257322175732217), rationalNumber6.doubleValue(), 0.01);
      assertEquals((-1L), rationalNumber6.longValue());
      assertEquals((-1.9257323F), rationalNumber6.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber6.byteValue());
      assertEquals((-1), rationalNumber6.intValue());
      assertEquals((short) (-1), rationalNumber6.shortValue());
      assertNotNull(rationalNumber6);
      
      long long3 = rationalNumber6.longValue();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1841, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-956), rationalNumber6.divisor);
      assertEquals(1841, rationalNumber6.numerator);
      assertEquals((-1L), long3);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber1);
      assertNotSame(rationalNumber6, rationalNumber2);
      assertNotSame(rationalNumber6, rationalNumber5);
      assertNotSame(rationalNumber6, rationalNumber3);
      assertNotSame(rationalNumber6, rationalNumber0);
      assertNotSame(rationalNumber6, rationalNumber4);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(rationalNumber6.equals((Object)rationalNumber1));
      assertFalse(rationalNumber6.equals((Object)rationalNumber2));
      assertFalse(rationalNumber6.equals((Object)rationalNumber5));
      assertFalse(rationalNumber6.equals((Object)rationalNumber3));
      assertFalse(rationalNumber6.equals((Object)rationalNumber0));
      assertFalse(rationalNumber6.equals((Object)rationalNumber4));
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1841.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)49, rationalNumber2.byteValue());
      assertEquals((short)1841, rationalNumber2.shortValue());
      assertEquals(1841, rationalNumber2.intValue());
      assertEquals(1841L, rationalNumber2.longValue());
      assertEquals(1841.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals((-1.9257322175732217), rationalNumber6.doubleValue(), 0.01);
      assertEquals((-1L), rationalNumber6.longValue());
      assertEquals((-1.9257323F), rationalNumber6.floatValue(), 0.01F);
      assertEquals((byte) (-1), rationalNumber6.byteValue());
      assertEquals((-1), rationalNumber6.intValue());
      assertEquals((short) (-1), rationalNumber6.shortValue());
      
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(rationalNumber3.divisor, long2);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1841, rationalNumber2.numerator);
      assertEquals(1, rationalNumber2.divisor);
      assertEquals((-1841), rationalNumber3.numerator);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(1, rationalNumber7.numerator);
      assertEquals(2048, rationalNumber7.divisor);
      assertNotSame(rationalNumber0, rationalNumber1);
      assertNotSame(rationalNumber0, rationalNumber7);
      assertNotSame(rationalNumber0, rationalNumber2);
      assertNotSame(rationalNumber0, rationalNumber6);
      assertNotSame(rationalNumber0, rationalNumber5);
      assertNotSame(rationalNumber0, rationalNumber3);
      assertNotSame(rationalNumber0, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber0);
      assertNotSame(rationalNumber2, rationalNumber7);
      assertNotSame(rationalNumber2, rationalNumber6);
      assertNotSame(rationalNumber2, rationalNumber4);
      assertNotSame(rationalNumber2, rationalNumber3);
      assertNotSame(rationalNumber2, rationalNumber1);
      assertNotSame(rationalNumber2, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber4);
      assertNotSame(rationalNumber3, rationalNumber6);
      assertNotSame(rationalNumber3, rationalNumber2);
      assertNotSame(rationalNumber3, rationalNumber0);
      assertNotSame(rationalNumber3, rationalNumber5);
      assertNotSame(rationalNumber3, rationalNumber1);
      assertNotSame(rationalNumber3, rationalNumber7);
      assertNotSame(rationalNumber7, rationalNumber6);
      assertNotSame(rationalNumber7, rationalNumber5);
      assertNotSame(rationalNumber7, rationalNumber4);
      assertNotSame(rationalNumber7, rationalNumber0);
      assertNotSame(rationalNumber7, rationalNumber2);
      assertNotSame(rationalNumber7, rationalNumber1);
      assertNotSame(rationalNumber7, rationalNumber3);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(rationalNumber0.equals((Object)rationalNumber1));
      assertFalse(rationalNumber0.equals((Object)rationalNumber2));
      assertFalse(rationalNumber0.equals((Object)rationalNumber6));
      assertFalse(rationalNumber0.equals((Object)rationalNumber5));
      assertFalse(rationalNumber0.equals((Object)rationalNumber3));
      assertFalse(rationalNumber0.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber0));
      assertFalse(rationalNumber2.equals((Object)rationalNumber6));
      assertFalse(rationalNumber2.equals((Object)rationalNumber4));
      assertFalse(rationalNumber2.equals((Object)rationalNumber3));
      assertFalse(rationalNumber2.equals((Object)rationalNumber1));
      assertFalse(rationalNumber2.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber4));
      assertFalse(rationalNumber3.equals((Object)rationalNumber6));
      assertFalse(rationalNumber3.equals((Object)rationalNumber2));
      assertFalse(rationalNumber3.equals((Object)rationalNumber0));
      assertFalse(rationalNumber3.equals((Object)rationalNumber5));
      assertFalse(rationalNumber3.equals((Object)rationalNumber1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(rationalNumber7.equals((Object)rationalNumber6));
      assertFalse(rationalNumber7.equals((Object)rationalNumber5));
      assertFalse(rationalNumber7.equals((Object)rationalNumber4));
      assertFalse(rationalNumber7.equals((Object)rationalNumber0));
      assertFalse(rationalNumber7.equals((Object)rationalNumber2));
      assertFalse(rationalNumber7.equals((Object)rationalNumber1));
      assertFalse(rationalNumber7.equals((Object)rationalNumber3));
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((byte)1, rationalNumber0.byteValue());
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((short)1, rationalNumber0.shortValue());
      assertEquals(1L, rationalNumber0.longValue());
      assertEquals(1841.0F, rationalNumber2.floatValue(), 0.01F);
      assertEquals((byte)49, rationalNumber2.byteValue());
      assertEquals((short)1841, rationalNumber2.shortValue());
      assertEquals(1841, rationalNumber2.intValue());
      assertEquals(1841L, rationalNumber2.longValue());
      assertEquals(1841.0, rationalNumber2.doubleValue(), 0.01);
      assertEquals((-1841.0), rationalNumber3.doubleValue(), 0.01);
      assertEquals((-1841.0F), rationalNumber3.floatValue(), 0.01F);
      assertEquals((byte) (-49), rationalNumber3.byteValue());
      assertEquals((short) (-1841), rationalNumber3.shortValue());
      assertEquals((-1841), rationalNumber3.intValue());
      assertEquals((-1841L), rationalNumber3.longValue());
      assertEquals(0L, rationalNumber7.longValue());
      assertEquals((short)0, rationalNumber7.shortValue());
      assertEquals((byte)0, rationalNumber7.byteValue());
      assertEquals(4.8828125E-4F, rationalNumber7.floatValue(), 0.01F);
      assertEquals(4.8828125E-4, rationalNumber7.doubleValue(), 0.01);
      assertEquals(0, rationalNumber7.intValue());
      assertNotNull(rationalNumber7);
  }
}
