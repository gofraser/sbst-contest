/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:06:31 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MinuitParameter;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnGlobalCorrelationCoeff;
import org.freehep.math.minuit.MnMachinePrecision;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnUserParameterState_ESTest extends MnUserParameterState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 2.0;
      doubleArray0[0] = double0;
      double double1 = (-263.69027111817024);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      String string0 = "UN|,s`.k=lQILA";
      String string1 = "";
      mnUserParameters0.add(string1, doubleArray0[3]);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      mnUserParameters0.add(string0, doubleArray0[3], doubleArray0[0], doubleArray0[0], doubleArray0[1]);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setLowerLimit(string0, double1);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 2.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      String string0 = "UN|,s`.k=lQILA";
      String string1 = "";
      mnUserParameters0.add(string1, doubleArray0[3]);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      mnUserParameters0.add(string0, doubleArray0[3], doubleArray0[0], doubleArray0[0], double0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setLowerLimit(string0, double0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      mnUserParameterState0.fix(int0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int1 = 1;
      mnUserParameterState0.setUpperLimit(int1, doubleArray0[0]);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 1276.767425;
      doubleArray0[0] = double0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {1276.767425, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      mnUserParameterState0.setLimits(int0, doubleArray0[3], doubleArray0[0]);
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {1276.767425, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 1.0;
      int int0 = 4;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setLimits(int0, double0, (double) int0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 4;
      int int1 = 0;
      int int2 = mnUserParameterState0.intOfExt(int1);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, int2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      mnUserParameterState0.fix(int2);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      mnUserParameterState0.setValue(int0, doubleArray0[0]);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "3C=";
      double double0 = 947.844701448;
      mnUserParameterState0.add(string0, double0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      String string1 = "";
      double double1 = 1284.3143777349;
      mnUserParameterState0.add(string1, double0, double0, double1, double0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotEquals(double0, double1, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(string1, string0);
      
      int int0 = mnUserParameterState0.index(string1);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      mnUserParameterState0.setValue(int0, (double) int0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "ZRj+JPtG&.`Gn";
      mnUserParameterState0.add(string0, (double) int0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      
      String string1 = "u+0<85p'";
      mnUserParameterState0.add(string1, (double) int0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      mnUserParameterState0.release(string1);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 3299.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      String string0 = "";
      mnUserParameterState0.add(string0, doubleArray0[0], (double) int0, double1, double0);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      int int0 = (-1221);
      String string0 = "@hi)&Rvf?-p,>;?UqF";
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        mnUserParameterState0.add(string0, double0, (double) int0, double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min == max
         //
         verifyException("org.freehep.math.minuit.MinuitParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      String string0 = "";
      double double0 = 3294.38;
      mnUserParameterState0.add(string0, (double) int0, double0);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "";
      mnUserParameterState0.add(string0, doubleArray0[3]);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      mnUserParameterState0.setUpperLimit(string0, doubleArray0[1]);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      mnUserParameterState0.setError(int0, doubleArray0[3]);
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      String string0 = "";
      mnUserParameterState0.add(string0, doubleArray0[3], (double) int0, doubleArray0[3], double0);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      mnUserParameterState0.fix(string0);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "m-&";
      mnUserParameters0.add(string0, doubleArray0[0], doubleArray0[0]);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      mnUserParameters0.fix(string0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      mnUserParameterState0.setValue(string0, doubleArray0[3]);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 1242.11671;
      doubleArray0[0] = double0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "";
      mnUserParameterState0.add(string0, doubleArray0[1]);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {1242.11671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      mnUserParameterState0.setLimits(string0, doubleArray0[0], doubleArray0[6]);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {1242.11671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      int int0 = mnUserParameterState0.variableParameters();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "m-&";
      double double0 = 894.70210563;
      mnUserParameters0.add(string0, double0, doubleArray0[0]);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = mnUserParameterState0.value(string0);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(894.70210563, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "";
      double double0 = 0.0;
      mnUserParameterState0.add(string0, double0, double0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      
      int int0 = 0;
      double double1 = mnUserParameterState0.value(int0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 4049.32273147;
      doubleArray0[1] = double0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 4049.32273147, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 4049.32273147, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      double double1 = mnUserParameterState0.value(int0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(4049.32273147, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 4049.32273147, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      double[] doubleArray1 = mnUserParameterState0.params();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnUserParameters mnUserParameters0 = mnUserParameterState0.parameters();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      MnUserParameters mnUserParameters0 = mnUserParameterState0.parameters();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameters0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      mnUserParameterState0.setUpperLimit(int0, (double) int0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MinuitParameter minuitParameter0 = mnUserParameterState0.parameter(int0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(minuitParameter0.hasLimits());
      assertEquals(1, minuitParameter0.number());
      assertFalse(minuitParameter0.isFixed());
      assertEquals(0.0, minuitParameter0.value(), 0.01);
      assertTrue(minuitParameter0.hasUpperLimit());
      assertEquals(0.0, minuitParameter0.error(), 0.01);
      assertFalse(minuitParameter0.isConst());
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertFalse(minuitParameter0.hasLowerLimit());
      assertEquals("p1", minuitParameter0.name());
      assertEquals(1.0, minuitParameter0.upperLimit(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(minuitParameter0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      mnUserParameterState0.fix(int0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MinuitParameter minuitParameter0 = mnUserParameterState0.parameter(int0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertEquals(0.0, minuitParameter0.value(), 0.01);
      assertFalse(minuitParameter0.hasUpperLimit());
      assertTrue(minuitParameter0.isFixed());
      assertFalse(minuitParameter0.isConst());
      assertFalse(minuitParameter0.hasLowerLimit());
      assertFalse(minuitParameter0.hasLimits());
      assertEquals(1, minuitParameter0.number());
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertEquals("p1", minuitParameter0.name());
      assertEquals(0.0, minuitParameter0.error(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(minuitParameter0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "expected distance to the minimum (edm): ";
      mnUserParameterState0.add(string0, doubleArray0[0]);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = mnUserParameterState0.index(string0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, int0);
      
      MinuitParameter minuitParameter0 = mnUserParameterState0.parameter(int0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(minuitParameter0.hasLimits());
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertEquals(0.0, minuitParameter0.value(), 0.01);
      assertEquals(0.0, minuitParameter0.error(), 0.01);
      assertEquals(0, minuitParameter0.number());
      assertFalse(minuitParameter0.isFixed());
      assertFalse(minuitParameter0.hasLowerLimit());
      assertTrue(minuitParameter0.isConst());
      assertFalse(minuitParameter0.hasUpperLimit());
      assertEquals("expected distance to the minimum (edm): ", minuitParameter0.name());
      assertNotNull(minuitParameter0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1718.5);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      mnUserParameterState0.setUpperLimit(int0, double0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MinuitParameter minuitParameter0 = mnUserParameterState0.parameter(int0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals("p1", minuitParameter0.name());
      assertEquals((-1718.5), minuitParameter0.upperLimit(), 0.01);
      assertFalse(minuitParameter0.hasLowerLimit());
      assertFalse(minuitParameter0.isConst());
      assertEquals(0.0, minuitParameter0.value(), 0.01);
      assertTrue(minuitParameter0.hasUpperLimit());
      assertEquals(0.0, minuitParameter0.error(), 0.01);
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertFalse(minuitParameter0.isFixed());
      assertTrue(minuitParameter0.hasLimits());
      assertEquals(1, minuitParameter0.number());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(minuitParameter0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      mnUserParameterState0.setLowerLimit(int0, doubleArray0[2]);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MinuitParameter minuitParameter0 = mnUserParameterState0.parameter(int0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertEquals("p1", minuitParameter0.name());
      assertFalse(minuitParameter0.hasUpperLimit());
      assertTrue(minuitParameter0.hasLimits());
      assertFalse(minuitParameter0.isFixed());
      assertEquals(0.0, minuitParameter0.error(), 0.01);
      assertTrue(minuitParameter0.hasLowerLimit());
      assertFalse(minuitParameter0.isConst());
      assertEquals(1, minuitParameter0.number());
      assertEquals(0.0, minuitParameter0.value(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(minuitParameter0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1758.0887002282873;
      doubleArray0[0] = double0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertArrayEquals(new double[] {1758.0887002282873, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      MinuitParameter minuitParameter0 = mnUserParameterState0.parameter(int0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(minuitParameter0.hasUpperLimit());
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertFalse(minuitParameter0.isFixed());
      assertFalse(minuitParameter0.hasLowerLimit());
      assertEquals(0, minuitParameter0.number());
      assertFalse(minuitParameter0.hasLimits());
      assertEquals("p0", minuitParameter0.name());
      assertEquals(1758.0887002282873, minuitParameter0.value(), 0.01);
      assertFalse(minuitParameter0.isConst());
      assertEquals(1758.0887002282873, minuitParameter0.error(), 0.01);
      assertArrayEquals(new double[] {1758.0887002282873, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(minuitParameter0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1775.0);
      doubleArray0[0] = double0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {(-1775.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      MinuitParameter minuitParameter0 = mnUserParameterState0.parameter(int0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(minuitParameter0.isConst());
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertEquals((-1775.0), minuitParameter0.value(), 0.01);
      assertEquals((-1775.0), minuitParameter0.error(), 0.01);
      assertFalse(minuitParameter0.hasLowerLimit());
      assertFalse(minuitParameter0.hasUpperLimit());
      assertEquals("p0", minuitParameter0.name());
      assertFalse(minuitParameter0.hasLimits());
      assertEquals(0, minuitParameter0.number());
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertFalse(minuitParameter0.isFixed());
      assertArrayEquals(new double[] {(-1775.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(minuitParameter0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      int int1 = 2618;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, int0, mnUserTransformation0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(2618, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mnUserParameterState0);
      
      int int2 = mnUserParameterState0.nfcn();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(2618, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2618, int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "";
      mnUserParameterState0.add(string0, doubleArray0[3]);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int int0 = 0;
      String string1 = mnUserParameterState0.name(int0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "3C=";
      double double0 = 947.844701448;
      mnUserParameterState0.add(string0, double0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      List<MinuitParameter> list0 = mnUserParameterState0.minuitParameters();
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      boolean boolean0 = mnUserParameterState0.isValid();
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "3C=";
      double double0 = 947.844701448;
      double double1 = 1284.3143777349;
      mnUserParameterState0.add(string0, double0, double0, double1, double0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      List<Double> list0 = mnUserParameterState0.intParameters();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      double double0 = mnUserParameterState0.int2ext(int0, int0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 4049.32273147;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      double double1 = mnUserParameterState0.int2ext(int0, double0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(4049.32273147, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      boolean boolean0 = true;
      PrivateAccess.setVariable((Class<MnUserParameterState>) MnUserParameterState.class, mnUserParameterState0, "theGCCValid", (Object) boolean0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      
      boolean boolean1 = mnUserParameterState0.hasGlobalCC();
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      boolean boolean0 = mnUserParameterState0.hasCovariance();
      assertEquals(2, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = mnUserParameterState0.globalCC();
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnGlobalCorrelationCoeff0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      int int1 = mnUserParameterState0.extOfInt(int0);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      int int1 = mnUserParameterState0.extOfInt(int0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      double double0 = mnUserParameterState0.ext2int(int0, doubleArray0[1]);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1335.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      double double1 = mnUserParameterState0.ext2int(int0, double0);
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1335.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1718.5);
      doubleArray0[0] = double0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {(-1718.5), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {(-1718.5), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      double double1 = mnUserParameterState0.ext2int(int0, doubleArray0[0]);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals((-1718.5), double1, 0.01);
      assertArrayEquals(new double[] {(-1718.5), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      double[] doubleArray1 = mnUserParameterState0.errors();
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1.0;
      double double1 = 3299.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      String string0 = "";
      mnUserParameterState0.add(string0, doubleArray0[5], (double) int0, double1, double0);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = mnUserParameterState0.error(string0);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1718.5);
      doubleArray0[0] = double0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {(-1718.5), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertArrayEquals(new double[] {(-1718.5), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "m-&";
      mnUserParameters0.add(string0, doubleArray0[1], doubleArray0[0]);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {(-1718.5), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = mnUserParameterState0.error(string0);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals((-1718.5), double1, 0.01);
      assertArrayEquals(new double[] {(-1718.5), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 2799.7285514423907;
      doubleArray0[0] = double0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {2799.7285514423907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      double double1 = mnUserParameterState0.error(int0);
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2799.7285514423907, double1, 0.01);
      assertArrayEquals(new double[] {2799.7285514423907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = (-3609.574464101462);
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = double0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, (-3609.574464101462), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, (-3609.574464101462), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      double double1 = mnUserParameterState0.error(int0);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals((-3609.574464101462), double1, 0.01);
      assertArrayEquals(new double[] {0.0, (-3609.574464101462), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 3330;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, int0, mnUserTransformation0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(3330.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3330.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(3330, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      double double0 = mnUserParameterState0.edm();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(3330.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3330.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(3330, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3330.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1718.5);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      PrivateAccess.setVariable((Class<MnUserParameterState>) MnUserParameterState.class, mnUserParameterState0, "theEDM", (Object) double0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals((-1718.5), mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = mnUserParameterState0.edm();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals((-1718.5), mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertEquals((-1718.5), double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState1.isValid());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(2, mnUserParameterState1.variableParameters());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      int int1 = 1130;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumState0);
      
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, int1, mnUserTransformation0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1130, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mnUserParameterState0);
      
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1130, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(1130, mnUserParameterState1.nfcn());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertFalse(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      double double0 = 0.5;
      PrivateAccess.setVariable((Class<MnUserParameterState>) MnUserParameterState.class, mnUserParameterState0, "theFVal", (Object) double0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.5, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.5, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertTrue(mnUserParameterState1.isValid());
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertEquals(0.5, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnUserParameterState1.hasCovariance());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-3);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      PrivateAccess.setVariable((Class<MnUserParameterState>) MnUserParameterState.class, mnUserParameterState0, "theFVal", (Object) int0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals((-3.0), mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals((-3.0), mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState1.isValid());
      assertEquals((-3.0), mnUserParameterState1.fval(), 0.01);
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertFalse(mnUserParameterState1.hasCovariance());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      double double0 = 1475.6747835125607;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, double0, mnUserTransformation0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1475.6747835125607, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1475.6747835125607, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState1.isValid());
      assertEquals(1475.6747835125607, mnUserParameterState1.edm(), 0.01);
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      double double0 = (-2152.13);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, int0, mnUserTransformation0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals((-2152.13), mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals((-2152.13), mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals((-2152.13), mnUserParameterState1.edm(), 0.01);
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnUserParameterState1.hasCovariance());
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = Double.MIN_EXPONENT;
      assertEquals((-1022), int0);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.value(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      double double0 = (-1033.50759293);
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserParameterState0.setValue(int0, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = (-407);
      // Undeclared exception!
      try { 
        mnUserParameterState0.setValue(int0, doubleArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1718.5);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "m-&";
      mnUserParameters0.add(string0, double0, doubleArray0[0]);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.setUpperLimit(string0, doubleArray0[1]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 682;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, int0, mnUserTransformation0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.setUpperLimit(int0, (double) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 682, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      int int0 = (-2123);
      // Undeclared exception!
      try { 
        mnUserParameterState0.setUpperLimit(int0, (double) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1238;
      // Undeclared exception!
      try { 
        mnUserParameterState0.setLowerLimit(int0, (double) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1238, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0, int0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int1 = (-920);
      // Undeclared exception!
      try { 
        mnUserParameterState0.setLowerLimit(int1, (double) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "";
      mnUserParameterState0.add(string0, doubleArray0[1]);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.setLimits(string0, doubleArray0[2], doubleArray0[6]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min == max
         //
         verifyException("org.freehep.math.minuit.MinuitParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1970;
      // Undeclared exception!
      try { 
        mnUserParameterState0.setLimits(int0, doubleArray0[6], doubleArray0[2]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1970, Size: 7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.setLimits(int0, (double) int0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min == max
         //
         verifyException("org.freehep.math.minuit.MinuitParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = (-629);
      // Undeclared exception!
      try { 
        mnUserParameterState0.setLimits(int0, doubleArray0[0], doubleArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.5;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        mnUserParameterState0.setError(string0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1141;
      // Undeclared exception!
      try { 
        mnUserParameterState0.setError(int0, doubleArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1141, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      int int0 = 0;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertNotNull(mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.removeLimits(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      int int0 = (-2118);
      // Undeclared exception!
      try { 
        mnUserParameterState0.removeLimits(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1758.09;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "expected distance to the minimum (edm): ";
      mnUserParameterState0.add(string0, double0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int0 = mnUserParameterState0.index(string0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      mnUserParameterState0.release(int0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.release(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index=2
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserParameterState0.release(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      int int1 = mnUserParameterState0.intOfExt(int0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, int1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.release(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index=0
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, int0, mnUserTransformation0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      int int1 = (-2039);
      // Undeclared exception!
      try { 
        mnUserParameterState0.release(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserParameterState0.parameter(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      int int0 = (-988);
      // Undeclared exception!
      try { 
        mnUserParameterState0.parameter(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1286;
      // Undeclared exception!
      try { 
        mnUserParameterState0.name(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1286, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      int int0 = (-988);
      // Undeclared exception!
      try { 
        mnUserParameterState0.name(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 4049.32273147;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = (-192);
      // Undeclared exception!
      try { 
        mnUserParameterState0.int2ext(int0, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, int0, mnUserTransformation0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      String string0 = mnUserParameterState0.toString();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals("\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.index(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1718.5);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "m-&";
      mnUserParameters0.add(string0, double0, doubleArray0[0]);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.fix(string0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      String string0 = "m-&";
      mnUserParameters0.add(string0, (double) int0, doubleArray0[0]);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      mnUserParameters0.fix(string0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.fix(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=5
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = (-1204);
      // Undeclared exception!
      try { 
        mnUserParameterState0.extOfInt(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserParameterState0.ext2int(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = (-2158);
      // Undeclared exception!
      try { 
        mnUserParameterState0.ext2int(int0, doubleArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      int int0 = 2295;
      // Undeclared exception!
      try { 
        mnUserParameterState0.error(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2295, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = (-3898);
      // Undeclared exception!
      try { 
        mnUserParameterState0.error(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance1.ncol());
      assertEquals(0, mnUserCovariance1.nrow());
      assertFalse(mnUserCovariance1.equals((Object)mnUserCovariance0));
      assertNotNull(mnUserCovariance1);
      assertNotSame(mnUserCovariance0, mnUserCovariance1);
      assertNotSame(mnUserCovariance1, mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1, mnUserCovariance0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnUserCovariance0.equals((Object)mnUserCovariance1));
      assertNotNull(mnUserParameterState0);
      
      MnUserCovariance mnUserCovariance2 = mnUserParameterState0.covariance();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserCovariance2.nrow());
      assertEquals(0, mnUserCovariance2.ncol());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnUserCovariance0.equals((Object)mnUserCovariance1));
      assertFalse(mnUserCovariance2.equals((Object)mnUserCovariance1));
      assertNotNull(mnUserCovariance2);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertSame(mnUserCovariance0, mnUserCovariance2);
      assertNotSame(mnUserCovariance0, mnUserCovariance1);
      assertSame(mnUserCovariance2, mnUserCovariance0);
      assertNotSame(mnUserCovariance2, mnUserCovariance1);
      
      List<Object> list0 = null;
      PrivateAccess.setVariable((Class<MnUserParameterState>) MnUserParameterState.class, mnUserParameterState0, "theIntParameters", (Object) list0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnUserCovariance0.equals((Object)mnUserCovariance1));
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertSame(mnUserCovariance0, mnUserCovariance2);
      assertNotSame(mnUserCovariance0, mnUserCovariance1);
      
      MnUserCovariance mnUserCovariance3 = mnUserCovariance0.clone();
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance3.ncol());
      assertEquals(0, mnUserCovariance3.nrow());
      assertFalse(mnUserCovariance0.equals((Object)mnUserCovariance1));
      assertFalse(mnUserCovariance3.equals((Object)mnUserCovariance0));
      assertFalse(mnUserCovariance3.equals((Object)mnUserCovariance1));
      assertFalse(mnUserCovariance3.equals((Object)mnUserCovariance2));
      assertNotNull(mnUserCovariance3);
      assertSame(mnUserCovariance0, mnUserCovariance2);
      assertNotSame(mnUserCovariance0, mnUserCovariance3);
      assertNotSame(mnUserCovariance0, mnUserCovariance1);
      assertNotSame(mnUserCovariance3, mnUserCovariance0);
      assertNotSame(mnUserCovariance3, mnUserCovariance1);
      assertNotSame(mnUserCovariance3, mnUserCovariance2);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      int int0 = 0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "org.freehep.math.minuit.MnAlgebraicSymMatrix$EigenvaluesException";
      mnUserParameterState0.add(string0, doubleArray0[0], doubleArray0[0]);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.add(string0, (double) int0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate name: org.freehep.math.minuit.MnAlgebraicSymMatrix$EigenvaluesException
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1718.5);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "m-&";
      mnUserParameters0.add(string0, double0, doubleArray0[0]);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.add(string0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate name: m-&
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 0;
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = 0;
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistent arguments
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = null;
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = 0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnUserCovariance mnUserCovariance0 = mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      int int0 = 553;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertEquals(553, mnUserCovariance0.nrow());
      assertEquals(553, mnUserCovariance0.ncol());
      assertNotNull(mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(9, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserCovariance mnUserCovariance0 = null;
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MnUserParameters mnUserParameters0 = null;
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MinimumState minimumState0 = null;
      double double0 = 0.0;
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(minimumState0, double0, mnUserTransformation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 4;
      int int1 = mnUserParameterState0.intOfExt(int0);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(4, int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(int1 == int0);
      
      mnUserParameterState0.removeLimits(int1);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1718.5);
      doubleArray0[0] = double0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {(-1718.5), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {(-1718.5), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      mnUserParameterState0.setLowerLimit(int0, doubleArray0[0]);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {(-1718.5), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      String string0 = mnUserParameterState0.toString();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals("\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", string0);
      assertNotNull(string0);
      
      double double0 = (-2180.4);
      mnUserParameterState0.add(string0, double0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      int int0 = 0;
      double double1 = mnUserParameterState0.value(int0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals((-2180.4), double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      mnUserParameterState0.setLowerLimit(int0, double1);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0, int0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      boolean boolean0 = mnUserParameterState0.hasCovariance();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      boolean boolean0 = mnUserParameterState0.hasGlobalCC();
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = mnUserParameterState0.variableParameters();
      assertEquals(8, mnUserParameters0.variableParameters());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(8, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      int int0 = (-814);
      // Undeclared exception!
      try { 
        mnUserParameterState0.setError(int0, (double) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      double double0 = mnUserParameterState0.fval();
      assertEquals(2, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      boolean boolean0 = mnUserParameterState0.isValid();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      int int0 = mnUserParameterState0.nfcn();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "m-&";
      mnUserParameters0.add(string0, doubleArray0[1], doubleArray0[0]);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.removeLimits(string0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "expected distance to the minimum (edm): ";
      mnUserParameterState0.add(string0, doubleArray0[0]);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = mnUserParameterState0.index(string0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, int0);
      
      mnUserParameterState0.removeLimits(int0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      String string0 = "m-&";
      mnUserParameters0.add(string0, (double) int0, doubleArray0[0]);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      mnUserParameters0.fix(string0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      mnUserParameterState0.removeLimits(string0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      mnUserParameters0.fix(int0);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      mnUserParameterState0.setLowerLimit(int0, doubleArray0[1]);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      String string0 = mnUserParameterState0.toString();
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals("\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", string0);
      assertNotNull(string0);
      
      double double0 = (-2180.4);
      mnUserParameterState0.add(string0, double0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      
      int int0 = 0;
      double double1 = mnUserParameterState0.value(int0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals((-2180.4), double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      mnUserParameterState0.setUpperLimit(int0, double1);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      mnUserParameters0.fix(int0);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      mnUserParameterState0.setUpperLimit(int0, doubleArray0[3]);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      double double0 = (-2031.7);
      mnUserParameterState0.setLimits(int0, double0, (double) int0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1718.5);
      double double1 = 4049.32273147;
      doubleArray0[1] = double1;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 4049.32273147, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 4049.32273147, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      mnUserParameterState0.setLimits(int0, doubleArray0[2], double0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 4049.32273147, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1718.5);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      mnUserParameterState0.setLimits(int0, doubleArray0[3], double0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MinuitParameter minuitParameter0 = mnUserParameterState0.parameter(int0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, minuitParameter0.error(), 0.01);
      assertFalse(minuitParameter0.isFixed());
      assertTrue(minuitParameter0.hasLowerLimit());
      assertFalse(minuitParameter0.isConst());
      assertEquals(1, minuitParameter0.number());
      assertEquals((-1718.5), minuitParameter0.lowerLimit(), 0.01);
      assertEquals(0.0, minuitParameter0.value(), 0.01);
      assertTrue(minuitParameter0.hasUpperLimit());
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertEquals("p1", minuitParameter0.name());
      assertTrue(minuitParameter0.hasLimits());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(minuitParameter0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      String string0 = mnUserParameterState0.toString();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals("\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", string0);
      assertNotNull(string0);
      
      double double0 = (-2180.4);
      mnUserParameterState0.add(string0, double0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      
      int int0 = 0;
      mnUserParameterState0.setLimits(int0, double0, (double) int0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 4539.30346141953;
      doubleArray0[0] = double0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {4539.30346141953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      mnUserParameterState0.fix(int0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {4539.30346141953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      mnUserParameterState0.setLimits(int0, doubleArray0[5], doubleArray0[0]);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {4539.30346141953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      String string0 = mnUserParameterState0.toString();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals("\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", string0);
      assertNotNull(string0);
      
      double double0 = (-2180.4);
      mnUserParameterState0.add(string0, double0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      
      int int0 = 0;
      mnUserParameterState0.setValue(int0, (double) int0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      
      double double1 = mnUserParameterState0.value(string0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      mnUserParameterState0.fix(int0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      mnUserParameterState0.setValue(int0, (double) int0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1758.09;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "expected distance to the minimum (edm): ";
      mnUserParameterState0.add(string0, doubleArray0[0]);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      mnUserParameterState0.setLowerLimit(string0, double0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int0 = mnUserParameterState0.index(string0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(2, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      mnUserParameterState0.release(int0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 1;
      boolean boolean0 = true;
      PrivateAccess.setVariable((Class<MnUserParameterState>) MnUserParameterState.class, mnUserParameterState0, "theCovarianceValid", (Object) boolean0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.fix(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid matrix size: -1
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 1;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, int0);
      assertNotNull(minimumError0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(int0);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(minimumState0, int0, mnUserTransformation0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 1;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MinimumError.MnInvertFailed minimumError_MnInvertFailed0 = new MinimumError.MnInvertFailed();
      assertNotNull(minimumError_MnInvertFailed0);
      
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnInvertFailed0);
      assertNotNull(minimumError0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int0, int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      mnUserTransformation0.setUpperLimit(int0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      mnUserTransformation0.fix(int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(minimumState0, int0, mnUserTransformation0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 1;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MinimumError.MnInvertFailed minimumError_MnInvertFailed0 = new MinimumError.MnInvertFailed();
      assertNotNull(minimumError_MnInvertFailed0);
      
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnInvertFailed0);
      assertNotNull(minimumError0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int0, int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      mnUserTransformation0.fix(int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(minimumState0, int0, mnUserTransformation0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 707;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      String string0 = "YZJu9q;M`N";
      mnUserTransformation0.add(string0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, int0, mnUserTransformation0);
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[7];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(minimumState0, int0, mnUserTransformation0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(16, mnUserParameters0.variableParameters());
      assertEquals(16, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      int int0 = 0;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertNotNull(mnUserCovariance0);
      
      mnUserParameters0.setUpperLimit(int0, doubleArray0[5]);
      assertEquals(16, mnUserParameters0.variableParameters());
      assertEquals(16, doubleArray0.length);
      
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      String string0 = "3f\"<[BrooXh-Z#";
      double double0 = 1.0;
      mnUserParameters0.add(string0, double0);
      assertEquals(0, mnUserParameters0.variableParameters());
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertNotNull(mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertNotNull(mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = (-1);
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1401.3621705339929;
      doubleArray0[0] = double0;
      int int0 = 1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0, int0);
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {1401.3621705339929}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.intOfExt(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=1
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = 1;
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      int int0 = 0;
      mnUserParameters0.fix(int0);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserParameterState0.value(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "expected distance to the minimum (edm): ";
      mnUserParameterState0.add(string0, doubleArray0[0]);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = mnUserParameterState0.index(string0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, int0);
      
      String string1 = mnUserParameterState0.name(int0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals("expected distance to the minimum (edm): ", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      List<Double> list0 = mnUserParameterState0.intParameters();
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnUserTransformation mnUserTransformation0 = mnUserParameterState0.trafo();
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserTransformation0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      MnMachinePrecision mnMachinePrecision0 = mnUserParameterState0.precision();
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnMachinePrecision0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 3330;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, int0, mnUserTransformation0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(3330.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(3330.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(3330, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.extOfInt(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3330, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "u+0<85p'";
      // Undeclared exception!
      try { 
        mnUserParameterState0.release(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      String string0 = "UN|,s`.k=lQILA";
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.setLowerLimit(string0, doubleArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      String string0 = mnUserParameterState0.toString();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals("\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.removeLimits(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      int int0 = 0;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertNotNull(mnUserParameterState0);
      
      MnUserCovariance mnUserCovariance1 = mnUserParameterState0.intCovariance();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserCovariance1.nrow());
      assertEquals(0, mnUserCovariance1.ncol());
      assertFalse(mnUserCovariance1.equals((Object)mnUserCovariance0));
      assertNotNull(mnUserCovariance1);
      assertNotSame(mnUserCovariance0, mnUserCovariance1);
      assertNotSame(mnUserCovariance1, mnUserCovariance0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "%g ";
      // Undeclared exception!
      try { 
        mnUserParameterState0.error(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0, int0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "MnUserCovariance parameter correlations: ";
      // Undeclared exception!
      try { 
        mnUserParameterState0.setValue(string0, (double) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      List<MinuitParameter> list0 = mnUserParameterState0.minuitParameters();
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      double[] doubleArray0 = mnUserParameterState0.errors();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      double double0 = mnUserParameterState0.error(int0);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        mnUserParameterState0.setLimits(string0, doubleArray0[2], doubleArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = mnUserParameterState0.globalCC();
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertNull(mnGlobalCorrelationCoeff0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      String string0 = mnUserParameterState0.toString();
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals("\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.fix(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      String string0 = null;
      double double0 = 2747.3;
      // Undeclared exception!
      try { 
        mnUserParameterState0.setUpperLimit(string0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      String string0 = mnUserParameterState0.toString();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals("\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.value(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1758.0887002282873;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "expected distance to the minimum (edm): ";
      mnUserParameterState0.add(string0, doubleArray0[0]);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      mnUserParameterState0.setError(string0, double0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      double[] doubleArray0 = mnUserParameterState0.params();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      double double0 = mnUserParameterState0.edm();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      double double0 = 0.0;
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserParameterState0.int2ext(int0, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertTrue(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setPrecision(doubleArray0[4]);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      String string0 = "";
      double double0 = 0.0;
      mnUserParameterState0.add(string0, double0, double0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      
      double double1 = (-2180.4);
      int int0 = 0;
      double double2 = mnUserParameterState0.int2ext(int0, double1);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals((-2180.4), double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
  }
}
