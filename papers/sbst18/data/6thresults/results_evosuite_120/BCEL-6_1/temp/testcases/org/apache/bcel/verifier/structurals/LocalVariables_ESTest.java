/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:29:08 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalVariables_ESTest extends LocalVariables_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 222;
      LocalVariables localVariables0 = new LocalVariables(int0);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables1.toString();
      int int1 = 133;
      BasicType basicType0 = Type.DOUBLE;
      basicType0.toString();
      localVariables1.set(int1, basicType0);
      UninitializedObjectType uninitializedObjectType0 = null;
      LocalVariables localVariables3 = localVariables2.getClone();
      localVariables1.initializeObject(uninitializedObjectType0);
      localVariables1.merge(localVariables0);
      LocalVariables localVariables4 = localVariables2.getClone();
      localVariables4.clone();
      localVariables0.hashCode();
      localVariables0.merge(localVariables2);
      localVariables1.merge(localVariables2);
      Object object0 = localVariables2.clone();
      int int2 = 210;
      PrivateAccess.callMethod((Class<LocalVariables>) LocalVariables.class, localVariables3, "merge", object0, (Class<?>) LocalVariables.class, (Object) int2, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 222;
      LocalVariables localVariables0 = new LocalVariables(int0);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables1.toString();
      int int1 = 133;
      BasicType basicType0 = Type.DOUBLE;
      basicType0.toString();
      localVariables1.set(int1, basicType0);
      UninitializedObjectType uninitializedObjectType0 = null;
      localVariables2.getClone();
      localVariables1.initializeObject(uninitializedObjectType0);
      localVariables1.merge(localVariables0);
      localVariables2.getClone();
      localVariables0.hashCode();
      localVariables0.merge(localVariables2);
      localVariables1.merge(localVariables2);
      localVariables2.clone();
      int int2 = 214;
      LocalVariables localVariables3 = new LocalVariables(int2);
      try { 
        PrivateAccess.callMethod((Class<LocalVariables>) LocalVariables.class, localVariables2, "merge", (Object) localVariables3, (Class<?>) LocalVariables.class, (Object) int2, (Class<?>) int.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 3182;
      LocalVariables localVariables0 = new LocalVariables(int0);
      localVariables0.toString();
      int int1 = 242;
      localVariables0.get(int1);
      localVariables0.toString();
      localVariables0.toString();
      UninitializedObjectType uninitializedObjectType0 = null;
      localVariables0.initializeObject(uninitializedObjectType0);
      PipedOutputStream pipedOutputStream0 = null;
      int int2 = 145;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 5057;
      LocalVariables localVariables0 = new LocalVariables(int0);
      // Undeclared exception!
      localVariables0.clone();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      LocalVariables localVariables1 = localVariables0.getClone();
      BasicType basicType0 = Type.SHORT;
      // Undeclared exception!
      try { 
        localVariables1.set(int0, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: LocalVariables do not know about 'short'. Use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1237;
      LocalVariables localVariables0 = new LocalVariables(int0);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables2.clone();
      localVariables1.merge(localVariables2);
      localVariables2.toString();
      // Undeclared exception!
      localVariables2.equals(localVariables0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      Type type0 = null;
      LocalVariables localVariables1 = null;
      // Undeclared exception!
      try { 
        localVariables0.merge(localVariables1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1275;
      LocalVariables localVariables0 = new LocalVariables(int0);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      LocalVariables localVariables3 = localVariables2.getClone();
      localVariables3.clone();
      // Undeclared exception!
      localVariables2.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      LocalVariables localVariables2 = localVariables1.getClone();
      LocalVariables localVariables3 = localVariables0.getClone();
      localVariables2.clone();
      localVariables3.clone();
      localVariables3.maxLocals();
      int int1 = 916;
      LocalVariables localVariables4 = new LocalVariables(int1);
      localVariables2.equals(localVariables4);
      int int2 = 3943;
      // Undeclared exception!
      try { 
        localVariables4.merge(localVariables0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Merging LocalVariables of different size?!? From different methods or what?!?
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1103;
      LocalVariables localVariables0 = new LocalVariables(int0);
      localVariables0.clone();
      LocalVariables localVariables1 = localVariables0.getClone();
      int int1 = 0;
      BasicType basicType0 = Type.DOUBLE;
      localVariables1.set(int1, basicType0);
      localVariables1.equals(localVariables0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 3481;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertNotNull(localVariables0);
      assertEquals(3481, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      assertEquals(3481, localVariables0.maxLocals());
      assertEquals(3481, localVariables1.maxLocals());
      
      // Undeclared exception!
      localVariables0.getClone();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertNotNull(localVariables0);
      assertEquals(0, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables2.maxLocals());
      
      int int1 = (-2845);
      byte byte0 = (byte) (-58);
      BIPUSH bIPUSH0 = new BIPUSH(byte0);
      assertNotNull(bIPUSH0);
      assertEquals((short)16, bIPUSH0.getOpcode());
      assertEquals(2, bIPUSH0.getLength());
      assertEquals("bipush", bIPUSH0.getName());
      
      Constant[] constantArray0 = new Constant[1];
      int int2 = (-205);
      int int3 = 0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(int2, int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertNotNull(constantMethodHandle0);
      assertEquals(0, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-205), constantMethodHandle0.getReferenceKind());
      
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, constantArray0.length);
      
      BasicType basicType0 = (BasicType)bIPUSH0.getType(constantPoolGen0);
      assertNotNull(basicType0);
      assertEquals((short)16, bIPUSH0.getOpcode());
      assertEquals(2, bIPUSH0.getLength());
      assertEquals("bipush", bIPUSH0.getName());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((byte)8, basicType0.getType());
      assertEquals("B", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        localVariables0.set(int1, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: LocalVariables do not know about 'byte'. Use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertNotNull(localVariables0);
      assertEquals(0, localVariables0.maxLocals());
      
      BasicType basicType0 = Type.BOOLEAN;
      assertNotNull(basicType0);
      assertEquals(1, basicType0.getSize());
      assertEquals("Z", basicType0.getSignature());
      assertEquals((byte)4, basicType0.getType());
      
      // Undeclared exception!
      try { 
        localVariables0.set(int0, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: LocalVariables do not know about 'boolean'. Use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertNotNull(localVariables0);
      assertEquals(0, localVariables0.maxLocals());
      
      int int1 = 477;
      LocalVariables localVariables1 = new LocalVariables(int1);
      assertFalse(int1 == int0);
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(477, localVariables1.maxLocals());
      
      String string0 = localVariables1.toString();
      assertFalse(int1 == int0);
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(string0);
      assertEquals(477, localVariables1.maxLocals());
      
      // Undeclared exception!
      try { 
        localVariables0.merge(localVariables1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Merging LocalVariables of different size?!? From different methods or what?!?
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertNotNull(localVariables0);
      assertEquals(0, localVariables0.maxLocals());
      
      // Undeclared exception!
      try { 
        localVariables0.get(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-83);
      LocalVariables localVariables0 = null;
      try {
        localVariables0 = new LocalVariables(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertNotNull(localVariables0);
      assertEquals(0, localVariables0.maxLocals());
      
      String string0 = localVariables0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, localVariables0.maxLocals());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertNotNull(localVariables0);
      assertEquals(0, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      
      int int1 = localVariables1.hashCode();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(int1 == int0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2635;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertNotNull(localVariables0);
      assertEquals(2635, localVariables0.maxLocals());
      
      int int1 = 302;
      String string0 = "";
      ObjectType objectType0 = new ObjectType(string0);
      assertNotNull(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)33;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      int int2 = 622;
      localVariables0.set(int2, objectType0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(2635, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)33, (byte)1, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      localVariables0.set(int1, objectType0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(2635, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      
      int int3 = 2218;
      Type type0 = localVariables0.get(int3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotNull(type0);
      assertEquals(2635, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      assertEquals(2635, localVariables0.maxLocals());
      assertEquals(2635, localVariables1.maxLocals());
      
      // Undeclared exception!
      localVariables0.merge(localVariables1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 222;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertNotNull(localVariables0);
      assertEquals(222, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(222, localVariables2.maxLocals());
      
      String string0 = localVariables1.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(string0);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      
      int int1 = 133;
      BasicType basicType0 = Type.DOUBLE;
      assertNotNull(basicType0);
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals((byte)7, basicType0.getType());
      
      String string1 = basicType0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("double", string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals((byte)7, basicType0.getType());
      
      localVariables1.set(int1, basicType0);
      assertFalse(int0 == int1);
      assertFalse(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertFalse(int1 == int0);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals((byte)7, basicType0.getType());
      
      UninitializedObjectType uninitializedObjectType0 = null;
      LocalVariables localVariables3 = localVariables2.getClone();
      assertFalse(int0 == int1);
      assertFalse(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotNull(localVariables3);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(222, localVariables2.maxLocals());
      assertEquals(222, localVariables3.maxLocals());
      
      localVariables1.initializeObject(uninitializedObjectType0);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertFalse(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertFalse(localVariables1.equals((Object)localVariables3));
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      
      localVariables1.merge(localVariables0);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      
      LocalVariables localVariables4 = localVariables2.getClone();
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables2);
      assertNotNull(localVariables4);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(222, localVariables2.maxLocals());
      assertEquals(222, localVariables4.maxLocals());
      
      int int2 = localVariables0.hashCode();
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertEquals(222, localVariables0.maxLocals());
      
      localVariables0.merge(localVariables2);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(222, localVariables2.maxLocals());
      
      localVariables1.merge(localVariables2);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(222, localVariables2.maxLocals());
      
      LocalVariables localVariables5 = (LocalVariables)localVariables2.clone();
      assertFalse(int0 == int1);
      assertTrue(localVariables5.equals((Object)localVariables4));
      assertTrue(localVariables5.equals((Object)localVariables0));
      assertTrue(localVariables5.equals((Object)localVariables2));
      assertTrue(localVariables5.equals((Object)localVariables1));
      assertTrue(localVariables5.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertNotSame(localVariables5, localVariables3);
      assertNotSame(localVariables5, localVariables2);
      assertNotSame(localVariables5, localVariables0);
      assertNotSame(localVariables5, localVariables4);
      assertNotSame(localVariables5, localVariables1);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables5);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables5);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables5);
      assertNotNull(localVariables5);
      assertEquals(222, localVariables5.maxLocals());
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(222, localVariables2.maxLocals());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 55;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertNotNull(localVariables0);
      assertEquals(55, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      assertEquals(55, localVariables0.maxLocals());
      assertEquals(55, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      assertEquals(55, localVariables0.maxLocals());
      assertEquals(55, localVariables1.maxLocals());
      assertEquals(55, localVariables2.maxLocals());
      
      int int1 = localVariables1.maxLocals();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(int1 == int0);
      assertEquals(55, int1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertEquals(55, localVariables0.maxLocals());
      assertEquals(55, localVariables1.maxLocals());
      
      boolean boolean0 = localVariables1.equals(localVariables0);
      assertTrue(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(boolean0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertEquals(55, localVariables0.maxLocals());
      assertEquals(55, localVariables1.maxLocals());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 222;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertNotNull(localVariables0);
      assertEquals(222, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(222, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotNull(localVariables3);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables3.maxLocals());
      
      String string0 = localVariables1.toString();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotNull(string0);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      
      int int1 = 133;
      BasicType basicType0 = Type.DOUBLE;
      assertNotNull(basicType0);
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      
      String string1 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      assertFalse(string1.equals((Object)string0));
      assertEquals("()D", string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      
      localVariables1.set(int1, basicType0);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertFalse(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertFalse(localVariables1.equals((Object)localVariables3));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertFalse(int1 == int0);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      
      UninitializedObjectType uninitializedObjectType0 = null;
      LocalVariables localVariables4 = localVariables2.getClone();
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertFalse(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertFalse(localVariables1.equals((Object)localVariables3));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertFalse(localVariables4.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables2);
      assertNotNull(localVariables4);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(222, localVariables2.maxLocals());
      assertEquals(222, localVariables4.maxLocals());
      
      localVariables1.initializeObject(uninitializedObjectType0);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertFalse(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertFalse(localVariables1.equals((Object)localVariables4));
      assertFalse(localVariables1.equals((Object)localVariables3));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      
      localVariables1.merge(localVariables0);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      
      LocalVariables localVariables5 = localVariables2.getClone();
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables5.equals((Object)localVariables2));
      assertTrue(localVariables5.equals((Object)localVariables4));
      assertTrue(localVariables5.equals((Object)localVariables3));
      assertTrue(localVariables5.equals((Object)localVariables1));
      assertTrue(localVariables5.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables5);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables5);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables5);
      assertNotSame(localVariables5, localVariables0);
      assertNotSame(localVariables5, localVariables2);
      assertNotSame(localVariables5, localVariables3);
      assertNotSame(localVariables5, localVariables1);
      assertNotSame(localVariables5, localVariables4);
      assertNotNull(localVariables5);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(222, localVariables2.maxLocals());
      assertEquals(222, localVariables5.maxLocals());
      
      int int2 = localVariables0.hashCode();
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables5));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables5);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertEquals(222, localVariables0.maxLocals());
      
      localVariables0.merge(localVariables2);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables5));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables5));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables5));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables5);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables5);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables5);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(222, localVariables2.maxLocals());
      
      localVariables1.merge(localVariables2);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables5));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables5));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables5));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables5);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables5);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables5);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(222, localVariables2.maxLocals());
      
      LocalVariables localVariables6 = (LocalVariables)localVariables2.clone();
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables5));
      assertTrue(localVariables6.equals((Object)localVariables2));
      assertTrue(localVariables6.equals((Object)localVariables4));
      assertTrue(localVariables6.equals((Object)localVariables3));
      assertTrue(localVariables6.equals((Object)localVariables1));
      assertTrue(localVariables6.equals((Object)localVariables5));
      assertTrue(localVariables6.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables5));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables5));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables5);
      assertNotSame(localVariables0, localVariables6);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables6, localVariables0);
      assertNotSame(localVariables6, localVariables1);
      assertNotSame(localVariables6, localVariables5);
      assertNotSame(localVariables6, localVariables3);
      assertNotSame(localVariables6, localVariables2);
      assertNotSame(localVariables6, localVariables4);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables5);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables6);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables6);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables5);
      assertNotNull(localVariables6);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables6.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(222, localVariables2.maxLocals());
      
      int int3 = localVariables5.maxLocals();
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables6));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables5));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables5));
      assertTrue(localVariables1.equals((Object)localVariables6));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables5));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables5.equals((Object)localVariables2));
      assertTrue(localVariables5.equals((Object)localVariables4));
      assertTrue(localVariables5.equals((Object)localVariables3));
      assertTrue(localVariables5.equals((Object)localVariables1));
      assertTrue(localVariables5.equals((Object)localVariables0));
      assertTrue(localVariables5.equals((Object)localVariables6));
      assertEquals(222, int3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables5);
      assertNotSame(localVariables0, localVariables6);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables5);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables6);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables6);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables5);
      assertNotSame(localVariables5, localVariables0);
      assertNotSame(localVariables5, localVariables6);
      assertNotSame(localVariables5, localVariables2);
      assertNotSame(localVariables5, localVariables3);
      assertNotSame(localVariables5, localVariables1);
      assertNotSame(localVariables5, localVariables4);
      assertEquals(222, localVariables0.maxLocals());
      assertEquals(222, localVariables1.maxLocals());
      assertEquals(222, localVariables2.maxLocals());
      assertEquals(222, localVariables5.maxLocals());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertNotNull(localVariables0);
      assertEquals(0, localVariables0.maxLocals());
      
      int int1 = localVariables0.maxLocals();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, localVariables0.maxLocals());
      
      int int2 = 0;
      String string0 = "?yY";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("?yY", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("?yY", mockFile0.getName());
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"?yY\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1237;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertNotNull(localVariables0);
      assertEquals(1237, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      assertEquals(1237, localVariables0.maxLocals());
      assertEquals(1237, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = (LocalVariables)localVariables1.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      assertEquals(1237, localVariables0.maxLocals());
      assertEquals(1237, localVariables1.maxLocals());
      assertEquals(1237, localVariables2.maxLocals());
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertEquals(1237, localVariables0.maxLocals());
      assertEquals(1237, localVariables1.maxLocals());
      
      boolean boolean0 = localVariables1.equals(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(boolean0);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertEquals(1237, localVariables0.maxLocals());
      assertEquals(1237, localVariables1.maxLocals());
      
      LocalVariables localVariables3 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotNull(localVariables3);
      assertEquals(1237, localVariables0.maxLocals());
      assertEquals(1237, localVariables3.maxLocals());
      
      LocalVariables localVariables4 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables3);
      assertNotNull(localVariables4);
      assertEquals(1237, localVariables0.maxLocals());
      assertEquals(1237, localVariables4.maxLocals());
      
      LocalVariables localVariables5 = (LocalVariables)localVariables1.clone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertTrue(localVariables5.equals((Object)localVariables0));
      assertTrue(localVariables5.equals((Object)localVariables3));
      assertTrue(localVariables5.equals((Object)localVariables4));
      assertTrue(localVariables5.equals((Object)localVariables1));
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables5);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables5);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables5, localVariables3);
      assertNotSame(localVariables5, localVariables4);
      assertNotSame(localVariables5, localVariables0);
      assertNotSame(localVariables5, localVariables1);
      assertNotSame(localVariables5, localVariables2);
      assertNotNull(localVariables5);
      assertEquals(1237, localVariables0.maxLocals());
      assertEquals(1237, localVariables1.maxLocals());
      assertEquals(1237, localVariables5.maxLocals());
      
      Object object0 = null;
      boolean boolean1 = localVariables0.equals(object0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables5);
      assertEquals(1237, localVariables0.maxLocals());
      
      LocalVariables localVariables6 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables5));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables6.equals((Object)localVariables0));
      assertTrue(localVariables6.equals((Object)localVariables4));
      assertTrue(localVariables6.equals((Object)localVariables2));
      assertTrue(localVariables6.equals((Object)localVariables5));
      assertTrue(localVariables6.equals((Object)localVariables1));
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables6);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables5);
      assertNotSame(localVariables6, localVariables5);
      assertNotSame(localVariables6, localVariables2);
      assertNotSame(localVariables6, localVariables3);
      assertNotSame(localVariables6, localVariables4);
      assertNotSame(localVariables6, localVariables1);
      assertNotSame(localVariables6, localVariables0);
      assertNotNull(localVariables6);
      assertEquals(1237, localVariables0.maxLocals());
      assertEquals(1237, localVariables6.maxLocals());
      
      int int1 = 0;
      Type type0 = localVariables0.get(int1);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables5));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables6));
      assertFalse(int1 == int0);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables6);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables5);
      assertNotNull(type0);
      assertEquals(1237, localVariables0.maxLocals());
      
      int int2 = localVariables0.maxLocals();
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables5));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables6));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1237, int2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables6);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables5);
      assertEquals(1237, localVariables0.maxLocals());
      
      localVariables0.merge(localVariables0);
      // Undeclared exception!
      try { 
        localVariables0.set(int0, type0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1237
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }
}
