/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 19:59:11 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalVariables_ESTest extends LocalVariables_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      LocalVariables localVariables0 = new LocalVariables(int0);
      localVariables0.clone();
      String string0 = localVariables0.toString();
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      int int1 = 0;
      localVariables1.clone();
      int int2 = 0;
      IINC iINC0 = new IINC(int1, int2);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      long long0 = 168L;
      constantPoolGen0.addLong(long0);
      Type type0 = iINC0.getType(constantPoolGen0);
      localVariables2.set(int1, type0);
      localVariables1.maxLocals();
      localVariables2.toString();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(type0.STRINGBUFFER);
      localVariables1.initializeObject(uninitializedObjectType0);
      localVariables2.maxLocals();
      localVariables2.equals(string0);
      localVariables0.maxLocals();
      int int3 = 0;
      localVariables1.get(int3);
      localVariables1.initializeObject(uninitializedObjectType0);
      localVariables0.clone();
      localVariables1.equals(localVariables2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 2552;
      LocalVariables localVariables0 = new LocalVariables(int0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      Character.getName(int0);
      localVariables0.toString();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      localVariables0.toString();
      localVariables1.merge(localVariables0);
      UninitializedObjectType uninitializedObjectType0 = Frame._this;
      localVariables1.initializeObject(uninitializedObjectType0);
      localVariables0.clone();
      localVariables1.clone();
      localVariables0.toString();
      localVariables0.hashCode();
      // Undeclared exception!
      try { 
        localVariables1.get(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2552
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 4208;
      LocalVariables localVariables0 = new LocalVariables(int0);
      int int1 = 0;
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(int1);
      Constant[] constantArray0 = new Constant[1];
      BasicType basicType0 = Type.SHORT;
      // Undeclared exception!
      try { 
        localVariables0.set(int0, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: LocalVariables do not know about 'short'. Use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1338;
      LocalVariables localVariables0 = new LocalVariables(int0);
      LocalVariables localVariables1 = localVariables0.getClone();
      UninitializedObjectType uninitializedObjectType0 = Frame._this;
      localVariables1.initializeObject(uninitializedObjectType0);
      int int1 = 2409;
      LocalVariables localVariables2 = new LocalVariables(int1);
      // Undeclared exception!
      try { 
        localVariables1.merge(localVariables2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Merging LocalVariables of different size?!? From different methods or what?!?
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 4112;
      LocalVariables localVariables0 = new LocalVariables(int0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.maxLocals();
      // Undeclared exception!
      localVariables0.clone();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1291;
      LocalVariables localVariables0 = new LocalVariables(int0);
      localVariables0.clone();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      localVariables1.clone();
      localVariables0.toString();
      // Undeclared exception!
      localVariables0.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      BasicType basicType0 = Type.CHAR;
      // Undeclared exception!
      try { 
        localVariables0.set(int0, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: LocalVariables do not know about 'char'. Use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 496;
      LocalVariables localVariables0 = new LocalVariables(int0);
      localVariables0.toString();
      DUP dUP0 = new DUP();
      int int1 = 0;
      LocalVariables localVariables1 = new LocalVariables(int1);
      // Undeclared exception!
      try { 
        localVariables0.merge(localVariables1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Merging LocalVariables of different size?!? From different methods or what?!?
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 2297;
      LocalVariables localVariables0 = new LocalVariables(int0);
      LocalVariables localVariables1 = new LocalVariables(int0);
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables2.clone();
      LocalVariables localVariables3 = new LocalVariables(int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 3342;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(3342, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(3342, localVariables0.maxLocals());
      assertEquals(3342, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      // Undeclared exception!
      localVariables1.merge(localVariables0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(0, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = null;
      // Undeclared exception!
      try { 
        localVariables0.merge(localVariables1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 4978;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(4978, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertEquals(4978, localVariables0.maxLocals());
      assertEquals(4978, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      String string0 = localVariables0.toString();
      assertEquals(4978, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(string0);
      
      int int1 = localVariables0.hashCode();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(int1 == int0);
      assertEquals(4978, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      // Undeclared exception!
      localVariables0.getClone();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 3324;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(3324, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(3324, localVariables0.maxLocals());
      assertEquals(3324, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(3324, localVariables0.maxLocals());
      assertEquals(3324, localVariables1.maxLocals());
      assertEquals(3324, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      localVariables0.merge(localVariables1);
      localVariables0.toString();
      localVariables1.clone();
      localVariables1.toString();
      localVariables1.merge(localVariables0);
      // Undeclared exception!
      localVariables1.equals(localVariables0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 119;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(119, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(119, localVariables0.maxLocals());
      assertEquals(119, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(119, localVariables0.maxLocals());
      assertEquals(119, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertEquals(119, localVariables0.maxLocals());
      assertEquals(119, localVariables2.maxLocals());
      assertEquals(119, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotNull(localVariables3);
      
      LocalVariables localVariables4 = (LocalVariables)localVariables3.clone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertEquals(119, localVariables0.maxLocals());
      assertEquals(119, localVariables2.maxLocals());
      assertEquals(119, localVariables3.maxLocals());
      assertEquals(119, localVariables4.maxLocals());
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables3, localVariables4);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables3);
      assertNotNull(localVariables4);
      
      localVariables0.merge(localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertEquals(119, localVariables0.maxLocals());
      assertEquals(119, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables1);
      
      Type type0 = null;
      // Undeclared exception!
      try { 
        localVariables4.set(int0, type0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 119
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(0, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      localVariables1.merge(localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      localVariables0.merge(localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      int int1 = 15;
      FCMPG fCMPG0 = new FCMPG();
      assertEquals(1, fCMPG0.getLength());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals("fcmpg", fCMPG0.getName());
      assertNotNull(fCMPG0);
      
      String string0 = localVariables0.toString();
      assertEquals("", string0);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(0, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(string0);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotNull(localVariables2);
      
      String string1 = localVariables2.toString();
      assertEquals("", string1);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      LocalVariables localVariables3 = (LocalVariables)localVariables2.clone();
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables2.maxLocals());
      assertEquals(0, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotNull(localVariables3);
      
      LocalVariables localVariables4 = localVariables1.getClone();
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      assertEquals(0, localVariables4.maxLocals());
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables1);
      assertNotNull(localVariables4);
      
      UninitializedObjectType uninitializedObjectType0 = Frame._this;
      assertNull(uninitializedObjectType0);
      
      int int2 = localVariables1.maxLocals();
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables2);
      
      localVariables2.initializeObject(uninitializedObjectType0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      
      int int3 = (-1);
      LocalVariables localVariables5 = null;
      try {
        localVariables5 = new LocalVariables(int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(1, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(1, localVariables0.maxLocals());
      assertEquals(1, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      String string0 = localVariables0.toString();
      assertEquals("0: <unknown object>\n", string0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(1, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotNull(string0);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(1, localVariables0.maxLocals());
      assertEquals(1, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertEquals(1, localVariables0.maxLocals());
      assertEquals(1, localVariables2.maxLocals());
      assertEquals(1, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotNull(localVariables3);
      
      int int1 = 0;
      int int2 = 0;
      IINC iINC0 = new IINC(int1, int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertEquals(0, iINC0.getIncrement());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals("iinc", iINC0.getName());
      assertEquals(3, iINC0.getLength());
      assertEquals(0, iINC0.getIndex());
      assertNotNull(iINC0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      long long0 = 168L;
      int int3 = constantPoolGen0.addLong(long0);
      assertEquals(1, int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(3, constantPoolGen0.getSize());
      
      BasicType basicType0 = (BasicType)iINC0.getType(constantPoolGen0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertEquals(0, iINC0.getIncrement());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals("iinc", iINC0.getName());
      assertEquals(3, iINC0.getLength());
      assertEquals(0, iINC0.getIndex());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, basicType0.getSize());
      assertEquals((byte)10, basicType0.getType());
      assertEquals("I", basicType0.getSignature());
      assertNotNull(basicType0);
      
      localVariables3.set(int1, basicType0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int3);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables3));
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertEquals(1, localVariables0.maxLocals());
      assertEquals(1, localVariables2.maxLocals());
      assertEquals(1, localVariables3.maxLocals());
      assertEquals(0, iINC0.getIncrement());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals("iinc", iINC0.getName());
      assertEquals(3, iINC0.getLength());
      assertEquals(0, iINC0.getIndex());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, basicType0.getSize());
      assertEquals((byte)10, basicType0.getType());
      assertEquals("I", basicType0.getSignature());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      
      int int4 = localVariables2.maxLocals();
      assertEquals(1, int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int3);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables3));
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals(1, localVariables0.maxLocals());
      assertEquals(1, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      
      String string1 = localVariables3.toString();
      assertEquals("0: int\n", string1);
      assertTrue(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int3);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables3));
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, localVariables0.maxLocals());
      assertEquals(1, localVariables2.maxLocals());
      assertEquals(1, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(basicType0.STRINGBUFFER);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(0, iINC0.getIncrement());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals("iinc", iINC0.getName());
      assertEquals(3, iINC0.getLength());
      assertEquals(0, iINC0.getIndex());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, basicType0.getSize());
      assertEquals((byte)10, basicType0.getType());
      assertEquals("I", basicType0.getSignature());
      assertNotNull(uninitializedObjectType0);
      
      localVariables2.initializeObject(uninitializedObjectType0);
      assertTrue(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int3);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables3));
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, localVariables0.maxLocals());
      assertEquals(1, localVariables2.maxLocals());
      assertEquals(0, iINC0.getIncrement());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals("iinc", iINC0.getName());
      assertEquals(3, iINC0.getLength());
      assertEquals(0, iINC0.getIndex());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, basicType0.getSize());
      assertEquals((byte)10, basicType0.getType());
      assertEquals("I", basicType0.getSignature());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      
      int int5 = localVariables3.maxLocals();
      assertEquals(1, int5);
      assertTrue(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int3);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables3));
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertEquals(1, localVariables0.maxLocals());
      assertEquals(1, localVariables2.maxLocals());
      assertEquals(1, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      
      boolean boolean0 = localVariables3.equals(string0);
      assertFalse(boolean0);
      assertTrue(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int5);
      assertTrue(int0 == int3);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertFalse(string0.equals((Object)string1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables3));
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertEquals(1, localVariables0.maxLocals());
      assertEquals(1, localVariables2.maxLocals());
      assertEquals(1, localVariables3.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(string0, string1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      
      int int6 = localVariables0.maxLocals();
      assertEquals(1, int6);
      assertTrue(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int5);
      assertTrue(int0 == int3);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertTrue(int6 == int4);
      assertFalse(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      assertEquals(1, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      
      int int7 = 0;
      Type type0 = localVariables2.get(int7);
      assertTrue(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int5);
      assertTrue(int0 == int3);
      assertFalse(int0 == int7);
      assertTrue(int0 == int6);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables3));
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertFalse(int7 == int6);
      assertEquals(1, localVariables0.maxLocals());
      assertEquals(1, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(type0);
      
      localVariables2.initializeObject(uninitializedObjectType0);
      assertTrue(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int5);
      assertTrue(int0 == int3);
      assertFalse(int0 == int7);
      assertTrue(int0 == int6);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables3));
      assertFalse(int1 == int5);
      assertFalse(int1 == int3);
      assertFalse(int1 == int6);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int2 == int4);
      assertFalse(int2 == int6);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int5);
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, localVariables0.maxLocals());
      assertEquals(1, localVariables2.maxLocals());
      assertEquals(0, iINC0.getIncrement());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals("iinc", iINC0.getName());
      assertEquals(3, iINC0.getLength());
      assertEquals(0, iINC0.getIndex());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, basicType0.getSize());
      assertEquals((byte)10, basicType0.getType());
      assertEquals("I", basicType0.getSignature());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      
      LocalVariables localVariables4 = (LocalVariables)localVariables0.clone();
      assertTrue(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int5);
      assertTrue(int0 == int3);
      assertFalse(int0 == int7);
      assertTrue(int0 == int6);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertFalse(localVariables4.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertEquals(1, localVariables0.maxLocals());
      assertEquals(1, localVariables4.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables2);
      assertNotNull(localVariables4);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-4948);
      LocalVariables localVariables0 = null;
      try {
        localVariables0 = new LocalVariables(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(0, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = localVariables0.toString();
      assertEquals("", string0);
      assertEquals(0, localVariables0.maxLocals());
      assertNotNull(string0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      
      String string1 = localVariables1.toString();
      assertEquals("", string1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      boolean boolean0 = localVariables1.equals(localVariables0);
      assertTrue(boolean0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      Object object0 = null;
      boolean boolean1 = localVariables0.equals(object0);
      assertFalse(boolean1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      int int1 = localVariables0.hashCode();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(int1 == int0);
      assertEquals(0, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      
      String string2 = localVariables0.toString();
      assertEquals("", string2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(0, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      
      int int2 = localVariables1.hashCode();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(int2 == int0);
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      assertEquals(0, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotNull(localVariables2);
      
      boolean boolean2 = localVariables1.equals(object0);
      assertFalse(boolean2);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      localVariables2.initializeObject(uninitializedObjectType0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(0, localVariables1.maxLocals());
      assertEquals(0, localVariables2.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      
      int int3 = 0;
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(int3);
      assertEquals("anewarray", aNEWARRAY0.getName());
      assertEquals((short)189, aNEWARRAY0.getOpcode());
      assertEquals(3, aNEWARRAY0.getLength());
      assertEquals(0, aNEWARRAY0.getIndex());
      assertNotNull(aNEWARRAY0);
      
      Constant[] constantArray0 = new Constant[1];
      int int4 = 0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(int3, int4);
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPoolGen0);
      
      String string3 = "<3~-*,w0,";
      int int5 = constantPoolGen0.addNameAndType(string0, string3);
      assertEquals(3, int5);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertEquals(0, localVariables0.maxLocals());
      assertEquals(1, constantPool0.getLength());
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, constantArray0.length);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      // Undeclared exception!
      try { 
        aNEWARRAY0.getLoadClassType(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Class' at index 0 and got CONSTANT_NameAndType[12](name_index = 0, signature_index = 0)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-584);
      LocalVariables localVariables0 = null;
      try {
        localVariables0 = new LocalVariables(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1789;
      LocalVariables localVariables0 = new LocalVariables(int0);
      assertEquals(1789, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      UninitializedObjectType uninitializedObjectType0 = Frame._this;
      assertNull(uninitializedObjectType0);
      
      localVariables0.initializeObject(uninitializedObjectType0);
      assertEquals(1789, localVariables0.maxLocals());
      
      // Undeclared exception!
      try { 
        localVariables0.get(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1789
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }
}
