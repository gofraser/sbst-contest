/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:31:37 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.stream.DoubleStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 2140;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, int0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      int int1 = 2;
      cCSMatrix0.copyOfColumns(int1);
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      PrivateAccess.setVariable((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "values", (Object) doubleArray0);
      int int2 = 283;
      int int3 = 32;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(int2, int3, matrixFunction0);
      int int4 = 659;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int0, int0, int4);
      int[] intArray0 = new int[1];
      intArray0[0] = int1;
      PrivateAccess.setVariable((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix1, "rowIndices", (Object) intArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 283
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 1;
      double double0 = (-1854.513532937);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, double0);
      double[] doubleArray0 = new double[0];
      PrivateAccess.setVariable((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "values", (Object) doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 12;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, int0);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      PrivateAccess.setVariable((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "rowIndices", (Object) intArray0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 32;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int0, int1);
      int[] intArray0 = new int[2];
      intArray0[0] = int1;
      intArray0[1] = int0;
      PrivateAccess.setVariable((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "columnPointers", (Object) intArray0);
      double[] doubleArray0 = new double[1];
      PrivateAccess.setVariable((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "values", (Object) doubleArray0);
      doubleArray0[0] = (double) int1;
      PrivateAccess.setVariable((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "values", (Object) doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 1;
      double double0 = (-1854.513532937);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, double0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.rotate();
      long long0 = 0L;
      cCSMatrix0.kroneckerProduct(cCSMatrix1);
      MockRandom mockRandom0 = new MockRandom(long0);
      PrivateAccess.callMethod((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix1, "align", (Object) int0, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(int0, int0, doubleArray0);
      double double0 = 0.0;
      SparseMatrix.diagonal(int0, double0);
      String string0 = "";
      Matrix.fromCSV(string0);
      int int1 = 1902;
      double double1 = 0.0;
      cCSMatrix0.setRow(int1, double1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      PrivateAccess.callMethod((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "growUp");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 1;
      double double0 = (-1854.513532937);
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int0, int0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.rotate();
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 42;
      double double0 = (-1854.513532937);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, double0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '43' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 1;
      double double0 = (-1854.513532937);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, double0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.rotate();
      cCSMatrix1.iterator();
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      try { 
        PrivateAccess.callMethod((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix1, "growUp");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This matrix can't grow up.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      double double0 = (-2065.0);
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[6];
      int int0 = 2053;
      intArray0[0] = int0;
      intArray0[1] = int0;
      int int1 = (-3302);
      intArray0[2] = int1;
      int int2 = (-267);
      intArray0[3] = int2;
      int int3 = 0;
      intArray0[4] = int3;
      int int4 = 0;
      SparseMatrix.from2DArray(doubleArray0);
      int int5 = 1371;
      cCSMatrix0.power(int5);
      intArray0[5] = int4;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2053' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 1372;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      Integer integer0 = new Integer(int0);
      MatrixProcedure matrixProcedure0 = null;
      // Undeclared exception!
      try { 
        cCSMatrix0.each(matrixProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      double double0 = (-2065.0);
      doubleArray1[0] = double0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[6];
      int int0 = 2053;
      int int1 = 737;
      intArray0[1] = int1;
      int int2 = (-3302);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      intArray0[2] = int2;
      intArray0[3] = int0;
      int int3 = 0;
      intArray0[4] = int3;
      int int4 = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '737' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 1;
      double double0 = (-1854.513532937);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, double0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      cCSMatrix1.set(int0, int0, double0);
      cCSMatrix1.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 2585;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int0);
      int int1 = 0;
      cCSMatrix0.copyOfShape(int1, int0);
      int int2 = 484;
      int int3 = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(int2, int3, matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(int2, (double) int2, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 234256.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 1892;
      double double0 = (-2472.0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, double0);
      cCSMatrix0.getRow(int0);
      String string0 = "org.la4j.matrix.sparse.CRSMatrix";
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 5;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int0);
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.setAll(int0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.shuffle();
      cCSMatrix0.each(matrixProcedure0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure1);
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom(long0);
      mockRandom0.longs();
      mockRandom0.doubles();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      double double0 = (-878.9185365652625);
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      int int0 = 2565;
      int int1 = 5315;
      cCSMatrix0.copyOfShape(int0, int1);
      int int2 = 2558;
      double double1 = (-703.72);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(int2, double1, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2147483648.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(int0, int1, doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateColumn(int1, vectorFunction0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      int int2 = 2566;
      double double0 = 0.0;
      Random random0 = null;
      CCSMatrix.randomSymmetric(int2, double0, random0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 2264;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      cCSMatrix0.spliterator();
      int int1 = cCSMatrix0.rank();
      cCSMatrix0.setAll(int0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transform(matrixFunction0);
      int int2 = 0;
      int int3 = 356;
      CCSMatrix.zero(int1, int2, int3);
      double double0 = 5126.0;
      cCSMatrix0.setAll(double0);
      cCSMatrix0.getColumn(int0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.to(matrixFactory0);
      cCSMatrix0.columnMajorIterator();
      int[] intArray0 = new int[5];
      int int4 = (-897);
      intArray0[0] = int4;
      intArray0[1] = int0;
      intArray0[2] = int1;
      intArray0[3] = int1;
      intArray0[4] = int1;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      double double0 = (-2065.0);
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[6];
      int int0 = 2053;
      intArray0[0] = int0;
      int int1 = 737;
      intArray0[1] = int1;
      int int2 = (-3302);
      intArray0[5] = int2;
      int int3 = (-267);
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 0;
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom(int0);
      cCSMatrix0.min();
      int int6 = (-2368);
      // Undeclared exception!
      try { 
        DenseMatrix.randomSymmetric(int6, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      long long0 = 0L;
      mockRandom0.longs(long0, long0, (long) int0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, double0);
      cCSMatrix0.shuffle();
      String string0 = "aa\\ZHZ`C_/AEE1";
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 1356;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      Integer integer0 = new Integer(int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 1;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      cCSMatrix0.min();
      String string0 = "         ";
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 1372;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      Integer integer0 = new Integer(int0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      int int1 = 6207;
      int int2 = 1;
      CCSMatrix.zero(int1, int2);
      String string0 = "F)m[8";
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = (-400);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.blankOfShape(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -400x-400
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int1;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(int0, int1, doubleArray0);
      cCSMatrix0.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 1;
      int int1 = 1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(int0, int1, doubleArray0);
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) int1;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int1;
      doubleArray2[3] = (double) int1;
      doubleArray2[4] = (double) int1;
      doubleArray2[5] = (double) int0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) int0;
      doubleArray3[1] = (double) int0;
      doubleArray3[2] = (double) int0;
      doubleArray3[3] = (double) int1;
      doubleArray3[4] = (double) int1;
      doubleArray3[5] = (double) int0;
      doubleArray3[6] = (double) int0;
      doubleArray3[7] = (double) int0;
      doubleArray1[6] = doubleArray3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      cCSMatrix0.product();
      int int2 = 1;
      ((CCSMatrix) columnMajorSparseMatrix0).getColumn(int2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 2;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      double double0 = (-1568.0167991);
      doubleArray0[2] = double0;
      double double1 = 354.87993713408514;
      doubleArray0[3] = double1;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(int0, int0, doubleArray0);
      int[] intArray0 = new int[8];
      int int1 = 0;
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      double double0 = (-2065.0);
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[6];
      int int0 = 2053;
      int int1 = 737;
      intArray0[1] = int1;
      int int2 = (-3302);
      intArray0[2] = int2;
      int int3 = (-267);
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      intArray0[5] = int2;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '737' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 3460;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int0);
      int int1 = 0;
      cCSMatrix0.sliceTopLeft(int1, int0);
      double double0 = (-68.010405);
      Matrix.diagonal(int0, double0);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3461
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      int int1 = 1307;
      MatrixFactory<Matrix> matrixFactory0 = null;
      int int2 = 3895;
      double double0 = (-3077.87);
      int int3 = 548;
      double double1 = 490.9439015095;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int3, double1);
      double double2 = 0.0;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int1, double2);
      int int4 = (-2515);
      int int5 = 1761;
      cCSMatrix0.blankOfShape(int5, int3);
      int int6 = 1448;
      int int7 = 1;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(int7, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, int0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      double double0 = (-772.5);
      doubleArray2[0] = double0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = double0;
      doubleArray3[1] = double0;
      double double1 = 311.71913189100155;
      doubleArray3[2] = double1;
      doubleArray3[3] = double0;
      doubleArray3[4] = double0;
      doubleArray3[5] = double0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = double0;
      doubleArray4[1] = double0;
      doubleArray4[2] = double0;
      doubleArray4[3] = double1;
      doubleArray4[4] = double0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = double1;
      doubleArray6[1] = double1;
      doubleArray6[2] = double0;
      doubleArray6[3] = double1;
      doubleArray6[4] = double1;
      double double2 = 350.9345;
      doubleArray6[5] = double2;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = double2;
      doubleArray7[1] = double0;
      doubleArray7[2] = double0;
      double double3 = (-2271.16091284);
      doubleArray7[3] = double3;
      doubleArray7[4] = double2;
      doubleArray7[5] = double0;
      doubleArray7[6] = double2;
      doubleArray7[7] = double2;
      doubleArray0[6] = doubleArray7;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int int0 = 1457;
      cCSMatrix0.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int0);
      double double0 = (-1324.0);
      cCSMatrix0.divide(double0);
      cCSMatrix0.nonZeroIteratorOfColumn(int0);
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[1];
      double double1 = 0.0;
      doubleArray1[0] = double1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = double0;
      doubleArray2[2] = double1;
      doubleArray2[3] = double1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      double double2 = (-1663.1213963634);
      doubleArray3[0] = double2;
      doubleArray3[1] = (double) int0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = double1;
      doubleArray4[1] = double1;
      doubleArray4[2] = double0;
      doubleArray4[3] = double0;
      doubleArray4[4] = double1;
      doubleArray4[5] = double1;
      doubleArray4[6] = (double) int0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = double1;
      doubleArray0[4] = doubleArray5;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix1.each(matrixProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 1;
      int int1 = 1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(int0, int1, doubleArray0);
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) int1;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int1;
      doubleArray2[3] = (double) int1;
      doubleArray2[4] = (double) int1;
      doubleArray2[5] = (double) int0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) int0;
      doubleArray3[1] = (double) int0;
      doubleArray3[2] = (double) int0;
      doubleArray3[3] = (double) int1;
      doubleArray3[4] = (double) int1;
      doubleArray3[5] = (double) int0;
      doubleArray3[6] = (double) int0;
      doubleArray3[7] = (double) int0;
      doubleArray1[6] = doubleArray3;
      ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      cCSMatrix0.product();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      int int1 = 326;
      MockRandom mockRandom0 = new MockRandom(int0);
      mockRandom0.doubles((double) int0, (double) int1);
      mockRandom0.nextLong();
      mockRandom0.nextLong();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)72;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.nextFloat();
      mockRandom0.nextBoolean();
      // Undeclared exception!
      try { 
        CCSMatrix.random(int0, int1, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 1015;
      double double0 = 0.0;
      Random random0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.random(int0, int0, double0, random0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 1452;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) int0);
      mockRandom0.nextBoolean();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      long long0 = 2328L;
      mockRandom0.longs(long0);
      cCSMatrix0.columnMajorIterator();
      int int1 = (-1724);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1724x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "";
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV(string0);
      int int0 = 1;
      cCSMatrix0.getRow(int0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      cCSMatrix0.toCSV(numberFormat0);
      int int1 = 818;
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 819
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int1;
      int[] intArray0 = new int[8];
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = intArray0[0];
      int int2 = (-1235);
      intArray0[3] = int2;
      intArray0[1] = int1;
      intArray0[5] = int1;
      intArray0[6] = int0;
      intArray0[7] = int1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int1, int0, doubleArray0, intArray0, intArray0);
      int int3 = 1;
      Matrix.constant(intArray0[1], intArray0[7], intArray0[3]);
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      double double0 = (-70.7);
      // Undeclared exception!
      try { 
        cCSMatrix0.set(int0, int0, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 4045;
      int int1 = 603;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1, int0);
      cCSMatrix0.blankOfRows(int1);
      int int2 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(int2, vectorProcedure0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)113;
      byteArray0[1] = byte1;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int0, int0);
      int int1 = 1141;
      cCSMatrix0.copyOfShape(int0, int1);
      int int2 = 818;
      SparseMatrix.zero(int0, int2, int0);
      Matrix matrix0 = cCSMatrix0.rotate();
      int int3 = 1328;
      int int4 = 0;
      int int5 = (-638);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, int3, int0, int4, int0, int5, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -638x1328
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int2;
      doubleArray0[1] = (double) int2;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int2;
      doubleArray0[4] = (double) int2;
      int[] intArray0 = new int[9];
      intArray0[0] = int1;
      intArray0[1] = int2;
      intArray0[2] = int1;
      intArray0[3] = int2;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int1, int2, doubleArray0, intArray0, intArray0);
      int int3 = (-363);
      int int4 = 195;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(int3, int4, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 195
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 0;
      int int1 = (-419);
      Random random0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.random(int0, int1, (double) int0, random0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      int[] intArray0 = new int[8];
      intArray0[0] = int0;
      int int1 = 1392;
      intArray0[1] = int1;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int0, int0, doubleArray0, intArray0, intArray0);
      cCSMatrix0.setAll(int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 2585;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int0);
      int int1 = 484;
      int int2 = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(int1, int2, matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(int1, (double) int1, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 234256.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(int0, int0, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 2128;
      int int1 = 32;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int1, int1);
      cCSMatrix0.toColumnVector();
      int int2 = 0;
      int int3 = 0;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int2, int3, int2);
      cCSMatrix1.manhattanNorm();
      double[][] doubleArray0 = new double[0][7];
      Matrix.from2DArray(doubleArray0);
      int int4 = (-1);
      // Undeclared exception!
      try { 
        cCSMatrix1.getOrElse(int4, int4, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int0, int1);
      int int2 = 0;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      double double0 = cCSMatrix0.foldNonZero(matrixAccumulator0);
      int int3 = 1490;
      cCSMatrix0.nonZeroIterator();
      double double1 = (-2565.0);
      int int4 = 0;
      double double2 = cCSMatrix0.minInRow(int4);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) int3;
      double double3 = 2105.73061428;
      doubleArray1[1] = double3;
      doubleArray1[2] = (double) int1;
      doubleArray1[3] = (double) int3;
      doubleArray1[4] = (double) int0;
      doubleArray1[5] = (double) int2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = double1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = double2;
      doubleArray3[1] = double2;
      doubleArray3[2] = (double) int3;
      doubleArray3[3] = double2;
      doubleArray3[4] = (double) int3;
      doubleArray3[5] = (double) int3;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      double double4 = 0.0;
      doubleArray4[0] = double4;
      doubleArray4[1] = (double) int2;
      doubleArray4[2] = double3;
      doubleArray4[3] = (double) int1;
      doubleArray4[4] = (double) int2;
      doubleArray4[5] = double1;
      doubleArray4[6] = (double) int1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = double1;
      doubleArray5[1] = (double) int0;
      doubleArray5[2] = double1;
      doubleArray5[3] = double3;
      doubleArray5[4] = (double) int4;
      doubleArray5[5] = (double) int2;
      doubleArray5[6] = double4;
      doubleArray5[7] = double1;
      doubleArray5[8] = (double) int2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (double) int0;
      doubleArray6[1] = double3;
      doubleArray6[2] = double0;
      doubleArray6[3] = double1;
      doubleArray6[4] = (double) int4;
      doubleArray0[5] = doubleArray6;
      Matrix.from2DArray(doubleArray0);
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "";
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV(string0);
      int int0 = 3364;
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3364
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 984;
      double double0 = 1087.3458041;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(int0, int0, double0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 0;
      int int1 = 166;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int1);
      cCSMatrix0.toString();
      int int2 = (-914);
      cCSMatrix0.setAll(int0);
      // Undeclared exception!
      try { 
        CCSMatrix.identity(int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 2090;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, int0);
      // Undeclared exception!
      cCSMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "*A%ziU-<";
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = (-2834);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int2;
      doubleArray0[4] = (double) int2;
      int[] intArray0 = new int[1];
      intArray0[0] = int1;
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(int0, int1, int2, doubleArray0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2834.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-39);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)33;
      byteArray0[2] = byte2;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, double0);
      int int1 = 0;
      int int2 = 0;
      ColumnMajorSparseMatrix.zero(int0, int1, int2);
      int int3 = 1;
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "v%px";
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = (-1701);
      // Undeclared exception!
      try { 
        CCSMatrix.diagonal(int0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = (-1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(int0, int0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = (-1017);
      int int1 = 0;
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1017x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1);
      int int2 = 0;
      cCSMatrix0.iteratorOfColumn(int2);
      int int3 = 0;
      cCSMatrix0.blankOfShape(int3, int2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, int0);
      int int1 = 1;
      int int2 = 0;
      cCSMatrix0.blankOfShape(int1, int2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 1;
      CCSMatrix.identity(int0);
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      double double0 = (-341.816727);
      doubleArray1[2] = double0;
      doubleArray1[3] = (double) int0;
      doubleArray1[4] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) int0;
      double double1 = (-3534.0300877);
      doubleArray2[1] = double1;
      doubleArray2[2] = double0;
      doubleArray2[3] = double0;
      doubleArray2[4] = (double) int0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = double1;
      double double2 = 0.0;
      doubleArray3[1] = double2;
      doubleArray3[2] = double0;
      doubleArray3[3] = (double) int0;
      doubleArray3[4] = double1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = double0;
      doubleArray4[1] = double0;
      doubleArray4[2] = double2;
      doubleArray4[3] = double2;
      doubleArray4[4] = double0;
      doubleArray4[5] = double1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = double1;
      doubleArray5[1] = double1;
      doubleArray5[2] = double1;
      doubleArray5[3] = (double) int0;
      doubleArray5[4] = (double) int0;
      doubleArray5[5] = (double) int0;
      doubleArray0[4] = doubleArray5;
      CCSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[7];
      double double0 = 2834.469529363;
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      double double2 = (-2522.11833239);
      doubleArray1[2] = double2;
      double double3 = 2.0;
      doubleArray1[3] = double3;
      double double4 = (-2571.595724152216);
      doubleArray1[4] = double4;
      double double5 = (-2747.383);
      doubleArray1[5] = double5;
      double double6 = 1151.29024117522;
      doubleArray1[6] = double6;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = double0;
      doubleArray2[1] = double3;
      doubleArray2[2] = double5;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 1251;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int0);
      cCSMatrix0.copyOfColumns(int0);
      // Undeclared exception!
      cCSMatrix0.norm();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 3931;
      MockRandom mockRandom0 = new MockRandom(int0);
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 15452761.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = (-2747);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2747x-2747
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-491);
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -491x-491
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int0, int1);
      cCSMatrix0.power(int0);
      int int2 = 3193;
      CCSMatrix.identity(int1);
      int int3 = 1;
      cCSMatrix0.iteratorOfRow(int3);
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3193
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 1719;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1, int1);
      int int2 = 5254;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int2, int2);
      // Undeclared exception!
      try { 
        CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, cCSMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 1064;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int0, int0);
      int int1 = 1491;
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(int1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1065
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int0, int0);
      double double0 = 0.0;
      cCSMatrix0.toString();
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(int0, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 3097;
      int int1 = 0;
      // Undeclared exception!
      try { 
        CCSMatrix.zero(int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-1529);
      int int1 = (-3167);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      double double0 = 348.0;
      MockRandom mockRandom0 = new MockRandom(int0);
      CCSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = (-1526);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 1616;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(int0, int0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1616
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 1616;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(int0, int0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1616
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int int1 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(int1, int0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      int int2 = 0;
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      int int3 = (-1489);
      rowMajorSparseMatrix0.toMatrixMarket();
      int int4 = (-3781);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, int0, int2, int0, int3, int3, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1489x-3781
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, double0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(int0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 1;
      double double0 = (-1854.513532937);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, double0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.removeLastRow();
      cCSMatrix1.rotate();
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int0);
      int int1 = 1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      double double0 = 0.0;
      doubleArray0[6] = double0;
      doubleArray0[7] = (double) int1;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(int0, int1, doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.update(matrixFunction0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0[5]).when(matrixAccumulator0).accumulate();
      cCSMatrix1.fold(matrixAccumulator0);
      cCSMatrix0.toBinary();
      int int2 = 1;
      long long0 = 5112L;
      MockRandom mockRandom0 = new MockRandom(long0);
      CCSMatrix.random(int2, int1, doubleArray0[2], (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 1372;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      assertNotNull(cCSMatrix0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1372, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(7.288629737609329E-4, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1372, cCSMatrix0.cardinality());
      assertEquals(1372, cCSMatrix0.columns());
      
      // Undeclared exception!
      cCSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      
      int int1 = 2736;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(int1, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2736
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)115;
      byteArray0[0] = byte0;
      byte byte1 = (byte)66;
      byteArray0[1] = byte1;
      byte byte2 = (byte)24;
      byteArray0[2] = byte2;
      byte byte3 = (byte)23;
      byteArray0[3] = byte3;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(cCSMatrix0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.multiply((double) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      
      Integer integer0 = new Integer(int0);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      Integer integer1 = cCSMatrix1.apply(matrixOperation0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNull(integer1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      
      double double0 = 0.0;
      boolean boolean0 = cCSMatrix0.equals((Matrix) cCSMatrix1, double0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(boolean0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.nonZeroColumnMajorIterator();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertNotNull(columnMajorMatrixIterator0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertNotNull(byteArray0);
      assertEquals(21, byteArray0.length);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.toColumnVector();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertNotNull(compressedVector0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      int int2 = 0;
      String string0 = "";
      CompressedVector compressedVector1 = (CompressedVector)SparseVector.fromCSV(string0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      
      double double1 = (-544.9677599);
      BasicVector basicVector0 = (BasicVector)compressedVector1.add(double1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(basicVector0);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, basicVector0.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      
      int int3 = 2644;
      CCSMatrix cCSMatrix2 = (CCSMatrix)compressedVector1.toColumnMatrix();
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(cCSMatrix2);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertEquals(1, cCSMatrix2.columns());
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(0, cCSMatrix2.rows());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      
      CompressedVector compressedVector2 = (CompressedVector)cCSMatrix2.getRow(int2);
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector2);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertEquals(1, cCSMatrix2.columns());
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(0, cCSMatrix2.rows());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(1, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      
      double double2 = cCSMatrix0.minInColumn(int0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix2));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        basicVector0.slice(int3, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2644..1].
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int1);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      
      double double0 = 593.3527957055499;
      boolean boolean0 = false;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean1 = cCSMatrix0.non(matrixPredicate0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      
      Double double1 = new Double(double0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(593.3527957055499, (double)double1, 0.01);
      
      double double2 = (-1890.664007321);
      VectorIterator vectorIterator0 = cCSMatrix0.nonZeroIteratorOfColumn(int1);
      assertNotNull(vectorIterator0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      
      double double3 = Double.max(double2, int1);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      boolean boolean2 = Double.isFinite(int0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = cCSMatrix0.equals((Object) double1);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotEquals((double)double1, (double)double3, 0.01);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      
      int int2 = (-1071);
      double double4 = 1917.0;
      int int3 = 508;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.columnMajorIterator();
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertNotNull(columnMajorMatrixIterator0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric(int3, (double) int3, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 258064.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int0);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      assertNotNull(sparseMatrix0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      
      cCSMatrix0.setAll(int0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.shuffle();
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix1.columns());
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(1, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(1, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      
      cCSMatrix0.each(matrixProcedure0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure1);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      CCSMatrix cCSMatrix2 = CCSMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix1));
      assertNotNull(cCSMatrix2);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0.0, cCSMatrix2.density(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(1, cCSMatrix2.columns());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertEquals(1, cCSMatrix2.rows());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-400);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(int0, int0, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      double double0 = (-2065.0);
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertNotNull(cCSMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals((-2065.0), cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      int[] intArray0 = new int[6];
      int int0 = 2053;
      intArray0[0] = int0;
      int int1 = 737;
      intArray0[1] = int1;
      int int2 = (-3302);
      intArray0[2] = int2;
      int int3 = (-267);
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2053' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
