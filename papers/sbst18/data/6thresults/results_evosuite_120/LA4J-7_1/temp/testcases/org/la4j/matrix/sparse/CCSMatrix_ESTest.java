/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 21:06:24 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 2251;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int1 = (-2163);
      try { 
        PrivateAccess.callMethod((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "remove", (Object) int1, (Class<?>) int.class, (Object) int1, (Class<?>) int.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1;
      int int1 = 32;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      double double0 = 1.0;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int1;
      doubleArray0[7] = (double) int1;
      doubleArray0[8] = (double) int1;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(int0, int1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[5] = int0;
      int int1 = 1548;
      intArray0[6] = int1;
      int int2 = 4;
      intArray0[7] = int2;
      int int3 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[] doubleArray0 = new double[1];
      PrivateAccess.callMethod((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "remove", (Object) int2, (Class<?>) int.class, (Object) intArray0[6], (Class<?>) int.class);
      doubleArray0[0] = (double) intArray0[0];
      PrivateAccess.setVariable((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "values", (Object) doubleArray0);
      try { 
        PrivateAccess.callMethod((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "growUp");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      double[] doubleArray0 = new double[0];
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(int0, int0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      PrivateAccess.setVariable((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "rowIndices", (Object) intArray0);
      int int1 = 5220;
      PrivateAccess.callMethod((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix1, "align", (Object) int1, (Class<?>) int.class);
      try { 
        PrivateAccess.callMethod((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "growUp");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This matrix can't grow up.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 2251;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.unit(int0, int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 32;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, int0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[1];
      double double0 = (-3029.525377804703);
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int0;
      doubleArray2[4] = (double) int0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) int0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = double0;
      doubleArray4[1] = (double) int0;
      doubleArray4[2] = (double) int0;
      doubleArray0[3] = doubleArray4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply((ColumnMajorSparseMatrix) cCSMatrix0, rowMajorSparseMatrix0);
      Matrix matrix1 = cCSMatrix0.multiply(matrix0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(matrix1).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      int int1 = 753;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int1);
      int int2 = (-3420);
      int int3 = 2;
      // Undeclared exception!
      try { 
        cCSMatrix0.set(int2, int3, int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-3420' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1, int1);
      cCSMatrix0.blankOfRows(int0);
      cCSMatrix0.columnMajorIterator();
      int int2 = 2145;
      int int3 = 2945;
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int2;
      double double1 = 0.0;
      doubleArray0[2] = double1;
      doubleArray0[3] = (double) int2;
      double double2 = (-713.3223018);
      doubleArray0[4] = double2;
      doubleArray0[5] = (double) int3;
      doubleArray0[6] = (double) int1;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(int2, int3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2945
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 2875;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      int int1 = 0;
      // Undeclared exception!
      cCSMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1;
      int int1 = (-2057);
      long long0 = 978L;
      MockRandom mockRandom0 = new MockRandom(long0);
      // Undeclared exception!
      try { 
        CCSMatrix.random(int0, int1, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      int int1 = 753;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int1);
      cCSMatrix0.isColumnMajor();
      cCSMatrix0.iteratorOrNonZeroColumns();
      int int2 = 1090;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(int1);
      CCSMatrix cCSMatrix1 = CCSMatrix.random(int1, int2, double0, (Random) mockRandom0);
      cCSMatrix1.toBinary();
      int int3 = 1;
      cCSMatrix0.getColumn(int3);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) cCSMatrix0, (SparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, matrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 32;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, int0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[1];
      double double0 = (-3029.525377804703);
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      cCSMatrix0.norm();
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int0;
      doubleArray2[4] = (double) int0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) int0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = double0;
      doubleArray2[3] = (double) int0;
      doubleArray4[2] = (double) int0;
      doubleArray0[3] = doubleArray4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ooPlaceMatricesSubtraction0.apply((ColumnMajorSparseMatrix) cCSMatrix0, rowMajorSparseMatrix0);
      CCSMatrix.zero(int0, int0, int0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(rowMajorSparseMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      CCSMatrix.diagonal(int0, int0);
      int int1 = 904;
      int int2 = (-2437);
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) int1;
      doubleArray0[1] = (double) int1;
      int int3 = 1;
      double double0 = 43.93963;
      SparseMatrix.diagonal(int0, double0);
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(int0, int3, doubleArray0);
      int int4 = 504;
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(int4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 504
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int0;
      ColumnMajorSparseMatrix.from1DArray(int1, int0, doubleArray0);
      double[] doubleArray1 = new double[1];
      double double0 = 5927.0;
      doubleArray1[0] = double0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      int int2 = 2526;
      int int3 = 835;
      int int4 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int2, int3, int4);
      int[] intArray0 = new int[8];
      intArray0[0] = int4;
      intArray0[1] = int3;
      intArray0[2] = int1;
      intArray0[3] = int4;
      intArray0[4] = int4;
      intArray0[5] = int2;
      intArray0[6] = int4;
      intArray0[7] = int2;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '835' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      double double0 = 0.0;
      doubleArray0[3] = double0;
      double double1 = 1.0;
      doubleArray0[4] = double1;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int1;
      doubleArray0[7] = (double) int1;
      double double2 = (-1733.72562130868);
      doubleArray0[8] = double2;
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      intArray0[1] = int1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int1, int1, doubleArray0, intArray0, intArray0);
      int int2 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int2, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      int int1 = 1548;
      intArray0[6] = int1;
      int int2 = 4;
      intArray0[7] = int2;
      int int3 = 0;
      intArray0[8] = int3;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int0, int0, doubleArray0, intArray0, intArray0);
      cCSMatrix0.maxInColumn(intArray0[0]);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int0);
      int int1 = 1052;
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1052
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      CCSMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      cCSMatrix0.getRow(int0);
      cCSMatrix0.columnMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.getRow(int0);
      int int1 = 0;
      cCSMatrix0.getRow(int1);
      CCSMatrix.diagonal(int1, int1);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure1);
      cCSMatrix0.shuffle();
      cCSMatrix0.trace();
      cCSMatrix0.toBinary();
      int int2 = 2;
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(int0, int2, int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      int int1 = 1124;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1);
      cCSMatrix0.removeFirstColumn();
      int int2 = (-1648);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int2;
      doubleArray0[1] = (double) int2;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(int2, int0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1648x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[1];
      double double0 = 100.0;
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = double0;
      doubleArray2[1] = double0;
      doubleArray2[2] = double0;
      doubleArray2[3] = double0;
      doubleArray2[4] = double0;
      doubleArray2[5] = double0;
      doubleArray2[6] = double0;
      doubleArray2[7] = double0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = double0;
      double double1 = (-2314.8436341116635);
      doubleArray3[1] = double1;
      doubleArray3[2] = double0;
      doubleArray3[3] = double0;
      doubleArray3[4] = double0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = double1;
      doubleArray4[1] = double1;
      doubleArray4[2] = double1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = double1;
      doubleArray5[1] = double0;
      doubleArray5[2] = double0;
      doubleArray5[3] = double1;
      doubleArray5[4] = double0;
      doubleArray5[5] = double0;
      doubleArray5[6] = double0;
      doubleArray5[7] = double0;
      doubleArray0[4] = doubleArray5;
      CCSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "        ";
      CCSMatrix.fromCSV(string0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = null;
      DenseMatrix denseMatrix1 = DenseMatrix.fromCSV(string0);
      ooPlaceMatricesAddition0.apply(denseMatrix1, denseMatrix0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      int int0 = 1;
      int int1 = 3;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(int0, int1, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 151;
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 151
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 2214;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      // Undeclared exception!
      cCSMatrix0.sliceTopLeft(int0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 225;
      int int1 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int1, int0);
      int int2 = 0;
      cCSMatrix0.getRow(int2);
      int int3 = 1;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(int3, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(int0);
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.min();
      cCSMatrix0.max();
      String string0 = "org.la4j.matrix.sparse.CCSMatrix";
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      long long0 = 1166L;
      MockRandom mockRandom0 = new MockRandom(long0);
      // Undeclared exception!
      try { 
        CCSMatrix.random(int0, int1, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transformColumn(int0, vectorFunction0);
      // Undeclared exception!
      try { 
        matrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1);
      cCSMatrix0.nonZeroColumnMajorIterator();
      int int2 = 0;
      int int3 = 0;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(int3, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      int int1 = 0;
      cCSMatrix0.iteratorOfRow(int1);
      cCSMatrix0.nonZeroColumnMajorIterator();
      // Undeclared exception!
      try { 
        cCSMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-4265);
      double double0 = (-642.498476);
      // Undeclared exception!
      try { 
        CCSMatrix.diagonal(int0, double0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 2613;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int0);
      ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      int int1 = 1250;
      double double0 = 3720.339565486091;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int1, double0);
      // Undeclared exception!
      cCSMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[2];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = 1693.36;
      doubleArray1[1] = double1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = double1;
      doubleArray2[1] = double1;
      doubleArray2[2] = double1;
      doubleArray2[3] = double0;
      doubleArray0[1] = doubleArray2;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int int0 = 2628;
      int int1 = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceBottomRight(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2628..2][0..2].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "-[,{";
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 2612;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, int0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1303;
      int int1 = 1749;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1);
      cCSMatrix0.spliterator();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[2];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = double1;
      doubleArray2[1] = double1;
      doubleArray2[2] = double0;
      doubleArray2[3] = double0;
      doubleArray2[4] = double1;
      double double2 = 0.0;
      doubleArray2[5] = double2;
      doubleArray2[6] = double1;
      doubleArray2[7] = double1;
      doubleArray2[8] = double1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = double0;
      doubleArray3[1] = double1;
      doubleArray3[2] = double2;
      doubleArray3[3] = double0;
      doubleArray3[4] = double0;
      doubleArray3[5] = double1;
      doubleArray3[6] = double0;
      doubleArray3[7] = double2;
      doubleArray0[2] = doubleArray3;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int int0 = 1;
      cCSMatrix0.iteratorOfRow(int0);
      String string0 = "";
      CCSMatrix.fromCSV(string0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.each(matrixProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1);
      int int2 = 0;
      cCSMatrix0.minInRow(int1);
      MockRandom mockRandom0 = new MockRandom(int0);
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(int2, (double) int2, (Random) mockRandom0);
      int int3 = 0;
      // Undeclared exception!
      try { 
        cCSMatrix1.isZeroAt(int3, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      double double0 = 0.0;
      doubleArray2[0] = double0;
      double double1 = (-502.2444);
      doubleArray2[1] = double1;
      doubleArray0[1] = doubleArray2;
      CCSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      Random random0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.random(int0, int0, double0, random0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 3931;
      int int1 = (-351);
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 3931x-351
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 1362;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      double double0 = 0.0;
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(int0, int0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1362
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      CCSMatrix.diagonal(int0, int0);
      int int1 = 904;
      int int2 = (-2437);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      int int3 = 1;
      CCSMatrix.from1DArray(int0, int3, doubleArray0);
      String string0 = "nmtgi";
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int0, int0, doubleArray0, intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 687;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 471969.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 32;
      double double0 = (-1561.0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(int0, int0, double0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 444;
      MockRandom mockRandom0 = new MockRandom(int0);
      // Undeclared exception!
      try { 
        CCSMatrix.random(int0, int0, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "org.la4j.matrix.sparse.CCSMatrix";
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1, int1);
      int int2 = 1;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(int2, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 2109;
      int int1 = 0;
      int int2 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1, int2);
      int int3 = 48;
      cCSMatrix0.blankOfShape(int3, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 0;
      int int1 = 2246;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1, int0);
      int int2 = (-759);
      // Undeclared exception!
      try { 
        cCSMatrix0.get(int1, int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2246' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 17;
      int int1 = 330;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1, int0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '331' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 0;
      cCSMatrix0.nonZeroIteratorOfColumn(int0);
      cCSMatrix0.norm();
      int int1 = (-2476);
      String string0 = "o7Vp;%SDT)\"]{8e+'";
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)84;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(int0, int1);
      cCSMatrix0.blankOfShape(int1, int1);
      cCSMatrix0.max();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)93;
      byteArray0[1] = byte1;
      byte byte2 = (byte)60;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-35);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-8);
      byteArray0[6] = byte6;
      byte byte7 = (byte)1;
      byteArray0[7] = byte7;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = (-447);
      // Undeclared exception!
      try { 
        CCSMatrix.identity(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = (-124);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      intArray0[1] = int0;
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(int0, int0, int0, doubleArray0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -124x-124
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = (-637);
      int int1 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(int0, int1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -637x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, double0);
      cCSMatrix0.setAll(double0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)88;
      byteArray0[1] = byte1;
      byte byte2 = (byte)81;
      byteArray0[2] = byte2;
      CCSMatrix.zero((int) byte1, (int) byte1);
      byte byte3 = (byte) (-62);
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byte byte6 = (byte)16;
      byteArray0[6] = byte6;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int1, int1);
      int int2 = 1;
      int int3 = 1;
      cCSMatrix0.copyOfShape(int2, int3);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.blankOfColumns(int0);
      double double0 = (-1.0);
      cCSMatrix0.setAll(double0);
      int int4 = (-2138);
      double double1 = 2337.99061386915;
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(int4, int3, double1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2138' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      double double0 = 0.0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(int0, int1, doubleArray0);
      int int2 = (-828);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -828
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.copyOfShape(int0, int0);
      double double0 = 0.0;
      CCSMatrix.diagonal(int0, double0);
      int int1 = (-1728);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(int1, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1728
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      // Undeclared exception!
      try { 
        CCSMatrix.zero(int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      cCSMatrix0.toString();
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1;
      double double0 = 0.0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(int0, double0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, rowMajorSparseMatrix0);
      MatrixFactory<CCSMatrix> matrixFactory0 = null;
      cCSMatrix0.spliterator();
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 32;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, int0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[1];
      double double0 = (-3029.525377804703);
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int0;
      doubleArray2[4] = (double) int0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) int0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = double0;
      doubleArray4[2] = (double) int0;
      doubleArray0[3] = doubleArray4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply((ColumnMajorSparseMatrix) cCSMatrix0, rowMajorSparseMatrix0);
      cCSMatrix0.multiply(matrix0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      double double0 = 1.0;
      doubleArray0[7] = double0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(int0, int0, doubleArray0);
      PrivateAccess.callMethod((Class<CCSMatrix>) CCSMatrix.class, cCSMatrix0, "growUp");
      double double1 = 4385.25374748;
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(int0, int0, double1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      int int1 = 1033;
      cCSMatrix0.iterator();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1033
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 554;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, int0);
      cCSMatrix0.iteratorOfColumn(int0);
      cCSMatrix0.copy();
      cCSMatrix0.nonZeroIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "";
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV(string0);
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.rowMajorIterator();
      cCSMatrix0.toBinary();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldRows(vectorAccumulator0);
      int int0 = 4502;
      cCSMatrix0.isColumnMajor();
      int int1 = 2282;
      cCSMatrix0.blankOfShape(int0, int1);
      MatrixVectorOperation<Object> matrixVectorOperation0 = (MatrixVectorOperation<Object>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((VectorOperation) null).when(matrixVectorOperation0).partiallyApply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      Vector vector0 = mock(Vector.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(vector0).apply(any(org.la4j.operation.VectorOperation.class));
      cCSMatrix0.apply(matrixVectorOperation0, vector0);
      int[] intArray0 = new int[9];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int0;
      intArray0[3] = int1;
      intArray0[4] = int0;
      int int2 = 2;
      cCSMatrix0.maxInRow(int2);
      intArray0[5] = int0;
      int int3 = (-2146648376);
      intArray0[6] = int3;
      intArray0[7] = int1;
      int int4 = 2251;
      intArray0[8] = int4;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2282' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 2251;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.unit(int0, int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = 951;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(int1, vectorAccumulator0);
      cCSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 2251;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.unit(int0, int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.product();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      String string0 = "DS%=z&!@^p!]cOs";
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cCSMatrix0.transpose();
      ColumnMajorSparseMatrix.zero(int0, int0, int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = 1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int1;
      double double0 = 0.0;
      doubleArray0[5] = double0;
      doubleArray0[6] = (double) int1;
      doubleArray0[7] = (double) int1;
      Matrix.from1DArray(int0, int1, doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = 0;
      int int1 = 753;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int1);
      cCSMatrix0.isColumnMajor();
      cCSMatrix0.iteratorOrNonZeroColumns();
      int int2 = (-826);
      int int3 = 1090;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(int1);
      // Undeclared exception!
      try { 
        CCSMatrix.random(int2, int3, double0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -826x1090
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[3];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = 1.0;
      doubleArray1[1] = double1;
      double double2 = (-1148.566);
      doubleArray1[2] = double2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = double2;
      doubleArray2[1] = double2;
      doubleArray2[2] = double0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = double0;
      doubleArray3[1] = double2;
      doubleArray3[2] = double0;
      doubleArray3[3] = double2;
      doubleArray3[4] = double0;
      doubleArray3[5] = double2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = double0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = double0;
      doubleArray5[1] = double1;
      doubleArray5[2] = double2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = double0;
      doubleArray6[1] = double0;
      doubleArray6[2] = double0;
      doubleArray6[3] = double2;
      doubleArray6[4] = double1;
      doubleArray6[5] = double1;
      doubleArray6[6] = double1;
      double double3 = (-1110.6952759);
      doubleArray6[7] = double3;
      doubleArray6[8] = double1;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = double2;
      doubleArray7[1] = double0;
      doubleArray7[2] = double3;
      double double4 = 0.0;
      doubleArray7[3] = double4;
      doubleArray7[4] = double1;
      doubleArray7[5] = double0;
      doubleArray7[6] = double0;
      doubleArray7[7] = double2;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = double4;
      doubleArray8[1] = double4;
      doubleArray8[2] = double2;
      double double5 = (-175.9088979);
      doubleArray8[3] = double5;
      doubleArray8[4] = double1;
      doubleArray8[5] = double3;
      doubleArray8[6] = double1;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      doubleArray9[0] = double2;
      doubleArray9[1] = double3;
      doubleArray9[2] = double1;
      doubleArray9[3] = double0;
      doubleArray9[4] = double5;
      doubleArray9[5] = double4;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = 550;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 550x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = (-2481);
      int int1 = 0;
      int int2 = 0;
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2481x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 2613;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int0);
      ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      int int1 = 0;
      double double0 = (-584.0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int1, double0);
      // Undeclared exception!
      try { 
        cCSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      int int0 = 1687;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      // Undeclared exception!
      cCSMatrix0.determinant();
  }
}
