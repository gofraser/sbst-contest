/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 19:47:49 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.ExclusionStrategy;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.Since;
import com.google.gson.annotations.Until;
import com.google.gson.internal.Excluder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonWriter;
import java.io.Writer;
import java.lang.reflect.Field;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Excluder_ESTest extends Excluder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertNotNull(gson0);
      
      Excluder excluder0 = gson0.excluder();
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertNotNull(excluder0);
      
      double double0 = 0.0;
      Excluder excluder1 = excluder0.withVersion(double0);
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder1, excluder0);
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder0));
      //  // Unstable assertion: assertNotNull(excluder1);
      
      int[] intArray0 = new int[5];
      Excluder excluder2 = excluder1.withModifiers(intArray0);
      //  // Unstable assertion: assertNotSame(excluder0, excluder2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder1, excluder0);
      //  // Unstable assertion: assertNotSame(excluder1, excluder2);
      //  // Unstable assertion: assertNotSame(excluder2, excluder0);
      //  // Unstable assertion: assertNotSame(excluder2, excluder1);
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder1));
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertNotNull(excluder2);
      //  // Unstable assertion: assertEquals(5, intArray0.length);
      
      boolean boolean0 = true;
      int int0 = 1056;
      Integer integer0 = new Integer(int0);
      //  // Unstable assertion: assertEquals(1056, (int)integer0);
      //  // Unstable assertion: assertTrue(integer0.equals((Object)int0));
      //  // Unstable assertion: assertNotNull(integer0);
      
      String string0 = gson0.toJson((Object) integer0);
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertTrue(integer0.equals((Object)int0));
      //  // Unstable assertion: assertNotNull(string0);
      
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(exclusionStrategy0).shouldSkipClass(any(java.lang.Class.class));
      boolean boolean1 = true;
      Excluder excluder3 = excluder2.withExclusionStrategy(exclusionStrategy0, boolean1, boolean0);
      //  // Unstable assertion: assertNotSame(excluder0, excluder2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder3);
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder1, excluder0);
      //  // Unstable assertion: assertNotSame(excluder1, excluder2);
      //  // Unstable assertion: assertNotSame(excluder1, excluder3);
      //  // Unstable assertion: assertNotSame(excluder2, excluder3);
      //  // Unstable assertion: assertNotSame(excluder2, excluder0);
      //  // Unstable assertion: assertNotSame(excluder2, excluder1);
      //  // Unstable assertion: assertNotSame(excluder3, excluder0);
      //  // Unstable assertion: assertNotSame(excluder3, excluder1);
      //  // Unstable assertion: assertNotSame(excluder3, excluder2);
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder2));
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertNotNull(excluder3);
      //  // Unstable assertion: assertEquals(5, intArray0.length);
      
      Excluder excluder4 = excluder3.disableInnerClassSerialization();
      //  // Unstable assertion: assertNotSame(excluder0, excluder4);
      //  // Unstable assertion: assertNotSame(excluder0, excluder2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder3);
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder1, excluder0);
      //  // Unstable assertion: assertNotSame(excluder1, excluder2);
      //  // Unstable assertion: assertNotSame(excluder1, excluder3);
      //  // Unstable assertion: assertNotSame(excluder1, excluder4);
      //  // Unstable assertion: assertNotSame(excluder2, excluder3);
      //  // Unstable assertion: assertNotSame(excluder2, excluder4);
      //  // Unstable assertion: assertNotSame(excluder2, excluder0);
      //  // Unstable assertion: assertNotSame(excluder2, excluder1);
      //  // Unstable assertion: assertNotSame(excluder3, excluder0);
      //  // Unstable assertion: assertNotSame(excluder3, excluder1);
      //  // Unstable assertion: assertNotSame(excluder3, excluder4);
      //  // Unstable assertion: assertNotSame(excluder3, excluder2);
      //  // Unstable assertion: assertNotSame(excluder4, excluder3);
      //  // Unstable assertion: assertNotSame(excluder4, excluder2);
      //  // Unstable assertion: assertNotSame(excluder4, excluder1);
      //  // Unstable assertion: assertNotSame(excluder4, excluder0);
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder4.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder4.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder4.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder4.equals((Object)excluder0));
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertNotNull(excluder4);
      //  // Unstable assertion: assertEquals(5, intArray0.length);
      
      Class<Object> class0 = Object.class;
      boolean boolean2 = excluder4.excludeClass(class0, boolean0);
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder4);
      //  // Unstable assertion: assertNotSame(excluder0, excluder2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder3);
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder1, excluder0);
      //  // Unstable assertion: assertNotSame(excluder1, excluder2);
      //  // Unstable assertion: assertNotSame(excluder1, excluder3);
      //  // Unstable assertion: assertNotSame(excluder1, excluder4);
      //  // Unstable assertion: assertNotSame(excluder2, excluder3);
      //  // Unstable assertion: assertNotSame(excluder2, excluder4);
      //  // Unstable assertion: assertNotSame(excluder2, excluder0);
      //  // Unstable assertion: assertNotSame(excluder2, excluder1);
      //  // Unstable assertion: assertNotSame(excluder3, excluder0);
      //  // Unstable assertion: assertNotSame(excluder3, excluder1);
      //  // Unstable assertion: assertNotSame(excluder3, excluder4);
      //  // Unstable assertion: assertNotSame(excluder3, excluder2);
      //  // Unstable assertion: assertNotSame(excluder4, excluder3);
      //  // Unstable assertion: assertNotSame(excluder4, excluder2);
      //  // Unstable assertion: assertNotSame(excluder4, excluder1);
      //  // Unstable assertion: assertNotSame(excluder4, excluder0);
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder4));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder4));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder4));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder4));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder4.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder4.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder4.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder4.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertEquals(5, intArray0.length);
      
      Since since0 = mock(Since.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(since0).value();
      Until until0 = mock(Until.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(until0).value();
      Object object0 = PrivateAccess.callMethod((Class<Excluder>) Excluder.class, excluder1, "isValidVersion", (Object) since0, (Class<?>) Since.class, (Object) until0, (Class<?>) Until.class);
      //  // Unstable assertion: assertEquals(false, object0);
      //  // Unstable assertion: assertNotSame(excluder0, excluder4);
      //  // Unstable assertion: assertNotSame(excluder0, excluder2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder3);
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder1, excluder0);
      //  // Unstable assertion: assertNotSame(excluder1, excluder2);
      //  // Unstable assertion: assertNotSame(excluder1, excluder3);
      //  // Unstable assertion: assertNotSame(excluder1, excluder4);
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder4));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(object0.equals((Object)boolean1));
      //  // Unstable assertion: assertTrue(object0.equals((Object)boolean2));
      //  // Unstable assertion: assertFalse(object0.equals((Object)boolean0));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder4));
      //  // Unstable assertion: assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = (-958.887647121452);
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      Excluder excluder1 = excluder0.withVersion(double0);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
      
      Class<Object> class0 = Object.class;
      boolean boolean0 = true;
      boolean boolean1 = excluder1.excludeClass(class0, boolean0);
      assertFalse(boolean1);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      ExclusionStrategy exclusionStrategy0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      Excluder excluder1 = excluder0.withExclusionStrategy(exclusionStrategy0, boolean0, boolean1);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      int[] intArray0 = new int[2];
      int int0 = (-134);
      intArray0[0] = int0;
      intArray0[1] = intArray0[0];
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertFalse(excluder1.equals((Object)excluder0));
      assertArrayEquals(new int[] {(-134), (-134)}, intArray0);
      assertNotNull(excluder1);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        excluder0.DEFAULT.withModifiers(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Excluder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Excluder excluder0 = gson0.excluder();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(excluder0);
      
      Field field0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        excluder0.excludeField(field0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Excluder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(gson0);
      
      Excluder excluder0 = gson0.excluder();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(excluder0);
      
      ExclusionStrategy exclusionStrategy0 = null;
      boolean boolean0 = true;
      Excluder excluder1 = excluder0.withExclusionStrategy(exclusionStrategy0, boolean0, boolean0);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        excluder1.excludeClass(class0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Excluder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      TypeToken<Expose> typeToken0 = null;
      // Undeclared exception!
      try { 
        excluder0.create(gson0, typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Excluder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      Class<Object> class0 = Object.class;
      boolean boolean0 = false;
      boolean boolean1 = excluder0.excludeClass(class0, boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Excluder excluder0 = gson0.excluder();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(excluder0);
      
      Since since0 = mock(Since.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(since0).value();
      Until until0 = mock(Until.class, new ViolatedAssumptionAnswer());
      Object object0 = PrivateAccess.callMethod((Class<Excluder>) Excluder.class, excluder0, "isValidVersion", (Object) since0, (Class<?>) Since.class, (Object) until0, (Class<?>) Until.class);
      assertEquals(false, object0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertNotNull(gson0);
      
      Excluder excluder0 = gson0.excluder();
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertNotNull(excluder0);
      
      Excluder excluder1 = excluder0.clone();
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder1, excluder0);
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder0));
      //  // Unstable assertion: assertNotNull(excluder1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "|pfy[BWP[L1rQM";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JsonWriter jsonWriter0 = gson0.newJsonWriter(writer0);
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(jsonWriter0.isLenient());
      //  // Unstable assertion: assertFalse(jsonWriter0.isHtmlSafe());
      //  // Unstable assertion: assertFalse(jsonWriter0.getSerializeNulls());
      //  // Unstable assertion: assertNotNull(jsonWriter0);
      
      boolean boolean1 = true;
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, boolean1).when(exclusionStrategy0).shouldSkipClass(any(java.lang.Class.class));
      boolean boolean2 = true;
      Excluder excluder2 = excluder0.withExclusionStrategy(exclusionStrategy0, boolean2, boolean2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder2, excluder1);
      //  // Unstable assertion: assertNotSame(excluder2, excluder0);
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder0));
      //  // Unstable assertion: assertNotNull(excluder2);
      
      Excluder excluder3 = excluder2.excludeFieldsWithoutExposeAnnotation();
      //  // Unstable assertion: assertNotSame(excluder0, excluder2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder0, excluder3);
      //  // Unstable assertion: assertNotSame(excluder2, excluder3);
      //  // Unstable assertion: assertNotSame(excluder2, excluder0);
      //  // Unstable assertion: assertNotSame(excluder2, excluder1);
      //  // Unstable assertion: assertNotSame(excluder3, excluder0);
      //  // Unstable assertion: assertNotSame(excluder3, excluder2);
      //  // Unstable assertion: assertNotSame(excluder3, excluder1);
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder1));
      //  // Unstable assertion: assertNotNull(excluder3);
      
      double double0 = 1565.348;
      PrivateAccess.setVariable((Class<Excluder>) Excluder.class, excluder1.DEFAULT, "version", (Object) double0);
      //  // Unstable assertion: assertNotSame(excluder0, excluder2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder0, excluder3);
      //  // Unstable assertion: assertNotSame(excluder1, excluder2);
      //  // Unstable assertion: assertNotSame(excluder1, excluder0);
      //  // Unstable assertion: assertNotSame(excluder1, excluder3);
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder3));
      
      Since since0 = mock(Since.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(since0).value();
      Until until0 = mock(Until.class, new ViolatedAssumptionAnswer());
      Object object0 = PrivateAccess.callMethod((Class<Excluder>) Excluder.class, excluder1, "isValidVersion", (Object) since0, (Class<?>) Since.class, (Object) until0, (Class<?>) Until.class);
      //  // Unstable assertion: assertEquals(false, object0);
      //  // Unstable assertion: assertNotSame(excluder0, excluder2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder0, excluder3);
      //  // Unstable assertion: assertNotSame(excluder1, excluder2);
      //  // Unstable assertion: assertNotSame(excluder1, excluder0);
      //  // Unstable assertion: assertNotSame(excluder1, excluder3);
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertTrue(object0.equals((Object)boolean0));
      //  // Unstable assertion: assertFalse(object0.equals((Object)boolean1));
      //  // Unstable assertion: assertFalse(object0.equals((Object)boolean2));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder3));
      //  // Unstable assertion: assertNotNull(object0);
      
      Class<Object> class0 = Object.class;
      boolean boolean3 = true;
      boolean boolean4 = excluder3.excludeClass(class0, boolean3);
      //  // Unstable assertion: assertFalse(boolean4);
      //  // Unstable assertion: assertNotSame(excluder0, excluder2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder0, excluder3);
      //  // Unstable assertion: assertNotSame(excluder2, excluder3);
      //  // Unstable assertion: assertNotSame(excluder2, excluder0);
      //  // Unstable assertion: assertNotSame(excluder2, excluder1);
      //  // Unstable assertion: assertNotSame(excluder3, excluder0);
      //  // Unstable assertion: assertNotSame(excluder3, excluder2);
      //  // Unstable assertion: assertNotSame(excluder3, excluder1);
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(boolean3 == boolean0);
      //  // Unstable assertion: assertFalse(boolean4 == boolean1);
      //  // Unstable assertion: assertFalse(boolean4 == boolean2);
      //  // Unstable assertion: assertFalse(boolean4 == boolean3);
      //  // Unstable assertion: assertTrue(boolean4 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder3.equals((Object)excluder1));
      
      Class<Object> class1 = Object.class;
      boolean boolean5 = true;
      boolean boolean6 = excluder2.excludeClass(class1, boolean5);
      //  // Unstable assertion: assertFalse(boolean6);
      //  // Unstable assertion: assertNotSame(excluder0, excluder2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder0, excluder3);
      //  // Unstable assertion: assertSame(class1, class0);
      //  // Unstable assertion: assertNotSame(excluder2, excluder3);
      //  // Unstable assertion: assertNotSame(excluder2, excluder0);
      //  // Unstable assertion: assertNotSame(excluder2, excluder1);
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(boolean5 == boolean4);
      //  // Unstable assertion: assertFalse(boolean5 == boolean0);
      //  // Unstable assertion: assertFalse(boolean6 == boolean3);
      //  // Unstable assertion: assertTrue(boolean6 == boolean4);
      //  // Unstable assertion: assertTrue(boolean6 == boolean0);
      //  // Unstable assertion: assertFalse(boolean6 == boolean1);
      //  // Unstable assertion: assertFalse(boolean6 == boolean5);
      //  // Unstable assertion: assertFalse(boolean6 == boolean2);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean4);
      //  // Unstable assertion: assertFalse(boolean2 == boolean4);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder2.equals((Object)excluder1));
      
      Object object1 = PrivateAccess.callMethod((Class<Excluder>) Excluder.class, excluder1, "isStatic", (Object) class1, (Class<?>) Class.class);
      //  // Unstable assertion: assertEquals(false, object1);
      //  // Unstable assertion: assertNotSame(excluder0, excluder2);
      //  // Unstable assertion: assertNotSame(excluder0, excluder1);
      //  // Unstable assertion: assertNotSame(excluder0, excluder3);
      //  // Unstable assertion: assertNotSame(excluder1, excluder2);
      //  // Unstable assertion: assertNotSame(excluder1, excluder0);
      //  // Unstable assertion: assertNotSame(excluder1, excluder3);
      //  // Unstable assertion: assertSame(class1, class0);
      //  // Unstable assertion: assertFalse(gson0.serializeNulls());
      //  // Unstable assertion: assertTrue(gson0.htmlSafe());
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder1));
      //  // Unstable assertion: assertFalse(excluder0.equals((Object)excluder3));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder2));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder0));
      //  // Unstable assertion: assertFalse(excluder1.equals((Object)excluder3));
      //  // Unstable assertion: assertTrue(object1.equals((Object)boolean4));
      //  // Unstable assertion: assertTrue(object1.equals((Object)boolean0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)boolean1));
      //  // Unstable assertion: assertTrue(object1.equals((Object)object0));
      //  // Unstable assertion: assertTrue(object1.equals((Object)boolean6));
      //  // Unstable assertion: assertFalse(object1.equals((Object)boolean2));
      //  // Unstable assertion: assertFalse(object1.equals((Object)boolean5));
      //  // Unstable assertion: assertFalse(object1.equals((Object)boolean3));
      //  // Unstable assertion: assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Class<FieldNamingPolicy> class0 = FieldNamingPolicy.class;
      TypeToken<FieldNamingPolicy> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<FieldNamingPolicy> typeAdapter0 = excluder0.DEFAULT.create(gson0, typeToken0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Excluder excluder0 = gson0.excluder();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(excluder0);
      
      Class<Object> class0 = Object.class;
      Until until0 = mock(Until.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(until0).value();
      Object object0 = PrivateAccess.callMethod((Class<Excluder>) Excluder.class, excluder0, "isValidUntil", (Object) until0, (Class<?>) Until.class);
      assertEquals(true, object0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(object0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Object object1 = PrivateAccess.callMethod((Class<Excluder>) Excluder.class, excluder0.DEFAULT, "isStatic", (Object) class0, (Class<?>) Class.class);
      assertEquals(false, object1);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertTrue(object1.equals((Object)boolean0));
      assertTrue(object1.equals((Object)boolean1));
      assertFalse(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)boolean2));
      assertNotNull(object1);
      
      String string0 = gson0.toJson((Object) excluder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(string0);
      
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
      
      String string1 = gson0.toJson(object1);
      assertEquals("false", string1);
      assertNotSame(excluder0, excluder1);
      assertNotSame(string1, string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(excluder0.equals((Object)excluder1));
      assertTrue(object1.equals((Object)boolean0));
      assertTrue(object1.equals((Object)boolean1));
      assertFalse(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)boolean2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = null;
      Excluder excluder2 = excluder1.disableInnerClassSerialization();
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder2, excluder1);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder1));
      assertNotNull(excluder2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Excluder excluder0 = gson0.excluder();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(excluder0);
      
      String string0 = gson0.toJson((Object) excluder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(gson0);
      
      Excluder excluder0 = gson0.excluder();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(excluder0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "|pfy[BWP[L1rQM";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      ExclusionStrategy exclusionStrategy0 = null;
      Excluder excluder1 = excluder0.DEFAULT.withExclusionStrategy(exclusionStrategy0, boolean0, boolean0);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
  }
}
