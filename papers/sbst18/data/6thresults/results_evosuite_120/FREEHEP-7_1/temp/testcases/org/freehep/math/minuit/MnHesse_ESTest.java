/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:34:48 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnFcn;
import org.freehep.math.minuit.MnHesse;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnHesse_ESTest extends MnHesse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-1298);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnStrategy0.setHessianStepTolerance(int0);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals((-1298.0), mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals((-1298.0), mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertNotNull(mnHesse0);
      
      double double0 = mnHesse0.tolerstp();
      assertEquals((-1298.0), double0, 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals((-1298.0), mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnHesse0);
      
      double double0 = 0.0;
      mnStrategy0.setHessianG2Tolerance(double0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.0, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      
      double double1 = mnHesse0.tolerg2();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.0, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnHesse0);
      
      double double0 = (-2064.503413250323);
      mnStrategy0.setHessianG2Tolerance(double0);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals((-2064.503413250323), mnStrategy0.hessianG2Tolerance(), 0.01);
      
      double double1 = mnHesse0.tolerg2();
      assertEquals((-2064.503413250323), double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals((-2064.503413250323), mnStrategy0.hessianG2Tolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertNotNull(mnHesse0);
      
      int int1 = 0;
      mnStrategy0.setHessianNCycles(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      
      int int2 = mnHesse0.ncycles();
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnHesse0);
      
      mnStrategy0.setHessianNCycles(int0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals((-689), mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      
      int int1 = mnHesse0.ncycles();
      assertEquals((-689), int1);
      assertTrue(int1 == int0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals((-689), mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnHesse0);
      
      int int1 = 0;
      mnStrategy0.setGradientNCycles(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.gradientNCycles());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[2] = (double) int0;
      mnStrategy0.setHessianNCycles(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.gradientNCycles());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, int1);
      assertArrayEquals(new double[] {(-689.0), 0.0, (-689.0)}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(11, mnUserParameterState0.nfcn());
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      double[] doubleArray0 = new double[7];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      int int0 = 0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertEquals(54, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertNotNull(mnHesse0);
      
      int int1 = 0;
      mnStrategy0.setGradientNCycles(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[2] = (double) int0;
      mnStrategy0.setHessianNCycles(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-689.0), 0.0, (-689.0)}, doubleArray0, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertNotNull(mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, int1);
      assertArrayEquals(new double[] {(-689.0), 0.0, (-689.0)}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertTrue(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(11, mnUserParameterState0.nfcn());
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertNotNull(mnHesse0);
      
      double double0 = 1.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = double0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(6, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(6, doubleArray0.length);
      //  // Unstable assertion: assertNotNull(mnUserParameters0);
      
      int int0 = (-1929);
      mnStrategy0.setHessianNCycles(int0);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals((-1929), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      //  // Unstable assertion: assertEquals((-1929), mnUserCovariance0.ncol());
      //  // Unstable assertion: assertEquals((-1929), mnUserCovariance0.nrow());
      //  // Unstable assertion: assertNotNull(mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals((-1929), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(6, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals((-1929), mnUserCovariance0.ncol());
      //  // Unstable assertion: assertEquals((-1929), mnUserCovariance0.nrow());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertTrue(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(53, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertEquals(6, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertEquals(6, doubleArray0.length);
      //  // Unstable assertion: assertNotNull(mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(mnHesse0);
      
      double[] doubleArray0 = new double[1];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertEquals(1, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      int int0 = (-771);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(18, mnUserParameterState0.nfcn());
      assertEquals(1, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnHesse0);
      
      int int1 = 0;
      mnStrategy0.setGradientNCycles(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[2] = (double) int0;
      mnStrategy0.setHessianNCycles(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-689.0), 0.0, (-689.0)}, doubleArray0, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, int1);
      assertArrayEquals(new double[] {(-689.0), 0.0, (-689.0)}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(11, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertNotNull(mnHesse0);
      
      int int1 = 0;
      mnStrategy0.setGradientNCycles(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      
      double[] doubleArray0 = new double[3];
      mnStrategy0.setHessianNCycles(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0[2], doubleArray0[2]).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(2, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameterState0, int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(2, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(3, mnUserParameterState1.variableParameters());
      assertEquals(11, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertTrue(mnUserParameterState1.hasGlobalCC());
      assertEquals(3.0, mnUserParameterState1.edm(), 0.01);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MnStrategy mnStrategy0 = null;
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertNotNull(mnHesse0);
      
      // Undeclared exception!
      try { 
        mnHesse0.tolerg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnHesse", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MnStrategy mnStrategy0 = null;
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertNotNull(mnHesse0);
      
      // Undeclared exception!
      try { 
        mnHesse0.ncycles();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnHesse", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = null;
      double double0 = 2.0;
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      int int0 = 643;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFcn", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double double0 = 0.0;
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      int int0 = 2;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MinimumError.MnHesseFailed minimumError_MnHesseFailed0 = new MinimumError.MnHesseFailed();
      assertNotNull(minimumError_MnHesseFailed0);
      
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnHesseFailed0);
      assertNotNull(minimumError0);
      
      int int1 = 1;
      FunctionGradient functionGradient0 = new FunctionGradient(int1);
      assertFalse(int1 == int0);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[1];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertNotNull(mnHesse0);
      
      int int1 = 743;
      mnStrategy0.setGradientNCycles(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(743, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, (double)int0, (double)int0, (double)int0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-689.0), 743.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(743, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(1506, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0[1], (double)int0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      // Undeclared exception!
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = null;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      int int0 = (-771);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnHesse0);
      
      double[] doubleArray0 = new double[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 105;
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = null;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnHesse0);
      
      double[] doubleArray0 = new double[3];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnHesse0);
      
      double[] doubleArray0 = new double[6];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      int int0 = 0;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      FCNBase fCNBase0 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertNotNull(mnUserCovariance0);
      
      int int0 = 200;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = null;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      int int0 = (-2346);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertEquals((-2346), mnUserCovariance0.ncol());
      assertEquals((-2346), mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      int int0 = 2276;
      mnStrategy0.setGradientNCycles(int0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2276, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertEquals(4, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      // Undeclared exception!
      mnHesse0.calculate(fCNBase0, mnUserParameters0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-1298);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnHesse0);
      
      double[] doubleArray0 = new double[6];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertEquals(6, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      FCNBase fCNBase0 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      //  // Unstable assertion: assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(6, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(7, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnStrategy0.isHigh());
      //  // Unstable assertion: assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      //  // Unstable assertion: assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(6, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(7, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnStrategy0.isHigh());
      //  // Unstable assertion: assertNotNull(mnHesse0);
      
      int int1 = 0;
      mnStrategy0.setGradientNCycles(int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(6, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(7, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnStrategy0.isHigh());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, (double)int0, (double)int0, (double)int0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      mnStrategy0.setHessianNCycles(int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(6, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnStrategy0.isHigh());
      
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(6, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(3, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertEquals(11, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertEquals(3, doubleArray0.length);
      //  // Unstable assertion: assertNotNull(mnUserParameterState0);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      // Undeclared exception!
      mnHesse0.calculate(fCNBase1, mnUserParameterState0, int1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-983);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameterState mnUserParameterState0 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameterState0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnHesse", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameterState0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      int int0 = mnHesse0.ncycles();
      assertEquals(5, int0);
      
      double double0 = 0.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "min == max";
      mnUserTransformation0.add(string0, int0, double0, double0, int0);
      mnUserTransformation0.setPrecision(double0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, (double)int0, (double)int0, (double)int0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, int0);
      assertNotNull(mnFcn0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumError minimumError0 = new MinimumError(int0);
      assertNotNull(minimumError0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector0, mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int0, int0);
      assertNotNull(minimumState0);
      
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int0);
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertNotSame(minimumState0, minimumState1);
      assertNotSame(minimumState1, minimumState0);
      assertNotNull(minimumState1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertNotNull(mnHesse0);
      
      mnStrategy0.setHessianNCycles(int0);
      assertEquals((-689), mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.gradientNCycles());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, int0);
      assertNotNull(mnFcn0);
      
      int int1 = 3;
      MinimumState minimumState0 = new MinimumState(int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumState0);
      
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserTransformation0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parameters are invalid
         //
         verifyException("org.freehep.math.minuit.HessianGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      int int0 = mnHesse0.ncycles();
      assertEquals(5, int0);
      
      double double0 = 0.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      mnUserTransformation0.setPrecision(double0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, (double)int0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, int0);
      assertNotNull(mnFcn0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumError minimumError0 = new MinimumError(int0);
      assertNotNull(minimumError0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector0, mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int0, int0);
      assertNotNull(minimumState0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[7];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(54, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      int int0 = 0;
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameterState0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertEquals(7, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(54, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnUserParameterState1.hasCovariance());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(108, mnUserParameterState1.nfcn());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(7, mnUserParameterState1.variableParameters());
      assertTrue(mnUserParameterState1.isValid());
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(mnUserParameterState1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      FCNBase fCNBase0 = null;
      double[] doubleArray0 = new double[0];
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isHigh());
      assertNotNull(mnHesse0);
      
      mnStrategy0.setGradientNCycles(int0);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals((-689), mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isHigh());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, (double)int0, (double)int0, (double)int0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[2] = (double) int0;
      mnStrategy0.setHessianNCycles(int0);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals((-689), mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals((-689), mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isHigh());
      
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-689.0), 0.0, (-689.0)}, doubleArray0, 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals((-689), mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals((-689), mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.hasCovariance());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(11, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnHesse0);
      
      mnStrategy0.setHessianNCycles(int0);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals((-689), mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, int0);
      assertNotNull(mnFcn0);
      
      int int1 = 3;
      MinimumState minimumState0 = new MinimumState(int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumState0);
      
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserTransformation0);
      
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals((-689), mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotSame(minimumState0, minimumState1);
      assertNotSame(minimumState1, minimumState0);
      assertNotNull(minimumState1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertNotNull(mnHesse0);
      
      double double0 = 1.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = double0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(6, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(6, doubleArray0.length);
      //  // Unstable assertion: assertNotNull(mnUserParameters0);
      
      int int0 = 0;
      mnUserParameters0.setLowerLimit(int0, doubleArray0[5]);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(6, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(6, doubleArray0.length);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      //  // Unstable assertion: assertEquals(0, mnUserCovariance0.nrow());
      //  // Unstable assertion: assertEquals(0, mnUserCovariance0.ncol());
      //  // Unstable assertion: assertNotNull(mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(6, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(0, mnUserCovariance0.nrow());
      //  // Unstable assertion: assertEquals(0, mnUserCovariance0.ncol());
      //  // Unstable assertion: assertEquals(6, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertEquals(40, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertEquals(6, doubleArray0.length);
      //  // Unstable assertion: assertNotNull(mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      int int0 = mnHesse0.ncycles();
      assertEquals(5, int0);
      
      double double0 = 1003.7188;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "min == max";
      mnUserTransformation0.add(string0, int0, double0, int0, double0);
      mnUserTransformation0.setPrecision(int0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double0);
      assertNotNull(mnFcn0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumError minimumError0 = new MinimumError(int0);
      assertNotNull(minimumError0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector0, mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int0, int0);
      assertNotNull(minimumState0);
      
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int0);
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertNotSame(minimumState0, minimumState1);
      assertNotSame(minimumState1, minimumState0);
      assertNotNull(minimumState1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, (double)int0, (double)int0, (double)int0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      mnStrategy0.setHessianNCycles(int0);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals((-689), mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      
      // Undeclared exception!
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, int0);
      assertNotNull(mnFcn0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumError minimumError0 = new MinimumError(int0);
      assertNotNull(minimumError0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      int int0 = 3199;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertEquals(3199, mnUserCovariance0.ncol());
      assertEquals(3199, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      // Undeclared exception!
      mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-689);
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnHesse0);
      
      double double0 = mnHesse0.tolerstp();
      assertEquals(0.1, double0, 0.01);
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(mnHesse0);
      
      double double0 = mnHesse0.tolerg2();
      assertEquals(0.05, double0, 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      double[] doubleArray0 = new double[7];
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertNotNull(mnUserCovariance0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }
}
