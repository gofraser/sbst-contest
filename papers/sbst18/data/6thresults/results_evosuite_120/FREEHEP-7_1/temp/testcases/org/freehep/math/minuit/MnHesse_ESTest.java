/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:00:51 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnFcn;
import org.freehep.math.minuit.MnHesse;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnHesse_ESTest extends MnHesse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnStrategy0.setHighStrategy();
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnHesse0);
      
      double double0 = (-4268.259231);
      double double1 = (-2472.2186484474196);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, (double)int0, double1, (double)int0, double1).when(fCNBase0).valueOf(any(double[].class));
      double double2 = 0.0;
      mnStrategy0.setHessianNCycles(int0);
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double2);
      assertNotNull(mnFcn0);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int1 = 949;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int1);
      assertNotNull(mnAlgebraicVector0);
      assertFalse(int1 == int0);
      
      double double3 = 0.1;
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double3);
      assertNotNull(minimumParameters0);
      assertFalse(int1 == int0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = (-557.5908775);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double4, int0);
      assertNotNull(minimumState0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertEquals(1, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertEquals(1, mnUserParameters1.variableParameters());
      assertNotNull(mnUserTransformation0);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      // Undeclared exception!
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertNotNull(mnStrategy0);
      
      int int0 = (-270);
      double double0 = 1267.599;
      mnStrategy0.setGradientTolerance(double0);
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      
      mnStrategy0.setHessianNCycles(int0);
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertNotNull(mnHesse0);
      
      double double1 = (-1583.0);
      double double2 = 2281.4;
      double double3 = 1733.48272;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double1, double2, double2, (double)int0, double3).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = double0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserParameters0, mnUserParameters1);
      //  // Unstable assertion: assertNotSame(mnUserParameters1, mnUserParameters0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(2, mnUserParameters1.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameters1);
      //  // Unstable assertion: assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      int int1 = 285;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters1, int1);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserParameters0, mnUserParameters1);
      //  // Unstable assertion: assertNotSame(mnUserParameters1, mnUserParameters0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(13, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertTrue(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertEquals(2, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(2, mnUserParameters1.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameterState0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotEquals(double1, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double0, 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      //  // Unstable assertion: assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      int int2 = mnHesse0.ncycles();
      //  // Unstable assertion: assertEquals((-270), int2);
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertTrue(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      
      double double4 = mnHesse0.tolerstp();
      //  // Unstable assertion: assertEquals(0.3, double4, 0.01);
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertNotEquals(double4, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double0, 0.01);
      
      double double5 = 10.0;
      double double6 = (-4698.458780010128);
      double double7 = (-1523.305995838);
      double double8 = (-3699.5945);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      // Undeclared exception!
      mnHesse0.calculate(fCNBase1, mnUserParameterState0, int1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnStrategy0);
      
      mnStrategy0.setHighStrategy();
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnHesse0);
      
      double double0 = (-4268.259231);
      double double1 = (-2472.2186484474196);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double double2 = 0.0;
      MnFcn mnFcn0 = new MnFcn(fCNBase0, double2);
      assertNotNull(mnFcn0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      int int1 = 949;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int1);
      assertNotNull(mnAlgebraicVector0);
      assertFalse(int1 == int0);
      
      double double3 = 0.1;
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double3);
      assertNotNull(minimumParameters0);
      assertFalse(int1 == int0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = (-557.5908775);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double4, int0);
      assertNotNull(minimumState0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      double[] doubleArray1 = null;
      mnStrategy0.setHighStrategy();
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(int0 == int1);
      
      mnStrategy0.setHessianStepTolerance(double4);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals((-557.5908775), mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(int0 == int1);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      double double5 = mnHesse0.tolerstp();
      assertEquals((-557.5908775), double5, 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals((-557.5908775), mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(int0 == int1);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      
      MnUserCovariance mnUserCovariance0 = null;
      double double6 = mnHesse0.tolerg2();
      assertEquals(0.02, double6, 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals((-557.5908775), mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(int0 == int1);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, doubleArray1, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnStrategy0);
      
      int int0 = (-270);
      double double0 = 1267.599;
      mnStrategy0.setGradientTolerance(double0);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      
      mnStrategy0.setHessianNCycles(int0);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals((-270), mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals((-270), mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnHesse0);
      
      double double1 = (-1583.0);
      double double2 = 2281.4;
      double double3 = 1733.48272;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double1, double2, double2, (double)int0, double3).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) int0;
      doubleArray0[1] = double0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1267.599}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertArrayEquals(new double[] {0.0, 1267.599}, doubleArray0, 0.01);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertEquals(2, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      int int1 = 285;
      // Undeclared exception!
      mnHesse0.calculate(fCNBase0, mnUserParameters1, int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertNotNull(mnStrategy0);
      
      int int0 = (-270);
      double double0 = 1267.599;
      mnStrategy0.setGradientTolerance(double0);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      
      mnStrategy0.setHessianNCycles(int0);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertNotNull(mnHesse0);
      
      double double1 = (-1583.0);
      double double2 = 2281.4;
      double double3 = 1733.48272;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double1, double2, double2, (double)int0, double3).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = double0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserParameters0, mnUserParameters1);
      //  // Unstable assertion: assertNotSame(mnUserParameters1, mnUserParameters0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(2, mnUserParameters1.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameters1);
      //  // Unstable assertion: assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      int int1 = 285;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters1, int1);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserParameters0, mnUserParameters1);
      //  // Unstable assertion: assertNotSame(mnUserParameters1, mnUserParameters0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertEquals(13, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertEquals(2, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(2, mnUserParameters1.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameterState0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotEquals(double1, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double1, 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      //  // Unstable assertion: assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      int int2 = Double.SIZE;
      //  // Unstable assertion: assertEquals(64, int2);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      
      double double4 = mnHesse0.tolerstp();
      //  // Unstable assertion: assertEquals(0.3, double4, 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertNotEquals(double4, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double3, 0.01);
      
      double double5 = 618.35686288646;
      double double6 = 0.001;
      double double7 = 1.0;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double5, double6, doubleArray0[0], (double)int0, double7).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameterState0, int0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserParameterState0, mnUserParameterState1);
      //  // Unstable assertion: assertNotSame(mnUserParameterState1, mnUserParameterState0);
      //  // Unstable assertion: assertNotSame(mnUserParameters0, mnUserParameters1);
      //  // Unstable assertion: assertNotSame(mnUserParameters1, mnUserParameters0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertEquals(13, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertEquals(2, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(2, mnUserParameterState1.variableParameters());
      //  // Unstable assertion: assertEquals(27, mnUserParameterState1.nfcn());
      //  // Unstable assertion: assertFalse(mnUserParameterState1.hasGlobalCC());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState1.hasCovariance());
      //  // Unstable assertion: assertEquals(Double.NaN, mnUserParameterState1.edm(), 0.01);
      //  // Unstable assertion: assertTrue(mnUserParameterState1.isValid());
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(2, mnUserParameters1.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameterState1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotEquals(double1, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double6, 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      //  // Unstable assertion: assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertNotEquals(double5, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double6, 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState2 = mnHesse0.calculate(fCNBase2, doubleArray0, doubleArray0, int2);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserParameterState2, mnUserParameterState1);
      //  // Unstable assertion: assertNotSame(mnUserParameterState2, mnUserParameterState0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnUserParameterState2.hasCovariance());
      //  // Unstable assertion: assertEquals(Double.NaN, mnUserParameterState2.edm(), 0.01);
      //  // Unstable assertion: assertTrue(mnUserParameterState2.hasGlobalCC());
      //  // Unstable assertion: assertEquals(2, mnUserParameterState2.variableParameters());
      //  // Unstable assertion: assertTrue(mnUserParameterState2.isValid());
      //  // Unstable assertion: assertEquals(13, mnUserParameterState2.nfcn());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState2.fval(), 0.01);
      //  // Unstable assertion: assertNotNull(mnUserParameterState2);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState1));
      //  // Unstable assertion: assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState0));
      
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double double8 = 1572.0;
      MnFcn mnFcn0 = new MnFcn(fCNBase3, double8);
      //  // Unstable assertion: assertNotNull(mnFcn0);
      //  // Unstable assertion: assertNotEquals(double8, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double5, 0.01);
      
      MinimumState minimumState0 = null;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertNotNull(mnUserTransformation0);
      
      int int3 = 200120;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int3);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnHesse", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertNotNull(mnStrategy0);
      
      int int0 = (-270);
      double double0 = 1267.599;
      mnStrategy0.setGradientTolerance(double0);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      mnStrategy0.setHessianNCycles(int0);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnHesse mnHesse0 = new MnHesse();
      //  // Unstable assertion: assertNotNull(mnHesse0);
      
      double double1 = (-1648.1471);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, (double)int0, double1, double1, double1).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = double0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserParameters0, mnUserParameters1);
      //  // Unstable assertion: assertNotSame(mnUserParameters1, mnUserParameters0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(2, mnUserParameters1.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameters1);
      //  // Unstable assertion: assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      int int1 = 285;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters1, int1);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserParameters0, mnUserParameters1);
      //  // Unstable assertion: assertNotSame(mnUserParameters1, mnUserParameters0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(2, mnUserParameters1.variableParameters());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(18, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertEquals(2, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertNotNull(mnUserParameterState0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotEquals(double0, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double0, 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      //  // Unstable assertion: assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      int int2 = mnHesse0.ncycles();
      //  // Unstable assertion: assertEquals(5, int2);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      
      double double2 = mnHesse0.tolerstp();
      //  // Unstable assertion: assertEquals(0.3, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double0, 0.01);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double double3 = 1.0;
      MnFcn mnFcn0 = new MnFcn(fCNBase1, double3);
      //  // Unstable assertion: assertNotNull(mnFcn0);
      //  // Unstable assertion: assertNotEquals(double3, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double1, 0.01);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(int1);
      //  // Unstable assertion: assertNotNull(minimumParameters0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = null;
      MinimumError.MnInvertFailed minimumError_MnInvertFailed0 = new MinimumError.MnInvertFailed();
      //  // Unstable assertion: assertNotNull(minimumError_MnInvertFailed0);
      
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnInvertFailed0);
      //  // Unstable assertion: assertNotNull(minimumError0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(int2);
      //  // Unstable assertion: assertNotNull(functionGradient0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int2, int2);
      //  // Unstable assertion: assertNotNull(minimumState0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserParameters0, mnUserParameters1);
      //  // Unstable assertion: assertNotSame(mnUserParameters1, mnUserParameters0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(2, mnUserParameters1.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserTransformation0);
      //  // Unstable assertion: assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      //  // Unstable assertion: assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserTransformation0, mnUserTransformation1);
      //  // Unstable assertion: assertNotSame(mnUserTransformation1, mnUserTransformation0);
      //  // Unstable assertion: assertNotSame(mnUserParameters0, mnUserParameters1);
      //  // Unstable assertion: assertNotSame(mnUserParameters1, mnUserParameters0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(2, mnUserParameters1.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserTransformation1);
      //  // Unstable assertion: assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      //  // Unstable assertion: assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      //  // Unstable assertion: assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      int int3 = (-476);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation1, int3);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      double double0 = mnHesse0.tolerg2();
      assertEquals(0.05, double0, 0.01);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double double1 = (-2319.03487508);
      MnFcn mnFcn0 = new MnFcn(fCNBase1, double1);
      assertNotNull(mnFcn0);
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = 5;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      assertNotEquals(double0, double1, 0.01);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MinimumError.MnInvertFailed minimumError_MnInvertFailed0 = new MinimumError.MnInvertFailed();
      assertNotNull(minimumError_MnInvertFailed0);
      
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnInvertFailed0);
      assertNotNull(minimumError0);
      
      MnAlgebraicVector mnAlgebraicVector1 = mnAlgebraicSymMatrix0.eigenvalues();
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      assertNotNull(mnAlgebraicVector1);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector1);
      assertNotNull(functionGradient0);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      
      double double2 = 49189.643541306985;
      int int1 = 3;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, double2, int1);
      assertNotNull(minimumState0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertFalse(int0 == int1);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = double2;
      doubleArray0[1] = double1;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {49189.643541306985, (-2319.03487508), 3.0, 3.0, 5.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      assertArrayEquals(new double[] {49189.643541306985, (-2319.03487508), 3.0, 3.0, 5.0}, doubleArray0, 0.01);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserTransformation1);
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      
      int int2 = 0;
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation1, int2);
      assertArrayEquals(new double[] {49189.643541306985, (-2319.03487508), 3.0, 3.0, 5.0}, doubleArray0, 0.01);
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      assertNotSame(minimumState0, minimumState1);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertNotSame(minimumState1, minimumState0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(minimumState1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(minimumState1.equals((Object)minimumState0));
      
      MinimumState minimumState2 = mnHesse0.calculate(mnFcn0, minimumState1, mnUserTransformation1, int2);
      assertArrayEquals(new double[] {49189.643541306985, (-2319.03487508), 3.0, 3.0, 5.0}, doubleArray0, 0.01);
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      assertNotSame(minimumState0, minimumState1);
      assertNotSame(minimumState0, minimumState2);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertNotSame(minimumState1, minimumState0);
      assertNotSame(minimumState1, minimumState2);
      assertNotSame(minimumState2, minimumState0);
      assertNotSame(minimumState2, minimumState1);
      assertEquals(5, doubleArray0.length);
      assertNotNull(minimumState2);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(minimumState0.equals((Object)minimumState1));
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertFalse(minimumState2.equals((Object)minimumState0));
      assertFalse(minimumState2.equals((Object)minimumState1));
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int3 = 1323;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int3);
      assertEquals(1323, mnUserCovariance0.ncol());
      assertEquals(1323, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray1, mnUserCovariance0, int3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnStrategy0.setHighStrategy();
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double double0 = (-4268.259231);
      double double1 = (-2472.2186484474196);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, (double)int0, double1, (double)int0, double1).when(fCNBase1).valueOf(any(double[].class));
      double double2 = 0.0;
      MnFcn mnFcn0 = new MnFcn(fCNBase1, double2);
      assertNotNull(mnFcn0);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int1 = 949;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int1);
      assertNotNull(mnAlgebraicVector0);
      assertFalse(int1 == int0);
      
      double double3 = 0.1;
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double3);
      assertNotNull(minimumParameters0);
      assertFalse(int1 == int0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = (-557.5908775);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double4, int0);
      assertNotNull(minimumState0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      double double5 = (-450.4);
      mnUserParameters0.setPrecision(double5);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertEquals(1, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertEquals(1, mnUserParameters1.variableParameters());
      assertNotNull(mnUserTransformation0);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(minimumState1, minimumState0);
      assertNotSame(minimumState0, minimumState1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertEquals(1, mnUserParameters1.variableParameters());
      assertNotNull(minimumState1);
      assertFalse(int0 == int1);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double5, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertNotEquals(double1, double5, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertNotEquals(double2, double5, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertFalse(int1 == int0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double5, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(minimumState1.equals((Object)minimumState0));
      
      double[] doubleArray1 = null;
      mnStrategy0.setHighStrategy();
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertFalse(int0 == int1);
      
      double double6 = mnHesse0.tolerstp();
      assertEquals(0.1, double6, 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertFalse(int0 == int1);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      
      MnUserCovariance mnUserCovariance0 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray1, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnHesse0);
      
      double double0 = 0.0;
      double double1 = 0.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double1, double1, double0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      int int0 = 1937;
      mnStrategy0.setGradientNCycles(int0);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1937, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      
      double double2 = 1824.3;
      double double3 = 1875.34912864898;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double2, double3, (double)int0, double2, double3).when(fCNBase1).valueOf(any(double[].class));
      int int1 = 0;
      int int2 = 0;
      mnStrategy0.setGradientNCycles(int2);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(int2 == int0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int1);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      assertFalse(int1 == int0);
      
      int int3 = 0;
      MnFcn mnFcn0 = null;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int3);
      assertNotNull(minimumParameters0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int3 == int0);
      
      String string0 = mnAlgebraicVector0.toString();
      assertNotNull(string0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      
      int int4 = (-197);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int3, int4);
      assertNotNull(minimumState0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      
      int int5 = 3867;
      MnUserCovariance mnUserCovariance1 = new MnUserCovariance(int0);
      assertEquals(1937, mnUserCovariance1.ncol());
      assertEquals(1937, mnUserCovariance1.nrow());
      assertNotNull(mnUserCovariance1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(mnUserCovariance1.equals((Object)mnUserCovariance0));
      
      int int6 = 167;
      mnStrategy0.setHessianNCycles(int4);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-197), mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(int4 == int3);
      assertFalse(int4 == int5);
      assertFalse(int4 == int0);
      assertFalse(int4 == int6);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = (double) int3;
      double double4 = 9.319690304330208E-4;
      doubleArray0[1] = double4;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int5;
      doubleArray0[4] = (double) int2;
      doubleArray0[5] = (double) int4;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int3;
      doubleArray0[8] = (double) int0;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0);
      assertEquals(22, doubleArray0.length);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-197), mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(22, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(277, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int6);
      assertFalse(int0 == int5);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double4, 0.01);
      
      double[] doubleArray1 = new double[16];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double4;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray1, doubleArray1);
      assertEquals(16, doubleArray1.length);
      assertEquals(16, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnHesse0);
      
      double double0 = mnHesse0.tolerg2();
      assertEquals(0.05, double0, 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      mnStrategy0.setLowStrategy();
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      int int0 = (-1801);
      mnStrategy0.setHessianNCycles(int0);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals((-1801), mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      doubleArray0[4] = double0;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.05, 0.05, 0.05, 0.05, 0.05}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals((-1801), mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(32, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertTrue(mnUserParameterState0.hasGlobalCC());
      assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.05, 0.05, 0.05, 0.05, 0.05}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameters0, mnUserCovariance0);
      assertArrayEquals(new double[] {0.05, 0.05, 0.05, 0.05, 0.05}, doubleArray0, 0.01);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals((-1801), mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnUserParameterState1.isValid());
      assertEquals(32, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(Double.NaN, mnUserParameterState1.edm(), 0.01);
      assertTrue(mnUserParameterState1.hasCovariance());
      assertEquals(5, mnUserParameterState1.variableParameters());
      assertEquals(5, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameterState1);
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      int int1 = 0;
      MnUserParameterState mnUserParameterState2 = mnHesse0.calculate(fCNBase2, mnUserParameters0, int1);
      assertArrayEquals(new double[] {0.05, 0.05, 0.05, 0.05, 0.05}, doubleArray0, 0.01);
      assertNotSame(mnUserParameterState2, mnUserParameterState1);
      assertNotSame(mnUserParameterState2, mnUserParameterState0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals((-1801), mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnUserParameterState2.hasGlobalCC());
      assertEquals(5, mnUserParameterState2.variableParameters());
      assertEquals(0.0, mnUserParameterState2.fval(), 0.01);
      assertEquals(Double.NaN, mnUserParameterState2.edm(), 0.01);
      assertTrue(mnUserParameterState2.hasCovariance());
      assertEquals(32, mnUserParameterState2.nfcn());
      assertTrue(mnUserParameterState2.isValid());
      assertEquals(5, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameterState2);
      assertFalse(int1 == int0);
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState0));
      
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int2 = 5;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      int int0 = 1937;
      mnStrategy0.setGradientNCycles(int0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1937, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      
      double double0 = 1824.3;
      double double1 = 1875.34912864898;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      int int2 = 0;
      mnStrategy0.setGradientNCycles(int2);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(int2 == int0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int1);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      assertFalse(int1 == int0);
      
      int int3 = 0;
      mnStrategy0.setMediumStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      
      MnFcn mnFcn0 = null;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      
      String string0 = mnAlgebraicVector0.toString();
      assertNotNull(string0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int3);
      assertNotNull(minimumParameters0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int3 == int0);
      
      String string1 = mnAlgebraicVector0.toString();
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      
      int int4 = (-197);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int3, int4);
      assertNotNull(minimumState0);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      
      int int5 = 3867;
      MnUserCovariance mnUserCovariance1 = new MnUserCovariance(int0);
      assertEquals(1937, mnUserCovariance1.ncol());
      assertEquals(1937, mnUserCovariance1.nrow());
      assertNotNull(mnUserCovariance1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int5);
      assertFalse(int0 == int4);
      assertFalse(mnUserCovariance1.equals((Object)mnUserCovariance0));
      
      int int6 = 167;
      mnStrategy0.setHessianNCycles(int4);
      assertTrue(mnStrategy0.isMedium());
      assertEquals((-197), mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int6);
      assertFalse(int4 == int3);
      assertFalse(int4 == int5);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int3;
      double double2 = 9.319690304330208E-4;
      doubleArray0[1] = double2;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int5;
      doubleArray0[4] = (double) int2;
      doubleArray0[5] = (double) int4;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int3;
      doubleArray0[8] = (double) int0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 9.319690304330208E-4, 1937.0, 3867.0, 0.0, (-197.0), 1937.0, 0.0, 1937.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      // Undeclared exception!
      mnHesse0.calculate(fCNBase0, mnUserParameters0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 1937;
      mnStrategy0.setGradientNCycles(int0);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1937, mnStrategy0.gradientNCycles());
      
      double double0 = 1824.3;
      double double1 = 1875.34912864898;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double1, (double)int0, double0, double1).when(fCNBase1).valueOf(any(double[].class));
      int int1 = 0;
      int int2 = 0;
      mnStrategy0.setGradientNCycles(int2);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertFalse(int2 == int0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int1);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      assertFalse(int1 == int0);
      
      int int3 = 0;
      mnStrategy0.setMediumStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnFcn mnFcn0 = null;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int3);
      assertNotNull(minimumParameters0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int3 == int0);
      
      String string0 = mnAlgebraicVector0.toString();
      assertNotNull(string0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      int int4 = (-197);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int3, int4);
      assertNotNull(minimumState0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      
      int int5 = 3867;
      MnUserCovariance mnUserCovariance1 = new MnUserCovariance(int0);
      assertEquals(1937, mnUserCovariance1.nrow());
      assertEquals(1937, mnUserCovariance1.ncol());
      assertNotNull(mnUserCovariance1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int5);
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertFalse(mnUserCovariance1.equals((Object)mnUserCovariance0));
      
      int int6 = 167;
      mnStrategy0.setHessianNCycles(int4);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals((-197), mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(int4 == int6);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int5);
      assertFalse(int4 == int2);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int3;
      double double2 = 9.319690304330208E-4;
      doubleArray0[1] = double2;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int5;
      doubleArray0[4] = (double) int2;
      doubleArray0[5] = (double) int4;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int3;
      doubleArray0[8] = (double) int0;
      // Undeclared exception!
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      int int0 = 1;
      double double0 = 9.319690304330208E-4;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      int int1 = 0;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(doubleArray0, int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertNotNull(mnUserCovariance0);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 76;
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, int0);
      assertNotNull(mnFcn0);
      
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      double double0 = 0.51;
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) int0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      int int1 = (-3407);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray1, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-2626);
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = null;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertArrayEquals(new double[] {(-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0)}, doubleArray0, 0.01);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, mnUserParameters0.variableParameters());
      assertEquals(9, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertArrayEquals(new double[] {(-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0), (-2626.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, mnUserParameters0.variableParameters());
      assertEquals(9, mnUserParameters1.variableParameters());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameterState0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFcn", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      int int1 = 0;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = null;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      int int0 = 338;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertEquals(338, mnUserCovariance0.ncol());
      assertEquals(338, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      // Undeclared exception!
      mnHesse0.calculate(fCNBase0, mnUserParameters1, mnUserCovariance0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = null;
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = (-1124.4655539);
      doubleArray0[3] = double3;
      double double4 = 1102.792424563;
      doubleArray0[4] = double4;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1124.4655539), 1102.792424563}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFcn", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = null;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserCovariance mnUserCovariance0 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFcn", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      MnFcn mnFcn0 = null;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserTransformation1);
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnHesse", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 2.0;
      doubleArray0[2] = double2;
      double double3 = 1787.758237086541;
      doubleArray0[3] = double3;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 2.0, 1787.758237086541}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      int int0 = 1;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertEquals(1, mnUserCovariance0.ncol());
      assertEquals(1, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
      assertArrayEquals(new double[] {1.0, 0.0, 2.0, 1787.758237086541}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertEquals(1, mnUserCovariance0.ncol());
      assertEquals(1, mnUserCovariance0.nrow());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(30, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertNotNull(mnUserParameterState0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertNotNull(mnUserCovariance0);
      
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      assertNotSame(mnUserCovariance0, mnUserCovariance1);
      assertNotSame(mnUserCovariance1, mnUserCovariance0);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance1.nrow());
      assertEquals(0, mnUserCovariance1.ncol());
      assertNotNull(mnUserCovariance1);
      assertFalse(mnUserCovariance1.equals((Object)mnUserCovariance0));
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 769;
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      double double0 = 408.094532;
      doubleArray0[0] = double0;
      double double1 = 2114.43;
      doubleArray0[1] = double1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {408.094532, 2114.43, 769.0, 769.0, 769.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertArrayEquals(new double[] {408.094532, 2114.43, 769.0, 769.0, 769.0}, doubleArray0, 0.01);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      MnUserCovariance mnUserCovariance0 = null;
      int int1 = (-3863);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters1, mnUserCovariance0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MnStrategy mnStrategy0 = null;
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[6];
      double double0 = (-3725.8052641664412);
      doubleArray0[0] = double0;
      double double1 = 1308.8234769473;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = (-2257.9484);
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.Numerical2PGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-1532);
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, int0);
      assertNotNull(mnFcn0);
      
      int int1 = 1693;
      MinimumState minimumState0 = new MinimumState(int1);
      assertNotNull(minimumState0);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int1;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1693.0, 1693.0, (-1532.0), 1693.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      assertArrayEquals(new double[] {1693.0, 1693.0, (-1532.0), 1693.0}, doubleArray0, 0.01);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(mnUserTransformation1);
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      
      int int2 = 0;
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation1, int2);
      assertArrayEquals(new double[] {1693.0, 1693.0, (-1532.0), 1693.0}, doubleArray0, 0.01);
      assertNotSame(minimumState0, minimumState1);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertNotSame(minimumState1, minimumState0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(minimumState1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(minimumState1.equals((Object)minimumState0));
      
      MinimumState minimumState2 = mnHesse0.calculate(mnFcn0, minimumState1, mnUserTransformation0, int0);
      assertArrayEquals(new double[] {1693.0, 1693.0, (-1532.0), 1693.0}, doubleArray0, 0.01);
      assertNotSame(minimumState0, minimumState2);
      assertNotSame(minimumState0, minimumState1);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertNotSame(minimumState1, minimumState0);
      assertNotSame(minimumState1, minimumState2);
      assertNotSame(minimumState2, minimumState0);
      assertNotSame(minimumState2, minimumState1);
      assertEquals(4, doubleArray0.length);
      assertNotNull(minimumState2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(minimumState0.equals((Object)minimumState1));
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertFalse(minimumState2.equals((Object)minimumState0));
      assertFalse(minimumState2.equals((Object)minimumState1));
      
      FCNBase fCNBase1 = null;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = 0.0;
      doubleArray1[0] = double0;
      doubleArray1[1] = (double) int2;
      doubleArray1[2] = (double) int2;
      doubleArray1[3] = (double) int0;
      double double1 = 0.0;
      doubleArray1[4] = double1;
      doubleArray1[5] = (double) int2;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray1, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFcn", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-2441);
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = null;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFcn", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MnStrategy mnStrategy0 = null;
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertNotNull(mnHesse0);
      
      // Undeclared exception!
      try { 
        mnHesse0.tolerstp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnHesse", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 1073741792;
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, int0);
      assertArrayEquals(new double[] {1.073741792E9}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(16, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      int int1 = mnHesse0.ncycles();
      assertEquals(7, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 84;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) int0;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = null;
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.5;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 0.5;
      doubleArray0[3] = double3;
      MnUserCovariance mnUserCovariance0 = null;
      int int0 = 5;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 98;
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameterState mnUserParameterState0 = null;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase1).valueOf(any(double[].class));
      double double0 = 2.0;
      MnFcn mnFcn0 = new MnFcn(fCNBase1, double0);
      assertNotNull(mnFcn0);
      
      int int1 = 0;
      MinimumState minimumState0 = new MinimumState(int1);
      assertNotNull(minimumState0);
      assertFalse(int1 == int0);
      
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserTransformation0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parameters are invalid
         //
         verifyException("org.freehep.math.minuit.HessianGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      int int0 = mnHesse0.ncycles();
      assertEquals(5, int0);
      
      double double0 = (-3473.7529490601);
      double double1 = 9.236335754678748E-4;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, int0);
      assertNotNull(mnFcn0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumError minimumError0 = new MinimumError(int0);
      assertNotNull(minimumError0);
      
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnAlgebraicVector mnAlgebraicVector1 = minimumState0.vec();
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      assertNotNull(mnAlgebraicVector1);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      
      double double2 = 2517.6545909;
      MinimumState minimumState1 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, double2, int0);
      assertNotNull(minimumState1);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(minimumState1.equals((Object)minimumState0));
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState1, mnUserTransformation0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters have invalid size
         //
         verifyException("org.freehep.math.minuit.InitialGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertNotNull(mnStrategy0);
      
      int int0 = (-270);
      double double0 = 1267.599;
      mnStrategy0.setGradientTolerance(double0);
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      
      mnStrategy0.setHessianNCycles(int0);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertNotNull(mnHesse0);
      
      double double1 = (-1583.0);
      double double2 = 2281.4;
      double double3 = 1733.48272;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double1, double2, double2, (double)int0, double3).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = double0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameters0);
      
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserParameters0, mnUserParameters1);
      //  // Unstable assertion: assertNotSame(mnUserParameters1, mnUserParameters0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(2, mnUserParameters1.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameters1);
      //  // Unstable assertion: assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      int int1 = 285;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters1, int1);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserParameters0, mnUserParameters1);
      //  // Unstable assertion: assertNotSame(mnUserParameters1, mnUserParameters0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertTrue(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertTrue(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertEquals(2, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertEquals(13, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(2, mnUserParameters1.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameterState0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotEquals(double1, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double2, 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      //  // Unstable assertion: assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      int int2 = mnHesse0.ncycles();
      //  // Unstable assertion: assertEquals((-270), int2);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertTrue(int2 == int0);
      
      double double4 = mnHesse0.tolerstp();
      //  // Unstable assertion: assertEquals(0.3, double4, 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertNotEquals(double4, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double3, 0.01);
      
      double double5 = 10.0;
      double double6 = (-4698.458780010128);
      double double7 = (-1523.305995838);
      double double8 = (-3699.5945);
      double double9 = (-1733.6510776);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double5, double6, double7, double8, double9).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameterState0, int0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserParameterState0, mnUserParameterState1);
      //  // Unstable assertion: assertNotSame(mnUserParameterState1, mnUserParameterState0);
      //  // Unstable assertion: assertNotSame(mnUserParameters0, mnUserParameters1);
      //  // Unstable assertion: assertNotSame(mnUserParameters1, mnUserParameters0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertTrue(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertTrue(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertEquals(2, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertEquals(13, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals((-270), mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertFalse(mnUserParameterState1.hasCovariance());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      //  // Unstable assertion: assertTrue(mnUserParameterState1.isValid());
      //  // Unstable assertion: assertEquals(2, mnUserParameterState1.variableParameters());
      //  // Unstable assertion: assertEquals(27, mnUserParameterState1.nfcn());
      //  // Unstable assertion: assertEquals(Double.NaN, mnUserParameterState1.edm(), 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState1.hasGlobalCC());
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertEquals(2, mnUserParameters1.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameterState1);
      //  // Unstable assertion: assertTrue(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotEquals(double1, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double2, 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      //  // Unstable assertion: assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotEquals(double5, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double8, 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserCovariance mnUserCovariance0 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase2, doubleArray0, mnUserCovariance0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 7;
      MnHesse mnHesse0 = new MnHesse(int0);
      //  // Unstable assertion: assertNotNull(mnHesse0);
      
      double double0 = 5.9604644775390625E-8;
      double double1 = 1405.940791203;
      double double2 = 0.5;
      double double3 = 1627.848493;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      double double4 = 10.0;
      double double5 = 693.01;
      double double6 = 2435.6;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0[5], double4, double1, double5, double6).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {7.0, 7.0, 0.0, 7.0, 0.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(8, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertEquals(0, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setPrecision(double1);
      //  // Unstable assertion: assertArrayEquals(new double[] {7.0, 7.0, 0.0, 7.0, 0.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(8, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertEquals(0, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertNotEquals(double1, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double3, 0.01);
      
      double double7 = (-711.4146801831138);
      int int1 = 0;
      mnUserParameterState0.setLowerLimit(int0, double7);
      //  // Unstable assertion: assertArrayEquals(new double[] {7.0, 7.0, 0.0, 7.0, 0.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(8, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertEquals(0, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotEquals(double7, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double3, 0.01);
      
      int int2 = (-3800);
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameterState0, int2);
      //  // Unstable assertion: assertArrayEquals(new double[] {7.0, 7.0, 0.0, 7.0, 0.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(mnUserParameterState0, mnUserParameterState1);
      //  // Unstable assertion: assertNotSame(mnUserParameterState1, mnUserParameterState0);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(8, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertEquals(0, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState1.hasCovariance());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState1.hasGlobalCC());
      //  // Unstable assertion: assertEquals(8, mnUserParameterState1.variableParameters());
      //  // Unstable assertion: assertEquals(44, mnUserParameterState1.nfcn());
      //  // Unstable assertion: assertTrue(mnUserParameterState1.isValid());
      //  // Unstable assertion: assertNotNull(mnUserParameterState1);
      //  // Unstable assertion: assertNotEquals(double6, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double6, double2, 0.01);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotEquals(double1, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double7, 0.01);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      //  // Unstable assertion: assertNotEquals(double4, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double5, double3, 0.01);
      
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {7.0, 7.0, 0.0, 7.0, 0.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(8, doubleArray0.length);
      //  // Unstable assertion: assertEquals(8, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameters0);
      
      // Undeclared exception!
      try { 
        mnUserParameters0.setUpperLimit(int2, doubleArray0[6]);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 7;
      MnHesse mnHesse0 = new MnHesse(int0);
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      double double0 = (-711.4146801831138);
      mnUserParameterState0.setLowerLimit(int0, double0);
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      int int1 = (-3800);
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameterState0, int1);
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertTrue(mnUserParameterState1.isValid());
      assertEquals(8, mnUserParameterState1.variableParameters());
      assertEquals(44, mnUserParameterState1.nfcn());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      double double1 = (-1714.5522);
      mnUserParameters0.setPrecision(double1);
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertNotEquals(double1, double0, 0.01);
      
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState2 = mnHesse0.calculate(fCNBase2, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      assertNotSame(mnUserParameterState2, mnUserParameterState0);
      assertNotSame(mnUserParameterState2, mnUserParameterState1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, mnUserParameterState2.variableParameters());
      assertFalse(mnUserParameterState2.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState2.fval(), 0.01);
      assertEquals(44, mnUserParameterState2.nfcn());
      assertTrue(mnUserParameterState2.isValid());
      assertFalse(mnUserParameterState2.hasCovariance());
      assertEquals(0.0, mnUserParameterState2.edm(), 0.01);
      assertNotNull(mnUserParameterState2);
      assertFalse(int0 == int1);
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState0));
      assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState1));
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      MnUserParameterState mnUserParameterState3 = mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, int0);
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      assertNotSame(mnUserParameterState3, mnUserParameterState2);
      assertNotSame(mnUserParameterState3, mnUserParameterState1);
      assertNotSame(mnUserParameterState3, mnUserParameterState0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(92, mnUserParameterState3.nfcn());
      assertTrue(mnUserParameterState3.isValid());
      assertFalse(mnUserParameterState3.hasCovariance());
      assertEquals(8, mnUserParameterState3.variableParameters());
      assertFalse(mnUserParameterState3.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState3.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState3.edm(), 0.01);
      assertNotNull(mnUserParameterState3);
      assertFalse(int0 == int1);
      assertFalse(mnUserParameterState3.equals((Object)mnUserParameterState2));
      assertFalse(mnUserParameterState3.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState3.equals((Object)mnUserParameterState0));
      
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase3).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState4 = mnHesse0.calculate(fCNBase3, mnUserParameterState3, int1);
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      assertNotSame(mnUserParameterState3, mnUserParameterState2);
      assertNotSame(mnUserParameterState3, mnUserParameterState1);
      assertNotSame(mnUserParameterState3, mnUserParameterState0);
      assertNotSame(mnUserParameterState3, mnUserParameterState4);
      assertNotSame(mnUserParameterState4, mnUserParameterState3);
      assertNotSame(mnUserParameterState4, mnUserParameterState1);
      assertNotSame(mnUserParameterState4, mnUserParameterState2);
      assertNotSame(mnUserParameterState4, mnUserParameterState0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(92, mnUserParameterState3.nfcn());
      assertTrue(mnUserParameterState3.isValid());
      assertFalse(mnUserParameterState3.hasCovariance());
      assertEquals(8, mnUserParameterState3.variableParameters());
      assertFalse(mnUserParameterState3.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState3.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState3.edm(), 0.01);
      assertEquals(184, mnUserParameterState4.nfcn());
      assertTrue(mnUserParameterState4.isValid());
      assertEquals(8, mnUserParameterState4.variableParameters());
      assertEquals(0.0, mnUserParameterState4.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState4.fval(), 0.01);
      assertFalse(mnUserParameterState4.hasGlobalCC());
      assertFalse(mnUserParameterState4.hasCovariance());
      assertNotNull(mnUserParameterState4);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(mnUserParameterState3.equals((Object)mnUserParameterState2));
      assertFalse(mnUserParameterState3.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState3.equals((Object)mnUserParameterState0));
      assertFalse(mnUserParameterState4.equals((Object)mnUserParameterState3));
      assertFalse(mnUserParameterState4.equals((Object)mnUserParameterState1));
      assertFalse(mnUserParameterState4.equals((Object)mnUserParameterState2));
      assertFalse(mnUserParameterState4.equals((Object)mnUserParameterState0));
      
      FCNBase fCNBase4 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase4).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState5 = mnHesse0.calculate(fCNBase4, mnUserParameters0, mnUserCovariance0, int0);
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      assertNotSame(mnUserParameterState5, mnUserParameterState0);
      assertNotSame(mnUserParameterState5, mnUserParameterState4);
      assertNotSame(mnUserParameterState5, mnUserParameterState3);
      assertNotSame(mnUserParameterState5, mnUserParameterState2);
      assertNotSame(mnUserParameterState5, mnUserParameterState1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0.0, mnUserParameterState5.edm(), 0.01);
      assertFalse(mnUserParameterState5.hasCovariance());
      assertEquals(92, mnUserParameterState5.nfcn());
      assertEquals(0.0, mnUserParameterState5.fval(), 0.01);
      assertTrue(mnUserParameterState5.isValid());
      assertFalse(mnUserParameterState5.hasGlobalCC());
      assertEquals(8, mnUserParameterState5.variableParameters());
      assertNotNull(mnUserParameterState5);
      assertFalse(int0 == int1);
      assertFalse(mnUserParameterState5.equals((Object)mnUserParameterState0));
      assertFalse(mnUserParameterState5.equals((Object)mnUserParameterState4));
      assertFalse(mnUserParameterState5.equals((Object)mnUserParameterState3));
      assertFalse(mnUserParameterState5.equals((Object)mnUserParameterState2));
      assertFalse(mnUserParameterState5.equals((Object)mnUserParameterState1));
      
      FCNBase fCNBase5 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase5).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState6 = mnHesse0.calculate(fCNBase5, mnUserParameters0);
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      assertNotSame(mnUserParameterState6, mnUserParameterState0);
      assertNotSame(mnUserParameterState6, mnUserParameterState4);
      assertNotSame(mnUserParameterState6, mnUserParameterState3);
      assertNotSame(mnUserParameterState6, mnUserParameterState5);
      assertNotSame(mnUserParameterState6, mnUserParameterState2);
      assertNotSame(mnUserParameterState6, mnUserParameterState1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertEquals(8, mnUserParameterState6.variableParameters());
      assertEquals(92, mnUserParameterState6.nfcn());
      assertTrue(mnUserParameterState6.isValid());
      assertEquals(0.0, mnUserParameterState6.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState6.fval(), 0.01);
      assertFalse(mnUserParameterState6.hasCovariance());
      assertFalse(mnUserParameterState6.hasGlobalCC());
      assertNotNull(mnUserParameterState6);
      assertFalse(int0 == int1);
      assertFalse(mnUserParameterState6.equals((Object)mnUserParameterState0));
      assertFalse(mnUserParameterState6.equals((Object)mnUserParameterState4));
      assertFalse(mnUserParameterState6.equals((Object)mnUserParameterState3));
      assertFalse(mnUserParameterState6.equals((Object)mnUserParameterState5));
      assertFalse(mnUserParameterState6.equals((Object)mnUserParameterState2));
      assertFalse(mnUserParameterState6.equals((Object)mnUserParameterState1));
      
      int int2 = mnHesse0.ncycles();
      assertEquals(7, int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      FCNBase fCNBase6 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase6, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      int int1 = (-577);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      double double0 = 4.0;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0[0]).when(fCNBase2).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase2, doubleArray0[5]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(mnFcn0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      assertFalse(int0 == int1);
      
      int int2 = (-128);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, doubleArray0[7], int2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(minimumState0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      int int3 = 0;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnHesse0);
      
      double double0 = (-4036.457542736444);
      double double1 = 1535.137;
      double double2 = 1345.5;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double1, double2, double2).when(fCNBase0).valueOf(any(double[].class));
      int int0 = 1937;
      mnStrategy0.setGradientNCycles(int0);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1937, mnStrategy0.gradientNCycles());
      
      double double3 = 1824.3;
      double double4 = 1875.34912864898;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double3, double4, (double)int0, double3, double4).when(fCNBase1).valueOf(any(double[].class));
      int int1 = 0;
      int int2 = 0;
      mnStrategy0.setGradientNCycles(int2);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(int2 == int0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int1);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      assertFalse(int1 == int0);
      
      int int3 = 0;
      MnFcn mnFcn0 = null;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int3);
      assertNotNull(minimumParameters0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int3 == int0);
      
      String string0 = mnAlgebraicVector0.toString();
      assertNotNull(string0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      
      int int4 = (-197);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int3, int4);
      assertNotNull(minimumState0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      
      int int5 = 3867;
      MnUserCovariance mnUserCovariance1 = new MnUserCovariance(int0);
      assertEquals(1937, mnUserCovariance1.nrow());
      assertEquals(1937, mnUserCovariance1.ncol());
      assertNotNull(mnUserCovariance1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int5);
      assertFalse(mnUserCovariance1.equals((Object)mnUserCovariance0));
      
      int int6 = 167;
      mnStrategy0.setHessianNCycles(int4);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-197), mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int6);
      assertFalse(int4 == int1);
      assertFalse(int4 == int5);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int3;
      double double5 = 9.319690304330208E-4;
      doubleArray0[1] = double5;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int5;
      doubleArray0[4] = (double) int2;
      doubleArray0[5] = (double) int4;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int3;
      doubleArray0[8] = (double) int0;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 9.319690304330208E-4, 1937.0, 3867.0, 0.0, (-197.0), 1937.0, 0.0, 1937.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-197), mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(56, mnUserParameterState0.nfcn());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertNotNull(mnUserParameterState0);
      assertFalse(int0 == int6);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int5);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double5, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double5;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {9.319690304330208E-4}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
      assertArrayEquals(new double[] {9.319690304330208E-4}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertNotSame(mnUserCovariance0, mnUserCovariance1);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-197), mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(4, mnUserParameterState1.nfcn());
      assertEquals(1, mnUserParameterState1.variableParameters());
      assertEquals(1.0, mnUserParameterState1.edm(), 0.01);
      assertTrue(mnUserParameterState1.isValid());
      assertTrue(mnUserParameterState1.hasGlobalCC());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserParameterState1);
      assertNotEquals(double0, double5, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double5, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertNotEquals(double2, double5, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int6);
      assertFalse(int1 == int5);
      assertFalse(mnUserCovariance0.equals((Object)mnUserCovariance1));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      //  // Unstable assertion: assertNotNull(mnHesse0);
      
      double double0 = (-1795.2862855555852);
      double double1 = 0.0;
      double double2 = 2.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double1, double2, double1, double2).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      //  // Unstable assertion: assertFalse(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(0, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertEquals(0, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameterState0);
      
      double double3 = 0.10000000000000002;
      double double4 = 911.25334;
      double double5 = 4.768371866248344E-7;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      double double6 = 0.0;
      double double7 = (-0.4171459069445029);
      double double8 = (-1155.14314637);
      double double9 = 1.0;
      double double10 = 5.9604644775390625E-8;
      double double11 = mnHesse0.tolerg2();
      //  // Unstable assertion: assertEquals(0.05, double11, 0.01);
      //  // Unstable assertion: assertNotEquals(double11, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double11, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double11, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double11, double10, 0.01);
      //  // Unstable assertion: assertNotEquals(double11, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double11, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double11, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double11, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double11, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double11, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double11, double3, 0.01);
      
      String string0 = "MnHesse: maximum number of allowed function calls exhausted.";
      double double12 = 5.9604644775390625E-8;
      double double13 = 0.6042740798511975;
      double double14 = 842.985452749171;
      double[] doubleArray1 = mnUserParameterState0.params();
      //  // Unstable assertion: assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      //  // Unstable assertion: assertEquals(0, doubleArray1.length);
      //  // Unstable assertion: assertFalse(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(0, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertEquals(0, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertNotNull(doubleArray1);
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      mnUserParameterState0.add(string0, double12, double13, double14, double4);
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(0, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertEquals(1, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertNotEquals(double12, double11, 0.01);
      //  // Unstable assertion: assertEquals(double12, double10, 0.01);
      //  // Unstable assertion: assertNotEquals(double12, double13, 0.01);
      //  // Unstable assertion: assertNotEquals(double12, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double12, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double12, double0, 0.01);
      //  // Unstable assertion: assertEquals(double12, double5, 0.01);
      //  // Unstable assertion: assertEquals(double12, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double12, double14, 0.01);
      //  // Unstable assertion: assertNotEquals(double12, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double12, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double12, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double12, double4, 0.01);
      //  // Unstable assertion: assertEquals(double12, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double10, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double14, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double11, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double12, 0.01);
      //  // Unstable assertion: assertNotEquals(double13, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double11, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double13, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double12, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double10, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double14, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double13, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double14, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double10, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double11, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double12, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double5, 0.01);
      
      double double15 = mnHesse0.tolerstp();
      //  // Unstable assertion: assertEquals(0.3, double15, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double11, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double10, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double14, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double13, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double15, double12, 0.01);
      
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double7, double8, double9, double7, double10).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameters0);
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int0 = (-992);
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase2, mnUserParameters0, int0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray1);
      //  // Unstable assertion: assertNotSame(mnUserParameterState1, mnUserParameterState0);
      //  // Unstable assertion: assertEquals(2, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, mnUserParameters0.variableParameters());
      //  // Unstable assertion: assertFalse(mnUserParameterState1.hasGlobalCC());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      //  // Unstable assertion: assertTrue(mnUserParameterState1.isValid());
      //  // Unstable assertion: assertFalse(mnUserParameterState1.hasCovariance());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      //  // Unstable assertion: assertEquals(24, mnUserParameterState1.nfcn());
      //  // Unstable assertion: assertEquals(2, mnUserParameterState1.variableParameters());
      //  // Unstable assertion: assertNotNull(mnUserParameterState1);
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      //  // Unstable assertion: assertNotEquals(double7, double12, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double14, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double13, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double10, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double15, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double11, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double7, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double12, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double14, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double11, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double13, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double10, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double8, double15, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double15, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double11, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double13, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double10, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double12, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double14, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double9, double7, 0.01);
      //  // Unstable assertion: assertEquals(double10, double12, 0.01);
      //  // Unstable assertion: assertNotEquals(double10, double11, 0.01);
      //  // Unstable assertion: assertNotEquals(double10, double14, 0.01);
      //  // Unstable assertion: assertNotEquals(double10, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double10, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double10, double15, 0.01);
      //  // Unstable assertion: assertNotEquals(double10, double13, 0.01);
      //  // Unstable assertion: assertNotEquals(double10, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double10, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double10, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double10, double8, 0.01);
      //  // Unstable assertion: assertEquals(double10, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double10, double7, 0.01);
      //  // Unstable assertion: assertEquals(double10, double5, 0.01);
      //  // Unstable assertion: assertEquals(double10, double6, 0.01);
      
      doubleArray0[0] = double6;
      double double16 = 0.0;
      doubleArray0[1] = double16;
      MnUserParameterState mnUserParameterState2 = new MnUserParameterState();
      //  // Unstable assertion: assertFalse(mnUserParameterState2.hasGlobalCC());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState2.fval(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState2.edm(), 0.01);
      //  // Unstable assertion: assertEquals(0, mnUserParameterState2.nfcn());
      //  // Unstable assertion: assertEquals(0, mnUserParameterState2.variableParameters());
      //  // Unstable assertion: assertFalse(mnUserParameterState2.isValid());
      //  // Unstable assertion: assertFalse(mnUserParameterState2.hasCovariance());
      //  // Unstable assertion: assertNotNull(mnUserParameterState2);
      //  // Unstable assertion: assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState1));
      //  // Unstable assertion: assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState0));
      
      String string1 = mnUserParameterState0.toString();
      //  // Unstable assertion: assertEquals("\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 || MnHesse: maximum number of allowed function calls exhausted. ||  limited || 5.96046e-08 ||   0.604274\n\n\n\n\n", string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(mnUserParameterState0, mnUserParameterState2);
      //  // Unstable assertion: assertNotSame(mnUserParameterState0, mnUserParameterState1);
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(0, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertEquals(1, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState2));
      //  // Unstable assertion: assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      
      int int1 = 0;
      MnUserParameterState mnUserParameterState3 = mnHesse0.calculate(fCNBase0, mnUserParameterState0, int1);
      //  // Unstable assertion: assertNotSame(mnUserParameterState3, mnUserParameterState2);
      //  // Unstable assertion: assertNotSame(mnUserParameterState3, mnUserParameterState1);
      //  // Unstable assertion: assertNotSame(mnUserParameterState3, mnUserParameterState0);
      //  // Unstable assertion: assertNotSame(mnUserParameterState0, mnUserParameterState2);
      //  // Unstable assertion: assertNotSame(mnUserParameterState0, mnUserParameterState3);
      //  // Unstable assertion: assertNotSame(mnUserParameterState0, mnUserParameterState1);
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState3.fval(), 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState3.hasCovariance());
      //  // Unstable assertion: assertFalse(mnUserParameterState3.hasGlobalCC());
      //  // Unstable assertion: assertEquals(12, mnUserParameterState3.nfcn());
      //  // Unstable assertion: assertEquals(1, mnUserParameterState3.variableParameters());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState3.edm(), 0.01);
      //  // Unstable assertion: assertTrue(mnUserParameterState3.isValid());
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(0, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertEquals(1, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertNotNull(mnUserParameterState3);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotEquals(double0, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double12, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double13, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double11, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double14, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double15, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double10, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double16, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double5, 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState3.equals((Object)mnUserParameterState2));
      //  // Unstable assertion: assertFalse(mnUserParameterState3.equals((Object)mnUserParameterState1));
      //  // Unstable assertion: assertFalse(mnUserParameterState3.equals((Object)mnUserParameterState0));
      //  // Unstable assertion: assertEquals(double1, double12, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double0, 0.01);
      //  // Unstable assertion: assertEquals(double1, double16, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double11, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double14, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double13, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double3, 0.01);
      //  // Unstable assertion: assertEquals(double1, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double15, 0.01);
      //  // Unstable assertion: assertEquals(double1, double5, 0.01);
      //  // Unstable assertion: assertEquals(double1, double10, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double15, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double6, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double10, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double8, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double13, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double16, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double11, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double14, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double12, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double7, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double9, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double5, 0.01);
      //  // Unstable assertion: assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState2));
      //  // Unstable assertion: assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      
      double double17 = 0.1;
      double double18 = 0.0;
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double12, doubleArray0[1]).when(fCNBase3).valueOf(any(double[].class));
      int int2 = 0;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase3, mnUserParameterState2, int2);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 3061;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double double0 = (-1954.4807160510659);
      double double1 = 2020.9374949957578;
      double double2 = 0.1;
      double double3 = 2817.0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = double0;
      double double4 = 4650.562644042277;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      double double5 = 1967.063;
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameters1.variableParameters());
      assertNotNull(mnUserParameters1);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      
      int int1 = 744;
      int int2 = 1825;
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      MnHesse mnHesse0 = new MnHesse();
      assertNotNull(mnHesse0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double double0 = (-3127.294);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double double1 = 2.8269810842579552;
      double double2 = (-1097.401046734);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertNotNull(mnUserCovariance0);
      
      MnUserCovariance mnUserCovariance1 = new MnUserCovariance(int0);
      assertEquals(0, mnUserCovariance1.nrow());
      assertEquals(0, mnUserCovariance1.ncol());
      assertNotNull(mnUserCovariance1);
      assertFalse(mnUserCovariance1.equals((Object)mnUserCovariance0));
      
      MnUserCovariance mnUserCovariance2 = new MnUserCovariance(int0);
      assertEquals(0, mnUserCovariance2.ncol());
      assertEquals(0, mnUserCovariance2.nrow());
      assertNotNull(mnUserCovariance2);
      assertFalse(mnUserCovariance2.equals((Object)mnUserCovariance0));
      assertFalse(mnUserCovariance2.equals((Object)mnUserCovariance1));
      
      int int1 = 1007;
      double double3 = 2720.75489703072;
      double double4 = mnHesse0.tolerg2();
      assertEquals(0.05, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      int int2 = 0;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase2, doubleArray0, mnUserCovariance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = 1.0;
      double double1 = 2.0;
      double double2 = (-1295.3173121639918);
      double[] doubleArray0 = new double[5];
      double double3 = 0.0;
      double double4 = 1.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double4, double2, double0, double1, double1).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray1 = new double[4];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double5 = 2310.8483406;
      int int0 = (-3812);
      MnStrategy mnStrategy0 = new MnStrategy();
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(2, mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertNotNull(mnStrategy0);
      
      mnStrategy0.setHessianGradientNCycles(int0);
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals((-3812), mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals((-3812), mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertNotNull(mnHesse0);
      
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray1, doubleArray1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      //  // Unstable assertion: assertEquals(4, doubleArray1.length);
      //  // Unstable assertion: assertFalse(mnStrategy0.isLow());
      //  // Unstable assertion: assertEquals(3, mnStrategy0.gradientNCycles());
      //  // Unstable assertion: assertEquals(5, mnStrategy0.hessianNCycles());
      //  // Unstable assertion: assertFalse(mnStrategy0.isHigh());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      //  // Unstable assertion: assertEquals((-3812), mnStrategy0.hessianGradientNCycles());
      //  // Unstable assertion: assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      //  // Unstable assertion: assertEquals(1, mnStrategy0.strategy());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      //  // Unstable assertion: assertTrue(mnStrategy0.isMedium());
      //  // Unstable assertion: assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      //  // Unstable assertion: assertTrue(mnUserParameterState0.isValid());
      //  // Unstable assertion: assertEquals(4, mnUserParameterState0.variableParameters());
      //  // Unstable assertion: assertEquals(36, mnUserParameterState0.nfcn());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasCovariance());
      //  // Unstable assertion: assertFalse(mnUserParameterState0.hasGlobalCC());
      //  // Unstable assertion: assertNotNull(mnUserParameterState0);
      //  // Unstable assertion: assertNotEquals(double0, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double2, 0.01);
      //  // Unstable assertion: assertEquals(double0, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double0, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double5, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double4, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double2, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double2, 0.01);
      //  // Unstable assertion: assertEquals(double4, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double4, double5, 0.01);
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
  }
}
