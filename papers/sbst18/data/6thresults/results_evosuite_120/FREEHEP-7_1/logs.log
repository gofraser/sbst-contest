* EvoSuite 1.0.6-SNAPSHOT
* Going to generate test cases for class: org.freehep.math.minuit.MnHesse
* Starting client
* Connecting to master process on port 7553
* Analyzing classpath: 
  - /var/benchmarks/projects/freehep/math/freehep-jminuit/target/classes
  - /var/benchmarks/projects/freehep/math/freehep-jminuit/target/classes
* Finished analyzing classpath
* Generating tests for class org.freehep.math.minuit.MnHesse
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 128
  - Branch 63
  - Exception 0
  - MutationFactory 141
  - Output 182
  - Method 16
  - MethodNoException 16
  - CBranchFitnessFactory 63
* Using seed 1516820343706
* Starting evolution
* Search finished after 72s and 110 generations, 116291 statements, best individual has fitness: 173.92017460143845
* Minimizing test suite
* Generated 46 tests with total length 901
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
[MASTER] 20:00:37.847 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Generating assertions
[MASTER] 20:00:37.850 [logback-1] WARN  TimeController - Phase MINIMIZATION lasted too long, 5 seconds more than allowed.
* Compiling and checking tests
[MASTER] 20:00:44.669 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IndexOutOfBoundsException: Index: 1, Size: 1
[MASTER] 20:00:44.672 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
MnStrategy mnStrategy0 = new MnStrategy(int0);
assertEquals(3, mnStrategy0.hessianNCycles());
assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
assertFalse(mnStrategy0.isHigh());
assertEquals(2, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isMedium());
assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(1, mnStrategy0.hessianGradientNCycles());
assertEquals(0, mnStrategy0.strategy());
assertTrue(mnStrategy0.isLow());
assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
assertNotNull(mnStrategy0);

mnStrategy0.setHighStrategy();
assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(6, mnStrategy0.hessianGradientNCycles());
assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(7, mnStrategy0.hessianNCycles());
assertEquals(5, mnStrategy0.gradientNCycles());
assertTrue(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isMedium());
assertFalse(mnStrategy0.isLow());
assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.strategy());
assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);

MnHesse mnHesse0 = new MnHesse(mnStrategy0);
assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(6, mnStrategy0.hessianGradientNCycles());
assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(7, mnStrategy0.hessianNCycles());
assertEquals(5, mnStrategy0.gradientNCycles());
assertTrue(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isMedium());
assertFalse(mnStrategy0.isLow());
assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.strategy());
assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
assertNotNull(mnHesse0);

double double0 = (-4268.259231);
double double1 = (-2472.2186484474196);
FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(double0, (double)int0, double1, (double)int0, double1).when(fCNBase0).valueOf(any(double[].class));
double double2 = 0.0;
MnFcn mnFcn0 = new MnFcn(fCNBase0, double2);
assertNotNull(mnFcn0);
assertNotEquals(double0, double1, 0.01);
assertNotEquals(double0, double2, 0.01);
assertNotEquals(double1, double0, 0.01);
assertNotEquals(double1, double2, 0.01);
assertNotEquals(double2, double1, 0.01);
assertNotEquals(double2, double0, 0.01);

int int1 = 949;
MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int1);
assertNotNull(mnAlgebraicVector0);
assertFalse(int1 == int0);

double double3 = 0.1;
MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double3);
assertNotNull(minimumParameters0);
assertFalse(int1 == int0);
assertNotEquals(double3, double1, 0.01);
assertNotEquals(double3, double0, 0.01);
assertNotEquals(double3, double2, 0.01);

double double4 = (-557.5908775);
MinimumState minimumState0 = new MinimumState(minimumParameters0, double4, int0);
assertNotNull(minimumState0);
assertFalse(int0 == int1);
assertFalse(int1 == int0);
assertNotEquals(double3, double1, 0.01);
assertNotEquals(double3, double0, 0.01);
assertNotEquals(double3, double2, 0.01);
assertNotEquals(double3, double4, 0.01);
assertNotEquals(double4, double0, 0.01);
assertNotEquals(double4, double2, 0.01);
assertNotEquals(double4, double3, 0.01);
assertNotEquals(double4, double1, 0.01);

double[] doubleArray0 = new double[1];
doubleArray0[0] = (double) int0;
MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);
assertEquals(1, mnUserParameters0.variableParameters());
assertNotNull(mnUserParameters0);

MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(1, doubleArray0.length);
assertEquals(1, mnUserParameters0.variableParameters());
assertEquals(1, mnUserParameters1.variableParameters());
assertNotNull(mnUserParameters1);
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));

MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(1, doubleArray0.length);
assertEquals(1, mnUserParameters0.variableParameters());
assertEquals(1, mnUserParameters1.variableParameters());
assertNotNull(mnUserTransformation0);
assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));

MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int1);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertNotSame(minimumState1, minimumState0);
assertNotSame(minimumState0, minimumState1);
assertEquals(1, doubleArray0.length);
assertEquals(1, mnUserParameters0.variableParameters());
assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(6, mnStrategy0.hessianGradientNCycles());
assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(7, mnStrategy0.hessianNCycles());
assertEquals(5, mnStrategy0.gradientNCycles());
assertTrue(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isMedium());
assertFalse(mnStrategy0.isLow());
assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.strategy());
assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(1, mnUserParameters1.variableParameters());
assertNotNull(minimumState1);
assertFalse(int0 == int1);
assertNotEquals(double0, double1, 0.01);
assertNotEquals(double0, double4, 0.01);
assertNotEquals(double0, double2, 0.01);
assertNotEquals(double0, double3, 0.01);
assertNotEquals(double1, double0, 0.01);
assertNotEquals(double1, double4, 0.01);
assertNotEquals(double1, double2, 0.01);
assertNotEquals(double1, double3, 0.01);
assertNotEquals(double2, double1, 0.01);
assertNotEquals(double2, double4, 0.01);
assertNotEquals(double2, double0, 0.01);
assertNotEquals(double2, double3, 0.01);
assertFalse(int1 == int0);
assertNotEquals(double3, double1, 0.01);
assertNotEquals(double3, double0, 0.01);
assertNotEquals(double3, double2, 0.01);
assertNotEquals(double3, double4, 0.01);
assertNotEquals(double4, double0, 0.01);
assertNotEquals(double4, double2, 0.01);
assertNotEquals(double4, double3, 0.01);
assertNotEquals(double4, double1, 0.01);
assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
assertFalse(minimumState1.equals((Object)minimumState0));

double[] doubleArray1 = null;
mnStrategy0.setHighStrategy();
assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(6, mnStrategy0.hessianGradientNCycles());
assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(7, mnStrategy0.hessianNCycles());
assertEquals(5, mnStrategy0.gradientNCycles());
assertTrue(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isMedium());
assertFalse(mnStrategy0.isLow());
assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.strategy());
assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(int0 == int1);

double double5 = mnHesse0.tolerstp();
assertEquals(0.1, double5, 0.01);
assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(6, mnStrategy0.hessianGradientNCycles());
assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(7, mnStrategy0.hessianNCycles());
assertEquals(5, mnStrategy0.gradientNCycles());
assertTrue(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isMedium());
assertFalse(mnStrategy0.isLow());
assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.strategy());
assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(int0 == int1);
assertNotEquals(double5, double0, 0.01);
assertNotEquals(double5, double1, 0.01);
assertNotEquals(double5, double4, 0.01);
assertEquals(double5, double3, 0.01);
assertNotEquals(double5, double2, 0.01);

MnUserCovariance mnUserCovariance0 = null;
double double6 = mnHesse0.tolerg2();
assertEquals(0.02, double6, 0.01);
assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(6, mnStrategy0.hessianGradientNCycles());
assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(7, mnStrategy0.hessianNCycles());
assertEquals(5, mnStrategy0.gradientNCycles());
assertTrue(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isMedium());
assertFalse(mnStrategy0.isLow());
assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.strategy());
assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(int0 == int1);
assertNotEquals(double6, double1, 0.01);
assertNotEquals(double6, double5, 0.01);
assertNotEquals(double6, double4, 0.01);
assertNotEquals(double6, double2, 0.01);
assertNotEquals(double6, double3, 0.01);
assertNotEquals(double6, double0, 0.01);

FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
mnHesse0.calculate(fCNBase1, doubleArray1, mnUserCovariance0);

[MASTER] 20:00:44.814 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0.0> but was:<1.0>
[MASTER] 20:00:44.815 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double double0 = 1.0;
double double1 = 2.0;
double double2 = (-1295.3173121639918);
double[] doubleArray0 = new double[5];
double double3 = 0.0;
double double4 = 1.0;
FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(double4, double2, double0, double1, double1).when(fCNBase0).valueOf(any(double[].class));
double[] doubleArray1 = new double[4];
assertFalse(doubleArray1.equals((Object)doubleArray0));

double double5 = 2310.8483406;
int int0 = (-3812);
MnStrategy mnStrategy0 = new MnStrategy();
assertFalse(mnStrategy0.isLow());
assertEquals(3, mnStrategy0.gradientNCycles());
assertEquals(5, mnStrategy0.hessianNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertNotNull(mnStrategy0);

mnStrategy0.setHessianGradientNCycles(int0);
assertFalse(mnStrategy0.isLow());
assertEquals(3, mnStrategy0.gradientNCycles());
assertEquals(5, mnStrategy0.hessianNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals((-3812), mnStrategy0.hessianGradientNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);

MnHesse mnHesse0 = new MnHesse(mnStrategy0);
assertFalse(mnStrategy0.isLow());
assertEquals(3, mnStrategy0.gradientNCycles());
assertEquals(5, mnStrategy0.hessianNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals((-3812), mnStrategy0.hessianGradientNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertNotNull(mnHesse0);

MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray1, doubleArray1);
assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
assertNotSame(doubleArray1, doubleArray0);
assertEquals(4, doubleArray1.length);
assertFalse(mnStrategy0.isLow());
assertEquals(3, mnStrategy0.gradientNCycles());
assertEquals(5, mnStrategy0.hessianNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals((-3812), mnStrategy0.hessianGradientNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
assertTrue(mnUserParameterState0.isValid());
assertEquals(4, mnUserParameterState0.variableParameters());
assertEquals(36, mnUserParameterState0.nfcn());
assertFalse(mnUserParameterState0.hasCovariance());
assertFalse(mnUserParameterState0.hasGlobalCC());
assertNotNull(mnUserParameterState0);
assertNotEquals(double0, double3, 0.01);
assertNotEquals(double0, double5, 0.01);
assertNotEquals(double0, double2, 0.01);
assertEquals(double0, double4, 0.01);
assertNotEquals(double0, double1, 0.01);
assertNotEquals(double1, double0, 0.01);
assertNotEquals(double1, double2, 0.01);
assertNotEquals(double1, double4, 0.01);
assertNotEquals(double1, double3, 0.01);
assertNotEquals(double1, double5, 0.01);
assertNotEquals(double2, double3, 0.01);
assertNotEquals(double2, double5, 0.01);
assertNotEquals(double2, double4, 0.01);
assertNotEquals(double2, double0, 0.01);
assertNotEquals(double2, double1, 0.01);
assertNotEquals(double4, double2, 0.01);
assertEquals(double4, double0, 0.01);
assertNotEquals(double4, double1, 0.01);
assertNotEquals(double4, double3, 0.01);
assertNotEquals(double4, double5, 0.01);
assertFalse(doubleArray1.equals((Object)doubleArray0));


[MASTER] 20:00:45.206 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0.0> but was:<-0.4171459069445029>
[MASTER] 20:00:45.213 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MnHesse mnHesse0 = new MnHesse();
assertNotNull(mnHesse0);

double double0 = (-1795.2862855555852);
double double1 = 0.0;
double double2 = 2.0;
FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(double0, double1, double2, double1, double2).when(fCNBase0).valueOf(any(double[].class));
MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
assertFalse(mnUserParameterState0.isValid());
assertEquals(0, mnUserParameterState0.nfcn());
assertFalse(mnUserParameterState0.hasCovariance());
assertFalse(mnUserParameterState0.hasGlobalCC());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
assertEquals(0, mnUserParameterState0.variableParameters());
assertNotNull(mnUserParameterState0);

double double3 = 0.10000000000000002;
double double4 = 911.25334;
double double5 = 4.768371866248344E-7;
FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
double[] doubleArray0 = new double[2];
double double6 = 0.0;
double double7 = (-0.4171459069445029);
double double8 = (-1155.14314637);
double double9 = 1.0;
double double10 = 5.9604644775390625E-8;
double double11 = mnHesse0.tolerg2();
assertEquals(0.05, double11, 0.01);
assertNotEquals(double11, double0, 0.01);
assertNotEquals(double11, double7, 0.01);
assertNotEquals(double11, double5, 0.01);
assertNotEquals(double11, double10, 0.01);
assertNotEquals(double11, double8, 0.01);
assertNotEquals(double11, double9, 0.01);
assertNotEquals(double11, double6, 0.01);
assertNotEquals(double11, double1, 0.01);
assertNotEquals(double11, double4, 0.01);
assertNotEquals(double11, double2, 0.01);
assertNotEquals(double11, double3, 0.01);

String string0 = "MnHesse: maximum number of allowed function calls exhausted.";
double double12 = 5.9604644775390625E-8;
double double13 = 0.6042740798511975;
double double14 = 842.985452749171;
double[] doubleArray1 = mnUserParameterState0.params();
assertArrayEquals(new double[] {}, doubleArray1, 0.01);
assertNotSame(doubleArray1, doubleArray0);
assertEquals(0, doubleArray1.length);
assertFalse(mnUserParameterState0.isValid());
assertEquals(0, mnUserParameterState0.nfcn());
assertFalse(mnUserParameterState0.hasCovariance());
assertFalse(mnUserParameterState0.hasGlobalCC());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
assertEquals(0, mnUserParameterState0.variableParameters());
assertNotNull(doubleArray1);
assertFalse(doubleArray1.equals((Object)doubleArray0));

mnUserParameterState0.add(string0, double12, double13, double14, double4);
assertTrue(mnUserParameterState0.isValid());
assertEquals(0, mnUserParameterState0.nfcn());
assertFalse(mnUserParameterState0.hasCovariance());
assertEquals(1, mnUserParameterState0.variableParameters());
assertFalse(mnUserParameterState0.hasGlobalCC());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
assertNotEquals(double12, double11, 0.01);
assertEquals(double12, double10, 0.01);
assertNotEquals(double12, double13, 0.01);
assertNotEquals(double12, double2, 0.01);
assertNotEquals(double12, double7, 0.01);
assertNotEquals(double12, double0, 0.01);
assertEquals(double12, double5, 0.01);
assertEquals(double12, double1, 0.01);
assertNotEquals(double12, double14, 0.01);
assertNotEquals(double12, double3, 0.01);
assertNotEquals(double12, double9, 0.01);
assertNotEquals(double12, double8, 0.01);
assertNotEquals(double12, double4, 0.01);
assertEquals(double12, double6, 0.01);
assertNotEquals(double13, double6, 0.01);
assertNotEquals(double13, double10, 0.01);
assertNotEquals(double13, double2, 0.01);
assertNotEquals(double13, double0, 0.01);
assertNotEquals(double13, double7, 0.01);
assertNotEquals(double13, double14, 0.01);
assertNotEquals(double13, double11, 0.01);
assertNotEquals(double13, double3, 0.01);
assertNotEquals(double13, double9, 0.01);
assertNotEquals(double13, double4, 0.01);
assertNotEquals(double13, double1, 0.01);
assertNotEquals(double13, double8, 0.01);
assertNotEquals(double13, double12, 0.01);
assertNotEquals(double13, double5, 0.01);
assertNotEquals(double14, double11, 0.01);
assertNotEquals(double14, double7, 0.01);
assertNotEquals(double14, double6, 0.01);
assertNotEquals(double14, double13, 0.01);
assertNotEquals(double14, double3, 0.01);
assertNotEquals(double14, double8, 0.01);
assertNotEquals(double14, double9, 0.01);
assertNotEquals(double14, double4, 0.01);
assertNotEquals(double14, double5, 0.01);
assertNotEquals(double14, double0, 0.01);
assertNotEquals(double14, double12, 0.01);
assertNotEquals(double14, double10, 0.01);
assertNotEquals(double14, double1, 0.01);
assertNotEquals(double14, double2, 0.01);
assertNotEquals(double4, double7, 0.01);
assertNotEquals(double4, double0, 0.01);
assertNotEquals(double4, double13, 0.01);
assertNotEquals(double4, double3, 0.01);
assertNotEquals(double4, double14, 0.01);
assertNotEquals(double4, double6, 0.01);
assertNotEquals(double4, double10, 0.01);
assertNotEquals(double4, double11, 0.01);
assertNotEquals(double4, double2, 0.01);
assertNotEquals(double4, double1, 0.01);
assertNotEquals(double4, double8, 0.01);
assertNotEquals(double4, double9, 0.01);
assertNotEquals(double4, double12, 0.01);
assertNotEquals(double4, double5, 0.01);

double double15 = mnHesse0.tolerstp();
assertEquals(0.3, double15, 0.01);
assertNotEquals(double15, double11, 0.01);
assertNotEquals(double15, double10, 0.01);
assertNotEquals(double15, double2, 0.01);
assertNotEquals(double15, double6, 0.01);
assertNotEquals(double15, double14, 0.01);
assertNotEquals(double15, double7, 0.01);
assertNotEquals(double15, double5, 0.01);
assertNotEquals(double15, double13, 0.01);
assertNotEquals(double15, double3, 0.01);
assertNotEquals(double15, double0, 0.01);
assertNotEquals(double15, double8, 0.01);
assertNotEquals(double15, double9, 0.01);
assertNotEquals(double15, double4, 0.01);
assertNotEquals(double15, double1, 0.01);
assertNotEquals(double15, double12, 0.01);

FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(double7, double8, double9, double7, double10).when(fCNBase2).valueOf(any(double[].class));
MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(2, mnUserParameters0.variableParameters());
assertNotNull(mnUserParameters0);
assertFalse(doubleArray0.equals((Object)doubleArray1));

int int0 = (-992);
MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase2, mnUserParameters0, int0);
assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
assertNotSame(doubleArray0, doubleArray1);
assertNotSame(mnUserParameterState1, mnUserParameterState0);
assertEquals(2, doubleArray0.length);
assertEquals(2, mnUserParameters0.variableParameters());
assertFalse(mnUserParameterState1.hasGlobalCC());
assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
assertTrue(mnUserParameterState1.isValid());
assertFalse(mnUserParameterState1.hasCovariance());
assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
assertEquals(24, mnUserParameterState1.nfcn());
assertEquals(2, mnUserParameterState1.variableParameters());
assertNotNull(mnUserParameterState1);
assertFalse(doubleArray0.equals((Object)doubleArray1));
assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
assertNotEquals(double7, double12, 0.01);
assertNotEquals(double7, double0, 0.01);
assertNotEquals(double7, double14, 0.01);
assertNotEquals(double7, double13, 0.01);
assertNotEquals(double7, double5, 0.01);
assertNotEquals(double7, double1, 0.01);
assertNotEquals(double7, double10, 0.01);
assertNotEquals(double7, double15, 0.01);
assertNotEquals(double7, double2, 0.01);
assertNotEquals(double7, double6, 0.01);
assertNotEquals(double7, double4, 0.01);
assertNotEquals(double7, double8, 0.01);
assertNotEquals(double7, double11, 0.01);
assertNotEquals(double7, double9, 0.01);
assertNotEquals(double7, double3, 0.01);
assertNotEquals(double8, double12, 0.01);
assertNotEquals(double8, double0, 0.01);
assertNotEquals(double8, double14, 0.01);
assertNotEquals(double8, double3, 0.01);
assertNotEquals(double8, double7, 0.01);
assertNotEquals(double8, double2, 0.01);
assertNotEquals(double8, double11, 0.01);
assertNotEquals(double8, double6, 0.01);
assertNotEquals(double8, double4, 0.01);
assertNotEquals(double8, double9, 0.01);
assertNotEquals(double8, double13, 0.01);
assertNotEquals(double8, double5, 0.01);
assertNotEquals(double8, double10, 0.01);
assertNotEquals(double8, double1, 0.01);
assertNotEquals(double8, double15, 0.01);
assertNotEquals(double9, double15, 0.01);
assertNotEquals(double9, double4, 0.01);
assertNotEquals(double9, double8, 0.01);
assertNotEquals(double9, double11, 0.01);
assertNotEquals(double9, double5, 0.01);
assertNotEquals(double9, double13, 0.01);
assertNotEquals(double9, double2, 0.01);
assertNotEquals(double9, double10, 0.01);
assertNotEquals(double9, double1, 0.01);
assertNotEquals(double9, double12, 0.01);
assertNotEquals(double9, double0, 0.01);
assertNotEquals(double9, double14, 0.01);
assertNotEquals(double9, double6, 0.01);
assertNotEquals(double9, double3, 0.01);
assertNotEquals(double9, double7, 0.01);
assertEquals(double10, double12, 0.01);
assertNotEquals(double10, double11, 0.01);
assertNotEquals(double10, double14, 0.01);
assertNotEquals(double10, double2, 0.01);
assertNotEquals(double10, double0, 0.01);
assertNotEquals(double10, double15, 0.01);
assertNotEquals(double10, double13, 0.01);
assertNotEquals(double10, double3, 0.01);
assertNotEquals(double10, double9, 0.01);
assertNotEquals(double10, double4, 0.01);
assertNotEquals(double10, double8, 0.01);
assertEquals(double10, double1, 0.01);
assertNotEquals(double10, double7, 0.01);
assertEquals(double10, double5, 0.01);
assertEquals(double10, double6, 0.01);

doubleArray0[0] = double6;
double double16 = 0.0;
doubleArray0[1] = double16;
MnUserParameterState mnUserParameterState2 = new MnUserParameterState();
assertFalse(mnUserParameterState2.hasGlobalCC());
assertEquals(0.0, mnUserParameterState2.fval(), 0.01);
assertEquals(0.0, mnUserParameterState2.edm(), 0.01);
assertEquals(0, mnUserParameterState2.nfcn());
assertEquals(0, mnUserParameterState2.variableParameters());
assertFalse(mnUserParameterState2.isValid());
assertFalse(mnUserParameterState2.hasCovariance());
assertNotNull(mnUserParameterState2);
assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState1));
assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState0));

String string1 = mnUserParameterState0.toString();
assertEquals("\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 || MnHesse: maximum number of allowed function calls exhausted. ||  limited || 5.96046e-08 ||   0.604274\n\n\n\n\n", string1);
assertNotSame(string1, string0);
assertNotSame(mnUserParameterState0, mnUserParameterState2);
assertNotSame(mnUserParameterState0, mnUserParameterState1);
assertTrue(mnUserParameterState0.isValid());
assertEquals(0, mnUserParameterState0.nfcn());
assertFalse(mnUserParameterState0.hasCovariance());
assertEquals(1, mnUserParameterState0.variableParameters());
assertFalse(mnUserParameterState0.hasGlobalCC());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
assertNotNull(string1);
assertFalse(string1.equals((Object)string0));
assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState2));
assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));

int int1 = 0;
MnUserParameterState mnUserParameterState3 = mnHesse0.calculate(fCNBase0, mnUserParameterState0, int1);
assertNotSame(mnUserParameterState3, mnUserParameterState2);
assertNotSame(mnUserParameterState3, mnUserParameterState1);
assertNotSame(mnUserParameterState3, mnUserParameterState0);
assertNotSame(mnUserParameterState0, mnUserParameterState2);
assertNotSame(mnUserParameterState0, mnUserParameterState3);
assertNotSame(mnUserParameterState0, mnUserParameterState1);
assertEquals(0.0, mnUserParameterState3.fval(), 0.01);
assertFalse(mnUserParameterState3.hasCovariance());
assertFalse(mnUserParameterState3.hasGlobalCC());
assertEquals(12, mnUserParameterState3.nfcn());
assertEquals(1, mnUserParameterState3.variableParameters());
assertEquals(0.0, mnUserParameterState3.edm(), 0.01);
assertTrue(mnUserParameterState3.isValid());
assertTrue(mnUserParameterState0.isValid());
assertEquals(0, mnUserParameterState0.nfcn());
assertFalse(mnUserParameterState0.hasCovariance());
assertEquals(1, mnUserParameterState0.variableParameters());
assertFalse(mnUserParameterState0.hasGlobalCC());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
assertNotNull(mnUserParameterState3);
assertFalse(int1 == int0);
assertNotEquals(double0, double7, 0.01);
assertNotEquals(double0, double12, 0.01);
assertNotEquals(double0, double13, 0.01);
assertNotEquals(double0, double11, 0.01);
assertNotEquals(double0, double14, 0.01);
assertNotEquals(double0, double2, 0.01);
assertNotEquals(double0, double6, 0.01);
assertNotEquals(double0, double15, 0.01);
assertNotEquals(double0, double10, 0.01);
assertNotEquals(double0, double1, 0.01);
assertNotEquals(double0, double16, 0.01);
assertNotEquals(double0, double8, 0.01);
assertNotEquals(double0, double3, 0.01);
assertNotEquals(double0, double4, 0.01);
assertNotEquals(double0, double9, 0.01);
assertNotEquals(double0, double5, 0.01);
assertFalse(mnUserParameterState3.equals((Object)mnUserParameterState2));
assertFalse(mnUserParameterState3.equals((Object)mnUserParameterState1));
assertFalse(mnUserParameterState3.equals((Object)mnUserParameterState0));
assertEquals(double1, double12, 0.01);
assertNotEquals(double1, double2, 0.01);
assertNotEquals(double1, double7, 0.01);
assertNotEquals(double1, double0, 0.01);
assertEquals(double1, double16, 0.01);
assertNotEquals(double1, double11, 0.01);
assertNotEquals(double1, double14, 0.01);
assertNotEquals(double1, double13, 0.01);
assertNotEquals(double1, double9, 0.01);
assertNotEquals(double1, double4, 0.01);
assertNotEquals(double1, double8, 0.01);
assertNotEquals(double1, double3, 0.01);
assertEquals(double1, double6, 0.01);
assertNotEquals(double1, double15, 0.01);
assertEquals(double1, double5, 0.01);
assertEquals(double1, double10, 0.01);
assertNotEquals(double2, double15, 0.01);
assertNotEquals(double2, double6, 0.01);
assertNotEquals(double2, double10, 0.01);
assertNotEquals(double2, double1, 0.01);
assertNotEquals(double2, double4, 0.01);
assertNotEquals(double2, double8, 0.01);
assertNotEquals(double2, double13, 0.01);
assertNotEquals(double2, double3, 0.01);
assertNotEquals(double2, double16, 0.01);
assertNotEquals(double2, double11, 0.01);
assertNotEquals(double2, double14, 0.01);
assertNotEquals(double2, double12, 0.01);
assertNotEquals(double2, double7, 0.01);
assertNotEquals(double2, double0, 0.01);
assertNotEquals(double2, double9, 0.01);
assertNotEquals(double2, double5, 0.01);
assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState2));
assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));

double double17 = 0.1;
double double18 = 0.0;
FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(double12, doubleArray0[1]).when(fCNBase3).valueOf(any(double[].class));
int int2 = 0;
mnHesse0.calculate(fCNBase3, mnUserParameterState2, int2);

[MASTER] 20:00:45.780 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0.0> but was:<7.0>
[MASTER] 20:00:45.782 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 7;
MnHesse mnHesse0 = new MnHesse(int0);
assertNotNull(mnHesse0);

double double0 = 5.9604644775390625E-8;
double double1 = 1405.940791203;
double double2 = 0.5;
double double3 = 1627.848493;
FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
double[] doubleArray0 = new double[8];
doubleArray0[0] = (double) int0;
doubleArray0[1] = (double) int0;
doubleArray0[3] = (double) int0;
doubleArray0[5] = (double) int0;
doubleArray0[6] = (double) int0;
doubleArray0[7] = (double) int0;
double double4 = 10.0;
double double5 = 693.01;
double double6 = 2435.6;
FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(doubleArray0[5], double4, double1, double5, double6).when(fCNBase1).valueOf(any(double[].class));
MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
assertArrayEquals(new double[] {7.0, 7.0, 0.0, 7.0, 0.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
assertFalse(mnUserParameterState0.hasGlobalCC());
assertFalse(mnUserParameterState0.hasCovariance());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(8, mnUserParameterState0.variableParameters());
assertEquals(0, mnUserParameterState0.nfcn());
assertTrue(mnUserParameterState0.isValid());
assertNotNull(mnUserParameterState0);

mnUserParameterState0.setPrecision(double1);
assertArrayEquals(new double[] {7.0, 7.0, 0.0, 7.0, 0.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
assertFalse(mnUserParameterState0.hasGlobalCC());
assertFalse(mnUserParameterState0.hasCovariance());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(8, mnUserParameterState0.variableParameters());
assertEquals(0, mnUserParameterState0.nfcn());
assertTrue(mnUserParameterState0.isValid());
assertNotEquals(double1, double4, 0.01);
assertNotEquals(double1, double5, 0.01);
assertNotEquals(double1, double6, 0.01);
assertNotEquals(double1, double0, 0.01);
assertNotEquals(double1, double2, 0.01);
assertNotEquals(double1, double3, 0.01);

double double7 = (-711.4146801831138);
int int1 = 0;
mnUserParameterState0.setLowerLimit(int0, double7);
assertArrayEquals(new double[] {7.0, 7.0, 0.0, 7.0, 0.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
assertFalse(mnUserParameterState0.hasGlobalCC());
assertFalse(mnUserParameterState0.hasCovariance());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(8, mnUserParameterState0.variableParameters());
assertEquals(0, mnUserParameterState0.nfcn());
assertTrue(mnUserParameterState0.isValid());
assertFalse(int0 == int1);
assertNotEquals(double7, double4, 0.01);
assertNotEquals(double7, double5, 0.01);
assertNotEquals(double7, double2, 0.01);
assertNotEquals(double7, double6, 0.01);
assertNotEquals(double7, double0, 0.01);
assertNotEquals(double7, double1, 0.01);
assertNotEquals(double7, double3, 0.01);

int int2 = (-3800);
MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameterState0, int2);
assertArrayEquals(new double[] {7.0, 7.0, 0.0, 7.0, 0.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
assertNotSame(mnUserParameterState0, mnUserParameterState1);
assertNotSame(mnUserParameterState1, mnUserParameterState0);
assertEquals(8, doubleArray0.length);
assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
assertFalse(mnUserParameterState0.hasGlobalCC());
assertFalse(mnUserParameterState0.hasCovariance());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(8, mnUserParameterState0.variableParameters());
assertEquals(0, mnUserParameterState0.nfcn());
assertTrue(mnUserParameterState0.isValid());
assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
assertFalse(mnUserParameterState1.hasCovariance());
assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
assertFalse(mnUserParameterState1.hasGlobalCC());
assertEquals(8, mnUserParameterState1.variableParameters());
assertEquals(44, mnUserParameterState1.nfcn());
assertTrue(mnUserParameterState1.isValid());
assertNotNull(mnUserParameterState1);
assertNotEquals(double6, double4, 0.01);
assertNotEquals(double6, double7, 0.01);
assertNotEquals(double6, double3, 0.01);
assertNotEquals(double6, double1, 0.01);
assertNotEquals(double6, double5, 0.01);
assertNotEquals(double6, double0, 0.01);
assertNotEquals(double6, double2, 0.01);
assertFalse(int0 == int2);
assertFalse(int0 == int1);
assertNotEquals(double1, double4, 0.01);
assertNotEquals(double1, double5, 0.01);
assertNotEquals(double1, double6, 0.01);
assertNotEquals(double1, double0, 0.01);
assertNotEquals(double1, double2, 0.01);
assertNotEquals(double1, double3, 0.01);
assertNotEquals(double1, double7, 0.01);
assertFalse(int2 == int0);
assertFalse(int2 == int1);
assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
assertNotEquals(double4, double1, 0.01);
assertNotEquals(double4, double5, 0.01);
assertNotEquals(double4, double2, 0.01);
assertNotEquals(double4, double7, 0.01);
assertNotEquals(double4, double0, 0.01);
assertNotEquals(double4, double6, 0.01);
assertNotEquals(double4, double3, 0.01);
assertNotEquals(double5, double6, 0.01);
assertNotEquals(double5, double1, 0.01);
assertNotEquals(double5, double0, 0.01);
assertNotEquals(double5, double2, 0.01);
assertNotEquals(double5, double4, 0.01);
assertNotEquals(double5, double7, 0.01);
assertNotEquals(double5, double3, 0.01);

MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
assertArrayEquals(new double[] {7.0, 7.0, 0.0, 7.0, 0.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(8, mnUserParameters0.variableParameters());
assertNotNull(mnUserParameters0);

mnUserParameters0.setUpperLimit(int2, doubleArray0[6]);

[MASTER] 20:00:45.907 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<NaN> but was:<163.20661949393025>
[MASTER] 20:00:45.913 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MnStrategy mnStrategy0 = new MnStrategy();
assertEquals(5, mnStrategy0.hessianNCycles());
assertFalse(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isLow());
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(3, mnStrategy0.gradientNCycles());
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertNotNull(mnStrategy0);

int int0 = (-270);
double double0 = 1267.599;
mnStrategy0.setGradientTolerance(double0);
assertEquals(5, mnStrategy0.hessianNCycles());
assertFalse(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isLow());
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(3, mnStrategy0.gradientNCycles());

mnStrategy0.setHessianNCycles(int0);
assertFalse(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isLow());
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(3, mnStrategy0.gradientNCycles());

MnHesse mnHesse0 = new MnHesse(mnStrategy0);
assertFalse(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isLow());
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(3, mnStrategy0.gradientNCycles());
assertNotNull(mnHesse0);

double double1 = (-1583.0);
double double2 = 2281.4;
double double3 = 1733.48272;
FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(double1, double2, double2, (double)int0, double3).when(fCNBase0).valueOf(any(double[].class));
double[] doubleArray0 = new double[2];
doubleArray0[0] = (double) int0;
doubleArray0[1] = double0;
MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(2, mnUserParameters0.variableParameters());
assertNotNull(mnUserParameters0);

MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(2, doubleArray0.length);
assertEquals(2, mnUserParameters0.variableParameters());
assertEquals(2, mnUserParameters1.variableParameters());
assertNotNull(mnUserParameters1);
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));

int int1 = 285;
MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters1, int1);
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(2, doubleArray0.length);
assertTrue(mnUserParameterState0.hasGlobalCC());
assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
assertTrue(mnUserParameterState0.hasCovariance());
assertEquals(2, mnUserParameterState0.variableParameters());
assertEquals(13, mnUserParameterState0.nfcn());
assertTrue(mnUserParameterState0.isValid());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertFalse(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isLow());
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(3, mnStrategy0.gradientNCycles());
assertEquals(2, mnUserParameters0.variableParameters());
assertEquals(2, mnUserParameters1.variableParameters());
assertNotNull(mnUserParameterState0);
assertFalse(int0 == int1);
assertNotEquals(double1, double2, 0.01);
assertNotEquals(double1, double3, 0.01);
assertNotEquals(double1, double0, 0.01);
assertNotEquals(double2, double3, 0.01);
assertNotEquals(double2, double1, 0.01);
assertNotEquals(double2, double0, 0.01);
assertNotEquals(double3, double0, 0.01);
assertNotEquals(double3, double1, 0.01);
assertNotEquals(double3, double2, 0.01);
assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
assertFalse(int1 == int0);

int int2 = mnHesse0.ncycles();
assertEquals((-270), int2);
assertFalse(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isLow());
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(int2 == int1);
assertTrue(int2 == int0);

double double4 = mnHesse0.tolerstp();
assertEquals(0.3, double4, 0.01);
assertFalse(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isLow());
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(3, mnStrategy0.gradientNCycles());
assertNotEquals(double4, double0, 0.01);
assertNotEquals(double4, double2, 0.01);
assertNotEquals(double4, double1, 0.01);
assertNotEquals(double4, double3, 0.01);

double double5 = 10.0;
double double6 = (-4698.458780010128);
double double7 = (-1523.305995838);
double double8 = (-3699.5945);
double double9 = (-1733.6510776);
FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(double5, double6, double7, double8, double9).when(fCNBase1).valueOf(any(double[].class));
MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameterState0, int0);
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertNotSame(mnUserParameterState0, mnUserParameterState1);
assertNotSame(mnUserParameterState1, mnUserParameterState0);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(2, doubleArray0.length);
assertTrue(mnUserParameterState0.hasGlobalCC());
assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
assertTrue(mnUserParameterState0.hasCovariance());
assertEquals(2, mnUserParameterState0.variableParameters());
assertEquals(13, mnUserParameterState0.nfcn());
assertTrue(mnUserParameterState0.isValid());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertFalse(mnStrategy0.isHigh());
assertFalse(mnStrategy0.isLow());
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnUserParameterState1.hasCovariance());
assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
assertTrue(mnUserParameterState1.isValid());
assertEquals(2, mnUserParameterState1.variableParameters());
assertEquals(27, mnUserParameterState1.nfcn());
assertEquals(Double.NaN, mnUserParameterState1.edm(), 0.01);
assertFalse(mnUserParameterState1.hasGlobalCC());
assertEquals(2, mnUserParameters0.variableParameters());
assertEquals(2, mnUserParameters1.variableParameters());
assertNotNull(mnUserParameterState1);
assertTrue(int0 == int2);
assertFalse(int0 == int1);
assertNotEquals(double1, double2, 0.01);
assertNotEquals(double1, double4, 0.01);
assertNotEquals(double1, double7, 0.01);
assertNotEquals(double1, double3, 0.01);
assertNotEquals(double1, double8, 0.01);
assertNotEquals(double1, double5, 0.01);
assertNotEquals(double1, double0, 0.01);
assertNotEquals(double1, double6, 0.01);
assertNotEquals(double1, double9, 0.01);
assertNotEquals(double2, double3, 0.01);
assertNotEquals(double2, double9, 0.01);
assertNotEquals(double2, double1, 0.01);
assertNotEquals(double2, double7, 0.01);
assertNotEquals(double2, double4, 0.01);
assertNotEquals(double2, double0, 0.01);
assertNotEquals(double2, double5, 0.01);
assertNotEquals(double2, double6, 0.01);
assertNotEquals(double2, double8, 0.01);
assertNotEquals(double3, double5, 0.01);
assertNotEquals(double3, double0, 0.01);
assertNotEquals(double3, double6, 0.01);
assertNotEquals(double3, double9, 0.01);
assertNotEquals(double3, double4, 0.01);
assertNotEquals(double3, double7, 0.01);
assertNotEquals(double3, double8, 0.01);
assertNotEquals(double3, double1, 0.01);
assertNotEquals(double3, double2, 0.01);
assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
assertFalse(int1 == int2);
assertFalse(int1 == int0);
assertNotEquals(double5, double3, 0.01);
assertNotEquals(double5, double8, 0.01);
assertNotEquals(double5, double2, 0.01);
assertNotEquals(double5, double1, 0.01);
assertNotEquals(double5, double4, 0.01);
assertNotEquals(double5, double7, 0.01);
assertNotEquals(double5, double6, 0.01);
assertNotEquals(double5, double0, 0.01);
assertNotEquals(double5, double9, 0.01);
assertNotEquals(double6, double4, 0.01);
assertNotEquals(double6, double7, 0.01);
assertNotEquals(double6, double5, 0.01);
assertNotEquals(double6, double0, 0.01);
assertNotEquals(double6, double8, 0.01);
assertNotEquals(double6, double3, 0.01);
assertNotEquals(double6, double2, 0.01);
assertNotEquals(double6, double1, 0.01);
assertNotEquals(double6, double9, 0.01);
assertNotEquals(double7, double6, 0.01);
assertNotEquals(double7, double0, 0.01);
assertNotEquals(double7, double3, 0.01);
assertNotEquals(double7, double8, 0.01);
assertNotEquals(double7, double2, 0.01);
assertNotEquals(double7, double1, 0.01);
assertNotEquals(double7, double9, 0.01);
assertNotEquals(double7, double4, 0.01);
assertNotEquals(double7, double5, 0.01);
assertNotEquals(double8, double1, 0.01);
assertNotEquals(double8, double2, 0.01);
assertNotEquals(double8, double5, 0.01);
assertNotEquals(double8, double0, 0.01);
assertNotEquals(double8, double6, 0.01);
assertNotEquals(double8, double9, 0.01);
assertNotEquals(double8, double4, 0.01);
assertNotEquals(double8, double7, 0.01);
assertNotEquals(double8, double3, 0.01);
assertNotEquals(double9, double4, 0.01);
assertNotEquals(double9, double7, 0.01);
assertNotEquals(double9, double2, 0.01);
assertNotEquals(double9, double1, 0.01);
assertNotEquals(double9, double3, 0.01);
assertNotEquals(double9, double5, 0.01);
assertNotEquals(double9, double6, 0.01);
assertNotEquals(double9, double0, 0.01);
assertNotEquals(double9, double8, 0.01);
assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));

FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
MnUserCovariance mnUserCovariance0 = null;
mnHesse0.calculate(fCNBase2, doubleArray0, mnUserCovariance0);

[MASTER] 20:00:49.163 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<18> but was:<22>
[MASTER] 20:00:49.165 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MnStrategy mnStrategy0 = new MnStrategy();
assertEquals(1, mnStrategy0.strategy());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(5, mnStrategy0.hessianNCycles());
assertFalse(mnStrategy0.isLow());
assertFalse(mnStrategy0.isHigh());
assertEquals(3, mnStrategy0.gradientNCycles());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertNotNull(mnStrategy0);

int int0 = (-270);
double double0 = 1267.599;
mnStrategy0.setGradientTolerance(double0);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(5, mnStrategy0.hessianNCycles());
assertFalse(mnStrategy0.isLow());
assertFalse(mnStrategy0.isHigh());
assertEquals(3, mnStrategy0.gradientNCycles());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);

mnStrategy0.setHessianNCycles(int0);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertFalse(mnStrategy0.isLow());
assertFalse(mnStrategy0.isHigh());
assertEquals(3, mnStrategy0.gradientNCycles());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);

MnHesse mnHesse0 = new MnHesse();
assertNotNull(mnHesse0);

double double1 = (-1648.1471);
FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(double0, (double)int0, double1, double1, double1).when(fCNBase0).valueOf(any(double[].class));
double[] doubleArray0 = new double[2];
doubleArray0[0] = (double) int0;
doubleArray0[1] = double0;
MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(2, mnUserParameters0.variableParameters());
assertNotNull(mnUserParameters0);

MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(2, doubleArray0.length);
assertEquals(2, mnUserParameters0.variableParameters());
assertEquals(2, mnUserParameters1.variableParameters());
assertNotNull(mnUserParameters1);
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));

int int1 = 285;
MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters1, int1);
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(2, doubleArray0.length);
assertEquals(2, mnUserParameters0.variableParameters());
assertEquals(2, mnUserParameters1.variableParameters());
assertTrue(mnUserParameterState0.isValid());
assertEquals(18, mnUserParameterState0.nfcn());
assertEquals(2, mnUserParameterState0.variableParameters());
assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
assertFalse(mnUserParameterState0.hasGlobalCC());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertFalse(mnUserParameterState0.hasCovariance());
assertNotNull(mnUserParameterState0);
assertFalse(int0 == int1);
assertNotEquals(double0, double1, 0.01);
assertNotEquals(double1, double0, 0.01);
assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
assertFalse(int1 == int0);

int int2 = mnHesse0.ncycles();
assertEquals(5, int2);
assertFalse(int2 == int1);
assertFalse(int2 == int0);

double double2 = mnHesse0.tolerstp();
assertEquals(0.3, double2, 0.01);
assertNotEquals(double2, double1, 0.01);
assertNotEquals(double2, double0, 0.01);

FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
double double3 = 1.0;
MnFcn mnFcn0 = new MnFcn(fCNBase1, double3);
assertNotNull(mnFcn0);
assertNotEquals(double3, double0, 0.01);
assertNotEquals(double3, double2, 0.01);
assertNotEquals(double3, double1, 0.01);

MinimumParameters minimumParameters0 = new MinimumParameters(int1);
assertNotNull(minimumParameters0);
assertFalse(int1 == int2);
assertFalse(int1 == int0);

MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = null;
MinimumError.MnInvertFailed minimumError_MnInvertFailed0 = new MinimumError.MnInvertFailed();
assertNotNull(minimumError_MnInvertFailed0);

MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnInvertFailed0);
assertNotNull(minimumError0);

FunctionGradient functionGradient0 = new FunctionGradient(int2);
assertNotNull(functionGradient0);
assertFalse(int2 == int1);
assertFalse(int2 == int0);

MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int2, int2);
assertNotNull(minimumState0);
assertFalse(int1 == int2);
assertFalse(int1 == int0);
assertFalse(int2 == int1);
assertFalse(int2 == int0);

MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(2, doubleArray0.length);
assertEquals(2, mnUserParameters0.variableParameters());
assertEquals(2, mnUserParameters1.variableParameters());
assertNotNull(mnUserTransformation0);
assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));

MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertNotSame(mnUserTransformation0, mnUserTransformation1);
assertNotSame(mnUserTransformation1, mnUserTransformation0);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(2, doubleArray0.length);
assertEquals(2, mnUserParameters0.variableParameters());
assertEquals(2, mnUserParameters1.variableParameters());
assertNotNull(mnUserTransformation1);
assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));

int int3 = (-476);
mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation1, int3);

[MASTER] 20:00:49.282 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<NaN> but was:<163.20661949393025>
[MASTER] 20:00:49.287 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MnStrategy mnStrategy0 = new MnStrategy();
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(5, mnStrategy0.hessianNCycles());
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertFalse(mnStrategy0.isLow());
assertNotNull(mnStrategy0);

int int0 = (-270);
double double0 = 1267.599;
mnStrategy0.setGradientTolerance(double0);
assertEquals(1, mnStrategy0.strategy());
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(5, mnStrategy0.hessianNCycles());
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertFalse(mnStrategy0.isLow());

mnStrategy0.setHessianNCycles(int0);
assertEquals(1, mnStrategy0.strategy());
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertFalse(mnStrategy0.isLow());

MnHesse mnHesse0 = new MnHesse(mnStrategy0);
assertEquals(1, mnStrategy0.strategy());
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertFalse(mnStrategy0.isLow());
assertNotNull(mnHesse0);

double double1 = (-1583.0);
double double2 = 2281.4;
double double3 = 1733.48272;
FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(double1, double2, double2, (double)int0, double3).when(fCNBase0).valueOf(any(double[].class));
double[] doubleArray0 = new double[2];
doubleArray0[0] = (double) int0;
doubleArray0[1] = double0;
MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(2, mnUserParameters0.variableParameters());
assertNotNull(mnUserParameters0);

MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(2, doubleArray0.length);
assertEquals(2, mnUserParameters0.variableParameters());
assertEquals(2, mnUserParameters1.variableParameters());
assertNotNull(mnUserParameters1);
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));

int int1 = 285;
MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters1, int1);
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(2, doubleArray0.length);
assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
assertEquals(13, mnUserParameterState0.nfcn());
assertTrue(mnUserParameterState0.hasCovariance());
assertTrue(mnUserParameterState0.isValid());
assertTrue(mnUserParameterState0.hasGlobalCC());
assertEquals(2, mnUserParameterState0.variableParameters());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertFalse(mnStrategy0.isLow());
assertEquals(2, mnUserParameters0.variableParameters());
assertEquals(2, mnUserParameters1.variableParameters());
assertNotNull(mnUserParameterState0);
assertFalse(int0 == int1);
assertNotEquals(double1, double3, 0.01);
assertNotEquals(double1, double0, 0.01);
assertNotEquals(double1, double2, 0.01);
assertNotEquals(double2, double0, 0.01);
assertNotEquals(double2, double3, 0.01);
assertNotEquals(double2, double1, 0.01);
assertNotEquals(double3, double0, 0.01);
assertNotEquals(double3, double2, 0.01);
assertNotEquals(double3, double1, 0.01);
assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
assertFalse(int1 == int0);

int int2 = Double.SIZE;
assertEquals(64, int2);
assertFalse(int2 == int0);
assertFalse(int2 == int1);

double double4 = mnHesse0.tolerstp();
assertEquals(0.3, double4, 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertFalse(mnStrategy0.isLow());
assertNotEquals(double4, double0, 0.01);
assertNotEquals(double4, double2, 0.01);
assertNotEquals(double4, double1, 0.01);
assertNotEquals(double4, double3, 0.01);

double double5 = 618.35686288646;
double double6 = 0.001;
double double7 = 1.0;
FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(double5, double6, doubleArray0[0], (double)int0, double7).when(fCNBase1).valueOf(any(double[].class));
MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameterState0, int0);
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertNotSame(mnUserParameterState0, mnUserParameterState1);
assertNotSame(mnUserParameterState1, mnUserParameterState0);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(2, doubleArray0.length);
assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
assertEquals(13, mnUserParameterState0.nfcn());
assertTrue(mnUserParameterState0.hasCovariance());
assertTrue(mnUserParameterState0.isValid());
assertTrue(mnUserParameterState0.hasGlobalCC());
assertEquals(2, mnUserParameterState0.variableParameters());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertFalse(mnStrategy0.isLow());
assertEquals(2, mnUserParameterState1.variableParameters());
assertEquals(27, mnUserParameterState1.nfcn());
assertFalse(mnUserParameterState1.hasGlobalCC());
assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
assertFalse(mnUserParameterState1.hasCovariance());
assertEquals(Double.NaN, mnUserParameterState1.edm(), 0.01);
assertTrue(mnUserParameterState1.isValid());
assertEquals(2, mnUserParameters0.variableParameters());
assertEquals(2, mnUserParameters1.variableParameters());
assertNotNull(mnUserParameterState1);
assertFalse(int0 == int2);
assertFalse(int0 == int1);
assertNotEquals(double1, double6, 0.01);
assertNotEquals(double1, double4, 0.01);
assertNotEquals(double1, double3, 0.01);
assertNotEquals(double1, double5, 0.01);
assertNotEquals(double1, double7, 0.01);
assertNotEquals(double1, double0, 0.01);
assertNotEquals(double1, double2, 0.01);
assertNotEquals(double2, double5, 0.01);
assertNotEquals(double2, double7, 0.01);
assertNotEquals(double2, double0, 0.01);
assertNotEquals(double2, double3, 0.01);
assertNotEquals(double2, double1, 0.01);
assertNotEquals(double2, double6, 0.01);
assertNotEquals(double2, double4, 0.01);
assertNotEquals(double3, double7, 0.01);
assertNotEquals(double3, double5, 0.01);
assertNotEquals(double3, double0, 0.01);
assertNotEquals(double3, double4, 0.01);
assertNotEquals(double3, double2, 0.01);
assertNotEquals(double3, double1, 0.01);
assertNotEquals(double3, double6, 0.01);
assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
assertFalse(int1 == int0);
assertFalse(int1 == int2);
assertNotEquals(double5, double0, 0.01);
assertNotEquals(double5, double7, 0.01);
assertNotEquals(double5, double4, 0.01);
assertNotEquals(double5, double3, 0.01);
assertNotEquals(double5, double1, 0.01);
assertNotEquals(double5, double6, 0.01);
assertNotEquals(double5, double2, 0.01);
assertNotEquals(double6, double4, 0.01);
assertNotEquals(double6, double7, 0.01);
assertNotEquals(double6, double0, 0.01);
assertNotEquals(double6, double3, 0.01);
assertNotEquals(double6, double5, 0.01);
assertNotEquals(double6, double2, 0.01);
assertNotEquals(double6, double1, 0.01);
assertNotEquals(double7, double4, 0.01);
assertNotEquals(double7, double3, 0.01);
assertNotEquals(double7, double2, 0.01);
assertNotEquals(double7, double0, 0.01);
assertNotEquals(double7, double5, 0.01);
assertNotEquals(double7, double1, 0.01);
assertNotEquals(double7, double6, 0.01);
assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));

FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
MnUserParameterState mnUserParameterState2 = mnHesse0.calculate(fCNBase2, doubleArray0, doubleArray0, int2);
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertNotSame(mnUserParameterState2, mnUserParameterState1);
assertNotSame(mnUserParameterState2, mnUserParameterState0);
assertEquals(2, doubleArray0.length);
assertEquals(1, mnStrategy0.strategy());
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertFalse(mnStrategy0.isLow());
assertTrue(mnUserParameterState2.hasCovariance());
assertEquals(Double.NaN, mnUserParameterState2.edm(), 0.01);
assertTrue(mnUserParameterState2.hasGlobalCC());
assertEquals(2, mnUserParameterState2.variableParameters());
assertTrue(mnUserParameterState2.isValid());
assertEquals(13, mnUserParameterState2.nfcn());
assertEquals(0.0, mnUserParameterState2.fval(), 0.01);
assertNotNull(mnUserParameterState2);
assertFalse(int2 == int0);
assertFalse(int2 == int1);
assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState1));
assertFalse(mnUserParameterState2.equals((Object)mnUserParameterState0));

FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
double double8 = 1572.0;
MnFcn mnFcn0 = new MnFcn(fCNBase3, double8);
assertNotNull(mnFcn0);
assertNotEquals(double8, double1, 0.01);
assertNotEquals(double8, double6, 0.01);
assertNotEquals(double8, double2, 0.01);
assertNotEquals(double8, double4, 0.01);
assertNotEquals(double8, double3, 0.01);
assertNotEquals(double8, double7, 0.01);
assertNotEquals(double8, double0, 0.01);
assertNotEquals(double8, double5, 0.01);

MinimumState minimumState0 = null;
MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertNotNull(mnUserTransformation0);

int int3 = 200120;
mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, int3);

[MASTER] 20:00:49.590 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<13> but was:<11>
[MASTER] 20:00:49.592 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MnStrategy mnStrategy0 = new MnStrategy();
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(mnStrategy0.isHigh());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(1, mnStrategy0.strategy());
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isLow());
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(5, mnStrategy0.hessianNCycles());
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertNotNull(mnStrategy0);

int int0 = (-270);
double double0 = 1267.599;
mnStrategy0.setGradientTolerance(double0);
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(mnStrategy0.isHigh());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(1, mnStrategy0.strategy());
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isLow());
assertEquals(5, mnStrategy0.hessianNCycles());
assertEquals(2, mnStrategy0.hessianGradientNCycles());

mnStrategy0.setHessianNCycles(int0);
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(mnStrategy0.isHigh());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(1, mnStrategy0.strategy());
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isLow());
assertEquals(2, mnStrategy0.hessianGradientNCycles());

MnHesse mnHesse0 = new MnHesse(mnStrategy0);
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(mnStrategy0.isHigh());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(1, mnStrategy0.strategy());
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isLow());
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertNotNull(mnHesse0);

double double1 = (-1583.0);
double double2 = 2281.4;
double double3 = 1733.48272;
FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(double1, double2, double2, (double)int0, double3).when(fCNBase0).valueOf(any(double[].class));
double[] doubleArray0 = new double[2];
doubleArray0[0] = (double) int0;
doubleArray0[1] = double0;
MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertEquals(2, doubleArray0.length);
assertEquals(2, mnUserParameters0.variableParameters());
assertNotNull(mnUserParameters0);

MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(2, doubleArray0.length);
assertEquals(2, mnUserParameters0.variableParameters());
assertEquals(2, mnUserParameters1.variableParameters());
assertNotNull(mnUserParameters1);
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));

int int1 = 285;
MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters1, int1);
assertArrayEquals(new double[] {(-270.0), 1267.599}, doubleArray0, 0.01);
assertNotSame(mnUserParameters0, mnUserParameters1);
assertNotSame(mnUserParameters1, mnUserParameters0);
assertEquals(2, doubleArray0.length);
assertEquals(13, mnUserParameterState0.nfcn());
assertTrue(mnUserParameterState0.isValid());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
assertTrue(mnUserParameterState0.hasGlobalCC());
assertTrue(mnUserParameterState0.hasCovariance());
assertEquals(2, mnUserParameterState0.variableParameters());
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(mnStrategy0.isHigh());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(1, mnStrategy0.strategy());
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isLow());
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(2, mnUserParameters0.variableParameters());
assertEquals(2, mnUserParameters1.variableParameters());
assertNotNull(mnUserParameterState0);
assertFalse(int0 == int1);
assertNotEquals(double1, double3, 0.01);
assertNotEquals(double1, double2, 0.01);
assertNotEquals(double1, double0, 0.01);
assertNotEquals(double2, double0, 0.01);
assertNotEquals(double2, double1, 0.01);
assertNotEquals(double2, double3, 0.01);
assertNotEquals(double3, double2, 0.01);
assertNotEquals(double3, double1, 0.01);
assertNotEquals(double3, double0, 0.01);
assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
assertFalse(int1 == int0);

int int2 = mnHesse0.ncycles();
assertEquals((-270), int2);
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(mnStrategy0.isHigh());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(1, mnStrategy0.strategy());
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isLow());
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertTrue(int2 == int0);
assertFalse(int2 == int1);

double double4 = mnHesse0.tolerstp();
assertEquals(0.3, double4, 0.01);
assertEquals((-270), mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(mnStrategy0.isHigh());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(1267.599, mnStrategy0.gradientTolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(1, mnStrategy0.strategy());
assertEquals(3, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isLow());
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertNotEquals(double4, double2, 0.01);
assertNotEquals(double4, double1, 0.01);
assertNotEquals(double4, double3, 0.01);
assertNotEquals(double4, double0, 0.01);

double double5 = 10.0;
double double6 = (-4698.458780010128);
double double7 = (-1523.305995838);
double double8 = (-3699.5945);
FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
mnHesse0.calculate(fCNBase1, mnUserParameterState0, int1);

* Writing JUnit test case 'MnHesse_ESTest' to temp/testcases
* Done!

* Computation finished
