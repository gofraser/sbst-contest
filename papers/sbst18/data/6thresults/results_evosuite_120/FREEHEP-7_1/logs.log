* EvoSuite 1.0.6-SNAPSHOT
* Going to generate test cases for class: org.freehep.math.minuit.MnHesse
* Starting client
* Connecting to master process on port 15414
* Analyzing classpath: 
  - /var/benchmarks/projects/freehep/math/freehep-jminuit/target/classes
  - /var/benchmarks/projects/freehep/math/freehep-jminuit/target/classes
* Finished analyzing classpath
* Generating tests for class org.freehep.math.minuit.MnHesse
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 128
  - Branch 63
  - Exception 0
  - MutationFactory 141
  - Output 182
  - Method 16
  - MethodNoException 16
  - CBranchFitnessFactory 63
* Using seed 1517344394914
* Starting evolution
* Search finished after 71s and 177 generations, 166815 statements, best individual has fitness: 164.89767695794978
* Minimizing test suite
* Generated 50 tests with total length 397
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
* Compiling and checking tests
[MASTER] 21:34:43.945 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0.0> but was:<1.0>
[MASTER] 21:34:43.946 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MnStrategy mnStrategy0 = new MnStrategy();
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(5, mnStrategy0.hessianNCycles());
assertEquals(3, mnStrategy0.gradientNCycles());
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertFalse(mnStrategy0.isLow());
assertFalse(mnStrategy0.isHigh());
assertNotNull(mnStrategy0);

MnHesse mnHesse0 = new MnHesse(mnStrategy0);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(5, mnStrategy0.hessianNCycles());
assertEquals(3, mnStrategy0.gradientNCycles());
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertFalse(mnStrategy0.isLow());
assertFalse(mnStrategy0.isHigh());
assertNotNull(mnHesse0);

double double0 = 1.0;
FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
double[] doubleArray0 = new double[6];
doubleArray0[0] = double0;
MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(6, mnUserParameters0.variableParameters());
assertEquals(6, doubleArray0.length);
assertNotNull(mnUserParameters0);

int int0 = 0;
mnUserParameters0.setLowerLimit(int0, doubleArray0[5]);
assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(6, mnUserParameters0.variableParameters());
assertEquals(6, doubleArray0.length);

MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
assertEquals(0, mnUserCovariance0.nrow());
assertEquals(0, mnUserCovariance0.ncol());
assertNotNull(mnUserCovariance0);

MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(5, mnStrategy0.hessianNCycles());
assertEquals(3, mnStrategy0.gradientNCycles());
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(1, mnStrategy0.strategy());
assertFalse(mnStrategy0.isLow());
assertFalse(mnStrategy0.isHigh());
assertEquals(6, mnUserParameters0.variableParameters());
assertEquals(0, mnUserCovariance0.nrow());
assertEquals(0, mnUserCovariance0.ncol());
assertEquals(6, mnUserParameterState0.variableParameters());
assertFalse(mnUserParameterState0.hasGlobalCC());
assertEquals(40, mnUserParameterState0.nfcn());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertFalse(mnUserParameterState0.hasCovariance());
assertTrue(mnUserParameterState0.isValid());
assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
assertEquals(6, doubleArray0.length);
assertNotNull(mnUserParameterState0);


[MASTER] 21:34:44.967 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0.0> but was:<-689.0>
[MASTER] 21:34:44.969 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = (-689);
MnStrategy mnStrategy0 = new MnStrategy(int0);
assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
assertFalse(mnStrategy0.isMedium());
assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(2, mnStrategy0.strategy());
assertEquals(6, mnStrategy0.hessianGradientNCycles());
assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(7, mnStrategy0.hessianNCycles());
assertEquals(5, mnStrategy0.gradientNCycles());
assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
assertFalse(mnStrategy0.isLow());
assertTrue(mnStrategy0.isHigh());
assertNotNull(mnStrategy0);

MnHesse mnHesse0 = new MnHesse(mnStrategy0);
assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
assertFalse(mnStrategy0.isMedium());
assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(2, mnStrategy0.strategy());
assertEquals(6, mnStrategy0.hessianGradientNCycles());
assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(7, mnStrategy0.hessianNCycles());
assertEquals(5, mnStrategy0.gradientNCycles());
assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
assertFalse(mnStrategy0.isLow());
assertTrue(mnStrategy0.isHigh());
assertNotNull(mnHesse0);

int int1 = 0;
mnStrategy0.setGradientNCycles(int1);
assertFalse(int0 == int1);
assertFalse(int1 == int0);
assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(0, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isMedium());
assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(2, mnStrategy0.strategy());
assertEquals(6, mnStrategy0.hessianGradientNCycles());
assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(7, mnStrategy0.hessianNCycles());
assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
assertFalse(mnStrategy0.isLow());
assertTrue(mnStrategy0.isHigh());

FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn((double)int0, (double)int0, (double)int0, (double)int0, (double)int0).when(fCNBase0).valueOf(any(double[].class));
double[] doubleArray0 = new double[3];
mnStrategy0.setHessianNCycles(int1);
assertFalse(int0 == int1);
assertFalse(int1 == int0);
assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(0, mnStrategy0.hessianNCycles());
assertEquals(0, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isMedium());
assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(2, mnStrategy0.strategy());
assertEquals(6, mnStrategy0.hessianGradientNCycles());
assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
assertFalse(mnStrategy0.isLow());
assertTrue(mnStrategy0.isHigh());

MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertFalse(int0 == int1);
assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals(0, mnStrategy0.hessianNCycles());
assertEquals(0, mnStrategy0.gradientNCycles());
assertFalse(mnStrategy0.isMedium());
assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(2, mnStrategy0.strategy());
assertEquals(6, mnStrategy0.hessianGradientNCycles());
assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
assertFalse(mnStrategy0.isLow());
assertTrue(mnStrategy0.isHigh());
assertEquals(3, mnUserParameterState0.variableParameters());
assertTrue(mnUserParameterState0.isValid());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertFalse(mnUserParameterState0.hasCovariance());
assertEquals(11, mnUserParameterState0.nfcn());
assertFalse(mnUserParameterState0.hasGlobalCC());
assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
assertEquals(3, doubleArray0.length);
assertNotNull(mnUserParameterState0);

FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
mnHesse0.calculate(fCNBase1, mnUserParameterState0, int1);

[MASTER] 21:34:46.912 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0.0> but was:<1.0>
[MASTER] 21:34:46.913 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MnStrategy mnStrategy0 = new MnStrategy();
assertTrue(mnStrategy0.isMedium());
assertEquals(1, mnStrategy0.strategy());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertFalse(mnStrategy0.isHigh());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(mnStrategy0.isLow());
assertEquals(5, mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(3, mnStrategy0.gradientNCycles());
assertNotNull(mnStrategy0);

MnHesse mnHesse0 = new MnHesse(mnStrategy0);
assertTrue(mnStrategy0.isMedium());
assertEquals(1, mnStrategy0.strategy());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertFalse(mnStrategy0.isHigh());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(mnStrategy0.isLow());
assertEquals(5, mnStrategy0.hessianNCycles());
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(3, mnStrategy0.gradientNCycles());
assertNotNull(mnHesse0);

double double0 = 1.0;
FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
double[] doubleArray0 = new double[6];
doubleArray0[0] = double0;
doubleArray0[1] = double0;
doubleArray0[2] = doubleArray0[1];
doubleArray0[3] = double0;
doubleArray0[4] = doubleArray0[1];
doubleArray0[5] = double0;
MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
assertEquals(6, mnUserParameters0.variableParameters());
assertEquals(6, doubleArray0.length);
assertNotNull(mnUserParameters0);

int int0 = (-1929);
mnStrategy0.setHessianNCycles(int0);
assertTrue(mnStrategy0.isMedium());
assertEquals(1, mnStrategy0.strategy());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals((-1929), mnStrategy0.hessianNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(mnStrategy0.isLow());
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(3, mnStrategy0.gradientNCycles());

MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
assertEquals((-1929), mnUserCovariance0.ncol());
assertEquals((-1929), mnUserCovariance0.nrow());
assertNotNull(mnUserCovariance0);

MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
assertTrue(mnStrategy0.isMedium());
assertEquals(1, mnStrategy0.strategy());
assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
assertEquals((-1929), mnStrategy0.hessianNCycles());
assertFalse(mnStrategy0.isHigh());
assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
assertFalse(mnStrategy0.isLow());
assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
assertEquals(2, mnStrategy0.hessianGradientNCycles());
assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
assertEquals(3, mnStrategy0.gradientNCycles());
assertEquals(6, mnUserParameters0.variableParameters());
assertEquals((-1929), mnUserCovariance0.ncol());
assertEquals((-1929), mnUserCovariance0.nrow());
assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
assertEquals(Double.NaN, mnUserParameterState0.edm(), 0.01);
assertTrue(mnUserParameterState0.hasCovariance());
assertTrue(mnUserParameterState0.isValid());
assertEquals(53, mnUserParameterState0.nfcn());
assertTrue(mnUserParameterState0.hasGlobalCC());
assertEquals(6, mnUserParameterState0.variableParameters());
assertEquals(6, doubleArray0.length);
assertNotNull(mnUserParameterState0);


* Writing JUnit test case 'MnHesse_ESTest' to temp/testcases
* Done!

* Computation finished
