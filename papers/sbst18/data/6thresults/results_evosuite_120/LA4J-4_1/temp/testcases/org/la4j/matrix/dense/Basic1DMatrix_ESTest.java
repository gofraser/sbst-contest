/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:52:35 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.decomposition.MatrixDecompositor;
import org.la4j.inversion.MatrixInverter;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 10;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)21;
      byteArray0[2] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-43);
      byteArray0[3] = byte3;
      byte byte4 = (byte)6;
      byteArray0[4] = byte4;
      byte byte5 = (byte)40;
      byteArray0[5] = byte5;
      byte byte6 = (byte)10;
      byteArray0[6] = byte6;
      mockRandom0.nextBytes(byteArray0);
      assertFalse(int0 == int1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(int0, mockRandom0);
      assertFalse(int0 == int1);
      assertEquals(10, basic1DMatrix0.rows());
      assertEquals(10, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      double double0 = basic1DMatrix0.maxInColumn(byteArray0[1]);
      assertEquals(0.9, double0, 0.01);
      assertFalse(int0 == int1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(10, basic1DMatrix0.rows());
      assertEquals(10, basic1DMatrix0.columns());
      
      byte[] byteArray1 = basic1DMatrix0.toBinary();
      assertFalse(int0 == int1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(809, byteArray1.length);
      assertEquals(10, basic1DMatrix0.rows());
      assertEquals(10, basic1DMatrix0.columns());
      assertNotNull(byteArray1);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.fromBinary(byteArray1);
      assertFalse(int0 == int1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(809, byteArray1.length);
      assertEquals(10, basic1DMatrix0.rows());
      assertEquals(10, basic1DMatrix0.columns());
      assertEquals(10, basic1DMatrix1.rows());
      assertEquals(10, basic1DMatrix1.columns());
      assertNotNull(basic1DMatrix1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 443;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      double[] doubleArray1 = null;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int0, doubleArray1);
      assertEquals(443, basic1DMatrix0.rows());
      assertEquals(443, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      int int1 = (-108);
      int int2 = 0;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(int2, doubleArray0[5]);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new double[] {443.0, 443.0, 443.0, 0.0, 443.0, 443.0, 443.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      int int3 = 0;
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(int1, int3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 10;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)21;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-43);
      byteArray0[3] = byte3;
      byte byte4 = (byte)6;
      byteArray0[4] = byte4;
      byte byte5 = (byte)40;
      byteArray0[5] = byte5;
      byte byte6 = (byte)10;
      byteArray0[6] = byte6;
      mockRandom0.nextBytes(byteArray0);
      assertFalse(int0 == int1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertFalse(int0 == int1);
      assertNotNull(doubleStream0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(int0, mockRandom0);
      assertFalse(int0 == int1);
      assertEquals(10, basic1DMatrix0.rows());
      assertEquals(10, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      Matrix matrix0 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrix0).apply(any(org.la4j.operation.MatrixOperation.class));
      Matrix matrix1 = basic1DMatrix0.kroneckerProduct(matrix0);
      assertFalse(int0 == int1);
      assertEquals(10, basic1DMatrix0.rows());
      assertEquals(10, basic1DMatrix0.columns());
      assertNull(matrix1);
      
      byte[] byteArray1 = basic1DMatrix0.toBinary();
      assertFalse(int0 == int1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(809, byteArray1.length);
      assertEquals(10, basic1DMatrix0.rows());
      assertEquals(10, basic1DMatrix0.columns());
      assertNotNull(byteArray1);
      
      basic1DMatrix0.set(byte2, byteArray0[4], int0);
      assertFalse(int0 == int1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte6);
      assertFalse(byte2 == byte4);
      assertFalse(byte2 == byte5);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(10, basic1DMatrix0.rows());
      assertEquals(10, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      int int0 = 1;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, matrix0.rows());
      assertEquals(1, matrix0.columns());
      assertNotNull(matrix0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(matrix0, matrix0, denseMatrix0, matrix0);
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, matrix0.rows());
      assertEquals(1, matrix0.columns());
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      int int1 = 0;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(1, basic1DMatrix1.columns());
      assertNotNull(basic1DMatrix1);
      
      double double0 = basic1DMatrix0.euclideanNorm();
      assertEquals(0.0, double0, 0.01);
      assertFalse(int0 == int1);
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, matrix0.rows());
      assertEquals(1, matrix0.columns());
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      String string0 = "Can not decode Basic1DMatrix from the given byte array.";
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      int int1 = 813;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      double double0 = 4308.202027848764;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(int1, int1);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(813, basic1DMatrix1.columns());
      assertEquals(813, basic1DMatrix1.rows());
      assertNotNull(basic1DMatrix1);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix0, basic1DMatrix0, basic1DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 730;
      long long0 = (-2788L);
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(int0, int0);
      assertEquals(730, basic1DMatrix0.columns());
      assertEquals(730, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      int int1 = 1413;
      int int2 = 4;
      Matrix matrix0 = basic1DMatrix0.blankOfShape(int1, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(730, basic1DMatrix0.columns());
      assertEquals(730, basic1DMatrix0.rows());
      assertEquals(1413, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      basic1DMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 56;
      int int1 = 2293;
      double[] doubleArray0 = new double[0];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int1, doubleArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(56, basic1DMatrix0.rows());
      assertEquals(2293, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      int int2 = 0;
      Matrix matrix0 = basic1DMatrix0.blankOfShape(int1, int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, doubleArray0.length);
      assertEquals(56, basic1DMatrix0.rows());
      assertEquals(2293, basic1DMatrix0.columns());
      assertEquals(2293, matrix0.rows());
      assertEquals(56, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-19);
      int int1 = 813;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(int0, int1, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 2289;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      double double0 = 0.0;
      doubleArray0[1] = double0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int0, doubleArray0);
      assertArrayEquals(new double[] {2289.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2289, basic1DMatrix0.columns());
      assertEquals(2289, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      Random.setNextRandom(int0);
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = double0;
      doubleArray2[3] = (double) int0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.from2DArray(doubleArray1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(5, doubleArray1.length);
      assertEquals(2, basic1DMatrix1.columns());
      assertEquals(5, basic1DMatrix1.rows());
      assertNotNull(basic1DMatrix1);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray3 = basic1DMatrix1.foldColumns(vectorAccumulator0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(2, doubleArray3.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(2, basic1DMatrix1.columns());
      assertEquals(5, basic1DMatrix1.rows());
      assertNotNull(doubleArray3);
      
      int int1 = 207;
      int int2 = 1;
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 979;
      int int1 = 0;
      java.util.Random random0 = null;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(int0, int1, random0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(979, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      double double0 = 439.5439989862;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(matrixAccumulator0).accumulate();
      NumberFormat numberFormat0 = null;
      String string0 = "*T$Pbs1/Sm.Bp";
      String string1 = "fx";
      String string2 = basic1DMatrix0.mkString(numberFormat0, string0, string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(979, basic1DMatrix0.rows());
      assertNotNull(string2);
      
      double double1 = basic1DMatrix0.fold(matrixAccumulator0);
      assertEquals(439.5439989862, double1, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(979, basic1DMatrix0.rows());
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(979, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(979, basic1DMatrix0.rows());
      assertNotNull(doubleArray0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.zero(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(979, basic1DMatrix1.columns());
      assertEquals(979, basic1DMatrix1.rows());
      assertNotNull(basic1DMatrix1);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix0, basic1DMatrix1, basic1DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      int int1 = 786;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(int0, int1, mockRandom0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(786, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      double double0 = 4308.202027848764;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.diagonal(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      assertNotNull(basic1DMatrix1);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix0, basic1DMatrix0, basic1DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)6;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byte byte3 = (byte)15;
      byteArray0[3] = byte3;
      byteArray0[4] = byte2;
      byte byte4 = (byte)102;
      byteArray0[5] = byte4;
      int int0 = (-1031);
      int int1 = 954;
      double double0 = 2479.1406696;
      // Undeclared exception!
      try { 
        Basic1DMatrix.constant(int0, int1, double0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      int int1 = 813;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(int0, int1, mockRandom0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(813, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      double double0 = 4308.202027848764;
      Matrix matrix0 = basic1DMatrix0.subtract(double0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(813, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(813, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(matrix0, basic1DMatrix0, basic1DMatrix0, matrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix1.equals((Object)matrix0));
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(813, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(813, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(1626, basic1DMatrix1.columns());
      assertNotNull(basic1DMatrix1);
      
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic1DMatrix1).when(matrixFactory0).apply(anyInt() , anyInt());
      Basic1DMatrix basic1DMatrix2 = matrix0.to(matrixFactory0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(matrix0.equals((Object)basic1DMatrix1));
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix1.equals((Object)matrix0));
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)matrix0));
      assertNotSame(basic1DMatrix0, basic1DMatrix2);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix2);
      assertNotSame(matrix0, basic1DMatrix0);
      assertSame(basic1DMatrix1, basic1DMatrix2);
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, matrix0);
      assertEquals(813, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(813, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(1626, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix2.rows());
      assertEquals(1626, basic1DMatrix2.columns());
      assertNotNull(basic1DMatrix2);
      
      int int2 = 281;
      Random.setNextRandom(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-137);
      long long0 = 818L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.randomSymmetric(int0, mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -137x-137
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 730;
      long long0 = (-2788L);
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(int0, int0);
      assertEquals(730, basic1DMatrix0.columns());
      assertEquals(730, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      int int1 = 88;
      Matrix matrix0 = basic1DMatrix0.copyOfShape(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(730, basic1DMatrix0.columns());
      assertEquals(730, basic1DMatrix0.rows());
      assertEquals(88, matrix0.columns());
      assertEquals(730, matrix0.rows());
      assertNotNull(matrix0);
      
      int int2 = (-997);
      double double0 = (-868.91259531);
      // Undeclared exception!
      try { 
        Basic1DMatrix.diagonal(int2, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -997x-997
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      int int1 = 3613;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) int0);
      assertFalse(int0 == int1);
      assertNotNull(doubleStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(int0, int1, mockRandom0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3613, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertNotNull(decimalFormat0);
      
      String string0 = basic1DMatrix0.mkString((NumberFormat) decimalFormat0);
      assertEquals("", string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3613, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertNotNull(string0);
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals(3613, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(doubleArray0);
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)14, (byte)29}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(3613, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(byteArray0);
      
      int int2 = (-876);
      basic1DMatrix0.swapColumns(int2, int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3613, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 60;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertEquals(60, basic1DMatrix0.rows());
      assertEquals(60, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertEquals(60, doubleArray0.length);
      assertEquals(60, basic1DMatrix0.rows());
      assertEquals(60, basic1DMatrix0.columns());
      assertNotNull(doubleArray0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray1 = basic1DMatrix0.foldColumns(vectorAccumulator0);
      assertEquals(60, doubleArray1.length);
      assertEquals(60, basic1DMatrix0.rows());
      assertEquals(60, basic1DMatrix0.columns());
      assertNotNull(doubleArray1);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(int1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3600
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)47;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)6;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)6, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(788530688, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      String string0 = "Om^%g{nV#j8;qpb^b";
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      MatrixDecompositor matrixDecompositor0 = basic1DMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)6, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(788530688, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(matrixDecompositor0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 779;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      Basic1DMatrix.randomSymmetric(int0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      int int0 = (-487);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      MatrixInverter matrixInverter0 = basic1DMatrix0.withInverter(linearAlgebra_InverterFactory0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(matrixInverter0);
      
      java.util.Random random0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(int0, int0, random0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-83);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-48);
      byteArray0[3] = byte3;
      byte byte4 = (byte)9;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-23);
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      double double0 = 4057.401;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(int0, double0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      Spliterator<Double> spliterator0 = basic1DMatrix0.spliterator();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(spliterator0);
      
      int int1 = (-1787);
      int int2 = 1200;
      // Undeclared exception!
      try { 
        Basic1DMatrix.zero(int1, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 229;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertEquals(229, basic1DMatrix0.rows());
      assertEquals(229, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = basic1DMatrix0.rowMajorIterator();
      assertEquals(229, basic1DMatrix0.rows());
      assertEquals(229, basic1DMatrix0.columns());
      assertNotNull(rowMajorMatrixIterator0);
      
      int int1 = 0;
      double double0 = basic1DMatrix0.get(int1, int1);
      assertEquals(1.0, double0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(229, basic1DMatrix0.rows());
      assertEquals(229, basic1DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '230' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byteArray0[5] = byteArray0[0];
      byte byte5 = (byte)0;
      byteArray0[3] = byte5;
      byte byte6 = (byte)5;
      byteArray0[7] = byte6;
      byte byte7 = (byte) (-53);
      byteArray0[8] = byte7;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)5, (byte) (-53)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(1483, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV(string0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      int int0 = 0;
      String string1 = basic1DMatrix0.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix array real general\n0 0\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(string1);
      
      int int1 = (-2407);
      basic1DMatrix0.swapRows(int0, int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      int int2 = 497;
      Matrix matrix0 = basic1DMatrix0.copyOfShape(int2, int2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(string0, string1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(497, matrix0.columns());
      assertEquals(497, matrix0.rows());
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1817);
      // Undeclared exception!
      try { 
        Basic1DMatrix.constant(int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1817
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1009;
      int int1 = (-555);
      // Undeclared exception!
      try { 
        Basic1DMatrix.unit(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-3281);
      int int1 = 8;
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      int int2 = 0;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.diagonal(int2, int0);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertNotNull(basic1DMatrix1);
      
      int int3 = (-1030);
      int int4 = 0;
      // Undeclared exception!
      try { 
        basic1DMatrix1.blankOfShape(int3, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1030x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-691);
      // Undeclared exception!
      try { 
        Basic1DMatrix.identity(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -691x-691
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      long long0 = 1000L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(int0, int0, mockRandom0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      basic1DMatrix0.swapRows(int0, int0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int1 = 1;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.zero(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(1, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertNotNull(basic1DMatrix1);
      
      int int2 = 3695;
      double[] doubleArray0 = new double[6];
      double double0 = (-1931.3);
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int2;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) long0;
      doubleArray0[5] = (double) long0;
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.from1DArray(int0, int2, doubleArray0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new double[] {(-1931.3), 0.0, 3695.0, 1.0, 1000.0, 1000.0}, doubleArray0, 0.01);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertEquals(6, doubleArray0.length);
      assertEquals(3695, basic1DMatrix2.columns());
      assertEquals(0, basic1DMatrix2.rows());
      assertNotNull(basic1DMatrix2);
      
      int int3 = 0;
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.randomSymmetric(int3, mockRandom0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertTrue(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertEquals(0, basic1DMatrix3.rows());
      assertEquals(0, basic1DMatrix3.columns());
      assertNotNull(basic1DMatrix3);
      
      int int4 = (-1535);
      // Undeclared exception!
      try { 
        basic1DMatrix1.blankOfShape(int2, int4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      double double0 = basic1DMatrix0.euclideanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-23);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-69);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)2;
      byteArray0[7] = byte7;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "      ";
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV(string0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(int0, int0, int0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.randomSymmetric(int0, mockRandom0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(1, basic1DMatrix1.rows());
      assertEquals(1, basic1DMatrix1.columns());
      assertNotNull(basic1DMatrix1);
      
      Matrix matrix0 = basic1DMatrix1.multiplyByItsTranspose();
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix1));
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(1, basic1DMatrix1.rows());
      assertEquals(1, basic1DMatrix1.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(1, matrix0.columns());
      assertNotNull(matrix0);
      
      int int1 = 2135;
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.unit(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)matrix0));
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, matrix0);
      assertEquals(2135, basic1DMatrix2.rows());
      assertEquals(1, basic1DMatrix2.columns());
      assertNotNull(basic1DMatrix2);
      
      int int2 = 0;
      Vector vector0 = basic1DMatrix0.getRow(int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix2);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, vector0.length());
      assertNotNull(vector0);
      
      int int3 = (-617);
      double[] doubleArray0 = new double[7];
      double double1 = 3817.3143064079736;
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int2;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int2;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from1DArray(int3, int2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -617x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 242;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(int0, int0);
      assertEquals(242, basic1DMatrix0.columns());
      assertEquals(242, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.zero(int0, int0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(242, basic1DMatrix1.columns());
      assertEquals(242, basic1DMatrix1.rows());
      assertNotNull(basic1DMatrix1);
      
      // Undeclared exception!
      try { 
        basic1DMatrix1.getRow(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1994);
      // Undeclared exception!
      try { 
        Basic1DMatrix.zero(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1994
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1918;
      int int1 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int1, doubleArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {1918.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1918, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.toBinary();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(int0, int0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      String string0 = "](Q\"^'5t~Q?K GLen2";
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-520);
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -520x-520
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      int int1 = 1;
      basic1DMatrix0.swapColumns(int0, int1);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      String string0 = null;
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) int0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) int1;
      doubleArray4[1] = (double) int1;
      doubleArray4[2] = (double) int0;
      doubleArray4[3] = (double) int0;
      doubleArray4[4] = (double) int0;
      doubleArray0[3] = doubleArray4;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.from2DArray(doubleArray0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(4, basic1DMatrix1.rows());
      assertNotNull(basic1DMatrix1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-121);
      // Undeclared exception!
      try { 
        Basic1DMatrix.diagonal(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -121x-121
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "";
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV(string0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic1DMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Basic1DMatrix basic1DMatrix1 = basic1DMatrix0.to(matrixFactory0);
      assertSame(basic1DMatrix0, basic1DMatrix1);
      assertSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertNotNull(basic1DMatrix1);
      
      int int0 = (-383);
      int int1 = 0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = basic1DMatrix0.foldRows(vectorAccumulator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(basic1DMatrix0, basic1DMatrix1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.unit(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -383x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(int0, int1);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 2346;
      double[] doubleArray0 = new double[1];
      int int1 = (-14);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      double double0 = 1.0;
      Matrix matrix0 = basic1DMatrix0.subtract(double0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(matrix0, matrix0, matrix0, basic1DMatrix0);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertTrue(basic1DMatrix1.equals((Object)matrix0));
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(basic1DMatrix1, matrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      assertNotNull(basic1DMatrix1);
      
      matrix0.swapColumns(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertTrue(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertTrue(matrix0.equals((Object)basic1DMatrix1));
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV(string0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      MatrixFactory<Matrix> matrixFactory0 = null;
      // Undeclared exception!
      try { 
        basic1DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-715);
      int int1 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = (-1.0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)120;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      double double1 = 0.0;
      DoubleStream doubleStream0 = mockRandom0.doubles(double0, double1);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(int0, int1, mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -715x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      int int1 = (-685);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix(int0, int1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-685
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      int int1 = 0;
      Vector vector0 = basic1DMatrix0.getRow(int1);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, vector0.length());
      assertNotNull(vector0);
      
      DenseMatrix denseMatrix0 = basic1DMatrix0.toDenseMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(byteArray0);
      
      int int2 = 0;
      Matrix matrix0 = basic1DMatrix0.sliceTopLeft(int0, int2);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      Matrix matrix1 = basic1DMatrix0.blankOfShape(int1, int1);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(basic1DMatrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
      assertNotNull(matrix1);
      
      int int3 = 0;
      String string0 = "\\&3y%\\d9<55z|W";
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 133;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertEquals(133, basic1DMatrix0.columns());
      assertEquals(133, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      double double0 = 1.0;
      basic1DMatrix0.setAll(double0);
      assertEquals(133, basic1DMatrix0.columns());
      assertEquals(133, basic1DMatrix0.rows());
      
      int int1 = (-685);
      int int2 = 1904;
      Matrix matrix0 = Matrix.unit(int0, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1904, matrix0.columns());
      assertEquals(133, matrix0.rows());
      assertNotNull(matrix0);
      
      int int3 = 9;
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(int1, int3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-685' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(int0, int1, int0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      int int2 = 3112;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertNotNull(sparseVector0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.insertColumn(int2, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 5;
      int int1 = 813;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(int0, int1, mockRandom0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(813, basic1DMatrix0.columns());
      assertEquals(5, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 83;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertEquals(83, basic1DMatrix0.rows());
      assertEquals(83, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6889
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)119;
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byte byte1 = (byte)118;
      byteArray0[2] = byte1;
      byte byte2 = (byte)1;
      byteArray0[3] = byte2;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      int int0 = (-518);
      long long0 = (-187L);
      int int1 = (-1916);
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1916x-518
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "'(UK";
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 4911;
      double[] doubleArray0 = new double[0];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(int0, int0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4911, basic1DMatrix0.columns());
      assertEquals(4911, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.removeColumn(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..4910
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 86;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(int0, int0);
      assertEquals(86, basic1DMatrix0.columns());
      assertEquals(86, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertEquals(59177, byteArray0.length);
      assertEquals(86, basic1DMatrix0.columns());
      assertEquals(86, basic1DMatrix0.rows());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 5;
      double double0 = 0.0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(int0, int0, double0);
      assertEquals(5, basic1DMatrix0.columns());
      assertEquals(5, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-5);
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "4G&l?zXiHaYs($";
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 433;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(int0, int0);
      assertEquals(433, basic1DMatrix0.rows());
      assertEquals(433, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertEquals(433, doubleArray0.length);
      assertEquals(433, basic1DMatrix0.rows());
      assertEquals(433, basic1DMatrix0.columns());
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 980;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(int0, int0);
      assertEquals(980, basic1DMatrix0.columns());
      assertEquals(980, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      basic1DMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 899;
      int int1 = 32;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(899, basic1DMatrix0.rows());
      assertEquals(32, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      int int2 = 0;
      Matrix matrix0 = basic1DMatrix0.copyOfShape(int2, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(899, basic1DMatrix0.rows());
      assertEquals(32, basic1DMatrix0.columns());
      assertEquals(32, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      String string0 = "W)?'^`a]fO&kzgPg$$";
      int int3 = 56;
      Matrix matrix1 = basic1DMatrix0.blankOfShape(int3, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(matrix1.equals((Object)basic1DMatrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotSame(basic1DMatrix0, matrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix1, basic1DMatrix0);
      assertNotSame(matrix1, matrix0);
      assertEquals(899, basic1DMatrix0.rows());
      assertEquals(32, basic1DMatrix0.columns());
      assertEquals(32, matrix1.columns());
      assertEquals(56, matrix1.rows());
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 0;
      long long0 = 1000L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(int0, int0, mockRandom0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      basic1DMatrix0.swapRows(int0, int0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int1 = 1;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.zero(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(1, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertNotNull(basic1DMatrix1);
      
      int int2 = 3695;
      double[] doubleArray0 = new double[6];
      double double0 = (-1931.3);
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int2;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) long0;
      doubleArray0[5] = (double) long0;
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.from1DArray(int0, int2, doubleArray0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {(-1931.3), 0.0, 3695.0, 1.0, 1000.0, 1000.0}, doubleArray0, 0.01);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertEquals(6, doubleArray0.length);
      assertEquals(3695, basic1DMatrix2.columns());
      assertEquals(0, basic1DMatrix2.rows());
      assertNotNull(basic1DMatrix2);
      
      int int3 = 0;
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.randomSymmetric(int3, mockRandom0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertTrue(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertEquals(0, basic1DMatrix3.rows());
      assertEquals(0, basic1DMatrix3.columns());
      assertNotNull(basic1DMatrix3);
      
      Matrix matrix0 = basic1DMatrix3.copyOfShape(int2, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertTrue(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertFalse(matrix0.equals((Object)basic1DMatrix2));
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix3));
      assertFalse(matrix0.equals((Object)basic1DMatrix1));
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, matrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix2);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix3);
      assertNotSame(matrix0, basic1DMatrix1);
      assertEquals(0, basic1DMatrix3.rows());
      assertEquals(0, basic1DMatrix3.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(3695, matrix0.rows());
      assertNotNull(matrix0);
      
      String string0 = basic1DMatrix3.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix array real general\n0 0\n", string0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix3.equals((Object)matrix0));
      assertTrue(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, matrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertEquals(0, basic1DMatrix3.rows());
      assertEquals(0, basic1DMatrix3.columns());
      assertNotNull(string0);
      
      int int4 = (-1535);
      Random.setNextRandom(int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      Basic1DMatrix basic1DMatrix4 = Basic1DMatrix.from2DArray(doubleArray1);
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix4.equals((Object)matrix0));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix3));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix4, basic1DMatrix0);
      assertNotSame(basic1DMatrix4, basic1DMatrix2);
      assertNotSame(basic1DMatrix4, matrix0);
      assertNotSame(basic1DMatrix4, basic1DMatrix3);
      assertNotSame(basic1DMatrix4, basic1DMatrix1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, basic1DMatrix4.rows());
      assertEquals(6, basic1DMatrix4.columns());
      assertNotNull(basic1DMatrix4);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 443;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int0, doubleArray0);
      assertArrayEquals(new double[] {443.0, 443.0, 443.0, 443.0, 443.0, 443.0, 443.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(443, basic1DMatrix0.columns());
      assertEquals(443, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      int int1 = (-108);
      int int2 = 0;
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -47844
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 443;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int0, doubleArray0);
      assertArrayEquals(new double[] {443.0, 443.0, 443.0, 443.0, 443.0, 443.0, 443.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(443, basic1DMatrix0.columns());
      assertEquals(443, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      int int1 = (-108);
      int int2 = 0;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(int2, doubleArray0[5]);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {443.0, 443.0, 443.0, 443.0, 443.0, 443.0, 443.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      int int3 = 0;
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(int1, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -47844
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      int int0 = 91;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(int0, mockRandom0);
      assertEquals(91, denseMatrix0.rows());
      assertEquals(91, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(91, denseMatrix0.rows());
      assertEquals(91, denseMatrix0.columns());
      assertEquals(91, matrix0.columns());
      assertEquals(91, matrix0.rows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix0, denseMatrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(int0, int0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      int int1 = 0;
      VectorIterator vectorIterator0 = basic1DMatrix0.iteratorOfColumn(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertNotNull(vectorIterator0);
      
      int int2 = basic1DMatrix0.rank();
      assertEquals(1, int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      basic1DMatrix0.swapColumns(int0, int0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      int int3 = (-1160);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int3;
      double double0 = (-2462.9207766178897);
      doubleArray0[3] = double0;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      double double1 = basic1DMatrix0.fold(matrixAccumulator0);
      assertEquals(0.0, double1, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertTrue(int0 == int2);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      doubleArray0[4] = (double) int0;
      doubleArray0[6] = (double) int3;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from1DArray(int3, int0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1160x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 10;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)21;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-43);
      byteArray0[3] = byte3;
      byte byte4 = (byte)6;
      byteArray0[4] = byte4;
      byte byte5 = (byte)40;
      byteArray0[5] = byte5;
      byte byte6 = (byte)10;
      byteArray0[6] = byte6;
      mockRandom0.nextBytes(byteArray0);
      assertFalse(int0 == int1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(int0, mockRandom0);
      assertFalse(int0 == int1);
      assertEquals(10, basic1DMatrix0.columns());
      assertEquals(10, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      byte[] byteArray1 = basic1DMatrix0.toBinary();
      assertFalse(int0 == int1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(809, byteArray1.length);
      assertEquals(10, basic1DMatrix0.columns());
      assertEquals(10, basic1DMatrix0.rows());
      assertNotNull(byteArray1);
      
      int int2 = 7161;
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(int2, byte5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7161
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 56;
      int int1 = 2293;
      double[] doubleArray0 = new double[0];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int1, doubleArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(56, basic1DMatrix0.rows());
      assertEquals(2293, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      int int2 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic1DMatrix0.transformRow(int2, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(int0, int0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      String string0 = "9h#%}Y+k{Kq";
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("KRW", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("\uFFE6", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertNotNull(decimalFormatSymbols0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("KRW", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("\uFFE6", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("9h", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("9h#%}Y+k{Kq", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("9h#%}Y+k{Kq", decimalFormat0.toLocalizedPattern());
      assertEquals("-9h", decimalFormat0.getNegativePrefix());
      assertEquals("%}Y+k{Kq", decimalFormat0.getPositiveSuffix());
      assertEquals("%}Y+k{Kq", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertNotNull(decimalFormat0);
      
      String string1 = basic1DMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertEquals("%%MatrixMarket matrix array real general\n0 0\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("KRW", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("\uFFE6", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("9h", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("9h#%}Y+k{Kq", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("9h#%}Y+k{Kq", decimalFormat0.toLocalizedPattern());
      assertEquals("-9h", decimalFormat0.getNegativePrefix());
      assertEquals("%}Y+k{Kq", decimalFormat0.getPositiveSuffix());
      assertEquals("%}Y+k{Kq", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertNotNull(string1);
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(int0, int0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      int int1 = 0;
      basic1DMatrix0.swapRows(int1, int0);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Matrix matrix1 = basic1DMatrix0.copyOfShape(int1, int1);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)basic1DMatrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotSame(basic1DMatrix0, matrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertNotNull(matrix1);
      
      int int2 = 3686;
      // Undeclared exception!
      try { 
        matrix0.set(int1, int2, int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      int int1 = 0;
      int int2 = 0;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(int2);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      boolean boolean0 = false;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean1 = basic1DMatrix0.non(matrixPredicate0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Basic1DMatrix basic1DMatrix1 = (Basic1DMatrix)basic1DMatrix0.shuffle();
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      assertNotNull(basic1DMatrix1);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#.##0,###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertNotNull(decimalFormat0);
      
      Locale locale1 = null;
      double[][] doubleArray0 = basic1DMatrix1.toArray();
      assertTrue(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      assertNotNull(doubleArray0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 0;
      int int1 = 3581;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) int0);
      assertFalse(int0 == int1);
      assertNotNull(doubleStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(3581, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      double double0 = basic1DMatrix0.norm();
      assertEquals(0.0, double0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(3581, basic1DMatrix0.rows());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertNotNull(decimalFormat0);
      
      boolean boolean0 = false;
      decimalFormat0.setParseIntegerOnly(boolean0);
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      
      String string0 = basic1DMatrix0.mkString((NumberFormat) decimalFormat0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(3581, basic1DMatrix0.rows());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertNotNull(string0);
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3581, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(3581, basic1DMatrix0.rows());
      assertNotNull(doubleArray0);
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)13, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(3581, basic1DMatrix0.rows());
      assertNotNull(byteArray0);
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic1DMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Basic1DMatrix basic1DMatrix1 = (Basic1DMatrix)basic1DMatrix0.to(matrixFactory0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(basic1DMatrix0, basic1DMatrix1);
      assertSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(3581, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(3581, basic1DMatrix1.rows());
      assertNotNull(basic1DMatrix1);
      
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, basic1DMatrix2);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(3581, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix2.columns());
      assertEquals(7162, basic1DMatrix2.rows());
      assertNotNull(basic1DMatrix2);
      
      int int2 = 0;
      basic1DMatrix0.swapRows(int1, int2);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix2));
      assertSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, basic1DMatrix2);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(3581, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 730;
      long long0 = (-2788L);
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      Basic1DMatrix.random(int0, int0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int0;
      double double0 = 0.0;
      doubleArray2[4] = double0;
      double double1 = 1352.977271829146;
      doubleArray2[5] = double1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = double1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = double1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = double0;
      double double2 = (-484.218);
      doubleArray5[1] = double2;
      doubleArray5[2] = double1;
      doubleArray5[3] = (double) int0;
      doubleArray5[4] = double1;
      doubleArray5[5] = double1;
      doubleArray5[6] = (double) int0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = double2;
      doubleArray6[1] = double0;
      doubleArray6[2] = double1;
      doubleArray6[3] = (double) int0;
      doubleArray6[4] = (double) int0;
      doubleArray6[5] = double2;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
