/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 21:27:10 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.decomposition.MatrixDecompositor;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 855;
      double double0 = (-1427.2835);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(int0, int0, double0);
      assertNotNull(basic1DMatrix0);
      assertEquals(855, basic1DMatrix0.columns());
      assertEquals(855, basic1DMatrix0.rows());
      
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.diagonal(int0, int0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(855, basic1DMatrix1.rows());
      assertEquals(855, basic1DMatrix1.columns());
      
      int int1 = 1;
      int int2 = (-2138);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1827990
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(int0, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int1 = (-4130);
      basic1DMatrix0.swapRows(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      int int1 = 1;
      int int2 = 0;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.diagonal(int0, int1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix1.columns());
      assertEquals(1, basic1DMatrix1.rows());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotNull(byteArray0);
      assertFalse(int0 == int2);
      assertTrue(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertEquals(17, byteArray0.length);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      Vector vector0 = basic1DMatrix1.getRow(int2);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(vector0);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix1.columns());
      assertEquals(1, basic1DMatrix1.rows());
      assertEquals(1, vector0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 847;
      double double0 = (-1427.2835);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(int0, int0, double0);
      assertNotNull(basic1DMatrix0);
      assertEquals(847, basic1DMatrix0.rows());
      assertEquals(847, basic1DMatrix0.columns());
      
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      Matrix matrix0 = mock(Matrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(matrix0).columns();
      doReturn(0, 0).when(matrix0).rows();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 3;
      long long0 = 753L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(int0, int0, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(3, basic1DMatrix0.columns());
      assertEquals(3, basic1DMatrix0.rows());
      
      double double0 = 617.17826;
      basic1DMatrix0.setAll(double0);
      assertEquals(3, basic1DMatrix0.columns());
      assertEquals(3, basic1DMatrix0.rows());
      
      double double1 = basic1DMatrix0.diagonalProduct();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.350887566876222E8, double1, 0.01);
      assertEquals(3, basic1DMatrix0.columns());
      assertEquals(3, basic1DMatrix0.rows());
      
      int int1 = 3616;
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        Basic1DMatrix.diagonal(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 847;
      double double0 = (-1427.2835);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(int0, int0, double0);
      assertNotNull(basic1DMatrix0);
      assertEquals(847, basic1DMatrix0.rows());
      assertEquals(847, basic1DMatrix0.columns());
      
      double[] doubleArray0 = new double[0];
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.from1DArray(int0, int0, doubleArray0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(847, basic1DMatrix1.rows());
      assertEquals(847, basic1DMatrix1.columns());
      
      int int1 = 1;
      int int2 = 0;
      basic1DMatrix0.swapColumns(int1, int2);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(847, basic1DMatrix0.rows());
      assertEquals(847, basic1DMatrix0.columns());
      
      int int3 = (-2831);
      int int4 = (-367);
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(int3, int4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2831' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromBinary(byteArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(16, byteArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int0 = 2201;
      Random.setNextRandom(int0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(16, byteArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int0, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix1.columns());
      assertEquals(2, basic1DMatrix1.rows());
      
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.from2DArray(doubleArray1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotNull(basic1DMatrix2);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertEquals(9, doubleArray1.length);
      assertEquals(9, basic1DMatrix2.rows());
      assertEquals(4, basic1DMatrix2.columns());
      
      int int1 = basic1DMatrix2.rank();
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, basic1DMatrix2.rows());
      assertEquals(4, basic1DMatrix2.columns());
      
      Vector vector0 = basic1DMatrix2.toColumnVector();
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotNull(vector0);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertEquals(9, doubleArray1.length);
      assertEquals(9, basic1DMatrix2.rows());
      assertEquals(4, basic1DMatrix2.columns());
      assertEquals(9, vector0.length());
      
      int int2 = 0;
      int int3 = 2340;
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.constant(int2, int3, doubleArray0[3]);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotNull(basic1DMatrix3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(2340, basic1DMatrix3.columns());
      assertEquals(0, basic1DMatrix3.rows());
      
      double double0 = 4050.8367321;
      Basic1DMatrix basic1DMatrix4 = Basic1DMatrix.diagonal(int2, double0);
      assertNotSame(basic1DMatrix4, basic1DMatrix3);
      assertNotSame(basic1DMatrix4, basic1DMatrix2);
      assertNotSame(basic1DMatrix4, basic1DMatrix0);
      assertNotSame(basic1DMatrix4, basic1DMatrix1);
      assertNotNull(basic1DMatrix4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix3));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix1));
      assertEquals(0, basic1DMatrix4.rows());
      assertEquals(0, basic1DMatrix4.columns());
      
      int int4 = (-2149);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix2, basic1DMatrix3, basic1DMatrix1, basic1DMatrix4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = null;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(int0, int0, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = basic1DMatrix0.rowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int1 = 2417;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.from1DArray(int1, int1, doubleArray0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(2417, basic1DMatrix1.columns());
      assertEquals(2417, basic1DMatrix1.rows());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = basic1DMatrix0.transformColumn(int1, vectorFunction0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int1);
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(int1 == int0);
      assertFalse(matrix0.equals((Object)basic1DMatrix1));
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      long long0 = (-854L);
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.from1DArray(int1, int1, doubleArray0);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, matrix0);
      assertNotNull(basic1DMatrix2);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)matrix0));
      assertEquals(2417, basic1DMatrix2.columns());
      assertEquals(2417, basic1DMatrix2.rows());
      
      // Undeclared exception!
      try { 
        basic1DMatrix2.getRow(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic1DMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Basic1DMatrix basic1DMatrix1 = basic1DMatrix0.to(matrixFactory0);
      assertSame(basic1DMatrix0, basic1DMatrix1);
      assertSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      
      int int0 = 1613;
      int int1 = 0;
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.unit(int0, int1);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotNull(basic1DMatrix2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix2.columns());
      assertEquals(1613, basic1DMatrix2.rows());
      
      int int2 = 0;
      Matrix matrix0 = basic1DMatrix0.copyOfShape(int2, int2);
      assertSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix2);
      assertNotSame(matrix0, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix2);
      assertNotNull(matrix0);
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix2));
      assertFalse(int2 == int0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertTrue(matrix0.equals((Object)basic1DMatrix1));
      assertFalse(matrix0.equals((Object)basic1DMatrix2));
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      int int3 = 8;
      int int4 = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int2;
      doubleArray0[1] = (double) int4;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int2;
      doubleArray0[6] = (double) int3;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int1;
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.from1DArray(int3, int4, doubleArray0);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertNotSame(basic1DMatrix3, matrix0);
      assertNotNull(basic1DMatrix3);
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix3.equals((Object)matrix0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 1613.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, basic1DMatrix3.rows());
      assertEquals(0, basic1DMatrix3.columns());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 972;
      int int1 = 4;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int1, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {972.0, 972.0, 972.0, 4.0, 4.0, 4.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(972, basic1DMatrix0.rows());
      assertEquals(4, basic1DMatrix0.columns());
      
      int int2 = 0;
      VectorIterator vectorIterator0 = basic1DMatrix0.iteratorOfColumn(int2);
      assertNotNull(vectorIterator0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {972.0, 972.0, 972.0, 4.0, 4.0, 4.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(972, basic1DMatrix0.rows());
      assertEquals(4, basic1DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      double double0 = (-1741.2998);
      doubleArray0[6] = double0;
      doubleArray0[7] = (double) int0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int0, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1741.2998), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic1DMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      VectorIterator vectorIterator0 = basic1DMatrix0.iteratorOfColumn(int0);
      assertNotNull(vectorIterator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1741.2998), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      DenseMatrix denseMatrix0 = basic1DMatrix0.toDenseMatrix();
      assertNotNull(denseMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1741.2998), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = basic1DMatrix0.foldColumns(vectorAccumulator0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1741.2998), 0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Matrix matrix0 = basic1DMatrix0.to(matrixFactory0);
      assertSame(matrix0, basic1DMatrix0);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(basic1DMatrix0, matrix0);
      assertNotNull(matrix0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1741.2998), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int1 = 5;
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(int1, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(17, byteArray0.length);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      int int1 = 0;
      int int2 = 213;
      double[] doubleArray0 = new double[0];
      java.util.Random random0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.randomSymmetric(int0, random0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-1436);
      int int1 = 9;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        Basic1DMatrix.constant(int0, int1, double0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int0 = 613;
      long long0 = (-811L);
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      Basic1DMatrix.randomSymmetric(int0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(int0, int1);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      int int2 = 0;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = basic1DMatrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.shuffle();
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.randomSymmetric(int2, mockRandom0);
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertTrue(basic1DMatrix1.equals((Object)matrix0));
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      
      double double0 = 1313.9;
      basic1DMatrix0.setAll(double0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertTrue(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(int0, int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      int int1 = 2254;
      Matrix matrix0 = basic1DMatrix0.copyOfRows(int1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(2254, matrix0.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix0, basic1DMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      int int1 = 0;
      int int2 = 0;
      double double0 = basic1DMatrix0.get(int1, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      int int1 = (-631);
      // Undeclared exception!
      try { 
        Basic1DMatrix.unit(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-631
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-1020);
      int int1 = 231;
      // Undeclared exception!
      try { 
        Basic1DMatrix.zero(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-136);
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.randomSymmetric(int0, mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -136x-136
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 2;
      int int1 = (-751);
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-669);
      // Undeclared exception!
      try { 
        Basic1DMatrix.identity(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -669x-669
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(int0, int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Vector vector0 = basic1DMatrix0.toColumnVector();
      assertNotNull(vector0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, vector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      DenseMatrix denseMatrix0 = DenseMatrix.zero(int0, int0);
      assertNotNull(denseMatrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      DenseMatrix denseMatrix1 = DenseMatrix.constant(int0, int0, int0);
      assertNotSame(denseMatrix1, denseMatrix0);
      assertNotNull(denseMatrix1);
      assertTrue(denseMatrix1.equals((Object)denseMatrix0));
      assertEquals(0, denseMatrix1.columns());
      assertEquals(0, denseMatrix1.rows());
      
      double double0 = 2323.316283638;
      Matrix matrix0 = denseMatrix1.divide(double0);
      assertNotSame(denseMatrix1, matrix0);
      assertNotSame(denseMatrix1, denseMatrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, denseMatrix1);
      assertNotNull(matrix0);
      assertTrue(denseMatrix1.equals((Object)denseMatrix0));
      assertTrue(matrix0.equals((Object)denseMatrix1));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(0, denseMatrix1.columns());
      assertEquals(0, denseMatrix1.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      boolean boolean0 = basic1DMatrix0.equals((Object) denseMatrix1);
      assertNotSame(denseMatrix1, matrix0);
      assertNotSame(denseMatrix1, denseMatrix0);
      assertTrue(denseMatrix1.equals((Object)matrix0));
      assertTrue(denseMatrix1.equals((Object)denseMatrix0));
      assertTrue(boolean0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, denseMatrix1.columns());
      assertEquals(0, denseMatrix1.rows());
      
      Matrix matrix1 = basic1DMatrix0.transformRow(int0, vectorFunction0);
      assertNotSame(basic1DMatrix0, matrix1);
      assertNotSame(matrix1, basic1DMatrix0);
      assertNotNull(matrix1);
      assertTrue(matrix1.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      
      double double1 = basic1DMatrix0.euclideanNorm();
      assertNotSame(basic1DMatrix0, matrix1);
      assertTrue(basic1DMatrix0.equals((Object)matrix1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int1 = 0;
      basic1DMatrix0.swapRows(int0, int1);
      assertNotSame(basic1DMatrix0, matrix1);
      assertTrue(basic1DMatrix0.equals((Object)matrix1));
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int2 = 0;
      double double2 = 1305.174881;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant(int1, int2, double2);
      assertNotSame(basic1DMatrix1, matrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertTrue(basic1DMatrix1.equals((Object)matrix1));
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      
      byte[] byteArray0 = basic1DMatrix1.toBinary();
      assertNotSame(basic1DMatrix1, matrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(byteArray0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertTrue(basic1DMatrix1.equals((Object)matrix1));
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.identity(int0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, matrix1);
      assertNotNull(basic1DMatrix2);
      assertTrue(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertTrue(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertTrue(basic1DMatrix2.equals((Object)matrix1));
      assertEquals(0, basic1DMatrix2.rows());
      assertEquals(0, basic1DMatrix2.columns());
      
      int int3 = 1533;
      double double3 = basic1DMatrix2.minInColumn(int3);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, matrix1);
      assertFalse(int0 == int3);
      assertTrue(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertTrue(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertTrue(basic1DMatrix2.equals((Object)matrix1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      assertEquals(0, basic1DMatrix2.rows());
      assertEquals(0, basic1DMatrix2.columns());
      
      Matrix matrix2 = basic1DMatrix1.blankOfShape(int1, int1);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, basic1DMatrix0);
      assertNotSame(matrix2, basic1DMatrix2);
      assertNotSame(matrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, matrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(basic1DMatrix1, matrix2);
      assertNotSame(basic1DMatrix1, basic1DMatrix2);
      assertNotNull(matrix2);
      assertTrue(matrix2.equals((Object)basic1DMatrix0));
      assertTrue(matrix2.equals((Object)basic1DMatrix1));
      assertTrue(matrix2.equals((Object)basic1DMatrix2));
      assertTrue(matrix2.equals((Object)matrix1));
      assertFalse(int1 == int3);
      assertFalse(int2 == int3);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix2));
      assertTrue(basic1DMatrix1.equals((Object)matrix1));
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(0, matrix2.columns());
      assertEquals(0, matrix2.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      
      int int4 = 0;
      int int5 = 336;
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.unit(int4, int5);
      assertNotSame(basic1DMatrix3, matrix1);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, matrix2);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertNotNull(basic1DMatrix3);
      assertFalse(int4 == int3);
      assertFalse(int4 == int5);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(basic1DMatrix3.equals((Object)matrix1));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix3.equals((Object)matrix2));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertEquals(336, basic1DMatrix3.columns());
      assertEquals(0, basic1DMatrix3.rows());
      
      // Undeclared exception!
      try { 
        basic1DMatrix3.getRow(int4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-102);
      int int1 = 0;
      // Undeclared exception!
      try { 
        Basic1DMatrix.constant(int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -102x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(int0, int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      double double0 = 0.0;
      basic1DMatrix0.setAll(double0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV(string0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int0 = (-509);
      int int1 = 2958;
      basic1DMatrix0.swapRows(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-483);
      // Undeclared exception!
      try { 
        Basic1DMatrix.diagonal(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -483x-483
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = 0;
      IntStream intStream0 = mockRandom0.ints(int1, int0);
      assertNotNull(intStream0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(int0, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertFalse(int0 == int1);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.forEach(consumer0);
      assertFalse(int0 == int1);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 150;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(150, basic1DMatrix0.columns());
      assertEquals(150, basic1DMatrix0.rows());
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(150, doubleArray0.length);
      assertEquals(150, basic1DMatrix0.columns());
      assertEquals(150, basic1DMatrix0.rows());
      
      int[] intArray0 = new int[8];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      int int1 = 3613;
      Matrix matrix0 = basic1DMatrix0.copyOfShape(int1, int0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(150, basic1DMatrix0.columns());
      assertEquals(150, basic1DMatrix0.rows());
      assertEquals(3613, matrix0.rows());
      assertEquals(150, matrix0.columns());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '150' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(int0, int1);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int2 = (-1277);
      int int3 = 5696;
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape(int2, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1277x5696
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-773);
      int int1 = 668;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from1DArray(int0, int1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -773x668
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      int int1 = 1;
      int int2 = 0;
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(int1, int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int0, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int1 = 2387;
      long long0 = 0L;
      basic1DMatrix0.setColumn(int0, (double) long0);
      assertFalse(int0 == int1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      int int2 = 0;
      int int3 = (-1926);
      // Undeclared exception!
      try { 
        mockRandom0.ints(int2, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(int0, int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      int int1 = 1684;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.zero(int0, int1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(1684, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(int0, int0, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.sliceBottomRight(int0, int0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      int int1 = 425;
      int int2 = 586;
      Basic1DMatrix basic1DMatrix1 = (Basic1DMatrix)basic1DMatrix0.blankOfShape(int1, int2);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(586, basic1DMatrix1.columns());
      assertEquals(425, basic1DMatrix1.rows());
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotNull(doubleArray0);
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix2 = (Basic1DMatrix)basic1DMatrix0.copyOfShape(int2, int1);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, basic1DMatrix2);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotNull(basic1DMatrix2);
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(586, basic1DMatrix2.rows());
      assertEquals(425, basic1DMatrix2.columns());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(int0, int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) int0;
      doubleArray3[1] = (double) int0;
      doubleArray3[2] = (double) int0;
      doubleArray3[3] = (double) int0;
      doubleArray3[4] = (double) int0;
      doubleArray3[5] = (double) int0;
      doubleArray3[6] = (double) int0;
      doubleArray3[7] = (double) int0;
      double double0 = 3219.0;
      doubleArray3[8] = double0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) int0;
      doubleArray4[1] = double0;
      doubleArray4[2] = (double) int0;
      double double1 = 0.0;
      doubleArray4[3] = double1;
      doubleArray4[4] = double0;
      doubleArray4[5] = (double) int0;
      doubleArray4[6] = double0;
      doubleArray4[7] = double0;
      doubleArray4[8] = double0;
      doubleArray0[3] = doubleArray4;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(4, basic1DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(int0, int0, int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      MatrixDecompositor matrixDecompositor0 = basic1DMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertNotNull(matrixDecompositor0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int1 = (-1098);
      Basic1DMatrix basic1DMatrix1 = null;
      try {
        basic1DMatrix1 = new Basic1DMatrix(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1098x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(int0, int1);
      assertNotNull(basic1DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      int int2 = 0;
      int int3 = 0;
      Matrix matrix0 = basic1DMatrix0.blankOfShape(int1, int3);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int3 == int0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      DenseMatrix denseMatrix0 = basic1DMatrix0.toDenseMatrix();
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotNull(denseMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.diagonalProduct();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "7/n(}(";
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 3172;
      DenseVector denseVector0 = DenseVector.constant(int0, int0);
      assertNotNull(denseVector0);
      assertEquals(3172, denseVector0.length());
      
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertNotNull(matrix0);
      assertEquals(3172, denseVector0.length());
      assertEquals(1, matrix0.columns());
      assertEquals(3172, matrix0.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12688
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.blank();
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(1, matrix0.columns());
      
      int int1 = 1;
      int int2 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix1 = basic1DMatrix0.copyOfShape(int0, int1);
      assertNotSame(basic1DMatrix0, matrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, basic1DMatrix0);
      assertNotNull(matrix1);
      assertFalse(int0 == int2);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertFalse(int1 == int2);
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, matrix1.columns());
      assertEquals(1, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      int int1 = 1;
      int int2 = 0;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.diagonal(int0, int1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix1.rows());
      assertEquals(1, basic1DMatrix1.columns());
      
      Matrix matrix0 = basic1DMatrix1.copyOfShape(int2, int1);
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix1));
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix1.rows());
      assertEquals(1, basic1DMatrix1.columns());
      assertEquals(1, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotNull(byteArray0);
      assertFalse(int0 == int2);
      assertTrue(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertEquals(17, byteArray0.length);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix1, basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, basic1DMatrix2);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(basic1DMatrix1, basic1DMatrix2);
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, matrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotNull(basic1DMatrix2);
      assertFalse(int0 == int2);
      assertTrue(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertFalse(int1 == int2);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix1.equals((Object)matrix0));
      assertFalse(basic1DMatrix2.equals((Object)matrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix1.rows());
      assertEquals(1, basic1DMatrix1.columns());
      assertEquals(2, basic1DMatrix2.columns());
      assertEquals(2, basic1DMatrix2.rows());
      
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.identity(int0);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, matrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotNull(basic1DMatrix3);
      assertFalse(int0 == int2);
      assertTrue(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix3.equals((Object)matrix0));
      assertTrue(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertEquals(1, basic1DMatrix3.rows());
      assertEquals(1, basic1DMatrix3.columns());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      int int0 = (-815);
      // Undeclared exception!
      try { 
        basic1DMatrix0.set(int0, int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-815' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-854);
      // Undeclared exception!
      try { 
        Basic1DMatrix.zero(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -854x-854
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 4;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(int0, int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(4, basic1DMatrix0.rows());
      assertEquals(4, basic1DMatrix0.columns());
      
      double double0 = basic1DMatrix0.norm();
      assertEquals(4.0, double0, 0.01);
      assertEquals(4, basic1DMatrix0.rows());
      assertEquals(4, basic1DMatrix0.columns());
      
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic1DMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Basic1DMatrix basic1DMatrix1 = basic1DMatrix0.to(matrixFactory0);
      assertSame(basic1DMatrix0, basic1DMatrix1);
      assertSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertEquals(4, basic1DMatrix0.rows());
      assertEquals(4, basic1DMatrix0.columns());
      assertEquals(4, basic1DMatrix1.rows());
      assertEquals(4, basic1DMatrix1.columns());
      
      VectorProcedure vectorProcedure0 = null;
      // Undeclared exception!
      try { 
        basic1DMatrix1.eachInRow(int0, vectorProcedure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-3342);
      int int1 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(int0, int1, mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3342x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(int0, int0, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      int int1 = 0;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.diagonal(int1, int1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      
      int int2 = (-703);
      Vector vector0 = basic1DMatrix0.getRow(int2);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotNull(vector0);
      assertFalse(int0 == int2);
      assertTrue(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, vector0.length());
      
      int int3 = (-197);
      int int4 = 0;
      // Undeclared exception!
      try { 
        basic1DMatrix0.blankOfShape(int3, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -197x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      int int0 = 1089;
      int int1 = 165;
      long long0 = (-932L);
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      Basic1DMatrix.random(int0, int1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 2550;
      int int1 = 9;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(int0, int1);
      assertNotNull(basic1DMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(2550, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-17);
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -17x-17
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(int0, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 0;
      DenseVector denseVector0 = DenseVector.constant(int0, int0);
      assertNotNull(denseVector0);
      assertEquals(0, denseVector0.length());
      
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertNotNull(matrix0);
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(matrix0, matrix0, matrix0, matrix0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      int int0 = 1;
      Matrix matrix0 = basic1DMatrix0.blankOfShape(int0, int0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(1, matrix0.columns());
      assertEquals(1, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int0 = 0;
      int int1 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.random(int0, int1, mockRandom0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = (-1812);
      int int1 = 876;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(int0, int1, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double double0 = 0.0;
      double double1 = 493.6115029;
      double double2 = 3894.6166642677235;
      double double3 = (-676.593);
      double double4 = (-1724.8899545046856);
      double double5 = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = double2;
      doubleArray1[1] = double1;
      doubleArray1[2] = double4;
      doubleArray1[3] = double3;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double1;
      doubleArray2[1] = double5;
      double double6 = 0.0;
      doubleArray2[2] = double6;
      doubleArray0[2] = doubleArray2;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 951;
      double[] doubleArray0 = new double[0];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(int0, int0, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(951, basic1DMatrix0.rows());
      assertEquals(951, basic1DMatrix0.columns());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 8;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(int0, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(8, basic1DMatrix0.columns());
      
      double double0 = basic1DMatrix0.euclideanNorm();
      assertEquals(4.0743097574926725, double0, 0.01);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(8, basic1DMatrix0.columns());
      
      String string0 = "PY:OGNZ9+`nWA^?";
      int int1 = (-940);
      int int2 = (-725);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -940
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "";
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      int int0 = 0;
      int int1 = (-550);
      basic1DMatrix0.swapColumns(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "";
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV(string0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int0 = 0;
      int int1 = 0;
      basic1DMatrix0.swapColumns(int0, int1);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 93;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(int0, int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(93, basic1DMatrix0.rows());
      assertEquals(93, basic1DMatrix0.columns());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "K;]3G%9=";
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(string0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=93.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-28);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int1;
      double double0 = 0.0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(int0, int1, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Vector vector0 = basic1DMatrix0.getRow(int0);
      assertNotNull(vector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = (-681);
      double[] doubleArray0 = null;
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix(int0, int0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -681x-681
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 4;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(4, basic1DMatrix0.rows());
      assertEquals(4, basic1DMatrix0.columns());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(137, byteArray0.length);
      assertEquals(4, basic1DMatrix0.rows());
      assertEquals(4, basic1DMatrix0.columns());
      
      long long0 = (-1L);
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) int0);
      assertNotNull(longStream0);
      
      int int1 = 1;
      int int2 = 3161;
      IntStream intStream0 = mockRandom0.ints(int1, int2);
      assertNotNull(intStream0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      long long1 = mockRandom0.nextLong();
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      IntStream intStream1 = mockRandom0.ints(int1, int2);
      assertNotSame(intStream1, intStream0);
      assertNotNull(intStream1);
      assertFalse(long0 == long1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(intStream1.equals((Object)intStream0));
      
      long long2 = mockRandom0.nextLong();
      assertFalse(long0 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(1L, long2);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.randomSymmetric(int0, mockRandom0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(4, basic1DMatrix1.rows());
      assertEquals(4, basic1DMatrix1.columns());
      
      String string0 = "";
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.fromCSV(string0);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotNull(basic1DMatrix2);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertEquals(0, basic1DMatrix2.rows());
      assertEquals(0, basic1DMatrix2.columns());
      
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.fromBinary(byteArray0);
      assertNotSame(basic1DMatrix0, basic1DMatrix3);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotNull(basic1DMatrix3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertTrue(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertEquals(137, byteArray0.length);
      assertEquals(4, basic1DMatrix0.rows());
      assertEquals(4, basic1DMatrix0.columns());
      assertEquals(4, basic1DMatrix3.columns());
      assertEquals(4, basic1DMatrix3.rows());
      
      int int3 = 1676;
      Vector vector0 = basic1DMatrix2.getRow(int3);
      assertNotSame(basic1DMatrix2, basic1DMatrix3);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotNull(vector0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix3));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertEquals(0, vector0.length());
      assertEquals(0, basic1DMatrix2.rows());
      assertEquals(0, basic1DMatrix2.columns());
      
      String string1 = ", ";
      Matrix matrix0 = basic1DMatrix1.copyOfShape(int1, int1);
      assertNotSame(matrix0, basic1DMatrix3);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix2);
      assertNotSame(matrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix2);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(basic1DMatrix1, basic1DMatrix3);
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotNull(matrix0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(matrix0.equals((Object)basic1DMatrix3));
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix2));
      assertFalse(matrix0.equals((Object)basic1DMatrix1));
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix3));
      assertEquals(1, matrix0.rows());
      assertEquals(1, matrix0.columns());
      assertEquals(4, basic1DMatrix1.rows());
      assertEquals(4, basic1DMatrix1.columns());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 194;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(194, basic1DMatrix0.columns());
      assertEquals(194, basic1DMatrix0.rows());
      
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray1[3] = (double) int0;
      doubleArray1[4] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) int0;
      doubleArray3[1] = (double) int0;
      doubleArray3[2] = (double) int0;
      doubleArray3[3] = (double) int0;
      doubleArray3[4] = (double) int0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) int0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[17];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray3[1] = (double) int0;
      doubleArray5[1] = (double) int0;
      double double0 = 0.0;
      doubleArray5[2] = double0;
      doubleArray5[3] = (double) int0;
      doubleArray5[4] = (double) int0;
      doubleArray5[5] = (double) int0;
      double double1 = (-978.2571562806604);
      doubleArray5[6] = double1;
      double double2 = 0.0;
      doubleArray5[7] = double2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (double) int0;
      doubleArray6[1] = double2;
      doubleArray6[2] = double0;
      doubleArray6[3] = double2;
      doubleArray0[5] = doubleArray6;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertNotNull(matrix0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, matrix0.columns());
      assertEquals(6, matrix0.rows());
      
      int int1 = 0;
      double double3 = basic1DMatrix0.maxInColumn(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0, double3, 0.01);
      assertEquals(194, basic1DMatrix0.columns());
      assertEquals(194, basic1DMatrix0.rows());
      
      int int2 = 1159;
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 224846
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 8;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(int0, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(8, basic1DMatrix0.columns());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int0, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix1.columns());
      assertEquals(2, basic1DMatrix1.rows());
      
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray1[3];
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.from2DArray(doubleArray1);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotNull(basic1DMatrix2);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertEquals(9, doubleArray1.length);
      assertEquals(4, basic1DMatrix2.columns());
      assertEquals(9, basic1DMatrix2.rows());
      
      int int1 = basic1DMatrix2.rank();
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(9, doubleArray1.length);
      assertEquals(4, basic1DMatrix2.columns());
      assertEquals(9, basic1DMatrix2.rows());
      
      Vector vector0 = basic1DMatrix2.toColumnVector();
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotNull(vector0);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertEquals(9, doubleArray1.length);
      assertEquals(4, basic1DMatrix2.columns());
      assertEquals(9, basic1DMatrix2.rows());
      assertEquals(9, vector0.length());
      
      int int2 = 0;
      int int3 = 2340;
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.constant(int2, int3, doubleArray0[3]);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotNull(basic1DMatrix3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(2340, basic1DMatrix3.columns());
      assertEquals(0, basic1DMatrix3.rows());
      
      double double0 = 4050.8367321;
      Basic1DMatrix basic1DMatrix4 = Basic1DMatrix.diagonal(int2, double0);
      assertNotSame(basic1DMatrix4, basic1DMatrix2);
      assertNotSame(basic1DMatrix4, basic1DMatrix1);
      assertNotSame(basic1DMatrix4, basic1DMatrix3);
      assertNotSame(basic1DMatrix4, basic1DMatrix0);
      assertNotNull(basic1DMatrix4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix3));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix4.columns());
      assertEquals(0, basic1DMatrix4.rows());
      
      int int4 = 0;
      Basic1DMatrix basic1DMatrix5 = Basic1DMatrix.unit(int2, int3);
      assertNotSame(basic1DMatrix5, basic1DMatrix2);
      assertNotSame(basic1DMatrix5, basic1DMatrix4);
      assertNotSame(basic1DMatrix5, basic1DMatrix3);
      assertNotSame(basic1DMatrix5, basic1DMatrix0);
      assertNotSame(basic1DMatrix5, basic1DMatrix1);
      assertNotNull(basic1DMatrix5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(basic1DMatrix5.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix5.equals((Object)basic1DMatrix4));
      assertTrue(basic1DMatrix5.equals((Object)basic1DMatrix3));
      assertFalse(basic1DMatrix5.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix5.equals((Object)basic1DMatrix1));
      assertEquals(0, basic1DMatrix5.rows());
      assertEquals(2340, basic1DMatrix5.columns());
      
      double[][] doubleArray2 = basic1DMatrix2.toArray();
      assertNotSame(basic1DMatrix2, basic1DMatrix5);
      assertNotSame(basic1DMatrix2, basic1DMatrix3);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix5));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix3));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix4));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(4, basic1DMatrix2.columns());
      assertEquals(9, basic1DMatrix2.rows());
      
      int int5 = (-585);
      // Undeclared exception!
      try { 
        Basic1DMatrix.unit(int1, int5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(int0, int0, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = basic1DMatrix0.columnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(2, basic1DMatrix1.columns());
      assertEquals(2, basic1DMatrix1.rows());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.random(int0, int0, mockRandom0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotNull(basic1DMatrix2);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix2.columns());
      assertEquals(1, basic1DMatrix2.rows());
      
      double[][] doubleArray1 = new double[23][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.from2DArray(doubleArray1);
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertNotNull(basic1DMatrix3);
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertEquals(23, doubleArray1.length);
      assertEquals(23, basic1DMatrix3.rows());
      assertEquals(4, basic1DMatrix3.columns());
      
      Vector vector0 = basic1DMatrix3.toColumnVector();
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertNotNull(vector0);
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertEquals(23, doubleArray1.length);
      assertEquals(23, basic1DMatrix3.rows());
      assertEquals(4, basic1DMatrix3.columns());
      assertEquals(23, vector0.length());
      
      int int1 = 0;
      int int2 = 2340;
      Basic1DMatrix basic1DMatrix4 = Basic1DMatrix.constant(int1, int2, doubleArray0[3]);
      assertNotSame(basic1DMatrix4, basic1DMatrix2);
      assertNotSame(basic1DMatrix4, basic1DMatrix3);
      assertNotSame(basic1DMatrix4, basic1DMatrix0);
      assertNotSame(basic1DMatrix4, basic1DMatrix1);
      assertNotNull(basic1DMatrix4);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix3));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix1));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(2340, basic1DMatrix4.columns());
      assertEquals(0, basic1DMatrix4.rows());
      
      double double0 = 4050.8367321;
      Basic1DMatrix basic1DMatrix5 = Basic1DMatrix.diagonal(int1, double0);
      assertNotSame(basic1DMatrix5, basic1DMatrix4);
      assertNotSame(basic1DMatrix5, basic1DMatrix1);
      assertNotSame(basic1DMatrix5, basic1DMatrix0);
      assertNotSame(basic1DMatrix5, basic1DMatrix3);
      assertNotSame(basic1DMatrix5, basic1DMatrix2);
      assertNotNull(basic1DMatrix5);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(basic1DMatrix5.equals((Object)basic1DMatrix4));
      assertFalse(basic1DMatrix5.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix5.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix5.equals((Object)basic1DMatrix3));
      assertFalse(basic1DMatrix5.equals((Object)basic1DMatrix2));
      assertEquals(0, basic1DMatrix5.rows());
      assertEquals(0, basic1DMatrix5.columns());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)5;
      byteArray0[2] = byte2;
      byte byte3 = (byte)50;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-67);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-105);
      byteArray0[5] = byte5;
      byte byte6 = (byte)27;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(int0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      int int1 = 1;
      int int2 = 0;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(int0, int1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix1.rows());
      assertEquals(1, basic1DMatrix1.columns());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotNull(byteArray0);
      assertFalse(int0 == int2);
      assertTrue(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertEquals(17, byteArray0.length);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      basic1DMatrix1.swapRows(int0, int0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix1.rows());
      assertEquals(1, basic1DMatrix1.columns());
      
      String string0 = "x";
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 847;
      double double0 = (-1427.2835);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(int0, int0, double0);
      assertNotNull(basic1DMatrix0);
      assertEquals(847, basic1DMatrix0.rows());
      assertEquals(847, basic1DMatrix0.columns());
      
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic1DMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      basic1DMatrix0.to(matrixFactory0);
  }
}
