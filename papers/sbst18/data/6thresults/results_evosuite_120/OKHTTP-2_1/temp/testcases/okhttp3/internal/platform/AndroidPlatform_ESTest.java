/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 19:50:42 GMT 2018
 */

package okhttp3.internal.platform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.lang.reflect.Array;
import java.lang.reflect.GenericDeclaration;
import java.lang.reflect.Method;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.LinkedList;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.X509TrustManager;
import okhttp3.Protocol;
import okhttp3.internal.platform.AndroidPlatform;
import okhttp3.internal.platform.OptionalMethod;
import okhttp3.internal.platform.Platform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AndroidPlatform_ESTest extends AndroidPlatform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ";S`oryV4*b";
      Class<MockMinguoDate>[] classArray0 = (Class<MockMinguoDate>[]) Array.newInstance(Class.class, 9);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      assertEquals(9, classArray0.length);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(9, classArray0.length);
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      int int0 = 2951;
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        androidPlatform0.log(int0, string0, throwable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // android/util/Log
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AndroidPlatform.CloseGuard androidPlatform_CloseGuard0 = AndroidPlatform.CloseGuard.get();
      assertNotNull(androidPlatform_CloseGuard0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = androidPlatform_CloseGuard0.warnIfOpen(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Method method0 = null;
      AndroidPlatform.CloseGuard androidPlatform_CloseGuard0 = new AndroidPlatform.CloseGuard(method0, method0, method0);
      assertNotNull(androidPlatform_CloseGuard0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OptionalMethod<Socket> optionalMethod0 = null;
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      
      String string0 = "";
      X509Certificate[] x509CertificateArray0 = new X509Certificate[4];
      androidPlatform0.logCloseableLeak(string0, x509CertificateArray0[2]);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, x509CertificateArray0.length);
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OptionalMethod<Socket> optionalMethod0 = null;
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      
      SSLSocketFactory sSLSocketFactory0 = null;
      // Undeclared exception!
      try { 
        androidPlatform0.trustManager(sSLSocketFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.Platform", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ";S`oryV4*b";
      Class<MockMinguoDate>[] classArray0 = (Class<MockMinguoDate>[]) Array.newInstance(Class.class, 9);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      assertEquals(9, classArray0.length);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(9, classArray0.length);
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      String string1 = null;
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        androidPlatform0.log(androidPlatform0.INFO, string1, throwable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "OkHttp";
      Class<MockHijrahDate>[] classArray0 = (Class<MockHijrahDate>[]) Array.newInstance(Class.class, 1);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      assertEquals(1, classArray0.length);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(1, classArray0.length);
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved(string0, androidPlatform0.WARN);
      assertNotNull(inetSocketAddress0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("OkHttp", inetSocketAddress0.getHostString());
      assertEquals("OkHttp:5", inetSocketAddress0.toString());
      assertEquals(5, inetSocketAddress0.getPort());
      assertEquals(1, classArray0.length);
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      
      try { 
        androidPlatform0.connectSocket(mockSocket0, inetSocketAddress0, androidPlatform0.INFO);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // OkHttp
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoSuiteSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "|t:Nw;Q=0UGj70";
      Class<GenericDeclaration>[] classArray0 = null;
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      
      Socket socket0 = null;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(string0, androidPlatform0.WARN);
      assertNotNull(mockInetSocketAddress0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(5, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:5", mockInetSocketAddress0.toString());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      
      // Undeclared exception!
      try { 
        androidPlatform0.connectSocket(socket0, mockInetSocketAddress0, androidPlatform0.INFO);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "S-=#2bzY!kQ8:`t(\\k";
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      assertEquals(4, classArray0.length);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, classArray0.length);
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(string0, androidPlatform0.INFO);
      assertNotNull(mockInetSocketAddress0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(4, mockInetSocketAddress0.getPort());
      assertEquals("/200.42.42.0:4", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(4, classArray0.length);
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      
      try { 
        androidPlatform0.connectSocket(mockSocket0, mockInetSocketAddress0, androidPlatform0.WARN);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@7d0a2ced
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "Z%tG3[Mfj`Px%";
      Class<GenericDeclaration>[] classArray0 = (Class<GenericDeclaration>[]) Array.newInstance(Class.class, 0);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      assertEquals(0, classArray0.length);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(0, classArray0.length);
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      
      SSLSocket sSLSocket0 = null;
      LinkedList<Protocol> linkedList0 = new LinkedList<Protocol>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        androidPlatform0.configureTlsExtensions(sSLSocket0, string0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.OptionalMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "\"1K~Ss:";
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 8);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      assertEquals(8, classArray0.length);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      
      Object object0 = optionalMethod0.invokeOptional(mockSocket0, classArray0);
      assertNull(object0);
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertEquals(8, classArray0.length);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(8, classArray0.length);
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      
      // Undeclared exception!
      try { 
        androidPlatform0.logCloseableLeak(string0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // android/util/Log
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "` dHBd";
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      Class<Integer> class1 = Integer.class;
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      assertEquals(7, classArray0.length);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(7, classArray0.length);
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      String string1 = androidPlatform0.getSelectedProtocol(sSLSocket0);
      assertNull(string1);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(7, classArray0.length);
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      // Undeclared exception!
      try { 
        androidPlatform0.logCloseableLeak(string1, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OptionalMethod<Socket> optionalMethod0 = null;
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      String string0 = "";
      Throwable throwable0 = null;
      androidPlatform0.log(androidPlatform0.WARN, string0, throwable0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OptionalMethod<Socket> optionalMethod0 = null;
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      String string0 = null;
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      assertNotNull(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      
      // Undeclared exception!
      try { 
        androidPlatform0.log(androidPlatform0.INFO, string0, mockThrowable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // android/util/Log
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OptionalMethod<Socket> optionalMethod0 = null;
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      String string0 = androidPlatform0.getSelectedProtocol(sSLSocket0);
      assertNull(string0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "\\7aC1~`%Q[(e";
      Class<MockHijrahDate>[] classArray0 = (Class<MockHijrahDate>[]) Array.newInstance(Class.class, 2);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      assertEquals(2, classArray0.length);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(2, classArray0.length);
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      
      SSLSocket sSLSocket0 = null;
      // Undeclared exception!
      try { 
        androidPlatform0.getSelectedProtocol(sSLSocket0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.OptionalMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<GenericDeclaration>[] classArray0 = null;
      String string0 = "$wx4`vR6";
      LinkedList<Protocol> linkedList0 = new LinkedList<Protocol>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      
      OptionalMethod<Socket> optionalMethod1 = null;
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod1);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      androidPlatform0.configureTlsExtensions(sSLSocket0, string0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "8{Y=&";
      Class<Object> class0 = Object.class;
      Class<X509Certificate>[] classArray0 = null;
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      LinkedList<Protocol> linkedList0 = new LinkedList<Protocol>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      androidPlatform0.configureTlsExtensions(sSLSocket0, string0, linkedList0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(0, linkedList0.size());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<GenericDeclaration>[] classArray0 = null;
      String string0 = "$wx4`vR6";
      LinkedList<Protocol> linkedList0 = new LinkedList<Protocol>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      String string1 = null;
      androidPlatform0.configureTlsExtensions(sSLSocket0, string1, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "OkHttp";
      Class<MockHijrahDate>[] classArray0 = (Class<MockHijrahDate>[]) Array.newInstance(Class.class, 1);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      assertEquals(1, classArray0.length);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(1, classArray0.length);
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      Object object0 = androidPlatform0.getStackTraceForCloseable(string0);
      assertNull(object0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(1, classArray0.length);
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Platform platform0 = AndroidPlatform.buildIfSupported();
      assertNull(platform0);
      
      Class<Object> class0 = Object.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      String string0 = "X,*";
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(platform0.INFO);
      assertNotNull(mockInetSocketAddress0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/192.168.1.42:4", mockInetSocketAddress0.toString());
      assertEquals(4, mockInetSocketAddress0.getPort());
      
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      assertEquals(6, classArray0.length);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(6, classArray0.length);
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      androidPlatform0.connectSocket(sSLSocket0, mockInetSocketAddress0, androidPlatform0.INFO);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/192.168.1.42:4", mockInetSocketAddress0.toString());
      assertEquals(4, mockInetSocketAddress0.getPort());
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(6, classArray0.length);
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OptionalMethod<Socket> optionalMethod0 = null;
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      String string0 = "";
      boolean boolean0 = androidPlatform0.isCleartextTrafficPermitted(string0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "UTF-32LE";
      Class<MockHijrahDate>[] classArray0 = (Class<MockHijrahDate>[]) Array.newInstance(Class.class, 6);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      assertEquals(6, classArray0.length);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(6, classArray0.length);
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      X509TrustManager x509TrustManager0 = null;
      // Undeclared exception!
      try { 
        androidPlatform0.buildCertificateChainCleaner(x509TrustManager0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.tls.TrustRootIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = null;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      assertEquals(1, classArray0.length);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertNotNull(androidPlatform0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(1, classArray0.length);
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(androidPlatform0.WARN);
      assertNotNull(mockInetSocketAddress0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(5, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/192.168.1.42:5", mockInetSocketAddress0.toString());
      assertEquals(1, classArray0.length);
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      
      int int0 = (-2615);
      // Undeclared exception!
      try { 
        androidPlatform0.connectSocket(mockSocket0, mockInetSocketAddress0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connect: timeout can't be negative
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "";
      Method method0 = null;
      AndroidPlatform.AndroidCertificateChainCleaner androidPlatform_AndroidCertificateChainCleaner0 = new AndroidPlatform.AndroidCertificateChainCleaner(string0, method0);
      assertNotNull(androidPlatform_AndroidCertificateChainCleaner0);
      
      boolean boolean0 = androidPlatform_AndroidCertificateChainCleaner0.equals(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "$wx4`vR6";
      Method method0 = null;
      AndroidPlatform.AndroidCertificateChainCleaner androidPlatform_AndroidCertificateChainCleaner0 = new AndroidPlatform.AndroidCertificateChainCleaner(object0, method0);
      assertNotNull(androidPlatform_AndroidCertificateChainCleaner0);
      
      LinkedList<Certificate> linkedList0 = new LinkedList<Certificate>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        androidPlatform_AndroidCertificateChainCleaner0.clean(linkedList0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AndroidPlatform.CloseGuard androidPlatform_CloseGuard0 = AndroidPlatform.CloseGuard.get();
      assertNotNull(androidPlatform_CloseGuard0);
      
      String string0 = "";
      Object object0 = androidPlatform_CloseGuard0.createAndOpen(string0);
      assertNull(object0);
  }
}
