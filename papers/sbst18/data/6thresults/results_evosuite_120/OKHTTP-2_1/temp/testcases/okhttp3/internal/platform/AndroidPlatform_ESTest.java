/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:20:57 GMT 2018
 */

package okhttp3.internal.platform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.lang.reflect.Array;
import java.lang.reflect.GenericDeclaration;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.Principal;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.LinkedList;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.X509TrustManager;
import okhttp3.Protocol;
import okhttp3.internal.platform.AndroidPlatform;
import okhttp3.internal.platform.OptionalMethod;
import okhttp3.internal.platform.Platform;
import okhttp3.internal.tls.CertificateChainCleaner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AndroidPlatform_ESTest extends AndroidPlatform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<X509TrustManager>[] classArray0 = (Class<X509TrustManager>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      String string0 = "";
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(2, classArray0.length);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(classArray0[0], optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      assertEquals(2, classArray0.length);
      assertNotNull(androidPlatform0);
      
      int int0 = 97;
      Throwable throwable0 = null;
      androidPlatform0.log(int0, string0, throwable0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      assertEquals(2, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AndroidPlatform.CloseGuard androidPlatform_CloseGuard0 = AndroidPlatform.CloseGuard.get();
      assertNotNull(androidPlatform_CloseGuard0);
      
      String string0 = "aA[;R";
      Object object0 = androidPlatform_CloseGuard0.createAndOpen(string0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Method method0 = null;
      AndroidPlatform.CloseGuard androidPlatform_CloseGuard0 = new AndroidPlatform.CloseGuard(method0, method0, method0);
      assertNotNull(androidPlatform_CloseGuard0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Method method0 = null;
      String string0 = "";
      AndroidPlatform.AndroidCertificateChainCleaner androidPlatform_AndroidCertificateChainCleaner0 = new AndroidPlatform.AndroidCertificateChainCleaner(method0, method0);
      assertNotNull(androidPlatform_AndroidCertificateChainCleaner0);
      
      LinkedList<Certificate> linkedList0 = new LinkedList<Certificate>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        androidPlatform_AndroidCertificateChainCleaner0.clean(linkedList0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "!`dUWc*y01]O=i<nR";
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Class<String> class1 = String.class;
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(2, classArray0.length);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(2, classArray0.length);
      assertNotNull(androidPlatform0);
      
      String string1 = "";
      androidPlatform0.logCloseableLeak(string1, class1);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OptionalMethod<Socket> optionalMethod0 = null;
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertNotNull(androidPlatform0);
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertNotNull(inetAddress0);
      
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, androidPlatform0.INFO);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/192.168.1.42:4", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(4, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertNotNull(mockInetSocketAddress0);
      
      androidPlatform0.connectSocket(sSLSocket0, mockInetSocketAddress0, androidPlatform0.WARN);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/192.168.1.42:4", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(4, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OptionalMethod<Socket> optionalMethod0 = null;
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      assertNotNull(androidPlatform0);
      
      SSLSocketFactory sSLSocketFactory0 = null;
      // Undeclared exception!
      try { 
        androidPlatform0.trustManager(sSLSocketFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.Platform", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "";
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 7);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(7, classArray0.length);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(7, classArray0.length);
      assertNotNull(androidPlatform0);
      
      String string1 = null;
      Protocol protocol0 = Protocol.SPDY_3;
      assertEquals("spdy/3.1", protocol0.toString());
      assertEquals(Protocol.SPDY_3, protocol0);
      
      // Undeclared exception!
      try { 
        androidPlatform0.logCloseableLeak(string1, protocol0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = null;
      Class<String>[] classArray0 = null;
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertNotNull(androidPlatform0);
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        androidPlatform0.log(androidPlatform0.INFO, string0, throwable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "@NF.Z.|RA1VJw@/i])";
      Class<Principal>[] classArray0 = (Class<Principal>[]) Array.newInstance(Class.class, 3);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(3, classArray0.length);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      assertEquals(3, classArray0.length);
      assertNotNull(androidPlatform0);
      
      SSLSocket sSLSocket0 = null;
      // Undeclared exception!
      try { 
        androidPlatform0.getSelectedProtocol(sSLSocket0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.OptionalMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "com.android.org.conscrypt.SSLParametersImpl";
      Class<X509Certificate>[] classArray0 = (Class<X509Certificate>[]) Array.newInstance(Class.class, 5);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(5, classArray0.length);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      assertEquals(5, classArray0.length);
      assertNotNull(androidPlatform0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertNotNull(mockSocket0);
      
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved(string0, androidPlatform0.WARN);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("com.android.org.conscrypt.SSLParametersImpl:5", inetSocketAddress0.toString());
      assertEquals(5, inetSocketAddress0.getPort());
      assertEquals("com.android.org.conscrypt.SSLParametersImpl", inetSocketAddress0.getHostString());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      assertEquals(5, classArray0.length);
      assertNotNull(inetSocketAddress0);
      
      try { 
        androidPlatform0.connectSocket(mockSocket0, inetSocketAddress0, androidPlatform0.WARN);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // com.android.org.conscrypt.SSLParametersImpl
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoSuiteSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "setApplicationProtocols";
      Class<X509Certificate>[] classArray0 = (Class<X509Certificate>[]) Array.newInstance(Class.class, 3);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(3, classArray0.length);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      assertEquals(3, classArray0.length);
      assertNotNull(androidPlatform0);
      
      Socket socket0 = null;
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertNotNull(inetAddress0);
      
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, androidPlatform0.WARN);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals(5, mockInetSocketAddress0.getPort());
      assertEquals("127.0.0.1", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/127.0.0.1:5", mockInetSocketAddress0.toString());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      assertEquals(3, classArray0.length);
      assertNotNull(mockInetSocketAddress0);
      
      // Undeclared exception!
      try { 
        androidPlatform0.connectSocket(socket0, mockInetSocketAddress0, androidPlatform0.WARN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "!`dUWc*y01]O=i<nR";
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(2, classArray0.length);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(2, classArray0.length);
      assertNotNull(androidPlatform0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertNotNull(mockSocket0);
      
      InetSocketAddress inetSocketAddress0 = null;
      // Undeclared exception!
      try { 
        androidPlatform0.connectSocket(mockSocket0, inetSocketAddress0, androidPlatform0.INFO);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connect: The address can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "s";
      Class<X509TrustManager>[] classArray0 = (Class<X509TrustManager>[]) Array.newInstance(Class.class, 1);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(1, classArray0.length);
      assertNotNull(optionalMethod0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      MockSocket mockSocket0 = new MockSocket(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertNotNull(mockSocket0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(1, classArray0.length);
      assertNotNull(androidPlatform0);
      
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertNotNull(inetAddress0);
      
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, androidPlatform0.INFO);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(4, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:4", mockInetSocketAddress0.toString());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(1, classArray0.length);
      assertNotNull(mockInetSocketAddress0);
      
      try { 
        androidPlatform0.connectSocket(mockSocket0, mockInetSocketAddress0, androidPlatform0.WARN);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@4fddc5b2
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = null;
      Class<Object>[] classArray0 = null;
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      assertNotNull(androidPlatform0);
      
      SSLSocket sSLSocket0 = null;
      LinkedList<Protocol> linkedList0 = new LinkedList<Protocol>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        androidPlatform0.configureTlsExtensions(sSLSocket0, string0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.platform.OptionalMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "s";
      Class<X509TrustManager>[] classArray0 = (Class<X509TrustManager>[]) Array.newInstance(Class.class, 7);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(7, classArray0.length);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(7, classArray0.length);
      assertNotNull(androidPlatform0);
      
      X509TrustManager x509TrustManager0 = null;
      // Undeclared exception!
      try { 
        androidPlatform0.buildCertificateChainCleaner(x509TrustManager0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.tls.TrustRootIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OptionalMethod<Socket> optionalMethod0 = null;
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      assertNotNull(androidPlatform0);
      
      String string0 = "fx|(_rds0M(Bx1&";
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        androidPlatform0.log(androidPlatform0.INFO, string0, throwable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // android/util/Log
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "org.apache.harmony.xnet.provider.jsse.SSLParametersImpl";
      Class<GenericDeclaration>[] classArray0 = (Class<GenericDeclaration>[]) Array.newInstance(Class.class, 0);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(0, classArray0.length);
      assertNotNull(optionalMethod0);
      
      Platform platform0 = AndroidPlatform.buildIfSupported();
      assertNull(platform0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      assertEquals(0, classArray0.length);
      assertNotNull(androidPlatform0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        androidPlatform0.log(platform0.WARN, string0, mockThrowable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // android/util/Log
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "!`dUWc*y01]O=i<nR";
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Class<String> class1 = String.class;
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(2, classArray0.length);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(2, classArray0.length);
      assertNotNull(androidPlatform0);
      
      // Undeclared exception!
      try { 
        androidPlatform0.logCloseableLeak(string0, class1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // android/util/Log
         //
         verifyException("okhttp3.internal.platform.AndroidPlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "s";
      Class<X509TrustManager>[] classArray0 = (Class<X509TrustManager>[]) Array.newInstance(Class.class, 7);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(7, classArray0.length);
      assertNotNull(optionalMethod0);
      
      OptionalMethod<Socket> optionalMethod1 = null;
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod1, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      assertEquals(7, classArray0.length);
      assertNotNull(androidPlatform0);
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      String string1 = androidPlatform0.getSelectedProtocol(sSLSocket0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(4, Platform.INFO);
      assertEquals(5, Platform.WARN);
      assertEquals(7, classArray0.length);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "s";
      Class<X509TrustManager>[] classArray0 = (Class<X509TrustManager>[]) Array.newInstance(Class.class, 1);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(1, classArray0.length);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(1, classArray0.length);
      assertNotNull(androidPlatform0);
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      String string1 = androidPlatform0.getSelectedProtocol(sSLSocket0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(1, classArray0.length);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "s";
      Class<X509TrustManager>[] classArray0 = (Class<X509TrustManager>[]) Array.newInstance(Class.class, 1);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(1, classArray0.length);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(1, classArray0.length);
      assertNotNull(androidPlatform0);
      
      SSLSocket sSLSocket0 = mock(SSLSocket.class, new ViolatedAssumptionAnswer());
      LinkedList<Protocol> linkedList0 = new LinkedList<Protocol>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      androidPlatform0.configureTlsExtensions(sSLSocket0, string0, linkedList0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(0, linkedList0.size());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(1, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OptionalMethod<Socket> optionalMethod0 = null;
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertNotNull(androidPlatform0);
      
      SSLSocket sSLSocket0 = null;
      String string0 = null;
      LinkedList<Protocol> linkedList0 = new LinkedList<Protocol>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      androidPlatform0.configureTlsExtensions(sSLSocket0, string0, linkedList0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(0, linkedList0.size());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OptionalMethod<Socket> optionalMethod0 = null;
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertNotNull(androidPlatform0);
      
      String string0 = null;
      Object object0 = androidPlatform0.getStackTraceForCloseable(string0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "s";
      Class<X509TrustManager>[] classArray0 = (Class<X509TrustManager>[]) Array.newInstance(Class.class, 1);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(1, classArray0.length);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(1, classArray0.length);
      assertNotNull(androidPlatform0);
      
      boolean boolean0 = androidPlatform0.isCleartextTrafficPermitted(string0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(1, classArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "!`dUWc*y01]O=i<nR";
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      OptionalMethod<Socket> optionalMethod0 = new OptionalMethod<Socket>(class0, string0, classArray0);
      assertEquals(2, classArray0.length);
      assertNotNull(optionalMethod0);
      
      AndroidPlatform androidPlatform0 = new AndroidPlatform(class0, optionalMethod0, optionalMethod0, optionalMethod0, optionalMethod0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(2, classArray0.length);
      assertNotNull(androidPlatform0);
      
      X509Certificate[] x509CertificateArray0 = new X509Certificate[0];
      X509TrustManager x509TrustManager0 = mock(X509TrustManager.class, new ViolatedAssumptionAnswer());
      doReturn(x509CertificateArray0).when(x509TrustManager0).getAcceptedIssuers();
      CertificateChainCleaner certificateChainCleaner0 = androidPlatform0.buildCertificateChainCleaner(x509TrustManager0);
      assertEquals("OkHttp", androidPlatform0.getPrefix());
      assertEquals(5, Platform.WARN);
      assertEquals(4, Platform.INFO);
      assertEquals(2, classArray0.length);
      assertEquals(0, x509CertificateArray0.length);
      assertNotNull(certificateChainCleaner0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<X509TrustManager> class0 = X509TrustManager.class;
      Method method0 = null;
      AndroidPlatform.AndroidCertificateChainCleaner androidPlatform_AndroidCertificateChainCleaner0 = new AndroidPlatform.AndroidCertificateChainCleaner(class0, method0);
      assertNotNull(androidPlatform_AndroidCertificateChainCleaner0);
      
      boolean boolean0 = androidPlatform_AndroidCertificateChainCleaner0.equals(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AndroidPlatform.CloseGuard androidPlatform_CloseGuard0 = AndroidPlatform.CloseGuard.get();
      assertNotNull(androidPlatform_CloseGuard0);
      
      Object object0 = null;
      boolean boolean0 = androidPlatform_CloseGuard0.warnIfOpen(object0);
      assertFalse(boolean0);
  }
}
