/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:33:32 GMT 2018
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperation;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Path_ESTest extends Path_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "8>gsHg{\\_581gV61x";
      QName qName0 = new QName(string0);
      assertNotNull(qName0);
      assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      assertNull(qName0.getPrefix());
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      Step[] stepArray0 = new Step[8];
      int int0 = Integer.MIN_VALUE;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("8>gsHg{\\_581gV61x", nodeNameTest0.toString());
      
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("8>gsHg{\\_581gV61x", nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[2] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      
      boolean boolean0 = expressionPath0.isSimpleStep(stepArray0[2]);
      assertFalse(boolean0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertEquals(8, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(0, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      assertNotNull(coreOperationNegate0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(0, expressionArray0.length);
      
      Step[] stepArray0 = null;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(0, expressionArray0.length);
      
      Step[] stepArray1 = expressionPath0.getSteps();
      assertNull(stepArray1);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(0, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      Constant constant0 = new Constant(string0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      Expression[] expressionArray0 = null;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(0, stepArray0.length);
      
      Step[] stepArray1 = expressionPath0.getSteps();
      assertSame(stepArray0, stepArray1);
      assertSame(stepArray1, stepArray0);
      assertNotNull(stepArray1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(0, stepArray0.length);
      assertEquals(0, stepArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Expression expression0 = mock(Expression.class, new ViolatedAssumptionAnswer());
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expression0);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      EvalContext evalContext0 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      doReturn((Pointer) null).when(evalContext0).getSingleNodePointer();
      Pointer pointer0 = expressionPath0.getSingleNodePointerForSteps(evalContext0);
      assertNull(pointer0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = false;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      //  // Unstable assertion: assertNotNull(locationPath0);
      //  // Unstable assertion: assertFalse(locationPath0.isAbsolute());
      //  // Unstable assertion: assertEquals(0, stepArray0.length);
      
      int int0 = 0;
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      //  // Unstable assertion: assertNotNull(nodeTypeTest0);
      //  // Unstable assertion: assertEquals(0, nodeTypeTest0.getNodeType());
      
      SelfContext selfContext0 = new SelfContext(evalContext0, nodeTypeTest0);
      //  // Unstable assertion: assertNotNull(selfContext0);
      //  // Unstable assertion: assertEquals(0, nodeTypeTest0.getNodeType());
      //  // Unstable assertion: assertFalse(selfContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, selfContext0.getPosition());
      //  // Unstable assertion: assertEquals(0, selfContext0.getDocumentOrder());
      
      EvalContext evalContext1 = locationPath0.evalSteps(selfContext0);
      //  // Unstable assertion: assertSame(selfContext0, evalContext1);
      //  // Unstable assertion: assertSame(evalContext1, selfContext0);
      //  // Unstable assertion: assertNotNull(evalContext1);
      //  // Unstable assertion: assertFalse(locationPath0.isAbsolute());
      //  // Unstable assertion: assertEquals(0, nodeTypeTest0.getNodeType());
      //  // Unstable assertion: assertFalse(selfContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, selfContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(1, selfContext0.getPosition());
      //  // Unstable assertion: assertEquals(1, evalContext1.getPosition());
      //  // Unstable assertion: assertFalse(evalContext1.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, evalContext1.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "8>gsHg{\\_581gV61x";
      QName qName0 = new QName(string0);
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      
      Step[] stepArray0 = new Step[8];
      int int0 = Integer.MIN_VALUE;
      boolean boolean0 = true;
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(8, stepArray0.length);
      
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("8>gsHg{\\_581gV61x", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      SelfContext selfContext0 = new SelfContext(evalContext0, nodeNameTest0);
      assertNotNull(selfContext0);
      assertNull(qName0.getPrefix());
      assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("8>gsHg{\\_581gV61x", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      
      EvalContext evalContext1 = locationPath0.createContextForStep(selfContext0, int0, nodeNameTest0);
      assertNull(evalContext1);
      assertNull(qName0.getPrefix());
      assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      assertTrue(locationPath0.isAbsolute());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("8>gsHg{\\_581gV61x", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(8, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = false;
      Step[] stepArray0 = new Step[5];
      String string0 = "";
      QName qName0 = new QName(string0);
      //  // Unstable assertion: assertNotNull(qName0);
      //  // Unstable assertion: assertEquals("", qName0.getName());
      //  // Unstable assertion: assertEquals("", qName0.toString());
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      //  // Unstable assertion: assertNotNull(nodeNameTest0);
      //  // Unstable assertion: assertEquals("", qName0.getName());
      //  // Unstable assertion: assertEquals("", qName0.toString());
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertNull(nodeNameTest0.getNamespaceURI());
      //  // Unstable assertion: assertEquals("", nodeNameTest0.toString());
      //  // Unstable assertion: assertFalse(nodeNameTest0.isWildcard());
      
      int int0 = 1;
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      //  // Unstable assertion: assertNotNull(locationPath0);
      //  // Unstable assertion: assertFalse(locationPath0.isAbsolute());
      //  // Unstable assertion: assertEquals(5, stepArray0.length);
      
      EvalContext evalContext0 = null;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContext0, nodeNameTest0, boolean0);
      //  // Unstable assertion: assertNotNull(precedingOrFollowingContext0);
      //  // Unstable assertion: assertEquals("", qName0.getName());
      //  // Unstable assertion: assertEquals("", qName0.toString());
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertNull(nodeNameTest0.getNamespaceURI());
      //  // Unstable assertion: assertEquals("", nodeNameTest0.toString());
      //  // Unstable assertion: assertFalse(nodeNameTest0.isWildcard());
      //  // Unstable assertion: assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, precedingOrFollowingContext0.getPosition());
      //  // Unstable assertion: assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      
      SelfContext selfContext0 = new SelfContext(precedingOrFollowingContext0, nodeNameTest0);
      //  // Unstable assertion: assertNotNull(selfContext0);
      //  // Unstable assertion: assertEquals("", qName0.getName());
      //  // Unstable assertion: assertEquals("", qName0.toString());
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertNull(nodeNameTest0.getNamespaceURI());
      //  // Unstable assertion: assertEquals("", nodeNameTest0.toString());
      //  // Unstable assertion: assertFalse(nodeNameTest0.isWildcard());
      //  // Unstable assertion: assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, precedingOrFollowingContext0.getPosition());
      //  // Unstable assertion: assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(1, selfContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, selfContext0.getPosition());
      //  // Unstable assertion: assertTrue(selfContext0.isChildOrderingRequired());
      
      ChildContext childContext0 = new ChildContext(selfContext0, nodeNameTest0, boolean0, boolean0);
      //  // Unstable assertion: assertNotNull(childContext0);
      //  // Unstable assertion: assertEquals("", qName0.getName());
      //  // Unstable assertion: assertEquals("", qName0.toString());
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertNull(nodeNameTest0.getNamespaceURI());
      //  // Unstable assertion: assertEquals("", nodeNameTest0.toString());
      //  // Unstable assertion: assertFalse(nodeNameTest0.isWildcard());
      //  // Unstable assertion: assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, precedingOrFollowingContext0.getPosition());
      //  // Unstable assertion: assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(1, selfContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, selfContext0.getPosition());
      //  // Unstable assertion: assertTrue(selfContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(1, childContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, childContext0.getPosition());
      //  // Unstable assertion: assertTrue(childContext0.isChildOrderingRequired());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(childContext0, nodeNameTest0);
      //  // Unstable assertion: assertNotNull(namespaceContext0);
      //  // Unstable assertion: assertEquals("", qName0.getName());
      //  // Unstable assertion: assertEquals("", qName0.toString());
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertNull(nodeNameTest0.getNamespaceURI());
      //  // Unstable assertion: assertEquals("", nodeNameTest0.toString());
      //  // Unstable assertion: assertFalse(nodeNameTest0.isWildcard());
      //  // Unstable assertion: assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, precedingOrFollowingContext0.getPosition());
      //  // Unstable assertion: assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(1, selfContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, selfContext0.getPosition());
      //  // Unstable assertion: assertTrue(selfContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(1, childContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, childContext0.getPosition());
      //  // Unstable assertion: assertTrue(childContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(1, namespaceContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, namespaceContext0.getPosition());
      //  // Unstable assertion: assertTrue(namespaceContext0.isChildOrderingRequired());
      
      EvalContext evalContext1 = locationPath0.createContextForStep(namespaceContext0, int0, nodeNameTest0);
      //  // Unstable assertion: assertFalse(evalContext1.equals((Object)selfContext0));
      //  // Unstable assertion: assertNotSame(selfContext0, evalContext1);
      //  // Unstable assertion: assertNotSame(evalContext1, selfContext0);
      //  // Unstable assertion: assertNotNull(evalContext1);
      //  // Unstable assertion: assertEquals("", qName0.getName());
      //  // Unstable assertion: assertEquals("", qName0.toString());
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertNull(nodeNameTest0.getNamespaceURI());
      //  // Unstable assertion: assertEquals("", nodeNameTest0.toString());
      //  // Unstable assertion: assertFalse(nodeNameTest0.isWildcard());
      //  // Unstable assertion: assertFalse(locationPath0.isAbsolute());
      //  // Unstable assertion: assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, precedingOrFollowingContext0.getPosition());
      //  // Unstable assertion: assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(1, selfContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, selfContext0.getPosition());
      //  // Unstable assertion: assertTrue(selfContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(1, childContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, childContext0.getPosition());
      //  // Unstable assertion: assertTrue(childContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(1, namespaceContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, namespaceContext0.getPosition());
      //  // Unstable assertion: assertTrue(namespaceContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(1, evalContext1.getDocumentOrder());
      //  // Unstable assertion: assertEquals(1, evalContext1.getPosition());
      //  // Unstable assertion: assertTrue(evalContext1.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(5, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Step[] stepArray0 = new Step[10];
      boolean boolean0 = false;
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(10, stepArray0.length);
      
      boolean boolean1 = locationPath0.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(10, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = false;
      Step[] stepArray0 = new Step[1];
      int int0 = (-1564);
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = locationPath0.buildContextChain(evalContext0, int0, boolean0);
      assertNull(evalContext1);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Expression expression0 = null;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expression0, expression0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, coreOperationLessThan0);
      assertNotNull(coreOperationDivide0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, expression0);
      assertNotNull(coreOperationSubtract0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[6];
      int int0 = 1;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext(evalContext0, expressionArray0[5]);
      assertNotNull(predicateContext0);
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(6, expressionArray0.length);
      
      boolean boolean0 = false;
      EvalContext evalContext1 = expressionPath0.buildContextChain(predicateContext0, int0, boolean0);
      assertFalse(evalContext1.equals((Object)predicateContext0));
      assertNotSame(predicateContext0, evalContext1);
      assertNotSame(evalContext1, predicateContext0);
      assertNotNull(evalContext1);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(evalContext1.isChildOrderingRequired());
      assertEquals(0, evalContext1.getPosition());
      assertEquals(0, evalContext1.getDocumentOrder());
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "8>gsHg{\\_581gV61x";
      QName qName0 = new QName(string0);
      //  // Unstable assertion: assertNotNull(qName0);
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      //  // Unstable assertion: assertNotNull(variableReference0);
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      //  // Unstable assertion: assertFalse(variableReference0.isContextDependent());
      //  // Unstable assertion: assertFalse(variableReference0.computeContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, variableReference0);
      //  // Unstable assertion: assertNotNull(coreOperationDivide0);
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      //  // Unstable assertion: assertFalse(variableReference0.isContextDependent());
      //  // Unstable assertion: assertFalse(variableReference0.computeContextDependent());
      //  // Unstable assertion: assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      //  // Unstable assertion: assertNotNull(coreOperationUnion0);
      //  // Unstable assertion: assertEquals("|", coreOperationUnion0.getSymbol());
      //  // Unstable assertion: assertEquals(1, expressionArray0.length);
      
      Step[] stepArray0 = new Step[8];
      int int0 = Integer.MIN_VALUE;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      //  // Unstable assertion: assertNotNull(nodeNameTest0);
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      //  // Unstable assertion: assertFalse(nodeNameTest0.isWildcard());
      //  // Unstable assertion: assertNull(nodeNameTest0.getNamespaceURI());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", nodeNameTest0.toString());
      
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      //  // Unstable assertion: assertNotNull(step0);
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      //  // Unstable assertion: assertFalse(nodeNameTest0.isWildcard());
      //  // Unstable assertion: assertNull(nodeNameTest0.getNamespaceURI());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", nodeNameTest0.toString());
      //  // Unstable assertion: assertEquals(Integer.MIN_VALUE, step0.getAxis());
      //  // Unstable assertion: assertEquals(1, expressionArray0.length);
      
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      stepArray0[2] = step0;
      stepArray0[3] = stepArray0[1];
      stepArray0[4] = stepArray0[1];
      stepArray0[5] = stepArray0[1];
      stepArray0[6] = step0;
      stepArray0[7] = stepArray0[3];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      //  // Unstable assertion: assertNotNull(expressionPath0);
      //  // Unstable assertion: assertEquals("|", coreOperationUnion0.getSymbol());
      //  // Unstable assertion: assertEquals(1, expressionArray0.length);
      //  // Unstable assertion: assertEquals(8, stepArray0.length);
      
      boolean boolean0 = expressionPath0.computeContextDependent();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals("|", coreOperationUnion0.getSymbol());
      //  // Unstable assertion: assertEquals(1, expressionArray0.length);
      //  // Unstable assertion: assertEquals(8, stepArray0.length);
      
      EvalContext evalContext0 = null;
      DescendantContext descendantContext0 = new DescendantContext(evalContext0, boolean0, nodeNameTest0);
      //  // Unstable assertion: assertNotNull(descendantContext0);
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      //  // Unstable assertion: assertTrue(descendantContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, descendantContext0.getPosition());
      //  // Unstable assertion: assertEquals(0, descendantContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals("|", coreOperationUnion0.getSymbol());
      //  // Unstable assertion: assertFalse(nodeNameTest0.isWildcard());
      //  // Unstable assertion: assertNull(nodeNameTest0.getNamespaceURI());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", nodeNameTest0.toString());
      //  // Unstable assertion: assertEquals(1, expressionArray0.length);
      //  // Unstable assertion: assertEquals(8, stepArray0.length);
      
      ParentContext parentContext0 = new ParentContext(descendantContext0, nodeNameTest0);
      //  // Unstable assertion: assertNotNull(parentContext0);
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      //  // Unstable assertion: assertTrue(descendantContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, descendantContext0.getPosition());
      //  // Unstable assertion: assertEquals(0, descendantContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals("|", coreOperationUnion0.getSymbol());
      //  // Unstable assertion: assertEquals(1, parentContext0.getCurrentPosition());
      //  // Unstable assertion: assertTrue(parentContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, parentContext0.getPosition());
      //  // Unstable assertion: assertEquals((-1), parentContext0.getDocumentOrder());
      //  // Unstable assertion: assertFalse(nodeNameTest0.isWildcard());
      //  // Unstable assertion: assertNull(nodeNameTest0.getNamespaceURI());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", nodeNameTest0.toString());
      //  // Unstable assertion: assertEquals(1, expressionArray0.length);
      //  // Unstable assertion: assertEquals(8, stepArray0.length);
      
      NodeSet nodeSet0 = null;
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, nodeSet0);
      //  // Unstable assertion: assertNotNull(nodeSetContext0);
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      //  // Unstable assertion: assertTrue(descendantContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, descendantContext0.getPosition());
      //  // Unstable assertion: assertEquals(0, descendantContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals("|", coreOperationUnion0.getSymbol());
      //  // Unstable assertion: assertEquals(1, parentContext0.getCurrentPosition());
      //  // Unstable assertion: assertTrue(parentContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, parentContext0.getPosition());
      //  // Unstable assertion: assertEquals((-1), parentContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, nodeSetContext0.getPosition());
      //  // Unstable assertion: assertTrue(nodeSetContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(1, nodeSetContext0.getDocumentOrder());
      //  // Unstable assertion: assertFalse(nodeNameTest0.isWildcard());
      //  // Unstable assertion: assertNull(nodeNameTest0.getNamespaceURI());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", nodeNameTest0.toString());
      //  // Unstable assertion: assertEquals(1, expressionArray0.length);
      //  // Unstable assertion: assertEquals(8, stepArray0.length);
      
      EvalContext evalContext1 = expressionPath0.buildContextChain(nodeSetContext0, int0, boolean0);
      //  // Unstable assertion: assertSame(nodeSetContext0, evalContext1);
      //  // Unstable assertion: assertSame(evalContext1, nodeSetContext0);
      //  // Unstable assertion: assertNotNull(evalContext1);
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.getName());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", qName0.toString());
      //  // Unstable assertion: assertTrue(descendantContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, descendantContext0.getPosition());
      //  // Unstable assertion: assertEquals(0, descendantContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals("|", coreOperationUnion0.getSymbol());
      //  // Unstable assertion: assertEquals(1, parentContext0.getCurrentPosition());
      //  // Unstable assertion: assertTrue(parentContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, parentContext0.getPosition());
      //  // Unstable assertion: assertEquals((-1), parentContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(1, nodeSetContext0.getPosition());
      //  // Unstable assertion: assertTrue(nodeSetContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(1, nodeSetContext0.getDocumentOrder());
      //  // Unstable assertion: assertFalse(nodeNameTest0.isWildcard());
      //  // Unstable assertion: assertNull(nodeNameTest0.getNamespaceURI());
      //  // Unstable assertion: assertEquals("8>gsHg{\\_581gV61x", nodeNameTest0.toString());
      //  // Unstable assertion: assertEquals(1, evalContext1.getPosition());
      //  // Unstable assertion: assertEquals(1, evalContext1.getDocumentOrder());
      //  // Unstable assertion: assertTrue(evalContext1.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(1, expressionArray0.length);
      //  // Unstable assertion: assertEquals(8, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      Step[] stepArray0 = new Step[4];
      String string0 = "J1F+h9r7.$]RBUZ";
      QName qName0 = new QName(string0);
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.toString());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.toString());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("J1F+h9r7.$]RBUZ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      boolean boolean0 = coreOperationAnd0.isContextDependent();
      assertFalse(boolean0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(4, stepArray0.length);
      
      EvalContext evalContext0 = null;
      boolean boolean1 = true;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContext0, nodeNameTest0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(precedingOrFollowingContext0);
      assertNull(qName0.getPrefix());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.toString());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("J1F+h9r7.$]RBUZ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      
      int int0 = 0;
      EvalContext evalContext1 = expressionPath0.buildContextChain(precedingOrFollowingContext0, int0, boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertSame(precedingOrFollowingContext0, evalContext1);
      assertSame(evalContext1, precedingOrFollowingContext0);
      assertNotNull(evalContext1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNull(qName0.getPrefix());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.toString());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("J1F+h9r7.$]RBUZ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals((-1), evalContext1.getDocumentOrder());
      assertEquals(0, evalContext1.getPosition());
      assertTrue(evalContext1.isChildOrderingRequired());
      assertEquals(4, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "org.apache.commons.jxpath.JXPathContextFactory";
      QName qName0 = new QName(string0, string0);
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory:org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getPrefix());
      
      Expression[] expressionArray0 = new Expression[8];
      Step[] stepArray0 = new Step[0];
      int int0 = 0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory:org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory:org.apache.commons.jxpath.JXPathContextFactory", qName0.toString());
      assertEquals("org.apache.commons.jxpath.JXPathContextFactory", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      
      SelfContext selfContext0 = new SelfContext(evalContext0, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      
      // Undeclared exception!
      try { 
        expressionPath0.searchForPath(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = false;
      Step[] stepArray0 = new Step[9];
      int int0 = 2;
      String string0 = "";
      QName qName0 = new QName(string0);
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(int0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreFunction0;
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(2, step0.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(9, stepArray0.length);
      
      EvalContext evalContext0 = null;
      SelfContext selfContext0 = new SelfContext(evalContext0, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      EvalContext[] evalContextArray0 = new EvalContext[3];
      UnionContext unionContext0 = new UnionContext(selfContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(3, evalContextArray0.length);
      
      ParentContext parentContext0 = new ParentContext(unionContext0, nodeNameTest0);
      assertNotNull(parentContext0);
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(3, evalContextArray0.length);
      
      // Undeclared exception!
      try { 
        locationPath0.getSingleNodePointerForSteps(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = CoreOperation.UNION_PRECEDENCE;
      assertEquals(7, int0);
      
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      
      EvalContext evalContext0 = null;
      String string0 = "";
      QName qName0 = new QName(string0, string0);
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      
      // Undeclared exception!
      try { 
        locationPath0.createContextForStep(evalContext0, int0, nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = Short.BYTES;
      assertEquals(2, int0);
      
      Constant constant0 = new Constant(int0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals(2, step0.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      EvalContext evalContext0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      ChildContext childContext0 = new ChildContext(evalContext0, nodeTypeTest0, boolean0, boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(childContext0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        expressionPath0.buildContextChain(childContext0, int0, boolean1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = Double.isFinite(double0);
      assertTrue(boolean0);
      
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(0, stepArray0.length);
      
      boolean boolean1 = locationPath0.isSimplePath();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(0, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      String string0 = "B!a65\\\\jDWz3DN]m\"Uf";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertNotNull(processingInstructionTest0);
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(string0, string0);
      assertNotNull(qName0);
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getPrefix());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getName());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf:B!a65\\\\jDWz3DN]m\"Uf", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getPrefix());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getName());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf:B!a65\\\\jDWz3DN]m\"Uf", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getPrefix());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getName());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf:B!a65\\\\jDWz3DN]m\"Uf", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(1, stepArray0.length);
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(evalContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", processingInstructionTest0.getTarget());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      int int0 = 13;
      EvalContext evalContext1 = expressionPath0.createContextForStep(attributeContext0, int0, processingInstructionTest0);
      assertNotNull(evalContext1);
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", processingInstructionTest0.getTarget());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getPrefix());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getName());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf:B!a65\\\\jDWz3DN]m\"Uf", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, evalContext1.getDocumentOrder());
      assertTrue(evalContext1.isChildOrderingRequired());
      assertEquals(0, evalContext1.getPosition());
      assertEquals(1, stepArray0.length);
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      String string0 = "B!a65\\\\jDWz3DN]m\"Uf";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      //  // Unstable assertion: assertNotNull(processingInstructionTest0);
      //  // Unstable assertion: assertEquals("B!a65\\\\jDWz3DN]m\"Uf", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(string0);
      //  // Unstable assertion: assertNotNull(qName0);
      //  // Unstable assertion: assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getName());
      //  // Unstable assertion: assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.toString());
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      //  // Unstable assertion: assertNotNull(variableReference0);
      //  // Unstable assertion: assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getName());
      //  // Unstable assertion: assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.toString());
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertFalse(variableReference0.computeContextDependent());
      //  // Unstable assertion: assertFalse(variableReference0.isContextDependent());
      
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      //  // Unstable assertion: assertNotNull(expressionPath0);
      //  // Unstable assertion: assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getName());
      //  // Unstable assertion: assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.toString());
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertFalse(variableReference0.computeContextDependent());
      //  // Unstable assertion: assertFalse(variableReference0.isContextDependent());
      //  // Unstable assertion: assertEquals(1, stepArray0.length);
      //  // Unstable assertion: assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      //  // Unstable assertion: assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(evalContext0, basicNodeSet0);
      //  // Unstable assertion: assertNotNull(nodeSetContext0);
      //  // Unstable assertion: assertFalse(nodeSetContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, nodeSetContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, nodeSetContext0.getPosition());
      
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, processingInstructionTest0);
      //  // Unstable assertion: assertNotNull(attributeContext0);
      //  // Unstable assertion: assertEquals("B!a65\\\\jDWz3DN]m\"Uf", processingInstructionTest0.getTarget());
      //  // Unstable assertion: assertFalse(nodeSetContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, nodeSetContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, nodeSetContext0.getPosition());
      //  // Unstable assertion: assertFalse(attributeContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, attributeContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, attributeContext0.getPosition());
      
      int int0 = 12;
      EvalContext evalContext1 = expressionPath0.createContextForStep(attributeContext0, int0, processingInstructionTest0);
      //  // Unstable assertion: assertNotNull(evalContext1);
      //  // Unstable assertion: assertEquals("B!a65\\\\jDWz3DN]m\"Uf", processingInstructionTest0.getTarget());
      //  // Unstable assertion: assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getName());
      //  // Unstable assertion: assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.toString());
      //  // Unstable assertion: assertNull(qName0.getPrefix());
      //  // Unstable assertion: assertFalse(variableReference0.computeContextDependent());
      //  // Unstable assertion: assertFalse(variableReference0.isContextDependent());
      //  // Unstable assertion: assertFalse(nodeSetContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, nodeSetContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, nodeSetContext0.getPosition());
      //  // Unstable assertion: assertFalse(attributeContext0.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(0, attributeContext0.getDocumentOrder());
      //  // Unstable assertion: assertEquals(0, attributeContext0.getPosition());
      //  // Unstable assertion: assertEquals(0, evalContext1.getDocumentOrder());
      //  // Unstable assertion: assertEquals(1, evalContext1.getPosition());
      //  // Unstable assertion: assertFalse(evalContext1.isChildOrderingRequired());
      //  // Unstable assertion: assertEquals(1, stepArray0.length);
      //  // Unstable assertion: assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      Step[] stepArray0 = new Step[7];
      int int0 = 1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      stepArray0[2] = stepArray0[0];
      stepArray0[3] = stepArray0[1];
      stepArray0[4] = stepArray0[0];
      int int1 = 11;
      Step step1 = new Step(int1, nodeTypeTest0, expressionArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(11, step1.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[5] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        expressionPath0.evalSteps(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Expression expression0 = mock(Expression.class, new ViolatedAssumptionAnswer());
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expression0);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      EvalContext evalContext0 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      EvalContext[] evalContextArray0 = null;
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      
      int int0 = 10;
      NodeTest nodeTest0 = mock(NodeTest.class, new ViolatedAssumptionAnswer());
      EvalContext evalContext1 = expressionPath0.createContextForStep(unionContext0, int0, nodeTest0);
      assertNotNull(evalContext1);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(evalContext1.isChildOrderingRequired());
      assertEquals((-1), evalContext1.getDocumentOrder());
      assertEquals(0, evalContext1.getPosition());
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      Step[] stepArray0 = new Step[4];
      int int0 = 3;
      String string0 = "J1F+h9r7.$]RBUZ";
      QName qName0 = new QName(string0);
      assertNotNull(qName0);
      assertEquals("J1F+h9r7.$]RBUZ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("J1F+h9r7.$]RBUZ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.toString());
      assertEquals("J1F+h9r7.$]RBUZ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("J1F+h9r7.$]RBUZ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.toString());
      assertEquals("J1F+h9r7.$]RBUZ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(3, step0.getAxis());
      
      stepArray0[0] = step0;
      int int1 = 9;
      Step step1 = new Step(int1, nodeNameTest0, expressionArray0);
      assertFalse(int1 == int0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("J1F+h9r7.$]RBUZ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.toString());
      assertEquals("J1F+h9r7.$]RBUZ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(9, step1.getAxis());
      
      stepArray0[1] = step1;
      boolean boolean0 = coreOperationAnd0.isContextDependent();
      assertFalse(boolean0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(4, stepArray0.length);
      
      EvalContext evalContext0 = null;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContext0, nodeNameTest0, boolean0);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.toString());
      assertEquals("J1F+h9r7.$]RBUZ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      SelfContext selfContext0 = new SelfContext(precedingOrFollowingContext0, nodeNameTest0);
      assertNotNull(selfContext0);
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.toString());
      assertEquals("J1F+h9r7.$]RBUZ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      ChildContext childContext0 = new ChildContext(selfContext0, nodeNameTest0, boolean0, boolean0);
      assertNotNull(childContext0);
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(1, childContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("J1F+h9r7.$]RBUZ", qName0.toString());
      assertEquals("J1F+h9r7.$]RBUZ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      // Undeclared exception!
      try { 
        expressionPath0.evalSteps(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = Long.BYTES;
      assertEquals(8, int0);
      
      Constant constant0 = new Constant(int0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(8, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(8, nodeTypeTest0.getNodeType());
      assertEquals(8, step0.getAxis());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.evalSteps(evalContext0);
      assertNotNull(evalContext1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertTrue(evalContext1.isChildOrderingRequired());
      assertEquals(0, evalContext1.getPosition());
      assertEquals(1, evalContext1.getDocumentOrder());
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = CoreOperation.NEGATE_PRECEDENCE;
      assertEquals(6, int0);
      
      Constant constant0 = new Constant(int0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(6, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, nodeTypeTest0.getNodeType());
      assertEquals(6, step0.getAxis());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.evalSteps(evalContext0);
      assertNotNull(evalContext1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(evalContext1.isChildOrderingRequired());
      assertEquals(0, evalContext1.getDocumentOrder());
      assertEquals(0, evalContext1.getPosition());
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[8];
      int int0 = 1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray0 = new Expression[2];
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = stepArray0[1];
      stepArray0[3] = step0;
      stepArray0[4] = stepArray0[1];
      int int1 = 5;
      Step step1 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(int1).when(step1).getAxis();
      doReturn(nodeTypeTest0).when(step1).getNodeTest();
      doReturn(expressionArray0).when(step1).getPredicates();
      stepArray0[5] = step1;
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(8, stepArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        locationPath0.evalSteps(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = CoreOperation.ADD_PRECEDENCE;
      assertEquals(4, int0);
      
      Constant constant0 = new Constant(int0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertEquals(4, step0.getAxis());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.evalSteps(evalContext0);
      assertNotNull(evalContext1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(1, evalContext1.getDocumentOrder());
      assertEquals(0, evalContext1.getPosition());
      assertTrue(evalContext1.isChildOrderingRequired());
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = false;
      Step[] stepArray0 = new Step[2];
      int int0 = 3403;
      String string0 = "N";
      QName qName0 = new QName(string0, string0);
      assertNotNull(qName0);
      assertEquals("N", qName0.getPrefix());
      assertEquals("N", qName0.getName());
      assertEquals("N:N", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, string0);
      assertNotNull(nodeNameTest0);
      assertEquals("N", qName0.getPrefix());
      assertEquals("N", qName0.getName());
      assertEquals("N:N", qName0.toString());
      assertEquals("N:N", nodeNameTest0.toString());
      assertEquals("N", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Expression[] expressionArray0 = null;
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("N", qName0.getPrefix());
      assertEquals("N", qName0.getName());
      assertEquals("N:N", qName0.toString());
      assertEquals("N:N", nodeNameTest0.toString());
      assertEquals("N", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(3403, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      JXPathContext jXPathContext0 = null;
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[2];
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(2, evalContextArray0.length);
      
      ParentContext parentContext0 = new ParentContext(unionContext0, nodeNameTest0);
      assertNotNull(parentContext0);
      assertEquals("N", qName0.getPrefix());
      assertEquals("N", qName0.getName());
      assertEquals("N:N", qName0.toString());
      assertEquals("N:N", nodeNameTest0.toString());
      assertEquals("N", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(2, evalContextArray0.length);
      
      NodePointer nodePointer0 = parentContext0.getCurrentNodePointer();
      assertNull(nodePointer0);
      assertEquals("N", qName0.getPrefix());
      assertEquals("N", qName0.getName());
      assertEquals("N:N", qName0.toString());
      assertEquals("N:N", nodeNameTest0.toString());
      assertEquals("N", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(2, evalContextArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, nodePointer0, nodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("N", qName0.getPrefix());
      assertEquals("N", qName0.getName());
      assertEquals("N:N", qName0.toString());
      assertEquals("N:N", nodeNameTest0.toString());
      assertEquals("N", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(2, evalContextArray0.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("N", qName0.getPrefix());
      assertEquals("N", qName0.getName());
      assertEquals("N:N", qName0.toString());
      assertEquals("N:N", nodeNameTest0.toString());
      assertEquals("N", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(2, evalContextArray0.length);
      
      EvalContext evalContext1 = rootContext0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(evalContext1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, evalContext1.getPosition());
      assertEquals(0, evalContext1.getDocumentOrder());
      assertFalse(evalContext1.isChildOrderingRequired());
      assertEquals("N", qName0.getPrefix());
      assertEquals("N", qName0.getName());
      assertEquals("N:N", qName0.toString());
      assertEquals("N:N", nodeNameTest0.toString());
      assertEquals("N", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(2, evalContextArray0.length);
      
      // Undeclared exception!
      try { 
        locationPath0.computeValue(evalContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.evalSteps(evalContext0);
      assertNull(evalContext1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[3];
      int int0 = 7;
      String string0 = null;
      QName qName0 = new QName(string0, string0);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(7, step0.getAxis());
      assertEquals(0, expressionArray0.length);
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = stepArray0[1];
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(evalContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      EvalContext evalContext1 = expressionPath0.evalSteps(nodeSetContext0);
      assertNotNull(evalContext1);
      assertEquals((-1), evalContext1.getDocumentOrder());
      assertEquals(0, evalContext1.getPosition());
      assertTrue(evalContext1.isChildOrderingRequired());
      assertTrue(locationPath0.isAbsolute());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(3, stepArray0.length);
      assertEquals(0, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(7, nodeTypeTest0.getNodeType());
      
      SelfContext selfContext0 = new SelfContext(evalContext1, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals((-1), evalContext1.getDocumentOrder());
      assertEquals(0, evalContext1.getPosition());
      assertTrue(evalContext1.isChildOrderingRequired());
      assertEquals(7, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(locationPath0.isAbsolute());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(3, stepArray0.length);
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        locationPath0.getSingleNodePointerForSteps(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Expression expression0 = mock(Expression.class, new ViolatedAssumptionAnswer());
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expression0);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      Pointer pointer0 = mock(Pointer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pointer0).toString();
      EvalContext evalContext0 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      doReturn(pointer0).when(evalContext0).getSingleNodePointer();
      Pointer pointer1 = expressionPath0.getSingleNodePointerForSteps(evalContext0);
      assertSame(pointer1, pointer0);
      assertNotNull(pointer1);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = CoreOperation.AND_PRECEDENCE;
      assertEquals(1, int0);
      
      Constant constant0 = new Constant(int0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      boolean boolean0 = expressionPath0.isSimpleStep(stepArray0[0]);
      assertFalse(boolean0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = false;
      Step[] stepArray0 = new Step[1];
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationAdd0);
      assertNotNull(nameAttributeTest0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      
      boolean boolean1 = locationPath0.areBasicPredicates(expressionArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      assertEquals(6, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[13];
      String string0 = "s2xJ+HwUR(sXDK0";
      Constant constant0 = new Constant(string0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationLessThan0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationLessThan0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationLessThan0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(13, expressionArray0.length);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationEqual0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(13, expressionArray0.length);
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(13, expressionArray0.length);
      
      Step[] stepArray0 = new Step[6];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(13, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      
      // Undeclared exception!
      try { 
        expressionPath0.areBasicPredicates(expressionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      String string0 = "B!a65\\\\jDWz3DN]m\"Uf";
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(string0);
      assertNotNull(qName0);
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(1, stepArray0.length);
      assertEquals(1, expressionArray0.length);
      
      boolean boolean0 = expressionPath0.areBasicPredicates(expressionArray0);
      assertTrue(boolean0);
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("B!a65\\\\jDWz3DN]m\"Uf", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(1, stepArray0.length);
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(0, stepArray0.length);
      
      Expression[] expressionArray0 = null;
      boolean boolean1 = locationPath0.areBasicPredicates(expressionArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(0, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Expression expression0 = null;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expression0, expression0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[3];
      int int0 = 5;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(5, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals(5, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      boolean boolean0 = expressionPath0.isSimpleExpressionPath();
      assertFalse(boolean0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      boolean boolean1 = expressionPath0.isSimplePath();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[3];
      int int0 = 897;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(897, nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray0 = new Expression[0];
      int int1 = 1;
      Step step0 = new Step(int1, nodeTypeTest0, expressionArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(step0);
      assertEquals(897, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertEquals(0, expressionArray0.length);
      
      stepArray0[2] = step0;
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      
      boolean boolean1 = locationPath0.isSimpleStep(stepArray0[2]);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      String string0 = "";
      Constant constant0 = new Constant(string0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName(string0, string0);
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      int int0 = 1;
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, step0.getAxis());
      assertEquals(8, expressionArray0.length);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      boolean boolean0 = expressionPath0.isSimpleStep(step0);
      assertFalse(boolean0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, step0.getAxis());
      assertEquals(8, expressionArray0.length);
      assertEquals(3, stepArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = CoreOperation.AND_PRECEDENCE;
      assertEquals(1, int0);
      
      Constant constant0 = new Constant(int0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      // Undeclared exception!
      try { 
        expressionPath0.isSimpleStep(stepArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[3];
      int int0 = 7;
      String string0 = null;
      QName qName0 = new QName(string0, string0);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(7, step0.getAxis());
      assertEquals(0, expressionArray0.length);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      assertEquals(0, expressionArray0.length);
      
      boolean boolean1 = expressionPath0.isSimplePath();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      assertEquals(0, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(0, expressionArray0.length);
      
      Step[] stepArray0 = new Step[1];
      int int0 = 5;
      String string0 = "child";
      QName qName0 = new QName(string0);
      assertNotNull(qName0);
      assertEquals("child", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("child", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("child", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("child", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("child", nodeNameTest0.toString());
      
      Step step0 = new Step(int0, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("child", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("child", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("child", nodeNameTest0.toString());
      assertEquals(5, step0.getAxis());
      assertEquals(0, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      boolean boolean0 = expressionPath0.isSimpleExpressionPath();
      assertTrue(boolean0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext(evalContext0, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("child", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("child", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("child", nodeNameTest0.toString());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        expressionPath0.buildContextChain(attributeContext0, int0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[3];
      Expression[] expressionArray0 = new Expression[0];
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        expressionPath0.isSimplePath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[8];
      int int0 = 1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray0 = new Expression[2];
      Expression expression0 = mock(Expression.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(expression0).isContextDependent();
      expressionArray0[0] = expression0;
      Step step0 = new Step(int0, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(8, stepArray0.length);
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) locationPath0;
      boolean boolean1 = locationPath0.areBasicPredicates(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(boolean1);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(8, stepArray0.length);
      assertEquals(4, expressionArray1.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      
      // Undeclared exception!
      try { 
        locationPath0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = true;
      Step[] stepArray0 = null;
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      boolean boolean1 = locationPath0.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(locationPath0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[3];
      LocationPath locationPath0 = new LocationPath(boolean0, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      
      Step[] stepArray1 = locationPath0.getSteps();
      assertSame(stepArray0, stepArray1);
      assertSame(stepArray1, stepArray0);
      assertNotNull(stepArray1);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      assertEquals(3, stepArray1.length);
  }
}
