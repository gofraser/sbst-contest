/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:44:38 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedTreeMap;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.function.BinaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedTreeMap_ESTest extends LinkedTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      assertNotNull(linkedTreeMap_Node0);
      
      String string0 = linkedTreeMap_Node0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      String string0 = "}sJfDpJWwJ0+$";
      boolean boolean0 = true;
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find(string0, boolean0);
      assertEquals(1, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap_Node0);
      
      String string1 = linkedTreeMap_Node0.getKey();
      assertEquals("}sJfDpJWwJ0+$", string1);
      assertEquals(1, linkedTreeMap0.size());
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertNotNull(linkedTreeMap_EntrySet0);
      
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = linkedTreeMap0.removeInternalByKey(linkedTreeMap_EntrySet0);
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertNull(linkedTreeMap_Node0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      String string0 = "#;y1.|`*v$0bZ";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BinaryOperator<Object> binaryOperator0 = BinaryOperator.minBy((Comparator<? super Object>) comparator1);
      assertNotNull(binaryOperator0);
      
      Object object0 = linkedTreeMap0.merge(string0, string0, binaryOperator0);
      assertEquals("#;y1.|`*v$0bZ", object0);
      assertEquals(1, linkedTreeMap0.size());
      assertNotNull(object0);
      assertSame(string0, object0);
      assertSame(object0, string0);
      
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      assertNotNull(linkedTreeMap_Node0);
      
      Integer integer0 = null;
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, String>(linkedTreeMap_Node0, integer0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      assertNotNull(linkedTreeMap_Node1);
      
      Integer integer1 = linkedTreeMap_Node1.key;
      assertNull(integer1);
      
      Object object1 = linkedTreeMap0.put(binaryOperator0, integer1);
      assertEquals("#;y1.|`*v$0bZ", object1);
      assertEquals(1, linkedTreeMap0.size());
      assertNotNull(object1);
      assertSame(object1, object0);
      assertSame(object1, string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      int int0 = (-1);
      linkedTreeMap0.size = int0;
      assertEquals((-1), linkedTreeMap0.size());
      
      Set<Object> set0 = linkedTreeMap0.keySet();
      assertEquals((-1), linkedTreeMap0.size());
      assertEquals((-1), set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      assertNotNull(linkedTreeMap_Node0);
      
      String string0 = "6_2jaI2mfx";
      String string1 = linkedTreeMap_Node0.setValue(string0);
      assertNull(string1);
      
      String string2 = linkedTreeMap_Node0.setValue(string0);
      assertEquals("6_2jaI2mfx", string2);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>(comparator1);
      assertEquals(0, linkedTreeMap1.size());
      assertNotNull(linkedTreeMap1);
      
      String string3 = linkedTreeMap1.put(linkedTreeMap0, string2);
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(1, linkedTreeMap1.size());
      assertNull(string3);
      assertSame(string0, string2);
      assertSame(string2, string0);
      
      String string4 = linkedTreeMap1.get(string2);
      assertEquals("6_2jaI2mfx", string4);
      assertEquals(1, linkedTreeMap1.size());
      assertNotNull(string4);
      assertSame(string0, string4);
      assertSame(string0, string2);
      assertSame(string2, string4);
      assertSame(string2, string0);
      assertSame(string4, string0);
      assertSame(string4, string2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      Integer integer0 = null;
      boolean boolean0 = false;
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node0 = linkedTreeMap0.find(integer0, boolean0);
      assertEquals(0, linkedTreeMap0.size());
      assertNull(linkedTreeMap_Node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)linkedTreeMap0.entrySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      assertNotNull(linkedTreeMap_Node0);
      
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.parent;
      assertNull(linkedTreeMap_Node1);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node1, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedTreeMap<Integer, String> linkedTreeMap0 = new LinkedTreeMap<Integer, String>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      String string0 = linkedTreeMap0.remove((Object) linkedTreeMap0);
      assertEquals(0, linkedTreeMap0.size());
      assertNull(string0);
      
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      assertEquals(0, linkedTreeMap1.size());
      assertNotNull(linkedTreeMap1);
      
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      assertNotNull(linkedTreeMap_Node0);
      
      // Undeclared exception!
      try { 
        linkedTreeMap1.put(linkedTreeMap_Node0, string0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap$Node is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = linkedTreeMap0.findByObject(linkedTreeMap0);
      assertEquals(0, linkedTreeMap0.size());
      assertNull(linkedTreeMap_Node0);
      
      Comparator<Object> comparator0 = null;
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator0);
      assertEquals(0, linkedTreeMap1.size());
      assertNotNull(linkedTreeMap1);
      
      // Undeclared exception!
      try { 
        linkedTreeMap1.findByEntry(linkedTreeMap_Node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        linkedTreeMap0.find(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      boolean boolean0 = linkedTreeMap0.containsKey(linkedTreeMap0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedTreeMap<Integer, String> linkedTreeMap0 = new LinkedTreeMap<Integer, String>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      linkedTreeMap0.clear();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertNotNull(linkedTreeMap_EntrySet0);
      
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertNotNull(linkedTreeMap_EntrySet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(object0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      assertNotNull(linkedTreeMap_Node0);
      
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      assertNotNull(linkedTreeMap_Node1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      String string0 = "";
      boolean boolean0 = true;
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find(string0, boolean0);
      assertEquals(1, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap_Node0);
      
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node0, string0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      assertEquals(1, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap_Node1);
      
      linkedTreeMap_Node1.left = linkedTreeMap_Node0;
      assertEquals(1, linkedTreeMap0.size());
      
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      assertEquals(1, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap_Node2);
      assertSame(linkedTreeMap_Node0, linkedTreeMap_Node2);
      assertSame(linkedTreeMap_Node2, linkedTreeMap_Node0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      assertNotNull(linkedTreeMap_Node0);
      
      String string0 = "6_2jaI2mfx";
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, string0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      assertNotNull(linkedTreeMap_Node1);
      
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      assertNotNull(linkedTreeMap_Node0);
      
      boolean boolean0 = linkedTreeMap_Node0.equals(linkedTreeMap_Node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      assertNotNull(linkedTreeMap_Node0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertNotNull(linkedTreeMap_KeySet0);
      
      boolean boolean0 = linkedTreeMap_Node0.equals(linkedTreeMap_KeySet0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      Set<Object> set0 = linkedTreeMap0.keySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertNotNull(linkedTreeMap_EntrySet0);
      
      int int0 = linkedTreeMap_EntrySet0.size();
      assertEquals(0, int0);
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>();
      assertEquals(0, linkedTreeMap1.size());
      assertNotNull(linkedTreeMap1);
      
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      assertNotNull(linkedTreeMap_Node0);
      
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, String>(linkedTreeMap_Node0, integer0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(linkedTreeMap_Node1);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        linkedTreeMap1.removeInternal(linkedTreeMap_Node1, boolean0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedTreeMap<Integer, String> linkedTreeMap0 = new LinkedTreeMap<Integer, String>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      assertNotNull(linkedTreeMap_Node0);
      
      boolean boolean0 = false;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, boolean0);
      assertEquals((-1), linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        linkedTreeMap0.find(object0, boolean0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      String string0 = "";
      boolean boolean0 = true;
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = linkedTreeMap0.find(string0, boolean0);
      assertEquals(1, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap_Node0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      assertEquals(1, linkedTreeMap0.size());
      assertEquals(1, linkedTreeMap_KeySet0.size());
      assertNotNull(linkedTreeMap_KeySet0);
      
      String string1 = linkedTreeMap0.toString();
      assertEquals("{=null}", string1);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      
      boolean boolean1 = linkedTreeMap_KeySet0.remove(string1);
      assertFalse(boolean1);
      assertEquals(1, linkedTreeMap0.size());
      assertEquals(1, linkedTreeMap_KeySet0.size());
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      assertEquals(0, linkedTreeMap1.size());
      assertNotNull(linkedTreeMap1);
      
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      assertNotNull(linkedTreeMap_Node0);
      
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = linkedTreeMap1.findByEntry(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap1.size());
      assertNull(linkedTreeMap_Node1);
      
      // Undeclared exception!
      try { 
        linkedTreeMap0.put(linkedTreeMap_Node1, linkedTreeMap_Node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      assertNotNull(linkedTreeMap_Node0);
      
      String string0 = "6_2jaI2mfx";
      String string1 = linkedTreeMap_Node0.setValue(string0);
      assertNull(string1);
      
      String string2 = linkedTreeMap_Node0.setValue(string0);
      assertEquals("6_2jaI2mfx", string2);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>(comparator1);
      assertEquals(0, linkedTreeMap1.size());
      assertNotNull(linkedTreeMap1);
      
      String string3 = linkedTreeMap1.put(linkedTreeMap0, string1);
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(1, linkedTreeMap1.size());
      assertNull(string3);
      assertSame(string0, string2);
      
      String string4 = linkedTreeMap1.get(string2);
      assertEquals(1, linkedTreeMap1.size());
      assertNull(string4);
      assertSame(string0, string2);
      assertSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      String string0 = "#;y1.|`*v$0bZ";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BinaryOperator<Object> binaryOperator0 = BinaryOperator.minBy((Comparator<? super Object>) comparator1);
      assertNotNull(binaryOperator0);
      
      Object object0 = linkedTreeMap0.merge(string0, string0, binaryOperator0);
      assertEquals("#;y1.|`*v$0bZ", object0);
      assertEquals(1, linkedTreeMap0.size());
      assertNotNull(object0);
      assertSame(string0, object0);
      assertSame(object0, string0);
      
      int int0 = linkedTreeMap0.size();
      assertEquals(1, int0);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      int int0 = linkedTreeMap0.size();
      assertEquals(0, int0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      String string0 = "";
      boolean boolean0 = true;
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find(string0, boolean0);
      assertEquals(1, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap_Node0);
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(1, linkedTreeMap0.size());
      assertEquals(1, linkedTreeMap_EntrySet0.size());
      assertNotNull(linkedTreeMap_EntrySet0);
      
      boolean boolean1 = linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node0);
      assertTrue(boolean1);
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      assertNotNull(linkedTreeMap_Node0);
      
      String string0 = linkedTreeMap_Node0.toString();
      assertEquals("null=null", string0);
      assertNotNull(string0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      Object object0 = linkedTreeMap0.put(string0, string0);
      assertEquals(1, linkedTreeMap0.size());
      assertNull(object0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      assertEquals(1, linkedTreeMap0.size());
      assertEquals(1, linkedTreeMap_KeySet0.size());
      assertNotNull(linkedTreeMap_KeySet0);
      
      boolean boolean0 = linkedTreeMap_KeySet0.remove(linkedTreeMap_Node0);
      assertTrue(boolean0);
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertNotNull(linkedTreeMap_EntrySet0);
      
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      assertNotNull(linkedTreeMap_Node0);
      
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertNotNull(linkedTreeMap_KeySet0);
      
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(0, int0);
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertNotNull(linkedTreeMap_KeySet0);
      
      Iterator<String> iterator0 = linkedTreeMap_KeySet0.iterator();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertNotNull(linkedTreeMap_KeySet0);
      
      boolean boolean0 = linkedTreeMap_KeySet0.contains(linkedTreeMap0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertNotNull(linkedTreeMap_KeySet0);
      
      linkedTreeMap_KeySet0.clear();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertNotNull(linkedTreeMap_EntrySet0);
      
      Iterator<Map.Entry<Object, Object>> iterator0 = (Iterator<Map.Entry<Object, Object>>)linkedTreeMap_EntrySet0.iterator();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      assertEquals(0, linkedTreeMap0.size());
      assertNotNull(linkedTreeMap0);
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertNotNull(linkedTreeMap_EntrySet0);
      
      linkedTreeMap_EntrySet0.clear();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }
}
