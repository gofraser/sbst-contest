/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:19:33 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import okhttp3.Cookie;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cookie_ESTest extends Cookie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      long long0 = 0L;
      Cookie.Builder cookie_Builder1 = cookie_Builder0.expiresAt(long0);
      assertSame(cookie_Builder0, cookie_Builder1);
      assertSame(cookie_Builder1, cookie_Builder0);
      assertNotNull(cookie_Builder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cookie cookie0 = null;
      String string0 = ".3=~";
      int int0 = 2147483641;
      int int1 = (-2880);
      try { 
        PrivateAccess.callMethod((Class<Cookie>) Cookie.class, cookie0, "parseExpires", (Object) string0, (Class<?>) String.class, (Object) int0, (Class<?>) int.class, (Object) int1, (Class<?>) int.class);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpUrl httpUrl0 = null;
      String string0 = "";
      Cookie cookie0 = null;
      try { 
        PrivateAccess.callMethod((Class<Cookie>) Cookie.class, cookie0, "domainMatch", (Object) httpUrl0, (Class<?>) HttpUrl.class, (Object) string0, (Class<?>) String.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpUrl httpUrl0 = null;
      Headers headers0 = null;
      // Undeclared exception!
      try { 
        Cookie.parseAll(httpUrl0, headers0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpUrl httpUrl0 = null;
      String string0 = "t|T]\\";
      // Undeclared exception!
      try { 
        Cookie.parse(httpUrl0, string0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class okhttp3.internal.Util
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = (-1354L);
      HttpUrl httpUrl0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        Cookie.parse(long0, httpUrl0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 2566L;
      HttpUrl httpUrl0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        Cookie.parse(long0, httpUrl0, string0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class okhttp3.internal.Util
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = null;
      Cookie cookie0 = null;
      try {
        cookie0 = new Cookie(cookie_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      String string0 = ".6t[7FvIU{;=jZ";
      // Undeclared exception!
      try { 
        cookie_Builder0.path(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path must start with '/'
         //
         verifyException("okhttp3.Cookie$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      String string0 = "/";
      Cookie.Builder cookie_Builder1 = cookie_Builder0.path(string0);
      assertSame(cookie_Builder0, cookie_Builder1);
      assertSame(cookie_Builder1, cookie_Builder0);
      assertNotNull(cookie_Builder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        cookie_Builder0.domain(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // domain == null
         //
         verifyException("okhttp3.Cookie$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      long long0 = 9223372036854775807L;
      Cookie.Builder cookie_Builder1 = cookie_Builder0.expiresAt(long0);
      assertSame(cookie_Builder0, cookie_Builder1);
      assertSame(cookie_Builder1, cookie_Builder0);
      assertNotNull(cookie_Builder1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      long long0 = (-1354L);
      Cookie.Builder cookie_Builder1 = cookie_Builder0.expiresAt(long0);
      assertSame(cookie_Builder0, cookie_Builder1);
      assertSame(cookie_Builder1, cookie_Builder0);
      assertNotNull(cookie_Builder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      long long0 = 253402300799999L;
      Cookie.Builder cookie_Builder1 = cookie_Builder0.expiresAt(long0);
      assertSame(cookie_Builder0, cookie_Builder1);
      assertSame(cookie_Builder1, cookie_Builder0);
      assertNotNull(cookie_Builder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      String string0 = "G\\*LSzi6O\"U; ";
      // Undeclared exception!
      try { 
        cookie_Builder0.value(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is not trimmed
         //
         verifyException("okhttp3.Cookie$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = null;
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      // Undeclared exception!
      try { 
        cookie_Builder0.value(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value == null
         //
         verifyException("okhttp3.Cookie$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      String string0 = "^?LSzi6O\"2; ";
      // Undeclared exception!
      try { 
        cookie_Builder0.name(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is not trimmed
         //
         verifyException("okhttp3.Cookie$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        cookie_Builder0.name(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.Cookie$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HttpUrl httpUrl0 = null;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      assertNotNull(headers_Builder0);
      
      Headers headers0 = new Headers(headers_Builder0);
      assertEquals(0, headers0.size());
      assertNotNull(headers0);
      
      List<Cookie> list0 = Cookie.parseAll(httpUrl0, headers0);
      assertEquals(0, headers0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cookie cookie0 = null;
      String string0 = ".";
      try { 
        PrivateAccess.callMethod((Class<Cookie>) Cookie.class, cookie0, "parseDomain", (Object) string0, (Class<?>) String.class);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cookie cookie0 = null;
      String string0 = ",\"";
      try { 
        PrivateAccess.callMethod((Class<Cookie>) Cookie.class, cookie0, "parseDomain", (Object) string0, (Class<?>) String.class);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class okhttp3.internal.Util
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cookie cookie0 = null;
      String string0 = " 2xZ{";
      try { 
        PrivateAccess.callMethod((Class<Cookie>) Cookie.class, cookie0, "parseMaxAge", (Object) string0, (Class<?>) String.class);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" 2xZ{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cookie cookie0 = null;
      String string0 = ".~";
      int int0 = (-2147483646);
      int int1 = (-2880);
      try { 
        PrivateAccess.callMethod((Class<Cookie>) Cookie.class, cookie0, "parseExpires", (Object) string0, (Class<?>) String.class, (Object) int0, (Class<?>) int.class, (Object) int1, (Class<?>) int.class);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Cookie cookie0 = null;
      String string0 = ".~";
      int int0 = (-2147483646);
      try { 
        PrivateAccess.callMethod((Class<Cookie>) Cookie.class, cookie0, "parseExpires", (Object) string0, (Class<?>) String.class, (Object) int0, (Class<?>) int.class, (Object) int0, (Class<?>) int.class);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "V>;C%";
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      Cookie.Builder cookie_Builder1 = cookie_Builder0.value(string0);
      assertSame(cookie_Builder0, cookie_Builder1);
      assertSame(cookie_Builder1, cookie_Builder0);
      assertNotNull(cookie_Builder1);
      
      Cookie.Builder cookie_Builder2 = cookie_Builder0.name(string0);
      assertSame(cookie_Builder0, cookie_Builder2);
      assertSame(cookie_Builder0, cookie_Builder1);
      assertSame(cookie_Builder2, cookie_Builder1);
      assertSame(cookie_Builder2, cookie_Builder0);
      assertNotNull(cookie_Builder2);
      
      // Undeclared exception!
      try { 
        cookie_Builder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // builder.domain == null
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      String string0 = "1bb'&*4XUhPvgiV=";
      Cookie.Builder cookie_Builder1 = cookie_Builder0.name(string0);
      assertSame(cookie_Builder0, cookie_Builder1);
      assertSame(cookie_Builder1, cookie_Builder0);
      assertNotNull(cookie_Builder1);
      
      Cookie cookie0 = null;
      try {
        cookie0 = new Cookie(cookie_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // builder.value == null
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      String string0 = "6XY,:nM+!~ ut";
      // Undeclared exception!
      try { 
        cookie_Builder0.domain(string0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class okhttp3.internal.Util
         //
         verifyException("okhttp3.Cookie$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      // Undeclared exception!
      try { 
        cookie_Builder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // builder.name == null
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      String string0 = "3h!QY)+9'cg~>wN";
      // Undeclared exception!
      try { 
        cookie_Builder0.hostOnlyDomain(string0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class okhttp3.internal.Util
         //
         verifyException("okhttp3.Cookie$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      Cookie.Builder cookie_Builder1 = cookie_Builder0.secure();
      assertSame(cookie_Builder0, cookie_Builder1);
      assertSame(cookie_Builder1, cookie_Builder0);
      assertNotNull(cookie_Builder1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Cookie.Builder cookie_Builder0 = new Cookie.Builder();
      assertNotNull(cookie_Builder0);
      
      Cookie.Builder cookie_Builder1 = cookie_Builder0.httpOnly();
      assertSame(cookie_Builder0, cookie_Builder1);
      assertSame(cookie_Builder1, cookie_Builder0);
      assertNotNull(cookie_Builder1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HttpUrl httpUrl0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        Cookie.parse(httpUrl0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Cookie", e);
      }
  }
}
