/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:59:17 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Set;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Subroutine;
import org.apache.bcel.verifier.structurals.Subroutines;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Subroutines_ESTest extends Subroutines_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1172;
      BasicType basicType0 = Type.DOUBLE;
      assertEquals((byte)7, basicType0.getType());
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertNotNull(basicType0);
      
      String[] stringArray0 = null;
      String string0 = "T<";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) int0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals((byte)7, basicType0.getType());
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStrictfp());
      assertTrue(methodGen0.isProtected());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isVolatile());
      assertTrue(methodGen0.isFinal());
      assertFalse(methodGen0.isInterface());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isAnnotation());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals("T<", methodGen0.getClassName());
      assertFalse(methodGen0.isPrivate());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isTransient());
      assertEquals(1172, methodGen0.getModifiers());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isPublic());
      assertEquals("T<", methodGen0.getName());
      assertNotNull(methodGen0);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals((byte)7, basicType0.getType());
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStrictfp());
      assertTrue(methodGen0.isProtected());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isVolatile());
      assertTrue(methodGen0.isFinal());
      assertFalse(methodGen0.isInterface());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isAnnotation());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals("T<", methodGen0.getClassName());
      assertFalse(methodGen0.isPrivate());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isTransient());
      assertEquals(1172, methodGen0.getModifiers());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isPublic());
      assertEquals("T<", methodGen0.getName());
      assertNotNull(subroutines0);
      
      Subroutine subroutine0 = mock(Subroutine.class, new ViolatedAssumptionAnswer());
      doReturn((Subroutine[]) null).when(subroutine0).subSubs();
      Set<InstructionHandle> set0 = null;
      try { 
        PrivateAccess.callMethod((Class<Subroutines>) Subroutines.class, subroutines0, "noRecursiveCalls", (Object) subroutine0, (Class<?>) Subroutine.class, (Object) set0, (Class<?>) Set.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1172;
      BasicType basicType0 = Type.DOUBLE;
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals((byte)7, basicType0.getType());
      assertNotNull(basicType0);
      
      String[] stringArray0 = null;
      String string0 = "T<";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) int0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStrictfp());
      assertTrue(methodGen0.isVarArgs());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isProtected());
      assertEquals(1172, methodGen0.getModifiers());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isSynchronized());
      assertTrue(methodGen0.isTransient());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isStatic());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertEquals("T<", methodGen0.getClassName());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isInterface());
      assertEquals("T<", methodGen0.getName());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isVolatile());
      assertTrue(methodGen0.isFinal());
      assertNotNull(methodGen0);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStrictfp());
      assertTrue(methodGen0.isVarArgs());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isProtected());
      assertEquals(1172, methodGen0.getModifiers());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isSynchronized());
      assertTrue(methodGen0.isTransient());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isStatic());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertEquals("T<", methodGen0.getClassName());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isInterface());
      assertEquals("T<", methodGen0.getName());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isVolatile());
      assertTrue(methodGen0.isFinal());
      assertNotNull(subroutines0);
      
      InstructionList instructionList1 = new InstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNotNull(instructionList1);
      
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      // Undeclared exception!
      try { 
        subroutines0.subroutineOf(instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MethodGen methodGen0 = null;
      boolean boolean0 = false;
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      D2F d2F0 = new D2F();
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertNotNull(d2F0);
      
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Type type0 = d2F0.getType(constantPoolGen0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, type0.getSize());
      assertEquals("F", type0.getSignature());
      assertEquals((byte)6, type0.getType());
      assertNotNull(type0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = "";
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      String[] stringArray0 = null;
      MethodGen methodGen0 = new MethodGen(byteArray0[1], type0, type0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, type0.getSize());
      assertEquals("F", type0.getSignature());
      assertEquals((byte)6, type0.getType());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertFalse(methodGen0.isFinal());
      assertEquals("", methodGen0.getName());
      assertFalse(methodGen0.isTransient());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isStatic());
      assertEquals(1, methodGen0.getMaxLocals());
      assertEquals("", methodGen0.getClassName());
      assertEquals(0, methodGen0.getModifiers());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isProtected());
      assertFalse(methodGen0.isInterface());
      assertFalse(methodGen0.isVolatile());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isVarArgs());
      assertFalse(methodGen0.isPrivate());
      assertEquals(0, methodGen0.getAccessFlags());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isAbstract());
      assertNotNull(methodGen0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = false;
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0, boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1165;
      BasicType basicType0 = Type.DOUBLE;
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      assertNotNull(basicType0);
      
      String[] stringArray0 = null;
      String string0 = "T<";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isInterface());
      assertEquals("T<", methodGen0.getClassName());
      assertEquals("T<", methodGen0.getName());
      assertTrue(methodGen0.isPublic());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isVolatile());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals(1165, methodGen0.getAccessFlags());
      assertFalse(methodGen0.isFinal());
      assertTrue(methodGen0.isStatic());
      assertEquals(1165, methodGen0.getModifiers());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStrictfp());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isSynchronized());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isProtected());
      assertFalse(methodGen0.isPrivate());
      assertNotNull(methodGen0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList1.insert(instructionHandle0, instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, instructionList1.size());
      assertEquals(3, instructionList1.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      
      InstructionHandle instructionHandle2 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertNotNull(instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, instructionHandle0);
      assertSame(instructionHandle2, instructionHandle1);
      
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction '  -1: sipush[17](3) 1165' is part of more than one subroutine (or of the top level and a subroutine).
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MethodGen methodGen0 = null;
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      D2F d2F0 = new D2F();
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertNotNull(d2F0);
      
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Type type0 = d2F0.getType(constantPoolGen0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, type0.getSize());
      assertEquals("F", type0.getSignature());
      assertEquals((byte)6, type0.getType());
      assertNotNull(type0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String[] stringArray0 = new String[1];
      String string0 = "";
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      String[] stringArray1 = null;
      MethodGen methodGen0 = new MethodGen(byteArray0[3], type0, type0.NO_ARGS, stringArray1, string0, stringArray0[0], instructionList0, constantPoolGen0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, type0.getSize());
      assertEquals("F", type0.getSignature());
      assertEquals((byte)6, type0.getType());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertFalse(methodGen0.isTransient());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isStatic());
      assertEquals("", methodGen0.getName());
      assertFalse(methodGen0.isFinal());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals(0, methodGen0.getAccessFlags());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isVarArgs());
      assertFalse(methodGen0.isAbstract());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStrictfp());
      assertNull(methodGen0.getClassName());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isProtected());
      assertEquals(0, methodGen0.getModifiers());
      assertFalse(methodGen0.isVolatile());
      assertFalse(methodGen0.isInterface());
      assertNotNull(methodGen0);
      assertEquals(5, byteArray0.length);
      assertEquals(1, stringArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1165;
      BasicType basicType0 = Type.DOUBLE;
      assertEquals(2, basicType0.getSize());
      assertEquals((byte)7, basicType0.getType());
      assertEquals("D", basicType0.getSignature());
      assertNotNull(basicType0);
      
      String[] stringArray0 = null;
      String string0 = "T<";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(2, basicType0.getSize());
      assertEquals((byte)7, basicType0.getType());
      assertEquals("D", basicType0.getSignature());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isFinal());
      assertTrue(methodGen0.isPublic());
      assertFalse(methodGen0.isAnnotation());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals("T<", methodGen0.getClassName());
      assertFalse(methodGen0.isInterface());
      assertEquals(0, methodGen0.getMaxStack());
      assertTrue(methodGen0.isStatic());
      assertEquals(1165, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isVolatile());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStrictfp());
      assertEquals(1165, methodGen0.getModifiers());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isPrivate());
      assertEquals("T<", methodGen0.getName());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isSynchronized());
      assertTrue(methodGen0.isTransient());
      assertTrue(methodGen0.isProtected());
      assertNotNull(methodGen0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      JSR_W jSR_W0 = new JSR_W(instructionHandle0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, jSR_W0.getIndex());
      assertEquals(5, jSR_W0.getLength());
      assertEquals((short)201, jSR_W0.getOpcode());
      assertNotNull(jSR_W0);
      
      BranchHandle branchHandle0 = instructionList1.insert(instructionHandle0, (BranchInstruction) jSR_W0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, jSR_W0.getIndex());
      assertEquals(5, jSR_W0.getLength());
      assertEquals((short)201, jSR_W0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(4, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle1, branchHandle0);
      
      boolean boolean0 = true;
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0, boolean0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.generic.SIPUSH cannot be cast to org.apache.bcel.generic.ASTORE
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      ObjectType objectType0 = Type.CLASS;
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      String[] stringArray0 = new String[0];
      String string0 = "aq#";
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      assertEquals(2, constantArray0.length);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(4, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      assertEquals(2, constantArray0.length);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      assertEquals(2, constantArray0.length);
      
      MethodGen methodGen0 = new MethodGen(int0, objectType0, objectType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isTransient());
      assertFalse(methodGen0.isInterface());
      assertEquals(0, methodGen0.getAccessFlags());
      assertEquals(1, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isFinal());
      assertFalse(methodGen0.isVarArgs());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals("aq#", methodGen0.getClassName());
      assertEquals("aq#", methodGen0.getName());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isAbstract());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isVolatile());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isPrivate());
      assertEquals(0, methodGen0.getModifiers());
      assertFalse(methodGen0.isProtected());
      assertNotNull(methodGen0);
      assertEquals(0, stringArray0.length);
      assertEquals(2, constantArray0.length);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isTransient());
      assertFalse(methodGen0.isInterface());
      assertEquals(0, methodGen0.getAccessFlags());
      assertEquals(1, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isFinal());
      assertFalse(methodGen0.isVarArgs());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals("aq#", methodGen0.getClassName());
      assertEquals("aq#", methodGen0.getName());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isAbstract());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isVolatile());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isPrivate());
      assertEquals(0, methodGen0.getModifiers());
      assertFalse(methodGen0.isProtected());
      assertNotNull(subroutines0);
      assertEquals(0, stringArray0.length);
      assertEquals(2, constantArray0.length);
      
      Subroutine subroutine0 = subroutines0.getTopLevel();
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isTransient());
      assertFalse(methodGen0.isInterface());
      assertEquals(0, methodGen0.getAccessFlags());
      assertEquals(1, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isFinal());
      assertFalse(methodGen0.isVarArgs());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals("aq#", methodGen0.getClassName());
      assertEquals("aq#", methodGen0.getName());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isAbstract());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isVolatile());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isPrivate());
      assertEquals(0, methodGen0.getModifiers());
      assertFalse(methodGen0.isProtected());
      assertNotNull(subroutine0);
      assertEquals(0, stringArray0.length);
      assertEquals(2, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1172;
      BasicType basicType0 = Type.DOUBLE;
      assertEquals((byte)7, basicType0.getType());
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertNotNull(basicType0);
      
      String string0 = "T<";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) int0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFEQ0.getIndex());
      assertEquals(3, iFEQ0.getLength());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertNotNull(iFEQ0);
      
      IfInstruction ifInstruction0 = iFEQ0.negate();
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFEQ0.getIndex());
      assertEquals(3, iFEQ0.getLength());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)154, ifInstruction0.getOpcode());
      assertNotNull(ifInstruction0);
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) ifInstruction0);
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, iFEQ0.getIndex());
      assertEquals(3, iFEQ0.getLength());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)154, ifInstruction0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals((byte)7, basicType0.getType());
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertTrue(methodGen0.isTransient());
      assertEquals(1172, methodGen0.getModifiers());
      assertEquals("T<", methodGen0.getClassName());
      assertTrue(methodGen0.isFinal());
      assertFalse(methodGen0.isStatic());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isInterface());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isPrivate());
      assertTrue(methodGen0.isProtected());
      assertFalse(methodGen0.isSynchronized());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isVolatile());
      assertEquals("T<", methodGen0.getName());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isNative());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals(0, methodGen0.getMaxStack());
      assertNotNull(methodGen0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = true;
      Subroutines subroutines0 = new Subroutines(methodGen0, boolean0);
      assertEquals((byte)7, basicType0.getType());
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertTrue(methodGen0.isTransient());
      assertEquals(1172, methodGen0.getModifiers());
      assertEquals("T<", methodGen0.getClassName());
      assertTrue(methodGen0.isFinal());
      assertFalse(methodGen0.isStatic());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isInterface());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isPrivate());
      assertTrue(methodGen0.isProtected());
      assertFalse(methodGen0.isSynchronized());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isVolatile());
      assertEquals("T<", methodGen0.getName());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isNative());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals(0, methodGen0.getMaxStack());
      assertNotNull(subroutines0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1172;
      BasicType basicType0 = Type.VOID;
      assertEquals(0, basicType0.getSize());
      assertEquals("V", basicType0.getSignature());
      assertEquals((byte)12, basicType0.getType());
      assertNotNull(basicType0);
      
      String[] stringArray0 = null;
      String string0 = "T<";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) int0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(0, basicType0.getSize());
      assertEquals("V", basicType0.getSignature());
      assertEquals((byte)12, basicType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isInterface());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isPublic());
      assertTrue(methodGen0.isFinal());
      assertFalse(methodGen0.isPrivate());
      assertEquals(1172, methodGen0.getModifiers());
      assertTrue(methodGen0.isProtected());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isVolatile());
      assertFalse(methodGen0.isStrictfp());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertEquals("T<", methodGen0.getName());
      assertEquals(0, methodGen0.getMaxStack());
      assertTrue(methodGen0.isAbstract());
      assertEquals(0, methodGen0.getMaxLocals());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isNative());
      assertEquals("T<", methodGen0.getClassName());
      assertNotNull(methodGen0);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals(0, basicType0.getSize());
      assertEquals("V", basicType0.getSignature());
      assertEquals((byte)12, basicType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isInterface());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isPublic());
      assertTrue(methodGen0.isFinal());
      assertFalse(methodGen0.isPrivate());
      assertEquals(1172, methodGen0.getModifiers());
      assertTrue(methodGen0.isProtected());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isVolatile());
      assertFalse(methodGen0.isStrictfp());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertEquals("T<", methodGen0.getName());
      assertEquals(0, methodGen0.getMaxStack());
      assertTrue(methodGen0.isAbstract());
      assertEquals(0, methodGen0.getMaxLocals());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isNative());
      assertEquals("T<", methodGen0.getClassName());
      assertNotNull(subroutines0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (CompoundInstruction) pUSH0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      // Undeclared exception!
      try { 
        subroutines0.getSubroutine(instructionHandle1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Subroutine requested for an InstructionHandle that is not a leader of a subroutine.
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1172;
      BasicType basicType0 = Type.DOUBLE;
      assertEquals((byte)7, basicType0.getType());
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertNotNull(basicType0);
      
      String string0 = "T<";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) int0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals((byte)7, basicType0.getType());
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isVolatile());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isStrictfp());
      assertEquals("T<", methodGen0.getName());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isPrivate());
      assertEquals(1172, methodGen0.getModifiers());
      assertTrue(methodGen0.isProtected());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals("T<", methodGen0.getClassName());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isStatic());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isInterface());
      assertTrue(methodGen0.isFinal());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isNative());
      assertEquals(0, methodGen0.getMaxStack());
      assertNotNull(methodGen0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = true;
      Subroutines subroutines0 = new Subroutines(methodGen0, boolean0);
      assertEquals((byte)7, basicType0.getType());
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isVolatile());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isStrictfp());
      assertEquals("T<", methodGen0.getName());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isPrivate());
      assertEquals(1172, methodGen0.getModifiers());
      assertTrue(methodGen0.isProtected());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals("T<", methodGen0.getClassName());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isStatic());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isInterface());
      assertTrue(methodGen0.isFinal());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isNative());
      assertEquals(0, methodGen0.getMaxStack());
      assertNotNull(subroutines0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        subroutines0.getSubroutine(instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: TOPLEVEL special subroutine requested; use getTopLevel().
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      D2F d2F0 = new D2F();
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertNotNull(d2F0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BasicType basicType0 = Type.DOUBLE;
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      assertNotNull(basicType0);
      
      String string0 = "w";
      InstructionList instructionList0 = new InstructionList(d2F0);
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      String[] stringArray0 = null;
      MethodGen methodGen0 = new MethodGen(byte0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isFinal());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isInterface());
      assertEquals(0, methodGen0.getModifiers());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isVolatile());
      assertEquals("w", methodGen0.getClassName());
      assertFalse(methodGen0.isAbstract());
      assertFalse(methodGen0.isStrictfp());
      assertEquals("w", methodGen0.getName());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isVarArgs());
      assertFalse(methodGen0.isProtected());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isTransient());
      assertEquals(0, methodGen0.getAccessFlags());
      assertNotNull(methodGen0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = false;
      Subroutines subroutines0 = new Subroutines(methodGen0, boolean0);
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isFinal());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isInterface());
      assertEquals(0, methodGen0.getModifiers());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isVolatile());
      assertEquals("w", methodGen0.getClassName());
      assertFalse(methodGen0.isAbstract());
      assertFalse(methodGen0.isStrictfp());
      assertEquals("w", methodGen0.getName());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isVarArgs());
      assertFalse(methodGen0.isProtected());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isTransient());
      assertEquals(0, methodGen0.getAccessFlags());
      assertNotNull(subroutines0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1188;
      BasicType basicType0 = Type.CHAR;
      assertEquals("C", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals((byte)5, basicType0.getType());
      assertNotNull(basicType0);
      
      String[] stringArray0 = null;
      String string0 = "T)";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) int0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals("C", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals((byte)5, basicType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isFinal());
      assertFalse(methodGen0.isPrivate());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isNative());
      assertEquals(0, methodGen0.getMaxLocals());
      assertTrue(methodGen0.isSynchronized());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isAbstract());
      assertEquals(1188, methodGen0.getModifiers());
      assertEquals(1188, methodGen0.getAccessFlags());
      assertEquals("T)", methodGen0.getClassName());
      assertFalse(methodGen0.isVolatile());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isInterface());
      assertTrue(methodGen0.isProtected());
      assertEquals("T)", methodGen0.getName());
      assertNotNull(methodGen0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      InstructionHandle instructionHandle1 = instructionList1.insert(instructionHandle0, instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, constantPoolGen0.getSize());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, instructionList1.getLength());
      assertEquals(3, instructionList1.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      
      InstructionHandle instructionHandle2 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(3, instructionList0.size());
      assertEquals(3, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertNotNull(instructionHandle2);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, instructionHandle0);
      assertSame(instructionHandle2, instructionHandle1);
      
      boolean boolean0 = true;
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction '  -1: ldc[18](2) 1' is part of more than one subroutine (or of the top level and a subroutine).
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1165;
      BasicType basicType0 = Type.DOUBLE;
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(2, basicType0.getSize());
      assertNotNull(basicType0);
      
      String[] stringArray0 = null;
      String string0 = "T<";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(2, basicType0.getSize());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isPrivate());
      assertEquals(1165, methodGen0.getModifiers());
      assertEquals(1165, methodGen0.getAccessFlags());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isVolatile());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isSynchronized());
      assertTrue(methodGen0.isProtected());
      assertFalse(methodGen0.isInterface());
      assertEquals("T<", methodGen0.getName());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isFinal());
      assertTrue(methodGen0.isPublic());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isStatic());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isNative());
      assertEquals("T<", methodGen0.getClassName());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals(0, methodGen0.getMaxLocals());
      assertNotNull(methodGen0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      
      JSR_W jSR_W0 = new JSR_W(instructionHandle0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(5, jSR_W0.getLength());
      assertEquals((short)201, jSR_W0.getOpcode());
      assertEquals(0, jSR_W0.getIndex());
      assertNotNull(jSR_W0);
      
      BranchHandle branchHandle0 = instructionList1.insert(instructionHandle0, (BranchInstruction) jSR_W0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(5, jSR_W0.getLength());
      assertEquals((short)201, jSR_W0.getOpcode());
      assertEquals(0, jSR_W0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      assertNotNull(branchHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(4, instructionList0.size());
      assertEquals(4, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(0, instructionHandle1.getPosition());
      assertNotNull(instructionHandle1);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle1, branchHandle0);
      
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.generic.SIPUSH cannot be cast to org.apache.bcel.generic.ASTORE
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1172;
      BasicType basicType0 = Type.VOID;
      assertEquals(0, basicType0.getSize());
      assertEquals("V", basicType0.getSignature());
      assertEquals((byte)12, basicType0.getType());
      assertNotNull(basicType0);
      
      String[] stringArray0 = null;
      String string0 = "T<";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) int0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(0, basicType0.getSize());
      assertEquals("V", basicType0.getSignature());
      assertEquals((byte)12, basicType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStrictfp());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isSynthetic());
      assertTrue(methodGen0.isProtected());
      assertEquals(1172, methodGen0.getModifiers());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isTransient());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isStatic());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVarArgs());
      assertEquals("T<", methodGen0.getClassName());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isInterface());
      assertEquals("T<", methodGen0.getName());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isVolatile());
      assertTrue(methodGen0.isFinal());
      assertNotNull(methodGen0);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals(0, basicType0.getSize());
      assertEquals("V", basicType0.getSignature());
      assertEquals((byte)12, basicType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStrictfp());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isSynthetic());
      assertTrue(methodGen0.isProtected());
      assertEquals(1172, methodGen0.getModifiers());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isTransient());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isStatic());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVarArgs());
      assertEquals("T<", methodGen0.getClassName());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isInterface());
      assertEquals("T<", methodGen0.getName());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isVolatile());
      assertTrue(methodGen0.isFinal());
      assertNotNull(subroutines0);
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      Subroutine subroutine0 = subroutines0.subroutineOf(instructionHandle0);
      assertEquals(0, basicType0.getSize());
      assertEquals("V", basicType0.getSignature());
      assertEquals((byte)12, basicType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStrictfp());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isSynthetic());
      assertTrue(methodGen0.isProtected());
      assertEquals(1172, methodGen0.getModifiers());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isTransient());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isStatic());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVarArgs());
      assertEquals("T<", methodGen0.getClassName());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isInterface());
      assertEquals("T<", methodGen0.getName());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isVolatile());
      assertTrue(methodGen0.isFinal());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(subroutine0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1172;
      BasicType basicType0 = Type.DOUBLE;
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      assertNotNull(basicType0);
      
      String[] stringArray0 = null;
      String string0 = "T<";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) int0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isInterface());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isStatic());
      assertEquals("T<", methodGen0.getClassName());
      assertTrue(methodGen0.isFinal());
      assertFalse(methodGen0.isVolatile());
      assertTrue(methodGen0.isProtected());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isNative());
      assertEquals(1172, methodGen0.getModifiers());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isSynchronized());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertEquals("T<", methodGen0.getName());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isStrictfp());
      assertNotNull(methodGen0);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isInterface());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isStatic());
      assertEquals("T<", methodGen0.getClassName());
      assertTrue(methodGen0.isFinal());
      assertFalse(methodGen0.isVolatile());
      assertTrue(methodGen0.isProtected());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isNative());
      assertEquals(1172, methodGen0.getModifiers());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isSynchronized());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertEquals("T<", methodGen0.getName());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isStrictfp());
      assertNotNull(subroutines0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      Subroutine subroutine0 = subroutines0.subroutineOf(instructionHandle0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertEquals(2, basicType0.getSize());
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isInterface());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isStatic());
      assertEquals("T<", methodGen0.getClassName());
      assertTrue(methodGen0.isFinal());
      assertFalse(methodGen0.isVolatile());
      assertTrue(methodGen0.isProtected());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isNative());
      assertEquals(1172, methodGen0.getModifiers());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isSynchronized());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertEquals("T<", methodGen0.getName());
      assertFalse(methodGen0.isPublic());
      assertFalse(methodGen0.isStrictfp());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNull(subroutine0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1172;
      BasicType basicType0 = Type.DOUBLE;
      assertEquals((byte)7, basicType0.getType());
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertNotNull(basicType0);
      
      String[] stringArray0 = null;
      String string0 = "T<";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) int0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals((byte)7, basicType0.getType());
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isVolatile());
      assertFalse(methodGen0.isPublic());
      assertTrue(methodGen0.isProtected());
      assertFalse(methodGen0.isInterface());
      assertTrue(methodGen0.isFinal());
      assertTrue(methodGen0.isTransient());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertEquals(1172, methodGen0.getModifiers());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStrictfp());
      assertTrue(methodGen0.isVarArgs());
      assertEquals("T<", methodGen0.getName());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isStatic());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertEquals("T<", methodGen0.getClassName());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isAbstract());
      assertNotNull(methodGen0);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals((byte)7, basicType0.getType());
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isVolatile());
      assertFalse(methodGen0.isPublic());
      assertTrue(methodGen0.isProtected());
      assertFalse(methodGen0.isInterface());
      assertTrue(methodGen0.isFinal());
      assertTrue(methodGen0.isTransient());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertEquals(1172, methodGen0.getModifiers());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStrictfp());
      assertTrue(methodGen0.isVarArgs());
      assertEquals("T<", methodGen0.getName());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isStatic());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertEquals("T<", methodGen0.getClassName());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isAbstract());
      assertNotNull(subroutines0);
      
      String string1 = subroutines0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals((byte)7, basicType0.getType());
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isVolatile());
      assertFalse(methodGen0.isPublic());
      assertTrue(methodGen0.isProtected());
      assertFalse(methodGen0.isInterface());
      assertTrue(methodGen0.isFinal());
      assertTrue(methodGen0.isTransient());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertEquals(1172, methodGen0.getModifiers());
      assertFalse(methodGen0.isPrivate());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStrictfp());
      assertTrue(methodGen0.isVarArgs());
      assertEquals("T<", methodGen0.getName());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isStatic());
      assertEquals(1172, methodGen0.getAccessFlags());
      assertEquals("T<", methodGen0.getClassName());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isAbstract());
      assertEquals("---\n{  -1: ldc[18](2) 1=Subroutine: Local variable is '-1', JSRs are '[]', RET is 'null', Instructions: '[  -1: ldc[18](2) 1]'. Accessed local variable slots: ''. Recursively (via subsub...routines) accessed local variable slots: ''.}\n---\n", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }
}
