/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 21:33:51 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Set;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.Subroutine;
import org.apache.bcel.verifier.structurals.Subroutines;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Subroutines_ESTest extends Subroutines_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      BasicType basicType0 = Type.BOOLEAN;
      assertEquals(1, basicType0.getSize());
      assertEquals("Z", basicType0.getSignature());
      assertEquals((byte)4, basicType0.getType());
      assertNotNull(basicType0);
      
      String[] stringArray0 = null;
      String string0 = "wHuPPd#xeeMve-Pb";
      InstructionHandle[] instructionHandleArray0 = null;
      int[] intArray0 = new int[6];
      int int1 = 1;
      InstructionHandle instructionHandle0 = InstructionList.findHandle(instructionHandleArray0, intArray0, int1, int1);
      assertFalse(int1 == int0);
      assertNull(instructionHandle0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      IFNE iFNE0 = new IFNE(instructionHandle0);
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertFalse(int1 == int0);
      assertNotNull(iFNE0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNE0);
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertFalse(int1 == int0);
      assertNotNull(instructionList0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, basicType0.getSize());
      assertEquals("Z", basicType0.getSignature());
      assertEquals((byte)4, basicType0.getType());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertTrue(methodGen0.isPrivate());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isSynthetic());
      assertTrue(methodGen0.isEnum());
      assertTrue(methodGen0.isProtected());
      assertEquals(0, methodGen0.getMaxStack());
      assertTrue(methodGen0.isAbstract());
      assertTrue(methodGen0.isStrictfp());
      assertTrue(methodGen0.isTransient());
      assertTrue(methodGen0.isSynchronized());
      assertEquals("wHuPPd#xeeMve-Pb", methodGen0.getName());
      assertEquals((-1), methodGen0.getAccessFlags());
      assertTrue(methodGen0.isPublic());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals("wHuPPd#xeeMve-Pb", methodGen0.getClassName());
      assertTrue(methodGen0.isInterface());
      assertTrue(methodGen0.isAnnotation());
      assertTrue(methodGen0.isStatic());
      assertTrue(methodGen0.isNative());
      assertTrue(methodGen0.isVolatile());
      assertTrue(methodGen0.isFinal());
      assertEquals((-1), methodGen0.getModifiers());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(methodGen0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, basicType0.getSize());
      assertEquals("Z", basicType0.getSignature());
      assertEquals((byte)4, basicType0.getType());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertTrue(methodGen0.isPrivate());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isSynthetic());
      assertTrue(methodGen0.isEnum());
      assertTrue(methodGen0.isProtected());
      assertEquals(0, methodGen0.getMaxStack());
      assertTrue(methodGen0.isAbstract());
      assertTrue(methodGen0.isStrictfp());
      assertTrue(methodGen0.isTransient());
      assertTrue(methodGen0.isSynchronized());
      assertEquals("wHuPPd#xeeMve-Pb", methodGen0.getName());
      assertEquals((-1), methodGen0.getAccessFlags());
      assertTrue(methodGen0.isPublic());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals("wHuPPd#xeeMve-Pb", methodGen0.getClassName());
      assertTrue(methodGen0.isInterface());
      assertTrue(methodGen0.isAnnotation());
      assertTrue(methodGen0.isStatic());
      assertTrue(methodGen0.isNative());
      assertTrue(methodGen0.isVolatile());
      assertTrue(methodGen0.isFinal());
      assertEquals((-1), methodGen0.getModifiers());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(subroutines0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      Subroutine subroutine0 = mock(Subroutine.class, new ViolatedAssumptionAnswer());
      doReturn((Subroutine[]) null).when(subroutine0).subSubs();
      Set<ARETURN> set0 = (Set<ARETURN>) mock(Set.class, new ViolatedAssumptionAnswer());
      try { 
        PrivateAccess.callMethod((Class<Subroutines>) Subroutines.class, subroutines0, "noRecursiveCalls", (Object) subroutine0, (Class<?>) Subroutine.class, (Object) set0, (Class<?>) Set.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-1);
      D2F d2F0 = new D2F();
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertNotNull(d2F0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      String string0 = "2v$V`q>qk@";
      int int1 = constantPoolGen0.addInterfaceMethodref(string0, string0, string0);
      assertEquals(4, int1);
      assertEquals(5, constantPoolGen0.getSize());
      assertFalse(int1 == int0);
      
      Type type0 = d2F0.getType(constantPoolGen0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(1, type0.getSize());
      assertEquals("F", type0.getSignature());
      assertEquals((byte)6, type0.getType());
      assertNotNull(type0);
      
      String[] stringArray0 = null;
      InstructionHandle[] instructionHandleArray0 = null;
      int[] intArray0 = new int[8];
      InstructionHandle instructionHandle0 = InstructionList.findHandle(instructionHandleArray0, intArray0, int1, int1);
      assertEquals(5, constantPoolGen0.getSize());
      assertFalse(int1 == int0);
      assertNull(instructionHandle0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      IFNE iFNE0 = new IFNE(instructionHandle0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(int1 == int0);
      assertNotNull(iFNE0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNE0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertFalse(int1 == int0);
      assertNotNull(instructionList0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      MethodGen methodGen0 = new MethodGen(int0, type0, type0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(1, type0.getSize());
      assertEquals("F", type0.getSignature());
      assertEquals((byte)6, type0.getType());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(methodGen0.isFinal());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals("2v$V`q>qk@", methodGen0.getClassName());
      assertTrue(methodGen0.isInterface());
      assertTrue(methodGen0.isTransient());
      assertTrue(methodGen0.isAnnotation());
      assertEquals("2v$V`q>qk@", methodGen0.getName());
      assertTrue(methodGen0.isStatic());
      assertTrue(methodGen0.isProtected());
      assertEquals((-1), methodGen0.getModifiers());
      assertTrue(methodGen0.isVolatile());
      assertTrue(methodGen0.isNative());
      assertEquals((-1), methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isPublic());
      assertTrue(methodGen0.isSynthetic());
      assertTrue(methodGen0.isPrivate());
      assertEquals(0, methodGen0.getMaxLocals());
      assertTrue(methodGen0.isStrictfp());
      assertTrue(methodGen0.isSynchronized());
      assertTrue(methodGen0.isAbstract());
      assertTrue(methodGen0.isEnum());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(methodGen0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(1, type0.getSize());
      assertEquals("F", type0.getSignature());
      assertEquals((byte)6, type0.getType());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(methodGen0.isFinal());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals("2v$V`q>qk@", methodGen0.getClassName());
      assertTrue(methodGen0.isInterface());
      assertTrue(methodGen0.isTransient());
      assertTrue(methodGen0.isAnnotation());
      assertEquals("2v$V`q>qk@", methodGen0.getName());
      assertTrue(methodGen0.isStatic());
      assertTrue(methodGen0.isProtected());
      assertEquals((-1), methodGen0.getModifiers());
      assertTrue(methodGen0.isVolatile());
      assertTrue(methodGen0.isNative());
      assertEquals((-1), methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isPublic());
      assertTrue(methodGen0.isSynthetic());
      assertTrue(methodGen0.isPrivate());
      assertEquals(0, methodGen0.getMaxLocals());
      assertTrue(methodGen0.isStrictfp());
      assertTrue(methodGen0.isSynchronized());
      assertTrue(methodGen0.isAbstract());
      assertTrue(methodGen0.isEnum());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(subroutines0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      instructionList0.dispose();
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((-1), iFNE0.getIndex());
      assertEquals(3, iFNE0.getLength());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        subroutines0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MethodGen methodGen0 = null;
      boolean boolean0 = true;
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 4807;
      ObjectType objectType0 = Type.CLASS;
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertNotNull(objectType0);
      
      String[] stringArray0 = null;
      String string0 = null;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, objectType0, objectType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals(1, constantPoolGen0.getSize());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertFalse(methodGen0.isStatic());
      assertTrue(methodGen0.isVolatile());
      assertFalse(methodGen0.isAnnotation());
      assertEquals(0, methodGen0.getMaxLocals());
      assertTrue(methodGen0.isPublic());
      assertNull(methodGen0.getName());
      assertTrue(methodGen0.isTransient());
      assertTrue(methodGen0.isInterface());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isEnum());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isAbstract());
      assertTrue(methodGen0.isPrivate());
      assertTrue(methodGen0.isProtected());
      assertEquals(0, methodGen0.getMaxStack());
      assertTrue(methodGen0.isSynthetic());
      assertFalse(methodGen0.isNative());
      assertTrue(methodGen0.isVarArgs());
      assertEquals(4807, methodGen0.getAccessFlags());
      assertFalse(methodGen0.isFinal());
      assertEquals(4807, methodGen0.getModifiers());
      assertNull(methodGen0.getClassName());
      assertNotNull(methodGen0);
      
      boolean boolean0 = false;
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0, boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MethodGen methodGen0 = null;
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1249;
      ObjectType objectType0 = Type.STRINGBUFFER;
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertNotNull(uninitializedObjectType0);
      
      String[] stringArray0 = new String[0];
      String string0 = null;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, uninitializedObjectType0, objectType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertFalse(methodGen0.isStatic());
      assertNull(methodGen0.getName());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isInterface());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isSynchronized());
      assertTrue(methodGen0.isPublic());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals(1249, methodGen0.getModifiers());
      assertNull(methodGen0.getClassName());
      assertFalse(methodGen0.isFinal());
      assertTrue(methodGen0.isVarArgs());
      assertFalse(methodGen0.isNative());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isProtected());
      assertFalse(methodGen0.isSynthetic());
      assertTrue(methodGen0.isVolatile());
      assertFalse(methodGen0.isEnum());
      assertEquals(1249, methodGen0.getAccessFlags());
      assertFalse(methodGen0.isStrictfp());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isPrivate());
      assertNotNull(methodGen0);
      assertEquals(0, stringArray0.length);
      
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 4807;
      ObjectType objectType0 = Type.CLASS;
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      String[] stringArray0 = null;
      String string0 = null;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) int0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, objectType0, objectType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(methodGen0.isInterface());
      assertFalse(methodGen0.isFinal());
      assertNull(methodGen0.getName());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isTransient());
      assertNull(methodGen0.getClassName());
      assertEquals(0, methodGen0.getMaxStack());
      assertTrue(methodGen0.isPrivate());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isPublic());
      assertTrue(methodGen0.isSynthetic());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStatic());
      assertEquals(4807, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isProtected());
      assertFalse(methodGen0.isAbstract());
      assertFalse(methodGen0.isStrictfp());
      assertEquals(4807, methodGen0.getModifiers());
      assertFalse(methodGen0.isSynchronized());
      assertTrue(methodGen0.isVolatile());
      assertNotNull(methodGen0);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(methodGen0.isInterface());
      assertFalse(methodGen0.isFinal());
      assertNull(methodGen0.getName());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isTransient());
      assertNull(methodGen0.getClassName());
      assertEquals(0, methodGen0.getMaxStack());
      assertTrue(methodGen0.isPrivate());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isPublic());
      assertTrue(methodGen0.isSynthetic());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStatic());
      assertEquals(4807, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isProtected());
      assertFalse(methodGen0.isAbstract());
      assertFalse(methodGen0.isStrictfp());
      assertEquals(4807, methodGen0.getModifiers());
      assertFalse(methodGen0.isSynchronized());
      assertTrue(methodGen0.isVolatile());
      assertNotNull(subroutines0);
      
      Subroutine subroutine0 = subroutines0.getTopLevel();
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(methodGen0.isInterface());
      assertFalse(methodGen0.isFinal());
      assertNull(methodGen0.getName());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isTransient());
      assertNull(methodGen0.getClassName());
      assertEquals(0, methodGen0.getMaxStack());
      assertTrue(methodGen0.isPrivate());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isPublic());
      assertTrue(methodGen0.isSynthetic());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStatic());
      assertEquals(4807, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isProtected());
      assertFalse(methodGen0.isAbstract());
      assertFalse(methodGen0.isStrictfp());
      assertEquals(4807, methodGen0.getModifiers());
      assertFalse(methodGen0.isSynchronized());
      assertTrue(methodGen0.isVolatile());
      assertNotNull(subroutine0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = null;
      int int0 = 1;
      Subroutines subroutines0 = null;
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertNotNull(instructionList0);
      
      int[] intArray0 = new int[1];
      InstructionHandle instructionHandle0 = InstructionList.findHandle(instructionHandleArray0, intArray0, int0, int0);
      assertNull(instructionHandle0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      GOTO gOTO0 = new GOTO(instructionHandle0);
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals(3, gOTO0.getLength());
      assertNotNull(gOTO0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) gOTO0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals(3, gOTO0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(branchHandle0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object object0 = PrivateAccess.callMethod((Class<Subroutines>) Subroutines.class, subroutines0, "getSuccessors", (Object) branchHandle0, (Class<?>) InstructionHandle.class);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, gOTO0.getIndex());
      assertEquals((short)167, gOTO0.getOpcode());
      assertEquals(3, gOTO0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertNotNull(object0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-1);
      D2F d2F0 = new D2F();
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertNotNull(d2F0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      String string0 = "F|r>CpSP";
      Type type0 = d2F0.getType(constantPoolGen0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("F", type0.getSignature());
      assertEquals(1, type0.getSize());
      assertEquals((byte)6, type0.getType());
      assertNotNull(type0);
      
      String[] stringArray0 = null;
      InstructionHandle[] instructionHandleArray0 = null;
      int[] intArray0 = new int[8];
      int int1 = 1;
      InstructionHandle instructionHandle0 = InstructionList.findHandle(instructionHandleArray0, intArray0, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(instructionHandle0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      IFNE iFNE0 = new IFNE(instructionHandle0);
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(iFNE0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNE0);
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(instructionList0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean boolean0 = true;
      MethodGen methodGen0 = new MethodGen(int0, type0, type0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("F", type0.getSignature());
      assertEquals(1, type0.getSize());
      assertEquals((byte)6, type0.getType());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(methodGen0.isSynchronized());
      assertEquals((-1), methodGen0.getModifiers());
      assertEquals("F|r>CpSP", methodGen0.getClassName());
      assertTrue(methodGen0.isInterface());
      assertTrue(methodGen0.isTransient());
      assertEquals("F|r>CpSP", methodGen0.getName());
      assertTrue(methodGen0.isProtected());
      assertTrue(methodGen0.isVolatile());
      assertEquals((-1), methodGen0.getAccessFlags());
      assertTrue(methodGen0.isFinal());
      assertTrue(methodGen0.isPrivate());
      assertTrue(methodGen0.isStrictfp());
      assertTrue(methodGen0.isNative());
      assertTrue(methodGen0.isAnnotation());
      assertTrue(methodGen0.isAbstract());
      assertTrue(methodGen0.isSynthetic());
      assertTrue(methodGen0.isEnum());
      assertTrue(methodGen0.isStatic());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isPublic());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(methodGen0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Subroutines subroutines0 = new Subroutines(methodGen0, boolean0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(1, d2F0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("F", type0.getSignature());
      assertEquals(1, type0.getSize());
      assertEquals((byte)6, type0.getType());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(methodGen0.isSynchronized());
      assertEquals((-1), methodGen0.getModifiers());
      assertEquals("F|r>CpSP", methodGen0.getClassName());
      assertTrue(methodGen0.isInterface());
      assertTrue(methodGen0.isTransient());
      assertEquals("F|r>CpSP", methodGen0.getName());
      assertTrue(methodGen0.isProtected());
      assertTrue(methodGen0.isVolatile());
      assertEquals((-1), methodGen0.getAccessFlags());
      assertTrue(methodGen0.isFinal());
      assertTrue(methodGen0.isPrivate());
      assertTrue(methodGen0.isStrictfp());
      assertTrue(methodGen0.isNative());
      assertTrue(methodGen0.isAnnotation());
      assertTrue(methodGen0.isAbstract());
      assertTrue(methodGen0.isSynthetic());
      assertTrue(methodGen0.isEnum());
      assertTrue(methodGen0.isStatic());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isPublic());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(subroutines0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        subroutines0.getSubroutine(instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Subroutine requested for an InstructionHandle that is not a leader of a subroutine.
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1219;
      ObjectType objectType0 = Type.STRINGBUFFER;
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertNotNull(objectType0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotNull(uninitializedObjectType0);
      
      String[] stringArray0 = new String[0];
      String string0 = null;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, uninitializedObjectType0.THROWABLE);
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, uninitializedObjectType0, objectType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1219, methodGen0.getModifiers());
      assertEquals(1219, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isAbstract());
      assertTrue(methodGen0.isVolatile());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isInterface());
      assertFalse(methodGen0.isProtected());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isTransient());
      assertNull(methodGen0.getClassName());
      assertFalse(methodGen0.isFinal());
      assertNull(methodGen0.getName());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isPublic());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStatic());
      assertTrue(methodGen0.isPrivate());
      assertNotNull(methodGen0);
      assertEquals(0, stringArray0.length);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1219, methodGen0.getModifiers());
      assertEquals(1219, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isAbstract());
      assertTrue(methodGen0.isVolatile());
      assertFalse(methodGen0.isSynchronized());
      assertFalse(methodGen0.isInterface());
      assertFalse(methodGen0.isProtected());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isTransient());
      assertNull(methodGen0.getClassName());
      assertFalse(methodGen0.isFinal());
      assertNull(methodGen0.getName());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isPublic());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isStatic());
      assertTrue(methodGen0.isPrivate());
      assertNotNull(subroutines0);
      assertEquals(0, stringArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotNull(instructionHandle0);
      
      // Undeclared exception!
      try { 
        subroutines0.getSubroutine(instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: TOPLEVEL special subroutine requested; use getTopLevel().
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 4807;
      ObjectType objectType0 = Type.CLASS;
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      String[] stringArray0 = null;
      String string0 = null;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) int0);
      assertEquals(2, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      FREM fREM0 = new FREM();
      assertEquals(1, fREM0.getLength());
      assertEquals((short)114, fREM0.getOpcode());
      assertNotNull(fREM0);
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fREM0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(1, fREM0.getLength());
      assertEquals((short)114, fREM0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      MethodGen methodGen0 = new MethodGen(int0, objectType0, objectType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertTrue(methodGen0.isPublic());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isSynchronized());
      assertEquals(4807, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVolatile());
      assertTrue(methodGen0.isProtected());
      assertTrue(methodGen0.isInterface());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isEnum());
      assertNull(methodGen0.getClassName());
      assertTrue(methodGen0.isSynthetic());
      assertFalse(methodGen0.isAbstract());
      assertTrue(methodGen0.isPrivate());
      assertNull(methodGen0.getName());
      assertFalse(methodGen0.isFinal());
      assertEquals(4807, methodGen0.getModifiers());
      assertFalse(methodGen0.isStatic());
      assertTrue(methodGen0.isVarArgs());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals(0, methodGen0.getMaxStack());
      assertNotNull(methodGen0);
      
      boolean boolean0 = false;
      Subroutines subroutines0 = new Subroutines(methodGen0, boolean0);
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertTrue(methodGen0.isPublic());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isSynchronized());
      assertEquals(4807, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVolatile());
      assertTrue(methodGen0.isProtected());
      assertTrue(methodGen0.isInterface());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isEnum());
      assertNull(methodGen0.getClassName());
      assertTrue(methodGen0.isSynthetic());
      assertFalse(methodGen0.isAbstract());
      assertTrue(methodGen0.isPrivate());
      assertNull(methodGen0.getName());
      assertFalse(methodGen0.isFinal());
      assertEquals(4807, methodGen0.getModifiers());
      assertFalse(methodGen0.isStatic());
      assertTrue(methodGen0.isVarArgs());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals(0, methodGen0.getMaxStack());
      assertNotNull(subroutines0);
      
      Subroutine subroutine0 = subroutines0.subroutineOf(instructionHandle0);
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals("Ljava/lang/Class;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(1, fREM0.getLength());
      assertEquals((short)114, fREM0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertTrue(methodGen0.isPublic());
      assertFalse(methodGen0.isAnnotation());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isSynchronized());
      assertEquals(4807, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isVolatile());
      assertTrue(methodGen0.isProtected());
      assertTrue(methodGen0.isInterface());
      assertFalse(methodGen0.isStrictfp());
      assertFalse(methodGen0.isNative());
      assertFalse(methodGen0.isEnum());
      assertNull(methodGen0.getClassName());
      assertTrue(methodGen0.isSynthetic());
      assertFalse(methodGen0.isAbstract());
      assertTrue(methodGen0.isPrivate());
      assertNull(methodGen0.getName());
      assertFalse(methodGen0.isFinal());
      assertEquals(4807, methodGen0.getModifiers());
      assertFalse(methodGen0.isStatic());
      assertTrue(methodGen0.isVarArgs());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals(0, methodGen0.getMaxStack());
      assertNotNull(subroutine0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1219;
      ObjectType objectType0 = Type.STRINGBUFFER;
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertNotNull(objectType0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertNotNull(uninitializedObjectType0);
      
      String[] stringArray0 = new String[0];
      String string0 = null;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, uninitializedObjectType0.THROWABLE);
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen(int0, uninitializedObjectType0, objectType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(methodGen0.isVolatile());
      assertEquals(1219, methodGen0.getModifiers());
      assertEquals(1219, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isInterface());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isFinal());
      assertEquals(0, methodGen0.getMaxLocals());
      assertTrue(methodGen0.isPublic());
      assertNull(methodGen0.getName());
      assertFalse(methodGen0.isNative());
      assertTrue(methodGen0.isVarArgs());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isProtected());
      assertNull(methodGen0.getClassName());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isPrivate());
      assertFalse(methodGen0.isStrictfp());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isSynchronized());
      assertNotNull(methodGen0);
      assertEquals(0, stringArray0.length);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(methodGen0.isVolatile());
      assertEquals(1219, methodGen0.getModifiers());
      assertEquals(1219, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isInterface());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isFinal());
      assertEquals(0, methodGen0.getMaxLocals());
      assertTrue(methodGen0.isPublic());
      assertNull(methodGen0.getName());
      assertFalse(methodGen0.isNative());
      assertTrue(methodGen0.isVarArgs());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isProtected());
      assertNull(methodGen0.getClassName());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isPrivate());
      assertFalse(methodGen0.isStrictfp());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isSynchronized());
      assertNotNull(subroutines0);
      assertEquals(0, stringArray0.length);
      
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotNull(instructionHandle0);
      
      Subroutine subroutine0 = subroutines0.subroutineOf(instructionHandle0);
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertTrue(methodGen0.isVolatile());
      assertEquals(1219, methodGen0.getModifiers());
      assertEquals(1219, methodGen0.getAccessFlags());
      assertTrue(methodGen0.isAbstract());
      assertFalse(methodGen0.isInterface());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isAnnotation());
      assertFalse(methodGen0.isFinal());
      assertEquals(0, methodGen0.getMaxLocals());
      assertTrue(methodGen0.isPublic());
      assertNull(methodGen0.getName());
      assertFalse(methodGen0.isNative());
      assertTrue(methodGen0.isVarArgs());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(methodGen0.isProtected());
      assertNull(methodGen0.getClassName());
      assertFalse(methodGen0.isSynthetic());
      assertFalse(methodGen0.isEnum());
      assertTrue(methodGen0.isPrivate());
      assertFalse(methodGen0.isStrictfp());
      assertTrue(methodGen0.isTransient());
      assertFalse(methodGen0.isSynchronized());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNull(subroutine0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-1);
      D2F d2F0 = new D2F();
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertNotNull(d2F0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      String string0 = "2v$V`q>qk@";
      int int1 = constantPoolGen0.addInterfaceMethodref(string0, string0, string0);
      assertEquals(4, int1);
      assertEquals(5, constantPoolGen0.getSize());
      assertFalse(int1 == int0);
      
      Type type0 = d2F0.getType(constantPoolGen0);
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((byte)6, type0.getType());
      assertEquals("F", type0.getSignature());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      
      String[] stringArray0 = null;
      InstructionHandle[] instructionHandleArray0 = null;
      int[] intArray0 = new int[8];
      InstructionHandle instructionHandle0 = InstructionList.findHandle(instructionHandleArray0, intArray0, int1, int1);
      assertEquals(5, constantPoolGen0.getSize());
      assertFalse(int1 == int0);
      assertNull(instructionHandle0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      IFNE iFNE0 = new IFNE(instructionHandle0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertFalse(int1 == int0);
      assertNotNull(iFNE0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNE0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(int1 == int0);
      assertNotNull(instructionList0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      MethodGen methodGen0 = new MethodGen(int0, type0, type0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((byte)6, type0.getType());
      assertEquals("F", type0.getSignature());
      assertEquals(1, type0.getSize());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(methodGen0.isAbstract());
      assertTrue(methodGen0.isNative());
      assertTrue(methodGen0.isProtected());
      assertTrue(methodGen0.isPrivate());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isStrictfp());
      assertTrue(methodGen0.isSynchronized());
      assertTrue(methodGen0.isPublic());
      assertTrue(methodGen0.isSynthetic());
      assertTrue(methodGen0.isEnum());
      assertTrue(methodGen0.isAnnotation());
      assertTrue(methodGen0.isTransient());
      assertTrue(methodGen0.isInterface());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals("2v$V`q>qk@", methodGen0.getName());
      assertTrue(methodGen0.isStatic());
      assertEquals((-1), methodGen0.getAccessFlags());
      assertEquals((-1), methodGen0.getModifiers());
      assertEquals("2v$V`q>qk@", methodGen0.getClassName());
      assertTrue(methodGen0.isFinal());
      assertTrue(methodGen0.isVolatile());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(methodGen0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((byte)6, type0.getType());
      assertEquals("F", type0.getSignature());
      assertEquals(1, type0.getSize());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(methodGen0.isAbstract());
      assertTrue(methodGen0.isNative());
      assertTrue(methodGen0.isProtected());
      assertTrue(methodGen0.isPrivate());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isStrictfp());
      assertTrue(methodGen0.isSynchronized());
      assertTrue(methodGen0.isPublic());
      assertTrue(methodGen0.isSynthetic());
      assertTrue(methodGen0.isEnum());
      assertTrue(methodGen0.isAnnotation());
      assertTrue(methodGen0.isTransient());
      assertTrue(methodGen0.isInterface());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals("2v$V`q>qk@", methodGen0.getName());
      assertTrue(methodGen0.isStatic());
      assertEquals((-1), methodGen0.getAccessFlags());
      assertEquals((-1), methodGen0.getModifiers());
      assertEquals("2v$V`q>qk@", methodGen0.getClassName());
      assertTrue(methodGen0.isFinal());
      assertTrue(methodGen0.isVolatile());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(subroutines0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      String string1 = subroutines0.toString();
      assertEquals("---\n{  -1: ifne[154](3) -> null=Subroutine: Local variable is '-1', JSRs are '[]', RET is 'null', Instructions: '[  -1: ifne[154](3) -> null]'. Accessed local variable slots: ''. Recursively (via subsub...routines) accessed local variable slots: ''.}\n---\n", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((byte)6, type0.getType());
      assertEquals("F", type0.getSignature());
      assertEquals(1, type0.getSize());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(methodGen0.isAbstract());
      assertTrue(methodGen0.isNative());
      assertTrue(methodGen0.isProtected());
      assertTrue(methodGen0.isPrivate());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isStrictfp());
      assertTrue(methodGen0.isSynchronized());
      assertTrue(methodGen0.isPublic());
      assertTrue(methodGen0.isSynthetic());
      assertTrue(methodGen0.isEnum());
      assertTrue(methodGen0.isAnnotation());
      assertTrue(methodGen0.isTransient());
      assertTrue(methodGen0.isInterface());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals(0, methodGen0.getMaxStack());
      assertEquals("2v$V`q>qk@", methodGen0.getName());
      assertTrue(methodGen0.isStatic());
      assertEquals((-1), methodGen0.getAccessFlags());
      assertEquals((-1), methodGen0.getModifiers());
      assertEquals("2v$V`q>qk@", methodGen0.getClassName());
      assertTrue(methodGen0.isFinal());
      assertTrue(methodGen0.isVolatile());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      BasicType basicType0 = Type.BOOLEAN;
      assertEquals("Z", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals((byte)4, basicType0.getType());
      assertNotNull(basicType0);
      
      String[] stringArray0 = null;
      String string0 = "wHuPPd#xeeMve-Pb";
      InstructionHandle[] instructionHandleArray0 = null;
      int[] intArray0 = new int[6];
      int int1 = 1;
      InstructionHandle instructionHandle0 = InstructionList.findHandle(instructionHandleArray0, intArray0, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(instructionHandle0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      IFNE iFNE0 = new IFNE(instructionHandle0);
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(iFNE0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNE0);
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(instructionList0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      MethodGen methodGen0 = new MethodGen(int0, basicType0, basicType0.NO_ARGS, stringArray0, string0, string0, instructionList0, constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("Z", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals((byte)4, basicType0.getType());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(methodGen0.isAnnotation());
      assertTrue(methodGen0.isStatic());
      assertTrue(methodGen0.isTransient());
      assertTrue(methodGen0.isFinal());
      assertEquals((-1), methodGen0.getAccessFlags());
      assertTrue(methodGen0.isProtected());
      assertTrue(methodGen0.isInterface());
      assertTrue(methodGen0.isVolatile());
      assertTrue(methodGen0.isStrictfp());
      assertTrue(methodGen0.isNative());
      assertTrue(methodGen0.isAbstract());
      assertTrue(methodGen0.isSynchronized());
      assertEquals("wHuPPd#xeeMve-Pb", methodGen0.getName());
      assertEquals((-1), methodGen0.getModifiers());
      assertTrue(methodGen0.isPrivate());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isSynthetic());
      assertTrue(methodGen0.isEnum());
      assertTrue(methodGen0.isPublic());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals("wHuPPd#xeeMve-Pb", methodGen0.getClassName());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(methodGen0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      Subroutines subroutines0 = new Subroutines(methodGen0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("Z", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals((byte)4, basicType0.getType());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertTrue(methodGen0.isAnnotation());
      assertTrue(methodGen0.isStatic());
      assertTrue(methodGen0.isTransient());
      assertTrue(methodGen0.isFinal());
      assertEquals((-1), methodGen0.getAccessFlags());
      assertTrue(methodGen0.isProtected());
      assertTrue(methodGen0.isInterface());
      assertTrue(methodGen0.isVolatile());
      assertTrue(methodGen0.isStrictfp());
      assertTrue(methodGen0.isNative());
      assertTrue(methodGen0.isAbstract());
      assertTrue(methodGen0.isSynchronized());
      assertEquals("wHuPPd#xeeMve-Pb", methodGen0.getName());
      assertEquals((-1), methodGen0.getModifiers());
      assertTrue(methodGen0.isPrivate());
      assertTrue(methodGen0.isVarArgs());
      assertTrue(methodGen0.isSynthetic());
      assertTrue(methodGen0.isEnum());
      assertTrue(methodGen0.isPublic());
      assertEquals(0, methodGen0.getMaxLocals());
      assertEquals("wHuPPd#xeeMve-Pb", methodGen0.getClassName());
      assertEquals(0, methodGen0.getMaxStack());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(subroutines0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      try { 
        subroutines0.subroutineOf(instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }
}
