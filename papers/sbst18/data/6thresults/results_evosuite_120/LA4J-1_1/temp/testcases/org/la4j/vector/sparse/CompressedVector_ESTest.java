/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:55:59 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 844.12;
      doubleArray0[1] = double0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 844.12}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0[1], doubleArray0[1]).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 844.12}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      int int1 = (-17);
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[7];
      CompressedVector compressedVector0 = new CompressedVector(int0, int1, doubleArray0, intArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, intArray0.length);
      assertEquals((-17), compressedVector0.cardinality());
      assertEquals(Double.NEGATIVE_INFINITY, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(compressedVector0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toRowMatrix();
      assertEquals(5, doubleArray0.length);
      assertEquals(7, intArray0.length);
      assertEquals((-17), compressedVector0.cardinality());
      assertEquals(Double.NEGATIVE_INFINITY, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(cRSMatrix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1.0;
      doubleArray0[2] = double0;
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[0] = doubleArray0[4];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(9, doubleArray0.length);
      assertEquals(57, byteArray0.length);
      assertEquals(9, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(byteArray0);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(57, byteArray0.length);
      assertEquals(9, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(0.3333333333333333, compressedVector1.density(), 0.01);
      assertEquals(9, compressedVector1.length());
      assertEquals(3, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      int int0 = 5;
      compressedVector1.set(int0, doubleArray0[0]);
      assertEquals(9, doubleArray0.length);
      assertEquals(57, byteArray0.length);
      assertEquals(9, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector1.cardinality());
      assertEquals(9, compressedVector1.length());
      assertEquals(0.4444444444444444, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(int0, (double) int0, (Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      int int1 = (-827);
      try { 
        PrivateAccess.callMethod((Class<CompressedVector>) CompressedVector.class, compressedVector0, "remove", (Object) int1, (Class<?>) int.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-1.0);
      doubleArray0[1] = double1;
      double double2 = 1239.0;
      doubleArray0[2] = double2;
      double double3 = (-4322.188);
      doubleArray0[3] = double3;
      double double4 = 508.44;
      doubleArray0[4] = double4;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 1239.0, (-4322.188), 508.44}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(5, doubleArray0.length);
      assertEquals(73, byteArray0.length);
      assertEquals(5, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 1239.0, (-4322.188), 508.44}, doubleArray0, 0.01);
      assertNotNull(byteArray0);
      
      String string0 = "Cardinality should be positive: ";
      int int0 = 4705;
      Object object0 = PrivateAccess.callMethod((Class<CompressedVector>) CompressedVector.class, compressedVector0, "remove", (Object) int0, (Class<?>) int.class);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, (-1.0), 1239.0, (-4322.188), 508.44}, doubleArray0, 0.01);
      assertNull(object0);
      
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertNotNull(decimalFormatSymbols0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols0);
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("Cardinality should be positive: #", decimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-Cardinality should be positive: ", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("Cardinality should be positive: ", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("Cardinality should be positive: #", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertNotNull(decimalFormat0);
      
      int int1 = 0;
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      List<Locale.LanguageRange> list0 = (List<Locale.LanguageRange>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(list0).isEmpty();
      doReturn((Iterator) null).when(list0).iterator();
      Collection<String> collection0 = (Collection<String>) mock(Collection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(collection0).isEmpty();
      // Undeclared exception!
      try { 
        Locale.lookupTag(list0, collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = (-2004);
      try { 
        PrivateAccess.callMethod((Class<CompressedVector>) CompressedVector.class, compressedVector0, "insert", (Object) int0, (Class<?>) int.class, (Object) int0, (Class<?>) int.class, (Object) double0, (Class<?>) double.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = (-130.08138302);
      Double double1 = new Double(double0);
      assertEquals((-130.08138302), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      double double2 = 348.697;
      double double3 = Double.min(double2, double2);
      assertEquals(348.697, double3, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      boolean boolean0 = linkedList0.offer(double1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(double2));
      assertTrue(linkedList0.contains(double0));
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double3, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertFalse(linkedList0.contains(double2));
      assertTrue(linkedList0.contains(double0));
      assertNotNull(compressedVector0);
      
      int int0 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(double3).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(int0, vectorFunction0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertFalse(linkedList0.contains(double2));
      assertTrue(linkedList0.contains(double0));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = 260;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(260, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(260, compressedVector0.length());
      assertEquals(260, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[7];
      intArray0[6] = int0;
      CompressedVector compressedVector0 = new CompressedVector(int0, int0, doubleArray0, intArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, intArray0.length);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1}, intArray0);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(intArray0[6]);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, intArray0.length);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      double double0 = (-1151.7021851305763);
      compressedVector0.setAll(double0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1265.954455);
      doubleArray0[5] = double0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1265.954455), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.1111111111111111, compressedVector1.density(), 0.01);
      assertEquals(9, compressedVector1.length());
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1265.954455), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 267;
      int int1 = 0;
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(int0);
      assertEquals(267, (int)integer0);
      assertNotNull(integer0);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      
      byte byte0 = (byte)0;
      Byte byte1 = Byte.valueOf(byte0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = hashMap0.put(integer0, byte1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(byte2);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)57;
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 3;
      CompressedVector compressedVector0 = CompressedVector.zero(int0, int0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(int0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 16;
      double double0 = 0.0;
      Random random0 = null;
      CompressedVector compressedVector0 = CompressedVector.random(int0, double0, random0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(16, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = 2674;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2674, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      int int1 = 1179;
      double double0 = 0.0;
      double double1 = compressedVector0.getOrElse(int1, double0);
      assertEquals(0.0, double1, 0.01);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2674, compressedVector0.length());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Collection<Byte> collection0 = hashMap0.values();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(collection0);
      
      Double double0 = null;
      byte byte0 = (byte)0;
      Byte byte1 = Byte.valueOf(byte0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = hashMap0.put(double0, byte1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(byte2);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(collection0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertTrue(collection0.contains(byte1));
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      Random random0 = null;
      CompressedVector compressedVector0 = CompressedVector.random(int0, (double) int0, random0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(int0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-2051);
      // Undeclared exception!
      try { 
        CompressedVector.zero(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2051
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFactory<Vector> vectorFactory0 = null;
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      CompressedVector compressedVector0 = new CompressedVector(int0, int0, doubleArray0, intArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, intArray0.length);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 267;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {267.0, 267.0, 267.0, 267.0, 267.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.random(int0, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-176);
      int int1 = 1;
      MockRandom mockRandom0 = new MockRandom(int1);
      assertNotNull(mockRandom0);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(int0, (double) int1, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(int0, doubleArray0[3]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = ".<3f<92_?_jF8IvIQhr";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2328;
      Map<Integer, Integer> map0 = (Map<Integer, Integer>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(map0).entrySet();
      doReturn(0).when(map0).size();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(map0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-1140);
      Map<Integer, Byte> map0 = (Map<Integer, Byte>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(map0).size();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(map0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Collection<Double> collection0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "IZDOe[";
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromArray(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[7];
      CompressedVector compressedVector0 = new CompressedVector(int0, int0, doubleArray0, intArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, intArray0.length);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = null;
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero(vectorProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      int int0 = (-1497);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1497
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-100);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[1];
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(int0, int0, doubleArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -100
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-1621);
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1621
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 8;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int1 = Integer.min(int0, int0);
      assertEquals(8, int1);
      assertTrue(int1 == int0);
      
      CompressedVector compressedVector0 = (CompressedVector)Vector.fromMap(hashMap0, int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertTrue(int0 == int1);
      
      try { 
        PrivateAccess.callMethod((Class<CompressedVector>) CompressedVector.class, compressedVector0, "insert", (Object) int1, (Class<?>) int.class, (Object) int1, (Class<?>) int.class, (Object) int0, (Class<?>) double.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 267;
      CompressedVector compressedVector0 = new CompressedVector(int0);
      assertEquals(267, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(int0, int0);
      assertEquals(267, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Byte byte0 = null;
      Byte byte1 = hashMap0.put(integer0, byte0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(byte1);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Float float0 = new Float((float) int0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = hashMap0.put(integer0, float0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(float1);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 3;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, int1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      int int0 = 807;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(int0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(807, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(0, doubleArray0.length);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1065;
      CompressedVector compressedVector0 = CompressedVector.zero(int0);
      assertEquals(1065, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-4322.188);
      doubleArray0[1] = double0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, (-4322.188)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0[1], doubleArray0[1]).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, (-4322.188)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.subtract((Vector) compressedVector0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(2, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 1;
      int int1 = 471;
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 471.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      int int1 = (-188);
      // Undeclared exception!
      try { 
        CompressedVector.zero(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -188.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-4322.188);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertArrayEquals(new double[] {(-4322.188), (-4322.188)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertArrayEquals(new double[] {(-4322.188), (-4322.188)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1.0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[5] = doubleArray0[3];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(9, compressedVector1.length());
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1.0;
      doubleArray0[2] = double0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = (-1465);
      boolean boolean0 = compressedVector0.nonZeroAt(int0);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = (-130.08138302);
      Double double1 = new Double(double0);
      assertEquals((-130.08138302), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.offer(double1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(double0));
      assertEquals((double)double1, (double)double0, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertTrue(linkedList0.contains(double0));
      assertNotNull(compressedVector0);
      
      int int0 = 0;
      boolean boolean1 = compressedVector0.nonZeroAt(int0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertTrue(linkedList0.contains(double0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = 2674;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2674, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(int0);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2674, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 267;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertArrayEquals(new double[] {267.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int1 = 0;
      byte byte0 = (byte)0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)byte0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(int1, vectorFunction0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {267.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1.0;
      doubleArray0[2] = double0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = (-1465);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0[4]).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(int0, vectorFunction0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = (-130.08138302);
      Double double1 = new Double(double0);
      assertEquals((-130.08138302), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      double double2 = Double.min(double0, double0);
      assertEquals((-130.08138302), double2, 0.01);
      assertEquals(double2, double0, 0.01);
      
      boolean boolean0 = linkedList0.offer(double1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(double1));
      assertEquals(double0, double2, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double1, (double)double2, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertTrue(linkedList0.contains(double1));
      assertNotNull(compressedVector0);
      
      int int0 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(double2).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(int0, vectorFunction0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertTrue(linkedList0.contains(double1));
      assertEquals(double0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = 260;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(260, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = null;
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(int0, vectorFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = (-130.08138302);
      Double double1 = new Double(double0);
      assertEquals((-130.08138302), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.offer(double1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(double0));
      assertEquals((double)double1, (double)double0, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertTrue(linkedList0.contains(double0));
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertTrue(linkedList0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 267;
      CompressedVector compressedVector0 = new CompressedVector(int0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(267, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      double double0 = compressedVector0.infinityNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(267, compressedVector0.length());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (double) int0;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.1111111111111111, compressedVector1.density(), 0.01);
      assertEquals(9, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 267.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      int int1 = 2;
      double double1 = compressedVector1.getOrElse(int1, double0);
      assertEquals(267.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(267, compressedVector0.length());
      assertEquals(0.1111111111111111, compressedVector1.density(), 0.01);
      assertEquals(9, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 267.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(int1 == int0);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1.0;
      doubleArray0[3] = double0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 412.1303271954039;
      doubleArray0[0] = double0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {412.1303271954039, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {412.1303271954039, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      int int0 = 1065;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(int0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1065, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = 0;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 267;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertArrayEquals(new double[] {267.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int1 = (-3572);
      int int2 = 0;
      compressedVector0.swapElements(int1, int2);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertArrayEquals(new double[] {267.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 267;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertArrayEquals(new double[] {267.0, 267.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int1 = 1;
      int int2 = 0;
      compressedVector0.swapElements(int1, int2);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertArrayEquals(new double[] {267.0, 267.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      float float0 = (-1642.76F);
      Float float1 = new Float(float0);
      assertEquals((-1642.76F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = linkedList0.add(float1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(float0));
      assertEquals((float)float1, (float)float0, 0.01F);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(linkedList0.contains(float0));
      assertNotNull(compressedVector0);
      
      int int0 = 746;
      int int1 = (-2336);
      compressedVector0.swapElements(int0, int1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(linkedList0.contains(float0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 267;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertArrayEquals(new double[] {267.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int1 = 0;
      compressedVector0.swapElements(int0, int1);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertArrayEquals(new double[] {267.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 267;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {267.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int1 = (-3572);
      compressedVector0.swapElements(int1, int0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {267.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 267;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {267.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int1 = 0;
      compressedVector0.swapElements(int1, int0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {267.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 8;
      CompressedVector compressedVector0 = new CompressedVector(int0, int0);
      assertEquals(8, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      int int1 = 0;
      compressedVector0.swapElements(int0, int1);
      assertEquals(8, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1426.848122;
      doubleArray0[3] = double0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1426.848122, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = 3;
      compressedVector0.set(int0, doubleArray0[0]);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1426.848122, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1.0;
      doubleArray0[3] = double0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = 0;
      compressedVector0.set(int0, doubleArray0[3]);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[2] = int0;
      CompressedVector compressedVector0 = new CompressedVector(int0, int0, doubleArray0, intArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, intArray0.length);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1, 0, 1, 0, 0, 0, 0}, intArray0);
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.sliceLeft(intArray0[2]);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, intArray0.length);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1, 0, 1, 0, 0, 0, 0}, intArray0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = (-863);
      Integer integer0 = new Integer(int0);
      assertEquals((-863), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 8;
      CompressedVector compressedVector0 = new CompressedVector(int0, int0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(9, byteArray0.length);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = 3;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(int0, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(int0, (double) int0, (Random) mockRandom0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.set(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = (-8054);
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(int0, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = "";
      CompressedVector compressedVector0 = CompressedVector.fromCSV(string0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(int0, int0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      int int0 = (-754);
      Collection<Float> collection0 = (Collection<Float>) mock(Collection.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(collection0).size();
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection(collection0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      int int0 = 8;
      CompressedVector compressedVector0 = new CompressedVector(int0, int0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      int int0 = 8;
      CompressedVector compressedVector0 = new CompressedVector(int0, int0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertNotNull(vectorIterator0);
  }
}
