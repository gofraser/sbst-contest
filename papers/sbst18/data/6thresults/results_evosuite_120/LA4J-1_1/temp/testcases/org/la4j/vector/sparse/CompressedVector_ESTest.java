/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 21:30:32 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1011.72417);
      doubleArray0[0] = double0;
      double double1 = (-1356.3050793865);
      doubleArray0[1] = double1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.infinityNorm();
      Float float0 = new Float(doubleArray0[1]);
      compressedVector0.equals((Object) float0);
      int int0 = 1;
      double double2 = 2248.0;
      int[] intArray0 = new int[2];
      int int1 = (-3012);
      intArray0[0] = int1;
      int int2 = 2;
      intArray0[1] = int2;
      PrivateAccess.setVariable((Class<CompressedVector>) CompressedVector.class, compressedVector0, "indices", (Object) intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(double2).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(int0, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(int0, (double) int0, (Random) mockRandom0);
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = new CompressedVector(int0, int0);
      compressedVector1.subtract((Vector) compressedVector0);
      int int1 = 0;
      int int2 = 534;
      SparseVector.zero(int1, int2);
      double double0 = 0.0;
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      int int1 = (-3197);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int0;
      double double0 = 1.0;
      doubleArray0[5] = double0;
      doubleArray0[6] = (double) int0;
      int[] intArray0 = new int[1];
      intArray0[0] = int1;
      CompressedVector compressedVector0 = new CompressedVector(int0, int1, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.toBinary();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 4314;
      int int1 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(int0, int1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int1;
      doubleArray0[2] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      compressedVector0.blank();
      int int2 = 1906;
      compressedVector0.getOrElse(int2, doubleArray0[1]);
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int1;
      doubleArray0[7] = (double) int0;
      doubleArray0[2] = (double) int1;
      byte byte0 = (byte)84;
      Byte byte1 = new Byte(byte0);
      VectorOperation<Byte> vectorOperation0 = (VectorOperation<Byte>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn(byte1).when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      compressedVector0.apply(vectorOperation0);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.copyOfLength(int0);
      String string0 = "";
      CompressedVector compressedVector2 = CompressedVector.fromCSV(string0);
      compressedVector2.blank();
      double double0 = 0.0;
      compressedVector2.add(double0);
      compressedVector0.setAll(doubleArray0[2]);
      double double1 = 1.0;
      compressedVector0.setAll(double1);
      double double2 = 3503.54904;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double2).when(vectorAccumulator0).accumulate();
      compressedVector2.foldNonZero(vectorAccumulator0);
      compressedVector0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.toDiagonalMatrix();
      compressedVector1.each(vectorProcedure0);
      compressedVector1.nonZeroAt(int1);
      compressedVector2.setAll(int2);
      compressedVector1.iterator();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.copy();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      short short0 = (short)0;
      Short short1 = new Short(short0);
      linkedList0.add(short1);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      int int0 = 0;
      double double0 = 1906.0;
      ((CompressedVector) sparseVector0).set(int0, double0);
      compressedVector0.iterator();
      compressedVector0.toBinary();
      int int1 = 32;
      CompressedVector compressedVector1 = CompressedVector.zero(int1);
      int int2 = (-1236);
      compressedVector1.swapElements(short0, int2);
      int int3 = 1052;
      double double1 = 1170.73;
      // Undeclared exception!
      try { 
        sparseVector0.getOrElse(int3, double1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1052' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 4314;
      int int1 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(int0, int1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      compressedVector0.blank();
      int int2 = 1906;
      compressedVector0.getOrElse(int2, doubleArray0[1]);
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int1;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int1;
      byte byte0 = (byte)82;
      Byte byte1 = new Byte(byte0);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.copyOfLength(int0);
      String string0 = "";
      CompressedVector compressedVector2 = CompressedVector.fromCSV(string0);
      compressedVector2.blank();
      double double0 = 0.0;
      compressedVector2.add(double0);
      compressedVector0.setAll(doubleArray0[2]);
      double double1 = 1.0;
      compressedVector0.setAll(double1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0[2]).when(vectorAccumulator0).accumulate();
      compressedVector2.foldNonZero(vectorAccumulator0);
      compressedVector0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.toDiagonalMatrix();
      compressedVector1.each(vectorProcedure0);
      compressedVector1.nonZeroAt(int1);
      compressedVector2.setAll(int2);
      compressedVector1.nonZeroAt(int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 4314;
      int int1 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(int0, int1);
      assertEquals(4314, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(compressedVector0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blank();
      assertEquals(4314, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4314, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(compressedVector1);
      
      int int2 = 1906;
      double double0 = compressedVector0.getOrElse(int2, doubleArray0[1]);
      assertEquals(4314, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(9, doubleArray0.length);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4314.0, double0, 0.01);
      assertArrayEquals(new double[] {4314.0, 4314.0, 4314.0, 4314.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int1;
      double double1 = 1614.0;
      compressedVector0.setAll(double1);
      assertEquals(4314, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4314, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotEquals(double1, double0, 0.01);
      
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int1;
      byte byte0 = (byte)43;
      Byte byte1 = new Byte(byte0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)43, (byte)byte1);
      
      VectorOperation<Byte> vectorOperation0 = (VectorOperation<Byte>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn(byte1).when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      Byte byte2 = compressedVector0.apply(vectorOperation0);
      assertEquals(4314, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4314, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(byte1.equals((Object)byte0));
      assertNull(byte2);
      
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.6666666666666666, compressedVector2.density(), 0.01);
      assertEquals(9, compressedVector2.length());
      assertEquals(6, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertEquals(9, doubleArray0.length);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertNotNull(compressedVector2);
      assertArrayEquals(new double[] {4314.0, 4314.0, 4314.0, 4314.0, 4314.0, 0.0, 0.0, 4314.0, 0.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.copyOfLength(int0);
      assertEquals(4314, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4314, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector3.density(), 0.01);
      assertEquals(4314, compressedVector3.cardinality());
      assertEquals(4314, compressedVector3.length());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertNotNull(compressedVector3);
      
      String string0 = "";
      CompressedVector compressedVector4 = CompressedVector.fromCSV(string0);
      assertEquals(0, compressedVector4.length());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertEquals(0, compressedVector4.cardinality());
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector3);
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertNotNull(compressedVector4);
      
      CompressedVector compressedVector5 = (CompressedVector)compressedVector4.blank();
      assertEquals(0, compressedVector4.length());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertEquals(0, compressedVector4.cardinality());
      assertEquals(Double.NaN, compressedVector5.density(), 0.01);
      assertEquals(0, compressedVector5.cardinality());
      assertEquals(0, compressedVector5.length());
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector5);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector5, compressedVector1);
      assertNotSame(compressedVector5, compressedVector2);
      assertNotSame(compressedVector5, compressedVector3);
      assertNotSame(compressedVector5, compressedVector4);
      assertNotSame(compressedVector5, compressedVector0);
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertFalse(compressedVector5.equals((Object)compressedVector1));
      assertFalse(compressedVector5.equals((Object)compressedVector2));
      assertFalse(compressedVector5.equals((Object)compressedVector3));
      assertTrue(compressedVector5.equals((Object)compressedVector4));
      assertFalse(compressedVector5.equals((Object)compressedVector0));
      assertNotNull(compressedVector5);
      
      double double2 = 0.0;
      BasicVector basicVector0 = (BasicVector)compressedVector4.add(double2);
      assertEquals(0, compressedVector4.length());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertEquals(0, compressedVector4.cardinality());
      assertEquals(0, basicVector0.length());
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector5);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector3);
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertTrue(compressedVector4.equals((Object)compressedVector5));
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotNull(basicVector0);
      
      compressedVector0.setAll(doubleArray0[2]);
      assertEquals(4314, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4314, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector5);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector4);
      assertEquals(9, doubleArray0.length);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector5));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector4));
      assertArrayEquals(new double[] {4314.0, 4314.0, 4314.0, 4314.0, 4314.0, 0.0, 0.0, 4314.0, 0.0}, doubleArray0, 0.01);
      
      double double3 = 1.0;
      // Undeclared exception!
      compressedVector0.setAll(double3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CompressedVector compressedVector0 = new CompressedVector(int0, int1);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      
      int int2 = (-2482);
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.divide(int1);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertNotNull(compressedVector2);
      
      double double0 = 2575.9;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(int2, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1011.72417);
      doubleArray0[0] = double0;
      double double1 = (-1356.3050793865);
      doubleArray0[1] = double1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
      
      double double2 = compressedVector0.infinityNorm();
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1356.3050793865, double2, 0.01);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
      
      Float float0 = new Float(doubleArray0[1]);
      assertEquals(2, doubleArray0.length);
      assertNotNull(float0);
      assertEquals((-1356.305F), (float)float0, 0.01F);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
      
      float float1 = (-1.0F);
      boolean boolean0 = Float.isFinite(float1);
      assertTrue(boolean0);
      
      boolean boolean1 = compressedVector0.equals((Object) float0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
      
      int int0 = 1;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(int0, vectorFunction0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(41, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
      
      double double3 = 730.385793;
      compressedVector0.setAll(double3);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double double0 = (-1011.72417);
      doubleArray0[0] = double0;
      double double1 = (-1356.3050793865);
      doubleArray0[1] = double1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(12, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(12, doubleArray0.length);
      assertNotNull(compressedVector0);
      
      double double2 = compressedVector0.infinityNorm();
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(12, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(12, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1356.3050793865, double2, 0.01);
      
      Float float0 = new Float(doubleArray0[1]);
      assertEquals(12, doubleArray0.length);
      assertNotNull(float0);
      assertEquals((-1356.305F), (float)float0, 0.01F);
      
      int int0 = 1;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(int0, vectorFunction0);
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(12, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(12, doubleArray0.length);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(12, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(12, doubleArray0.length);
      assertEquals(41, byteArray0.length);
      assertNotNull(byteArray0);
      
      double double3 = 730.385793;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1359;
      HashMap<Integer, Number> hashMap0 = new HashMap<Integer, Number>(int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1359, (int)integer0);
      
      Number number0 = hashMap0.put(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(integer0.equals((Object)int0));
      assertNull(number0);
      
      int int1 = 1943;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, int1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1943, compressedVector0.length());
      assertEquals(5.14668039114771E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)39;
      byteArray0[0] = byte0;
      byte byte1 = (byte)67;
      byteArray0[1] = byte1;
      byte byte2 = (byte)64;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)6;
      byteArray0[4] = byte4;
      byte byte5 = (byte)16;
      byteArray0[5] = byte5;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = 2266;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2266, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      double double0 = compressedVector0.infinityNorm();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2266, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, double0, 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2266, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2266, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      
      VectorFactory<Vector> vectorFactory1 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory1).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2266, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertSame(compressedVector0, compressedVector1);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = (-129);
      Double double0 = new Double(int0);
      assertNotNull(double0);
      assertEquals((-129.0), (double)double0, 0.01);
      
      double double1 = 0.0;
      double double2 = Double.sum(double1, double1);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      boolean boolean0 = linkedList0.add(double0);
      assertEquals(1, linkedList0.size());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(double0));
      assertFalse(linkedList0.contains(double2));
      
      compressedVector0.swapElements(int0, int0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertTrue(linkedList0.contains(double0));
      assertFalse(linkedList0.contains(double2));
      
      double double3 = 0.0;
      Double double4 = new Double(double3);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      
      boolean boolean1 = linkedList0.add(double4);
      assertEquals(2, linkedList0.size());
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(double2));
      
      double double5 = 324.08754;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(double5).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(int0, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      Iterator<Byte> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      int int0 = 0;
      boolean boolean0 = compressedVector0.nonZeroAt(int0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
      
      int int1 = 1148;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(int1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1148, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(int1 == int0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      double[] doubleArray0 = new double[3];
      double double0 = (-465.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(3, compressedVector2.length());
      assertEquals(2, compressedVector2.cardinality());
      assertEquals(0.6666666666666666, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertEquals(3, doubleArray0.length);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertNotNull(compressedVector2);
      assertArrayEquals(new double[] {(-465.0), 0.0, 1148.0}, doubleArray0, 0.01);
      
      int int2 = 634;
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.copyOfLength(int2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(634, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertNotNull(compressedVector3);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int3 = 3019;
      Integer integer0 = new Integer(int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3019, (int)integer0);
      
      Double double1 = hashMap0.put(integer0, (Double) doubleArray0[2]);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(3, doubleArray0.length);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int0));
      assertNull(double1);
      assertArrayEquals(new double[] {(-465.0), 0.0, 1148.0}, doubleArray0, 0.01);
      
      int int4 = 1;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = (-1856);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1856), (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertEquals(1, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(integer0));
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertTrue(linkedList0.contains(integer0));
      assertTrue(linkedList1.contains(integer0));
      
      boolean boolean1 = linkedList1.add(integer0);
      assertEquals(1, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(integer0));
      assertTrue(linkedList1.contains(integer0));
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(compressedVector0);
      assertTrue(linkedList0.contains(integer0));
      assertTrue(linkedList1.contains(integer0));
      
      Spliterator<Double> spliterator0 = compressedVector0.spliterator();
      assertEquals(1, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(spliterator0);
      assertTrue(linkedList0.contains(integer0));
      assertTrue(linkedList1.contains(integer0));
      
      Integer integer1 = null;
      boolean boolean2 = linkedList1.add(integer1);
      assertEquals(1, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(integer0));
      assertTrue(linkedList1.contains(integer0));
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1856' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorVectorOperation<Integer> vectorVectorOperation0 = (VectorVectorOperation<Integer>) mock(VectorVectorOperation.class, new ViolatedAssumptionAnswer());
      int int0 = 1943;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {1943.0, 1943.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1943.0, 1943.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(int0, int0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      int int1 = 2194;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromArray(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1011.72417);
      doubleArray0[0] = double0;
      double double1 = (-1356.3050793865);
      doubleArray0[1] = double1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
      
      double double2 = compressedVector0.infinityNorm();
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1356.3050793865, double2, 0.01);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
      
      Float float0 = new Float(doubleArray0[1]);
      assertEquals(2, doubleArray0.length);
      assertNotNull(float0);
      assertEquals((-1356.305F), (float)float0, 0.01F);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
      
      boolean boolean0 = compressedVector0.equals((Object) float0);
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
      
      int int0 = 1;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(int0, vectorFunction0);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(25, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
      
      double double3 = 730.385793;
      compressedVector0.setAll(double3);
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertArrayEquals(new double[] {(-1011.72417), (-1356.3050793865)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      int int0 = 0;
      Object object0 = PrivateAccess.callMethod((Class<CompressedVector>) CompressedVector.class, compressedVector0, "remove", (Object) int0, (Class<?>) int.class);
      assertEquals(Double.NEGATIVE_INFINITY, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals((-1), compressedVector0.cardinality());
      assertNull(object0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toRowMatrix();
      assertEquals(Double.NEGATIVE_INFINITY, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals((-1), compressedVector0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(Double.NEGATIVE_INFINITY, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals((-1), compressedVector0.cardinality());
      assertNotNull(vectorIterator0);
      
      int int1 = 0;
      CompressedVector compressedVector1 = CompressedVector.zero(int1);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.blankOfLength(int1);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertNotNull(compressedVector2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2153;
      int int1 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(int0, int1);
      assertEquals(2153, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(compressedVector0);
      
      double double0 = 1906.0;
      compressedVector0.setAll(double0);
      assertEquals(2153, compressedVector0.length());
      assertEquals(2153, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double1 = compressedVector0.manhattanNorm();
      assertEquals(2153, compressedVector0.length());
      assertEquals(2153, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4103618.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte byte0 = (byte)0;
      Byte byte1 = new Byte(byte0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byte byte2 = (byte) (-38);
      boolean boolean0 = linkedList0.add(byte1);
      assertEquals(1, linkedList0.size());
      assertFalse(byte0 == byte2);
      assertFalse(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(byte0));
      assertFalse(linkedList0.contains(byte2));
      
      byte byte3 = (byte) (-22);
      int int0 = Byte.compare(byte3, byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte3);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte2);
      assertEquals((-22), int0);
      
      byte byte4 = (byte)1;
      byte byte5 = (byte)0;
      int int1 = Byte.compare(byte4, byte5);
      assertFalse(byte4 == byte3);
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte0);
      assertFalse(byte4 == byte5);
      assertFalse(byte5 == byte3);
      assertFalse(byte5 == byte2);
      assertFalse(byte5 == byte4);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      byte byte6 = (byte)7;
      int int2 = Byte.compare(byte2, byte6);
      assertFalse(byte2 == byte4);
      assertFalse(byte2 == byte5);
      assertFalse(byte2 == byte6);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte0);
      assertFalse(byte6 == byte3);
      assertFalse(byte6 == byte5);
      assertFalse(byte6 == byte2);
      assertFalse(byte6 == byte4);
      assertFalse(byte6 == byte0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-45), int2);
      
      boolean boolean1 = linkedList0.add(byte1);
      assertEquals(2, linkedList0.size());
      assertFalse(byte0 == byte6);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte4);
      assertFalse(byte0 == byte3);
      assertTrue(byte1.equals((Object)byte5));
      assertFalse(byte1.equals((Object)byte3));
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(byte1.equals((Object)byte4));
      assertFalse(byte1.equals((Object)byte6));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(byte0));
      assertFalse(linkedList0.contains(byte2));
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertTrue(linkedList0.contains(byte0));
      assertFalse(linkedList0.contains(byte2));
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertTrue(linkedList0.contains(byte0));
      assertFalse(linkedList0.contains(byte2));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1692;
      int int1 = 0;
      CompressedVector compressedVector0 = new CompressedVector(int0, int1);
      assertEquals(1692, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(compressedVector0);
      
      int int2 = 0;
      double double0 = compressedVector0.get(int2);
      assertEquals(1692, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertEquals(0.0, double0, 0.01);
      
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      boolean boolean0 = compressedVector0.is(vectorPredicate0);
      assertEquals(1692, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(boolean0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.sliceLeft(int1);
      assertEquals(1692, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(1692, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotNull(vectorIterator0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(3, compressedVector2.cardinality());
      assertEquals(6, compressedVector2.length());
      assertEquals(0.5, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertEquals(6, doubleArray0.length);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertNotNull(compressedVector2);
      assertArrayEquals(new double[] {1692.0, 0.0, 0.0, 1692.0, 1692.0, 0.0}, doubleArray0, 0.01);
      
      BasicVector basicVector0 = (BasicVector)compressedVector2.subtract(double0);
      assertEquals(3, compressedVector2.cardinality());
      assertEquals(6, compressedVector2.length());
      assertEquals(0.5, compressedVector2.density(), 0.01);
      assertEquals(6, basicVector0.length());
      assertEquals(1692, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertEquals(6, doubleArray0.length);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(int2 == int0);
      assertNotNull(basicVector0);
      assertArrayEquals(new double[] {1692.0, 0.0, 0.0, 1692.0, 1692.0, 0.0}, doubleArray0, 0.01);
      
      int int3 = (-3413);
      int int4 = 87;
      // Undeclared exception!
      try { 
        compressedVector2.sliceLeft(int4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '6' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector0.foldNonZero(vectorAccumulator0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = (-2812);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2812), (int)integer0);
      
      Long long0 = new Long(int0);
      assertNotNull(long0);
      assertEquals((-2812L), (long)long0);
      
      String string0 = "";
      Long long1 = Long.getLong(string0);
      assertNull(long1);
      
      int int1 = Long.compareUnsigned(int0, int0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Long long2 = hashMap0.put(integer0, long0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNull(long2);
      
      int int2 = (-144);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = (-567);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-567), (int)integer0);
      
      double double0 = 3859.0;
      Double double1 = new Double(double0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3859.0, (double)double1, 0.01);
      
      Double double2 = hashMap0.put(integer0, double1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(integer0.equals((Object)int0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNull(double2);
      
      Integer integer1 = null;
      double double3 = 1.0;
      double double4 = (-1.0);
      Double double5 = new Double(double4);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      assertEquals((-1.0), (double)double5, 0.01);
      
      int int1 = 1;
      Integer integer2 = new Integer(int1);
      assertFalse(int1 == int0);
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      Double double6 = new Double(double4);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotNull(double6);
      assertEquals((-1.0), (double)double6, 0.01);
      
      Double double7 = hashMap0.put(integer2, double6);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertFalse(int1 == int0);
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNull(double7);
      
      Double double8 = hashMap0.put(integer1, double5);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double6, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNull(double8);
      
      Double double9 = new Double(double3);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals((double)double9, (double)double5, 0.01);
      assertNotEquals((double)double9, (double)double4, 0.01);
      assertNotEquals((double)double9, (double)double6, 0.01);
      assertEquals((double)double9, (double)double3, 0.01);
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertNotEquals((double)double9, (double)double0, 0.01);
      assertNotNull(double9);
      assertEquals(1.0, (double)double9, 0.01);
      
      double double10 = 92.89442;
      boolean boolean0 = Double.isFinite(double10);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertTrue(boolean0);
      
      double double11 = 1.0;
      double double12 = Double.max(double3, double11);
      assertEquals(double11, double3, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(double12, double11, 0.01);
      assertEquals(double12, double3, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double10, 0.01);
      assertEquals(double3, double11, 0.01);
      assertEquals(1.0, double12, 0.01);
      
      double double13 = 0.0;
      double double14 = 0.0;
      double double15 = 0.0;
      double double16 = Double.min(double14, double15);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertEquals(double14, double13, 0.01);
      assertEquals(double14, double15, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertEquals(double15, double14, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertEquals(double15, double13, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertEquals(double16, double13, 0.01);
      assertEquals(double16, double15, 0.01);
      assertNotEquals(double16, double11, 0.01);
      assertNotEquals(double16, double0, 0.01);
      assertNotEquals(double16, double10, 0.01);
      assertNotEquals(double16, double3, 0.01);
      assertEquals(double16, double14, 0.01);
      assertNotEquals(double16, double4, 0.01);
      assertNotEquals(double16, double12, 0.01);
      assertEquals(0.0, double16, 0.01);
      
      double double17 = Double.min(double3, double13);
      assertEquals(double13, double14, 0.01);
      assertEquals(double13, double16, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertEquals(double13, double15, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double3, double14, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double16, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double10, 0.01);
      assertNotEquals(double3, double13, 0.01);
      assertEquals(double3, double12, 0.01);
      assertEquals(double3, double11, 0.01);
      assertNotEquals(double3, double15, 0.01);
      assertNotEquals(double17, double10, 0.01);
      assertNotEquals(double17, double4, 0.01);
      assertNotEquals(double17, double3, 0.01);
      assertNotEquals(double17, double12, 0.01);
      assertEquals(double17, double16, 0.01);
      assertEquals(double17, double14, 0.01);
      assertNotEquals(double17, double11, 0.01);
      assertEquals(double17, double15, 0.01);
      assertNotEquals(double17, double0, 0.01);
      assertEquals(double17, double13, 0.01);
      assertEquals(0.0, double17, 0.01);
      
      Double double18 = hashMap0.put(integer1, double9);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNotEquals(double3, double14, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double16, 0.01);
      assertNotEquals(double3, double17, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double10, 0.01);
      assertNotEquals(double3, double13, 0.01);
      assertEquals(double3, double12, 0.01);
      assertEquals(double3, double11, 0.01);
      assertNotEquals(double3, double15, 0.01);
      assertNotEquals((double)double18, (double)double9, 0.01);
      assertNotEquals((double)double18, (double)double17, 0.01);
      assertEquals((double)double18, (double)double4, 0.01);
      assertNotEquals((double)double18, (double)double13, 0.01);
      assertNotEquals((double)double18, (double)double12, 0.01);
      assertNotEquals((double)double18, (double)double3, 0.01);
      assertNotEquals((double)double18, (double)double15, 0.01);
      assertNotEquals((double)double18, (double)double11, 0.01);
      assertNotEquals((double)double18, (double)double16, 0.01);
      assertNotEquals((double)double18, (double)double14, 0.01);
      assertEquals((double)double18, (double)double6, 0.01);
      assertNotEquals((double)double18, (double)double1, 0.01);
      assertNotEquals((double)double18, (double)double0, 0.01);
      assertNotEquals((double)double18, (double)double10, 0.01);
      assertNotEquals((double)double9, (double)double5, 0.01);
      assertNotEquals((double)double9, (double)double6, 0.01);
      assertEquals((double)double9, (double)double12, 0.01);
      assertEquals((double)double9, (double)double11, 0.01);
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertNotEquals((double)double9, (double)double17, 0.01);
      assertNotEquals((double)double9, (double)double10, 0.01);
      assertNotEquals((double)double9, (double)double0, 0.01);
      assertNotEquals((double)double9, (double)double13, 0.01);
      assertNotEquals((double)double9, (double)double15, 0.01);
      assertNotEquals((double)double9, (double)double14, 0.01);
      assertNotEquals((double)double9, (double)double4, 0.01);
      assertNotEquals((double)double9, (double)double16, 0.01);
      assertEquals((double)double9, (double)double3, 0.01);
      assertNotNull(double18);
      assertEquals((-1.0), (double)double18, 0.01);
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1875;
      CompressedVector compressedVector0 = CompressedVector.zero(int0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1875, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      int int1 = 1;
      double double0 = (-6864.909946698795);
      double double1 = compressedVector0.getOrElse(int1, double0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1875, compressedVector0.length());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(double1, double0, 0.01);
      assertEquals((-6864.909946698795), double1, 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1875, compressedVector0.length());
      assertEquals(1875, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(int0 == int1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1875, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(int0 == int1);
      assertNotNull(vectorIterator0);
      
      String string0 = "h6GnIt\\~\"vefgf-r";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 2457.4832;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 3439.26684;
      doubleArray0[2] = double2;
      double double3 = 2609.43;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(5, doubleArray0.length);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {2457.4832, 0.0, 3439.26684, 2609.43, 0.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = null;
      // Undeclared exception!
      try { 
        compressedVector0.each(vectorProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1493.26484);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 100.0;
      doubleArray0[3] = double3;
      double double4 = 1312.053004365553;
      doubleArray0[4] = double4;
      double double5 = (-1.0);
      doubleArray0[5] = double5;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, doubleArray0.length);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {(-1493.26484), 0.0, 0.0, 100.0, 1312.053004365553, (-1.0)}, doubleArray0, 0.01);
      
      int int0 = 0;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(int0);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(6, doubleArray0.length);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {(-1493.26484), 0.0, 0.0, 100.0, 1312.053004365553, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 4639;
      double double0 = 1.0;
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) int0);
      assertNotNull(intStream0);
      
      int int1 = mockRandom0.nextInt(int0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CompressedVector compressedVector0 = CompressedVector.random(int0, double0, (Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4639, compressedVector0.length());
      assertEquals(4639, compressedVector0.cardinality());
      assertFalse(int0 == int1);
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertNotNull(decimalFormat0);
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getInstance();
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertNotSame(decimalFormat1, decimalFormat0);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertNotNull(decimalFormat1);
      
      String string0 = compressedVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4639, compressedVector0.length());
      assertEquals(4639, compressedVector0.cardinality());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertNotSame(decimalFormat0, decimalFormat1);
      assertFalse(int0 == int1);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertNotNull(string0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4639, compressedVector0.length());
      assertEquals(4639, compressedVector0.cardinality());
      assertEquals(74233, byteArray0.length);
      assertFalse(int0 == int1);
      assertNotNull(byteArray0);
      
      int int2 = 861;
      compressedVector0.set(int2, int1);
      assertEquals(0.999784436300927, compressedVector0.density(), 0.01);
      assertEquals(4639, compressedVector0.length());
      assertEquals(4638, compressedVector0.cardinality());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      int int0 = (-4795);
      String string0 = compressedVector0.toString();
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(linkedList0.contains(int0));
      
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -4795
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, doubleArray0.length);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      int int0 = 0;
      int int1 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(int0, int1, int0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      CompressedVector compressedVector1 = (CompressedVector)ooPlaceVectorByMatrixMultiplication0.apply((SparseVector) compressedVector0, rowMajorSparseMatrix0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1, doubleArray0.length);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.subtract((Vector) compressedVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 1 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, doubleArray0.length);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = 0;
      double double0 = 23.357366695;
      // Undeclared exception!
      try { 
        compressedVector0.set(int0, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      int int1 = 944;
      // Undeclared exception!
      try { 
        CompressedVector.zero(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 944.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1541);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int0;
      double double0 = (-4066.0);
      doubleArray0[5] = double0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int1;
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      intArray0[1] = int1;
      CompressedVector compressedVector0 = new CompressedVector(int0, int1, doubleArray0, intArray0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NEGATIVE_INFINITY, compressedVector0.density(), 0.01);
      assertEquals((-1541), compressedVector0.cardinality());
      assertEquals(9, doubleArray0.length);
      assertEquals(2, intArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1541.0), (-1541.0), 0.0, (-4066.0), 0.0, 0.0, (-1541.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, (-1541)}, intArray0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(intArray0[1], vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Collection<Number> collection0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(int0, int0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      double double0 = 1.0;
      compressedVector0.setAll(double0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      int int1 = 2661;
      int int2 = 754;
      CompressedVector compressedVector1 = CompressedVector.zero(int2);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(754, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      int int3 = (-1108);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(int1, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      short short0 = (short)0;
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      boolean boolean0 = linkedList0.add(short1);
      assertEquals(1, linkedList0.size());
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(short0));
      
      int int0 = 2312;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(int0, vectorFunction0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertTrue(linkedList0.contains(short0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 4;
      int int1 = 1;
      CompressedVector compressedVector0 = new CompressedVector(int0, int1);
      assertEquals(4, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(compressedVector0);
      
      int int2 = (-350);
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -350
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1711);
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1711.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)80;
      byteArray0[0] = byte0;
      byte byte1 = (byte)112;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-2474);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      double double0 = 0.0;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int0;
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      int int1 = (-2548);
      intArray0[3] = int1;
      intArray0[4] = int0;
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(int0, int0, doubleArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2474
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-1609);
      int int1 = 848;
      // Undeclared exception!
      try { 
        CompressedVector.zero(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1609
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector1 = CompressedVector.random(int0, (double) int0, (Random) mockRandom0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toRowMatrix();
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertNotNull(cRSMatrix0);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertNotNull(vectorIterator0);
      
      LinkedList<Number> linkedList0 = new LinkedList<Number>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector2 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertNotNull(compressedVector2);
      
      double double0 = 0.0;
      compressedVector2.setAll(double0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      
      int int0 = 0;
      CompressedVector compressedVector3 = CompressedVector.zero(int0);
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertEquals(0, compressedVector3.length());
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertNotNull(compressedVector3);
      
      CompressedVector compressedVector4 = (CompressedVector)compressedVector3.blankOfLength(int0);
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertEquals(0, compressedVector3.length());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertEquals(0, compressedVector4.cardinality());
      assertEquals(0, compressedVector4.length());
      assertNotSame(compressedVector3, compressedVector4);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector0);
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertTrue(compressedVector4.equals((Object)compressedVector3));
      assertTrue(compressedVector4.equals((Object)compressedVector1));
      assertTrue(compressedVector4.equals((Object)compressedVector0));
      assertTrue(compressedVector4.equals((Object)compressedVector2));
      assertNotNull(compressedVector4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = null;
      int int0 = (-1860);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1860), (int)integer0);
      
      Float float0 = new Float((double) int0);
      assertNotNull(float0);
      assertEquals((-1860.0F), (float)float0, 0.01F);
      
      Float float1 = hashMap0.put(integer0, float0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(integer0.equals((Object)int0));
      assertNull(float1);
      
      int int1 = 0;
      Integer integer1 = new Integer(int1);
      assertFalse(int1 == int0);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = Integer.getInteger(string0, integer1);
      assertFalse(int1 == int0);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Float float2 = new Float((double) int1);
      assertFalse(int1 == int0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      Float float3 = hashMap0.put(integer2, float2);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(int1 == int0);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNull(float3);
      
      int int2 = (-1674);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1;
      CompressedVector compressedVector0 = CompressedVector.zero(int0);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      String string0 = null;
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1;
      CompressedVector compressedVector0 = CompressedVector.zero(int0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      int int1 = 1307;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(int1);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1307, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 981;
      CompressedVector compressedVector0 = CompressedVector.zero(int0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(981, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      String string0 = compressedVector0.toMatrixMarket();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(981, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(string0);
      assertEquals("%%MatrixMarket vector coordinate real\n981 0\n", string0);
      
      SparseVector sparseVector0 = SparseVector.fromMatrixMarket(string0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(981, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(981, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(sparseVector0, compressedVector0);
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertNotNull(sparseVector0);
      
      String string1 = "kH>hMS&$";
      // Undeclared exception!
      try { 
        SparseVector.fromCSV(string1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-1216);
      // Undeclared exception!
      try { 
        CompressedVector.zero(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1216
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      double double0 = 0.0;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      int[] intArray0 = new int[0];
      CompressedVector compressedVector0 = new CompressedVector(int0, int0, doubleArray0, intArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(5, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = "B@-Qi2[JEB3{4aR";
      short short0 = (short)0;
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      AbstractMap.SimpleImmutableEntry<String, Short> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Short>(string0, short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      double double0 = 1399.4;
      Double double1 = new Double(double0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1399.4, (double)double1, 0.01);
      
      Double double2 = hashMap0.getOrDefault(abstractMap_SimpleImmutableEntry0, double1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(short1.equals((Object)short0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(1399.4, (double)double2, 0.01);
      
      int int0 = (-1070);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1070
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[4];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      CompressedVector compressedVector0 = new CompressedVector(int0, int0, doubleArray0, intArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0, doubleArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      
      String string0 = compressedVector0.toCSV();
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0, doubleArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(string0);
      assertEquals("0.000", string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      
      double double0 = 1.0;
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(int0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      double double0 = (-713.877606);
      compressedVector0.setAll(double0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      int int1 = (-1758);
      int int2 = 2517;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = double0;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1, doubleArray0.length);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {(-713.877606)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(int0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      double double0 = compressedVector0.sum();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(0.0, double0, 0.01);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector1 = (CompressedVector)Vector.fromMap(hashMap0, int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.copyOfLength(int0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertNotNull(compressedVector2);
      
      VectorProcedure vectorProcedure0 = null;
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      
      CompressedVector compressedVector3 = CompressedVector.zero(int0);
      assertEquals(0, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertNotNull(compressedVector3);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      int int1 = 0;
      boolean boolean0 = compressedVector0.nonZeroAt(int1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(int0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      int int1 = 938;
      double double0 = 328.2957162;
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(int1, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '938' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "Dx(aX.&PzKW}x!Q";
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(int0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = null;
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = (-877);
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -877
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 0;
      double double0 = (-4108.5);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(int0, double0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 851;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      CompressedVector compressedVector0 = CompressedVector.random(int0, double0, (Random) mockRandom0);
      assertEquals(851, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(851, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(vectorIterator0);
      
      org.evosuite.runtime.Random.setNextRandom(int0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(6, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      assertEquals(6, doubleArray0.length);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertNotNull(sparseVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = 4220;
      SparseVector sparseVector1 = SparseVector.random(int1, doubleArray0[1], (Random) mockRandom0);
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(4220, sparseVector1.length());
      assertEquals(0, sparseVector1.cardinality());
      assertNotSame(sparseVector1, compressedVector0);
      assertNotSame(sparseVector1, sparseVector0);
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
      assertFalse(sparseVector1.equals((Object)compressedVector0));
      assertFalse(sparseVector1.equals((Object)sparseVector0));
      assertNotNull(sparseVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = 4314.0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int0;
      PrivateAccess.setVariable((Class<CompressedVector>) CompressedVector.class, compressedVector0, "values", (Object) doubleArray0);
      assertEquals(851, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, sparseVector1);
      assertEquals(6, doubleArray0.length);
      assertFalse(int0 == int1);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)sparseVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 4314.0, 0.0, 851.0}, doubleArray0, 0.01);
      
      int int2 = 7;
      Object object0 = PrivateAccess.callMethod((Class<CompressedVector>) CompressedVector.class, compressedVector0, "insert", (Object) int2, (Class<?>) int.class, (Object) int2, (Class<?>) int.class, (Object) double0, (Class<?>) double.class);
      assertEquals(851, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, sparseVector1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)sparseVector1));
      assertNull(object0);
      
      int[] intArray0 = null;
      PrivateAccess.setVariable((Class<CompressedVector>) CompressedVector.class, compressedVector0, "indices", (Object) intArray0);
      assertEquals(851, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, sparseVector1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)sparseVector1));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 738;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      long long0 = 1481L;
      // Undeclared exception!
      try { 
        CompressedVector.random(int0, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toRowMatrix();
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(vectorIterator0);
      
      LinkedList<Number> linkedList0 = new LinkedList<Number>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        linkedList0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[4] = double0;
      int[] intArray0 = new int[5];
      int int0 = (-2548);
      intArray0[3] = int0;
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      assertNotNull(ooPlaceInnerProduct0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(double0));
      
      LinkedList<Double> linkedList1 = new LinkedList<Double>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList0.contains(double0));
      assertFalse(linkedList1.contains(double0));
      
      DenseVector denseVector0 = null;
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(compressedVector0);
      assertFalse(linkedList0.contains(double0));
      assertFalse(linkedList1.contains(double0));
      
      int int1 = 1626;
      double double1 = 422.6875;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains(double0));
      assertFalse(linkedList1.contains(double0));
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(vectorIterator0);
      assertFalse(linkedList0.contains(double0));
      assertFalse(linkedList1.contains(double0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 4314;
      int int1 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(int0, int1);
      assertEquals(4314, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(compressedVector0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blank();
      assertEquals(4314, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(4314, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(compressedVector1);
      
      int int2 = 1906;
      double double0 = compressedVector0.getOrElse(int2, doubleArray0[1]);
      assertEquals(4314, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(9, doubleArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4314.0, double0, 0.01);
      assertArrayEquals(new double[] {4314.0, 4314.0, 4314.0, 4314.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int1;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int1;
      VectorOperation<Byte> vectorOperation0 = (VectorOperation<Byte>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      Byte byte0 = compressedVector0.apply(vectorOperation0);
      assertEquals(4314, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertNull(byte0);
      
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.6666666666666666, compressedVector2.density(), 0.01);
      assertEquals(9, compressedVector2.length());
      assertEquals(6, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertEquals(9, doubleArray0.length);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertNotNull(compressedVector2);
      assertArrayEquals(new double[] {4314.0, 4314.0, 4314.0, 4314.0, 4314.0, 0.0, 0.0, 4314.0, 0.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.copyOfLength(int0);
      assertEquals(4314, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4314, compressedVector3.length());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(0, compressedVector3.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertNotNull(compressedVector3);
      
      String string0 = "";
      CompressedVector compressedVector4 = CompressedVector.fromCSV(string0);
      assertEquals(0, compressedVector4.length());
      assertEquals(0, compressedVector4.cardinality());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector0);
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertNotNull(compressedVector4);
      
      CompressedVector compressedVector5 = (CompressedVector)compressedVector4.blank();
      assertEquals(0, compressedVector4.length());
      assertEquals(0, compressedVector4.cardinality());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertEquals(Double.NaN, compressedVector5.density(), 0.01);
      assertEquals(0, compressedVector5.length());
      assertEquals(0, compressedVector5.cardinality());
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector5);
      assertNotSame(compressedVector5, compressedVector4);
      assertNotSame(compressedVector5, compressedVector1);
      assertNotSame(compressedVector5, compressedVector0);
      assertNotSame(compressedVector5, compressedVector3);
      assertNotSame(compressedVector5, compressedVector2);
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertTrue(compressedVector5.equals((Object)compressedVector4));
      assertFalse(compressedVector5.equals((Object)compressedVector1));
      assertFalse(compressedVector5.equals((Object)compressedVector0));
      assertFalse(compressedVector5.equals((Object)compressedVector3));
      assertFalse(compressedVector5.equals((Object)compressedVector2));
      assertNotNull(compressedVector5);
      
      double double1 = 0.0;
      BasicVector basicVector0 = (BasicVector)compressedVector4.add(double1);
      assertEquals(0, compressedVector4.length());
      assertEquals(0, compressedVector4.cardinality());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertEquals(0, basicVector0.length());
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector5);
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertTrue(compressedVector4.equals((Object)compressedVector5));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(basicVector0);
      
      compressedVector0.setAll(doubleArray0[2]);
      assertEquals(4314, compressedVector0.length());
      assertEquals(4314, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector5);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertEquals(9, doubleArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(compressedVector0.equals((Object)compressedVector4));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector5));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertArrayEquals(new double[] {4314.0, 4314.0, 4314.0, 4314.0, 4314.0, 0.0, 0.0, 4314.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = 1.0;
      compressedVector0.setAll(double2);
      assertEquals(4314, compressedVector0.length());
      assertEquals(4314, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector5);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(compressedVector0.equals((Object)compressedVector4));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector5));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double3 = compressedVector4.foldNonZero(vectorAccumulator0);
      assertEquals(0, compressedVector4.length());
      assertEquals(0, compressedVector4.cardinality());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector5);
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertTrue(compressedVector4.equals((Object)compressedVector5));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(4314, compressedVector0.length());
      assertEquals(4314, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector5);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertEquals(69033, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(compressedVector0.equals((Object)compressedVector4));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector5));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertNotNull(byteArray0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector2.toDiagonalMatrix();
      assertEquals(0.07407407407407407, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(4314.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(9, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.6666666666666666, compressedVector2.density(), 0.01);
      assertEquals(9, compressedVector2.length());
      assertEquals(6, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector3);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector5);
      assertNotSame(compressedVector2, compressedVector4);
      assertEquals(9, doubleArray0.length);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector3));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector5));
      assertFalse(compressedVector2.equals((Object)compressedVector4));
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {4314.0, 4314.0, 4314.0, 4314.0, 4314.0, 0.0, 0.0, 4314.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector2.each(vectorProcedure0);
      assertEquals(0.6666666666666666, compressedVector2.density(), 0.01);
      assertEquals(9, compressedVector2.length());
      assertEquals(6, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector3);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector5);
      assertNotSame(compressedVector2, compressedVector4);
      assertEquals(9, doubleArray0.length);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector3));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector5));
      assertFalse(compressedVector2.equals((Object)compressedVector4));
      assertArrayEquals(new double[] {4314.0, 4314.0, 4314.0, 4314.0, 4314.0, 0.0, 0.0, 4314.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = compressedVector2.nonZeroAt(int1);
      assertEquals(0.6666666666666666, compressedVector2.density(), 0.01);
      assertEquals(9, compressedVector2.length());
      assertEquals(6, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector3);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector5);
      assertNotSame(compressedVector2, compressedVector4);
      assertEquals(9, doubleArray0.length);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector3));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector5));
      assertFalse(compressedVector2.equals((Object)compressedVector4));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {4314.0, 4314.0, 4314.0, 4314.0, 4314.0, 0.0, 0.0, 4314.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector4.setAll(int2);
      assertEquals(0, compressedVector4.length());
      assertEquals(0, compressedVector4.cardinality());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector5);
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertTrue(compressedVector4.equals((Object)compressedVector5));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = compressedVector2.nonZeroAt(int1);
      assertEquals(0.6666666666666666, compressedVector2.density(), 0.01);
      assertEquals(9, compressedVector2.length());
      assertEquals(6, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector3);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector5);
      assertNotSame(compressedVector2, compressedVector4);
      assertEquals(9, doubleArray0.length);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector3));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector5));
      assertFalse(compressedVector2.equals((Object)compressedVector4));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {4314.0, 4314.0, 4314.0, 4314.0, 4314.0, 0.0, 0.0, 4314.0, 0.0}, doubleArray0, 0.01);
      
      String string1 = "RkJ IW)^&{$: lar[b";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 848;
      double double0 = 2167.40585544;
      Float float0 = new Float(double0);
      assertNotNull(float0);
      assertEquals(2167.4058F, (float)float0, 0.01F);
      
      int int1 = 1450;
      int int2 = 4779;
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 100.0;
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {100.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertNotNull(decimalFormat0);
      
      int int1 = 0;
      boolean boolean0 = compressedVector0.isZeroAt(int1);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {100.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "\\";
      String string1 = compressedVector0.mkString((NumberFormat) decimalFormat0, string0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(4, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("100\\1\\0\\0", string1);
      assertArrayEquals(new double[] {100.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int2 = (-1780);
      CompressedVector compressedVector1 = new CompressedVector();
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(int0, vectorFunction0);
      assertEquals(4, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(4, doubleArray0.length);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(int0 == int2);
      assertArrayEquals(new double[] {100.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-115);
      byteArray0[1] = byte1;
      byte byte2 = (byte)112;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)11;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)48;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      short short0 = (short)0;
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      boolean boolean0 = linkedList0.add(short1);
      assertEquals(1, linkedList0.size());
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(short1));
      
      CompressedVector compressedVector2 = (CompressedVector)SparseVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(1, compressedVector2.length());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertNotNull(compressedVector2);
      assertTrue(linkedList0.contains(short1));
      
      compressedVector0.each(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertNotNull(vectorIterator0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(9, byteArray0.length);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = 32;
      CompressedVector compressedVector3 = CompressedVector.zero(int0);
      assertEquals(32, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertNotNull(compressedVector3);
      
      int int1 = (-1236);
      compressedVector3.swapElements(short0, int1);
      assertEquals(32, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertFalse(int0 == int1);
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(int1 == int0);
      
      CompressedVector compressedVector4 = CompressedVector.fromBinary(byteArray0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertEquals(0, compressedVector4.length());
      assertEquals(0, compressedVector4.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector0);
      assertEquals(9, byteArray0.length);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector4.equals((Object)compressedVector1));
      assertTrue(compressedVector4.equals((Object)compressedVector0));
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertNotNull(compressedVector4);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      CompressedVector compressedVector0 = CompressedVector.random(int0, (double) int0, (Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorVectorOperation<Integer> vectorVectorOperation0 = (VectorVectorOperation<Integer>) mock(VectorVectorOperation.class, new ViolatedAssumptionAnswer());
      int int1 = 1943;
      CompressedVector compressedVector1 = new CompressedVector(int1, int0);
      assertEquals(1943, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)int1, (double)int0, (double)int0, (double)int1, (double)int0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.transform(vectorFunction0);
      assertEquals(1943, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1943, compressedVector2.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(1943, compressedVector2.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertNotNull(compressedVector2);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector3 = CompressedVector.fromMap(hashMap0, int1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(1943, compressedVector3.length());
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector1);
      assertFalse(int1 == int0);
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertNotNull(compressedVector3);
  }
}
