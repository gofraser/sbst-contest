/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:20:05 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.MinuitParameter;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnMachinePrecision;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnUserTransformation_ESTest extends MnUserTransformation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int0 = (-3753);
      // Undeclared exception!
      try { 
        mnUserTransformation0.fix(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=-3753
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      int int1 = mnUserTransformation0.intOfExt(int0);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      mnUserTransformation0.removeLimits(int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = 1197.381836495;
      String string0 = "Invalid matrix size: ";
      mnUserTransformation0.add(string0, double0, double0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      mnUserTransformation0.setValue(string0, double0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "";
      double double1 = 2026.2935905288266;
      mnUserTransformation0.add(string0, double1, double0, double0, double1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      mnUserTransformation0.setLowerLimit(string0, doubleArray0[1]);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 1444.349354481096;
      doubleArray0[1] = double0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1444.349354481096, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      assertNotNull(mnUserTransformation1);
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertEquals(7, doubleArray0.length);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 1444.349354481096, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "p5";
      mnUserTransformation1.add(string0, doubleArray0[1], doubleArray0[4], doubleArray0[4], double0);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertEquals(7, doubleArray0.length);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 1444.349354481096, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      mnUserTransformation1.setLimits(string0, doubleArray0[4], doubleArray0[1]);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertEquals(7, doubleArray0.length);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 1444.349354481096, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "WARNING: Minuit did not converge.";
      double double0 = (-698.55900164);
      double double1 = 0.0;
      mnUserTransformation0.add(string0, double0, double1, double0, double1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      mnUserTransformation0.setError(string0, double0);
      assertNotEquals(double0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      double double0 = 0.0;
      mnUserTransformation0.add(string0, double0);
      mnUserTransformation0.removeLimits(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "ext=";
      mnUserTransformation0.add(string0, doubleArray0[2]);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      mnUserTransformation0.release(string0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = mnUserTransformation0.variableParameters();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(17, doubleArray0.length);
      
      String string0 = "p6";
      double double0 = mnUserTransformation0.value(string0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(17, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "BDY#]}4&";
      double double0 = 1.0;
      double double1 = 868.092991003;
      mnUserTransformation0.add(string0, double0, double0, double0, double1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = mnUserTransformation0.value(string0);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "WARNING: Minuit did not converge.";
      double double0 = (-698.55900164);
      double double1 = 0.0;
      mnUserTransformation0.add(string0, double0, double1, double0, double1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = mnUserTransformation0.value(string0);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals((-698.55900164), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      double double1 = mnUserTransformation0.value(int0);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-1521.012851);
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1521.012851), (-1521.012851), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 3;
      double double1 = mnUserTransformation0.value(int0);
      assertEquals(double1, double0, 0.01);
      assertEquals((-1521.012851), double1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1521.012851), (-1521.012851), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnMachinePrecision mnMachinePrecision0 = mnUserTransformation0.precision();
      assertNotNull(mnMachinePrecision0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      double[] doubleArray0 = mnUserTransformation0.params();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      List<MinuitParameter> list0 = mnUserTransformation0.parameters();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-1932735281);
      List<Integer> list0 = (List<Integer>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(list0).get(anyInt());
      PrivateAccess.setVariable((Class<MnUserTransformation>) MnUserTransformation.class, mnUserTransformation0, "theParameters", (Object) list0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MinuitParameter minuitParameter0 = mnUserTransformation0.parameter(int0);
      assertNull(minuitParameter0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgeraicSymMatr4x$EgenvaluesException";
      double double0 = (-698.55900164);
      int int0 = 0;
      mnUserTransformation0.add(string0, double0, int0, double0, int0);
      mnUserTransformation0.setUpperLimit(int0, double0);
      MinuitParameter minuitParameter0 = mnUserTransformation0.parameter(int0);
      assertNotNull(minuitParameter0);
      assertEquals("org.freehep.math.minuit.MnAlgeraicSymMatr4x$EgenvaluesException", minuitParameter0.name());
      assertEquals((-698.55900164), minuitParameter0.value(), 0.01);
      assertEquals(0.0, minuitParameter0.error(), 0.01);
      assertFalse(minuitParameter0.hasLowerLimit());
      assertEquals((-698.55900164), minuitParameter0.upperLimit(), 0.01);
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertFalse(minuitParameter0.isFixed());
      assertTrue(minuitParameter0.hasLimits());
      assertTrue(minuitParameter0.hasUpperLimit());
      assertFalse(minuitParameter0.isConst());
      assertEquals(0, minuitParameter0.number());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 2;
      MinuitParameter minuitParameter0 = mnUserTransformation0.parameter(int0);
      assertNotNull(minuitParameter0);
      assertEquals(4, doubleArray0.length);
      assertFalse(minuitParameter0.isFixed());
      assertEquals(2, minuitParameter0.number());
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertFalse(minuitParameter0.hasLowerLimit());
      assertEquals("p2", minuitParameter0.name());
      assertFalse(minuitParameter0.isConst());
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertFalse(minuitParameter0.hasLimits());
      assertFalse(minuitParameter0.hasUpperLimit());
      assertEquals(0.0, minuitParameter0.value(), 0.01);
      assertEquals(0.0, minuitParameter0.error(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      mnUserTransformation0.fix(int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MinuitParameter minuitParameter0 = mnUserTransformation0.parameter(int0);
      assertNotNull(minuitParameter0);
      assertEquals(9, doubleArray0.length);
      assertFalse(minuitParameter0.hasLimits());
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertFalse(minuitParameter0.hasLowerLimit());
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertEquals("p0", minuitParameter0.name());
      assertFalse(minuitParameter0.hasUpperLimit());
      assertEquals(0, minuitParameter0.number());
      assertEquals(0.0, minuitParameter0.error(), 0.01);
      assertEquals(0.0, minuitParameter0.value(), 0.01);
      assertFalse(minuitParameter0.isConst());
      assertTrue(minuitParameter0.isFixed());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgeraicSymMatr4x$EgenvaluesException";
      double double0 = (-698.55900164);
      int int0 = 0;
      mnUserTransformation0.add(string0, double0, int0, double0, int0);
      MinuitParameter minuitParameter0 = mnUserTransformation0.parameter(int0);
      assertNotNull(minuitParameter0);
      assertTrue(minuitParameter0.hasLimits());
      assertTrue(minuitParameter0.hasLowerLimit());
      assertEquals(0, minuitParameter0.number());
      assertFalse(minuitParameter0.isFixed());
      assertEquals("org.freehep.math.minuit.MnAlgeraicSymMatr4x$EgenvaluesException", minuitParameter0.name());
      assertFalse(minuitParameter0.isConst());
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertTrue(minuitParameter0.hasUpperLimit());
      assertEquals(0.0, minuitParameter0.error(), 0.01);
      assertEquals((-698.55900164), minuitParameter0.value(), 0.01);
      assertEquals((-698.55900164), minuitParameter0.lowerLimit(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      double double0 = 3178.15108792;
      String string0 = "mfwGZvlWs\\S9e4cK";
      double double1 = 1.0;
      mnUserTransformation0.add(string0, double0, double0, double1, double0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = 0;
      MinuitParameter minuitParameter0 = mnUserTransformation0.parameter(int0);
      assertNotNull(minuitParameter0);
      assertEquals(3178.15108792, minuitParameter0.value(), 0.01);
      assertEquals(1.0, minuitParameter0.lowerLimit(), 0.01);
      assertEquals(3178.15108792, minuitParameter0.error(), 0.01);
      assertEquals(0, minuitParameter0.number());
      assertFalse(minuitParameter0.isConst());
      assertEquals(3178.15108792, minuitParameter0.upperLimit(), 0.01);
      assertTrue(minuitParameter0.hasUpperLimit());
      assertTrue(minuitParameter0.hasLowerLimit());
      assertFalse(minuitParameter0.isFixed());
      assertTrue(minuitParameter0.hasLimits());
      assertEquals("mfwGZvlWs\\S9e4cK", minuitParameter0.name());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-452.667282);
      doubleArray0[0] = double0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-452.667282), 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MinuitParameter minuitParameter0 = mnUserTransformation0.parameter(int0);
      assertNotNull(minuitParameter0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, minuitParameter0.number());
      assertFalse(minuitParameter0.isFixed());
      assertEquals((-452.667282), minuitParameter0.error(), 0.01);
      assertEquals((-452.667282), minuitParameter0.value(), 0.01);
      assertEquals("p0", minuitParameter0.name());
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertFalse(minuitParameter0.hasLowerLimit());
      assertFalse(minuitParameter0.hasLimits());
      assertFalse(minuitParameter0.isConst());
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertFalse(minuitParameter0.hasUpperLimit());
      assertArrayEquals(new double[] {(-452.667282), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgeraicSymMatr4x$EgenvaluesException";
      double double0 = (-698.55900164);
      int int0 = 0;
      mnUserTransformation0.add(string0, double0, int0, double0, int0);
      String string1 = null;
      mnUserTransformation0.add(string1, double0, int0);
      int int1 = 1;
      String string2 = mnUserTransformation0.name(int1);
      assertNull(string2);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      String string0 = mnUserTransformation0.name(int0);
      assertNotNull(string0);
      assertEquals("p0", string0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = (-1718.0);
      int int0 = 0;
      double double1 = mnUserTransformation0.ext2int(int0, doubleArray0[0]);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double2 = mnUserTransformation0.int2extError(int0, double1, double0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1718.0), double2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnUserCovariance mnUserCovariance0 = mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
      assertNotNull(mnUserCovariance0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1.0;
      doubleArray0[2] = double0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 2;
      double double1 = mnUserTransformation0.int2ext(int0, doubleArray0[2]);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1312.8197429650008);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      double double1 = mnUserTransformation0.int2ext(int0, double0);
      assertEquals(double1, double0, 0.01);
      assertEquals((-1312.8197429650008), double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgeraicSymMatr4x$EgenaluesException";
      double double0 = (-698.55900164);
      int int0 = 0;
      mnUserTransformation0.add(string0, double0, int0, double0, int0);
      int int1 = mnUserTransformation0.index(string0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "p4";
      int int0 = mnUserTransformation0.index(string0);
      assertEquals(4, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 3;
      int int1 = mnUserTransformation0.intOfExt(int0);
      assertTrue(int1 == int0);
      assertEquals(3, int1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int2 = mnUserTransformation0.extOfInt(int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(3, int2);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      double[] doubleArray0 = mnUserTransformation0.errors();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 8.0;
      doubleArray0[0] = double0;
      doubleArray0[3] = doubleArray0[0];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {8.0, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "p3";
      double double1 = mnUserTransformation0.error(string0);
      assertEquals(double1, double0, 0.01);
      assertEquals(8.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {8.0, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgebraicSymMatrix$EigenvaluesException";
      double double0 = (-698.55900164);
      double double1 = (-20.01089886832412);
      mnUserTransformation0.add(string0, double0, double1, double0, double1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = mnUserTransformation0.error(string0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals((-20.01089886832412), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      int int1 = mnUserTransformation0.intOfExt(int0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = mnUserTransformation0.error(int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 405.62;
      doubleArray0[0] = double0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {405.62, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      int int1 = mnUserTransformation0.intOfExt(int0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {405.62, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = mnUserTransformation0.error(int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(double1, double0, 0.01);
      assertEquals(405.62, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {405.62, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-4069.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-4069.0), (-4069.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      double double1 = mnUserTransformation0.error(int0);
      assertEquals(double1, double0, 0.01);
      assertEquals((-4069.0), double1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-4069.0), (-4069.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgebraicSymMatrix$EigenvaluesException";
      double double0 = (-698.55900164);
      int int0 = 0;
      mnUserTransformation0.add(string0, double0, int0, double0, int0);
      mnUserTransformation0.setLowerLimit(int0, int0);
      double double1 = mnUserTransformation0.dInt2Ext(int0, int0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 405.62;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = (-1718.0);
      int int0 = 0;
      mnUserTransformation0.setLowerLimit(int0, double0);
      assertNotEquals(double0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double2 = mnUserTransformation0.dInt2Ext(int0, double1);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-0.9999998305960335), double2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        mnUserTransformation0.value(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-133);
      // Undeclared exception!
      try { 
        mnUserTransformation0.value(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnAlgebraicVector mnAlgebraicVector0 = null;
      // Undeclared exception!
      try { 
        mnUserTransformation0.transform(mnAlgebraicVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.transform(mnAlgebraicVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = mnUserTransformation0.variableParameters();
      assertEquals(4, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.setValue(int0, doubleArray0[1]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-960);
      // Undeclared exception!
      try { 
        mnUserTransformation0.setValue(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-2432);
      // Undeclared exception!
      try { 
        mnUserTransformation0.setUpperLimit(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-1857);
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLowerLimit(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "R8qfxF,Jq";
      mnUserTransformation0.add(string0, doubleArray0[0]);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLimits(string0, doubleArray0[0], doubleArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min == max
         //
         verifyException("org.freehep.math.minuit.MinuitParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      double double0 = 1805.304479;
      int int0 = 604;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLimits(int0, double0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 604, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      int int1 = mnUserTransformation0.intOfExt(int0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLimits(int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min == max
         //
         verifyException("org.freehep.math.minuit.MinuitParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = (-1934);
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLimits(int0, int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-387.9215141191451);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setError(int0, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = (-3474);
      // Undeclared exception!
      try { 
        mnUserTransformation0.setError(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-2935);
      // Undeclared exception!
      try { 
        mnUserTransformation0.removeLimits(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 730;
      // Undeclared exception!
      try { 
        mnUserTransformation0.release(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 730, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 3;
      // Undeclared exception!
      try { 
        mnUserTransformation0.release(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index=3
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-378);
      // Undeclared exception!
      try { 
        mnUserTransformation0.release(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.parameter(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-147);
      // Undeclared exception!
      try { 
        mnUserTransformation0.name(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2extError(int0, int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-622);
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2extError(int0, int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = null;
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnAlgebraicVector mnAlgebraicVector0 = mnAlgebraicSymMatrix0.eigenvalues();
      assertNotNull(mnAlgebraicVector0);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "p)?t)L4";
      double double0 = 3557.0;
      mnUserTransformation0.add(string0, double0, double0);
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MnAlgebraicVector mnAlgebraicVector1 = mnUserTransformation0.transform(mnAlgebraicVector0);
      assertNotNull(mnAlgebraicVector1);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2extCovariance(mnAlgebraicVector1, mnAlgebraicSymMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2ext(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-2896);
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2ext(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "i";
      // Undeclared exception!
      try { 
        mnUserTransformation0.index(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        mnUserTransformation0.fix(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "ext=";
      mnUserTransformation0.add(string0, doubleArray0[2]);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.fix(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=6
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        mnUserTransformation0.extOfInt(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int0 = (-525);
      // Undeclared exception!
      try { 
        mnUserTransformation0.extOfInt(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 611.16;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 553;
      // Undeclared exception!
      try { 
        mnUserTransformation0.ext2int(int0, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 553, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = (-138);
      // Undeclared exception!
      try { 
        mnUserTransformation0.ext2int(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgeraicSymMatr4x$EgenvaluesException";
      List<Integer> list0 = (List<Integer>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(list0).add(anyInt());
      doReturn((Iterator) null).when(list0).iterator();
      doReturn(0, 0, 0, 0).when(list0).size();
      PrivateAccess.setVariable((Class<MnUserTransformation>) MnUserTransformation.class, mnUserTransformation0, "theParameters", (Object) list0);
      double double0 = (-698.55900164);
      int int0 = 0;
      mnUserTransformation0.add(string0, double0, int0, double0, int0);
      int int1 = 0;
      double double1 = (-3173.2369234848275);
      // Undeclared exception!
      try { 
        mnUserTransformation0.errors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        mnUserTransformation0.error(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-2204);
      // Undeclared exception!
      try { 
        mnUserTransformation0.error(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1163;
      // Undeclared exception!
      try { 
        mnUserTransformation0.dInt2Ext(int0, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1163, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      double double0 = (-3772.01107147124);
      int int0 = (-1801);
      // Undeclared exception!
      try { 
        mnUserTransformation0.dInt2Ext(int0, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = null;
      MnUserTransformation mnUserTransformation0 = null;
      try {
        mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MnUserTransformation mnUserTransformation0 = null;
      try {
        mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.intOfExt(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=0
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgebraicSymMatrix$EigenvaluesException";
      double double0 = (-698.55900164);
      int int0 = 0;
      mnUserTransformation0.add(string0, double0, int0, double0, int0);
      double double1 = mnUserTransformation0.dInt2Ext(int0, int0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(349.27950082, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      mnUserTransformation0.fix(int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      mnUserTransformation0.release(int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = mnUserTransformation0.variableParameters();
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int1);
      assertNotNull(mnAlgebraicSymMatrix0);
      assertFalse(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnAlgebraicVector mnAlgebraicVector0 = mnAlgebraicSymMatrix0.eigenvalues();
      assertNotNull(mnAlgebraicVector0);
      assertFalse(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      mnUserTransformation0.setUpperLimit(int0, doubleArray0[1]);
      assertFalse(int0 == int1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnUserCovariance mnUserCovariance0 = mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
      assertNotNull(mnUserCovariance0);
      assertFalse(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserCovariance0.ncol());
      assertEquals(4, mnUserCovariance0.nrow());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      double double0 = mnUserTransformation0.dInt2Ext(int0, doubleArray0[0]);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgebraicSymMatrix$EigenvaluesException";
      double double0 = (-698.55900164);
      int int0 = 0;
      double double1 = 0.0;
      mnUserTransformation0.add(string0, double0, double1, double0, double1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      mnUserTransformation0.setUpperLimit(int0, int0);
      double double2 = mnUserTransformation0.ext2int(int0, int0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.001953125, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgebraicSymMatrix$EigenvaluesException";
      double double0 = (-698.55900164);
      int int0 = 0;
      mnUserTransformation0.add(string0, double0, int0, double0, int0);
      double double1 = 16.181522286718018;
      double double2 = mnUserTransformation0.int2extError(int0, int0, double1);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(428.92509741633455, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      String string0 = "p2";
      mnUserTransformation0.setUpperLimit(string0, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = 2;
      double double0 = mnUserTransformation0.int2extError(int1, int0, doubleArray0[0]);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 405.62;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      mnUserTransformation0.setLowerLimit(int0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = mnUserTransformation0.ext2int(int0, doubleArray0[0]);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.001953125, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double2 = mnUserTransformation0.int2extError(int0, double1, double0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(404.6212307716145, double2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgebraicSymMatrix$EigenvaluesException";
      double double0 = (-698.55900164);
      int int0 = 0;
      double double1 = (-20.01089886832412);
      mnUserTransformation0.add(string0, double0, double1, double0, double1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = mnUserTransformation0.int2extError(int0, double0, int0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      mnUserTransformation0.fix(int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      mnUserTransformation0.release(int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = mnUserTransformation0.variableParameters();
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int1);
      assertNotNull(mnAlgebraicSymMatrix0);
      assertFalse(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnAlgebraicVector mnAlgebraicVector0 = mnAlgebraicSymMatrix0.eigenvalues();
      assertNotNull(mnAlgebraicVector0);
      assertFalse(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      mnUserTransformation0.setUpperLimit(int0, doubleArray0[2]);
      assertFalse(int0 == int1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnAlgebraicVector mnAlgebraicVector1 = mnUserTransformation0.transform(mnAlgebraicVector0);
      assertNotNull(mnAlgebraicVector1);
      assertFalse(int1 == int0);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertEquals(4, doubleArray0.length);
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      double double1 = mnUserTransformation0.int2ext(int0, double0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "WARNING: Minuit did not converge.";
      double double0 = (-698.55900164);
      double double1 = 0.0;
      mnUserTransformation0.add(string0, double0, double1, double0, double1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.release(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index=0
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "dKr5#IF$/?z";
      mnUserTransformation0.add(string0, doubleArray0[0], doubleArray0[1]);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.add(string0, doubleArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate name: dKr5#IF$/?z
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgeraicSymMatr4x$EgenvaluesException";
      double double0 = (-698.55900164);
      int int0 = 0;
      mnUserTransformation0.add(string0, double0, int0);
      // Undeclared exception!
      try { 
        mnUserTransformation0.add(string0, int0, double0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate name: org.freehep.math.minuit.MnAlgeraicSymMatr4x$EgenvaluesException
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-0.24434882271902714);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 2;
      String string0 = "ext=";
      mnUserTransformation0.add(string0, doubleArray0[2]);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.add(string0, double0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate name: ext=
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(17, doubleArray0.length);
      
      double[] doubleArray1 = mnUserTransformation0.errors();
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(17, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = mnUserTransformation0.params();
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgebraicSymMatrix$EigenvaluesException";
      double double0 = (-698.55900164);
      int int0 = 0;
      mnUserTransformation0.add(string0, double0, int0, double0, int0);
      double double1 = mnUserTransformation0.error(string0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        mnUserTransformation0.removeLimits(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "R8qfxF,Jq";
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLimits(string0, doubleArray0[0], doubleArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setUpperLimit(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "ext=";
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLowerLimit(string0, doubleArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "WARNING: Minuit did not converge.";
      double double0 = (-698.55900164);
      // Undeclared exception!
      try { 
        mnUserTransformation0.setError(string0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 405.62;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      mnUserTransformation0.setLimits(int0, double0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgebraicSymMatrix$EigenvaluesException";
      // Undeclared exception!
      try { 
        mnUserTransformation0.error(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "!(k6C;WU~Nq\"";
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setValue(string0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      List<MinuitParameter> list0 = mnUserTransformation0.parameters();
      assertNotNull(list0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "ext=";
      // Undeclared exception!
      try { 
        mnUserTransformation0.release(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgebraicSymMatrix$EigenvaluesException";
      double double0 = (-698.55900164);
      int int0 = 0;
      mnUserTransformation0.add(string0, double0, int0, double0, int0);
      double double1 = mnUserTransformation0.ext2int(int0, double0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.5688432017948966), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      int int1 = mnUserTransformation0.intOfExt(int0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int2 = mnUserTransformation0.extOfInt(int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 3;
      double double0 = mnUserTransformation0.value(int0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 4963;
      // Undeclared exception!
      try { 
        mnUserTransformation0.removeLimits(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4963, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.name(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-1932735281);
      // Undeclared exception!
      try { 
        mnUserTransformation0.parameter(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLowerLimit(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "org.freehep.math.minuit.MnAlgebraicSymMatrix$EigenvaluesException";
      double double0 = (-698.55900164);
      int int0 = 0;
      mnUserTransformation0.add(string0, double0, int0, double0, int0);
      mnUserTransformation0.fix(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 3;
      mnUserTransformation0.setError(int0, doubleArray0[0]);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      mnUserTransformation0.setValue(int0, doubleArray0[0]);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "Invalid matrix size: ";
      // Undeclared exception!
      try { 
        mnUserTransformation0.setUpperLimit(string0, doubleArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "BDY#]}4&";
      // Undeclared exception!
      try { 
        mnUserTransformation0.value(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1514.774957);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      mnUserTransformation0.setPrecision(double0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }
}
