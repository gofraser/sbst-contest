/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:46:28 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.MinuitParameter;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnMachinePrecision;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserTransformation;
import org.freehep.math.minuit.SinParameterTransformation;
import org.freehep.math.minuit.SqrtLowParameterTransformation;
import org.freehep.math.minuit.SqrtUpParameterTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnUserTransformation_ESTest extends MnUserTransformation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-1651);
      // Undeclared exception!
      try { 
        mnUserTransformation0.intOfExt(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=-1651
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      mnUserTransformation0.setUpperLimit(int0, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = mnUserTransformation0.int2extError(int0, int0, doubleArray0[0]);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.6180339887498949, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1701.0);
      doubleArray0[0] = double0;
      double double1 = 6415.52306079;
      doubleArray0[2] = double1;
      doubleArray0[8] = doubleArray0[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1701.0), 0.0, 6415.52306079, 0.0, 0.0, 0.0, 0.0, 0.0, 6415.52306079}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      String string0 = "p5";
      mnUserTransformation0.setLimits(string0, doubleArray0[6], doubleArray0[0]);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1701.0), 0.0, 6415.52306079, 0.0, 0.0, 0.0, 0.0, 0.0, 6415.52306079}, doubleArray0, 0.01);
      
      int int0 = 5;
      double double2 = mnUserTransformation0.int2extError(int0, doubleArray0[3], doubleArray0[8]);
      assertEquals(9, doubleArray0.length);
      assertEquals(1012.5141659431765, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-1701.0), 0.0, 6415.52306079, 0.0, 0.0, 0.0, 0.0, 0.0, 6415.52306079}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      double double0 = 0.0;
      mnUserTransformation0.add(string0, double0);
      String string1 = "49";
      mnUserTransformation0.add(string1, double0, double0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 1;
      mnUserTransformation0.fix(int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-2776.6629564455816);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      mnUserTransformation0.setLimits(int0, doubleArray0[3], double0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      mnUserTransformation0.setError(int0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      String string0 = ";9&*\"~y3OFXN35[";
      mnUserTransformation0.add(string0, int0);
      mnUserTransformation0.release(int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      int int1 = mnUserTransformation0.intOfExt(int0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = "";
      mnUserTransformation0.add(string0, int1);
      assertEquals(8, doubleArray0.length);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      mnUserTransformation0.setValue(string0, double0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "p8";
      double double0 = 0.0;
      mnUserTransformation0.add(string0, double0);
      mnUserTransformation0.setUpperLimit(string0, double0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      double double0 = 1.0;
      double double1 = 1521.0;
      mnUserTransformation0.add(string0, double0, double0, double1, double0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      mnUserTransformation0.removeLimits(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-5131.768197795);
      doubleArray0[0] = double0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-5131.768197795), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      String string0 = "FKEG-";
      mnUserTransformation0.add(string0, doubleArray0[0], doubleArray0[1], doubleArray0[4], doubleArray0[0]);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-5131.768197795), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      mnUserTransformation0.fix(string0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-5131.768197795), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-3281);
      List<Object> list0 = (List<Object>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(list0).size();
      PrivateAccess.setVariable((Class<MnUserTransformation>) MnUserTransformation.class, mnUserTransformation0, "theExtOfInt", (Object) list0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = mnUserTransformation0.variableParameters();
      assertEquals(4, doubleArray0.length);
      assertEquals((-3281), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-2040.1);
      doubleArray0[0] = double0;
      doubleArray0[8] = doubleArray0[0];
      String string0 = "p8";
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-2040.1), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-2040.1)}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      double double1 = mnUserTransformation0.value(string0);
      assertEquals(9, doubleArray0.length);
      assertEquals((-2040.1), double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-2040.1), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-2040.1)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int1 = mnUserTransformation0.extOfInt(int0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = mnUserTransformation0.value(int1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      double double0 = 0.0;
      mnUserTransformation0.add(string0, double0);
      String string1 = "49";
      double double1 = 868.3598206089;
      mnUserTransformation0.add(string1, double1, double1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = 1;
      double double2 = mnUserTransformation0.value(int0);
      assertEquals(868.3598206089, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      double double0 = (-13.803081726160917);
      String string1 = "p8";
      mnUserTransformation0.add(string1, double0, double0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      mnUserTransformation0.add(string0, double0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      int int0 = 1;
      double double1 = mnUserTransformation0.value(int0);
      assertEquals((-13.803081726160917), double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnMachinePrecision mnMachinePrecision0 = mnUserTransformation0.precision();
      assertNotNull(mnMachinePrecision0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      double[] doubleArray0 = mnUserTransformation0.params();
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "=vc3,'&l~+y0Jg4B7l";
      double double0 = 320.1866764743;
      mnUserTransformation0.add(string0, double0, double0);
      List<MinuitParameter> list0 = mnUserTransformation0.parameters();
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      String string0 = "!>2X{Wz,'D";
      mnUserTransformation0.add(string0, int0, int0);
      MinuitParameter minuitParameter0 = mnUserTransformation0.parameter(int0);
      assertEquals(0, minuitParameter0.number());
      assertFalse(minuitParameter0.isFixed());
      assertEquals(0.0, minuitParameter0.value(), 0.01);
      assertEquals(0.0, minuitParameter0.error(), 0.01);
      assertFalse(minuitParameter0.hasLimits());
      assertFalse(minuitParameter0.hasLowerLimit());
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertFalse(minuitParameter0.isConst());
      assertEquals("!>2X{Wz,'D", minuitParameter0.name());
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertFalse(minuitParameter0.hasUpperLimit());
      assertNotNull(minuitParameter0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) int0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      mnUserTransformation0.setLowerLimit(int0, doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MinuitParameter minuitParameter0 = mnUserTransformation0.parameter(int0);
      assertTrue(minuitParameter0.hasLowerLimit());
      assertFalse(minuitParameter0.isFixed());
      assertEquals(1.0, minuitParameter0.lowerLimit(), 0.01);
      assertEquals("p1", minuitParameter0.name());
      assertTrue(minuitParameter0.hasLimits());
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertEquals(1.0, minuitParameter0.value(), 0.01);
      assertFalse(minuitParameter0.hasUpperLimit());
      assertEquals(1.0, minuitParameter0.error(), 0.01);
      assertEquals(1, minuitParameter0.number());
      assertFalse(minuitParameter0.isConst());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minuitParameter0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      mnUserTransformation0.setUpperLimit(int0, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MinuitParameter minuitParameter0 = mnUserTransformation0.parameter(int0);
      assertFalse(minuitParameter0.isConst());
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertEquals("p1", minuitParameter0.name());
      assertTrue(minuitParameter0.hasUpperLimit());
      assertEquals(0.0, minuitParameter0.error(), 0.01);
      assertEquals(0.0, minuitParameter0.value(), 0.01);
      assertEquals(1, minuitParameter0.number());
      assertFalse(minuitParameter0.isFixed());
      assertEquals(1.0, minuitParameter0.upperLimit(), 0.01);
      assertFalse(minuitParameter0.hasLowerLimit());
      assertTrue(minuitParameter0.hasLimits());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minuitParameter0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 1;
      double double0 = (-9.026472251550217);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = double0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-9.026472251550217)}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      MinuitParameter minuitParameter0 = mnUserTransformation0.parameter(int0);
      assertEquals(1, minuitParameter0.number());
      assertFalse(minuitParameter0.hasLimits());
      assertFalse(minuitParameter0.isConst());
      assertFalse(minuitParameter0.hasLowerLimit());
      assertFalse(minuitParameter0.hasUpperLimit());
      assertEquals((-9.026472251550217), minuitParameter0.value(), 0.01);
      assertEquals((-9.026472251550217), minuitParameter0.error(), 0.01);
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertEquals("p1", minuitParameter0.name());
      assertFalse(minuitParameter0.isFixed());
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-9.026472251550217)}, doubleArray0, 0.01);
      assertNotNull(minuitParameter0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      int int1 = mnUserTransformation0.intOfExt(int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      double double1 = mnUserTransformation0.int2ext(int0, double0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      double double0 = mnUserTransformation0.int2ext(int0, int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      double double0 = 0.0;
      mnUserTransformation0.add(string0, double0);
      int int0 = mnUserTransformation0.index(string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-2040.1);
      double double1 = 1.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 2;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      String string0 = mnAlgebraicSymMatrix0.toString();
      assertEquals("LASymMatrix parameters:\n\n   0.00000    0.00000 \n   0.00000    0.00000 \n", string0);
      assertNotNull(string0);
      
      mnUserTransformation0.add(string0, int0, doubleArray0[0], double0, double1);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = mnUserTransformation0.index(string0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      int int1 = mnUserTransformation0.extOfInt(int0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      double double1 = mnUserTransformation0.ext2int(int0, double0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      String string0 = "p1";
      double double0 = 2598.0;
      mnUserTransformation0.setLimits(string0, doubleArray0[0], double0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      double double1 = mnUserTransformation0.ext2int(int0, int0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1.5315554875523003), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      double[] doubleArray0 = mnUserTransformation0.errors();
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      int int0 = 1;
      double double0 = 0.0;
      mnUserTransformation0.add(string0, int0, double0);
      double double1 = mnUserTransformation0.error(string0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      double double0 = (-2486.0);
      mnUserTransformation0.add(string0, double0, double0);
      double double1 = mnUserTransformation0.error(string0);
      assertEquals((-2486.0), double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 2;
      double double0 = mnUserTransformation0.error(int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 1161.6789841615907;
      doubleArray0[0] = double0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1161.6789841615907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      double double1 = mnUserTransformation0.error(int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1161.6789841615907, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1161.6789841615907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1785.68363778);
      doubleArray0[1] = double0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1785.68363778), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      double double1 = mnUserTransformation0.error(int0);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1785.68363778), double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1785.68363778), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      mnUserTransformation0.setUpperLimit(int0, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = mnUserTransformation0.dInt2Ext(int0, doubleArray0[0]);
      assertEquals(6, doubleArray0.length);
      assertEquals(-0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        mnUserTransformation0.value(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-1073741823);
      // Undeclared exception!
      try { 
        mnUserTransformation0.value(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnAlgebraicVector mnAlgebraicVector0 = null;
      // Undeclared exception!
      try { 
        mnUserTransformation0.transform(mnAlgebraicVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1996;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.transform(mnAlgebraicVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 0.5;
      doubleArray0[1] = double1;
      double double2 = (-1.3216389871934826);
      doubleArray0[2] = double2;
      double double3 = (-998.9771);
      doubleArray0[3] = double3;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.5, (-1.3216389871934826), (-998.9771)}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertArrayEquals(new double[] {1.0, 0.5, (-1.3216389871934826), (-998.9771)}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation1);
      
      String string0 = null;
      double double4 = 0.5;
      double double5 = 0.0;
      String string1 = "p1";
      double double6 = 0.0;
      boolean boolean0 = false;
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(iterator0).hasNext();
      int int0 = 1;
      List<Object> list0 = (List<Object>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean0).when(list0).add(any());
      doReturn(mnUserTransformation0).when(list0).get(anyInt());
      doReturn(iterator0).when(list0).iterator();
      doReturn(int0, int0).when(list0).size();
      PrivateAccess.setVariable((Class<MnUserTransformation>) MnUserTransformation.class, mnUserTransformation1, "theExtOfInt", (Object) list0);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertArrayEquals(new double[] {1.0, 0.5, (-1.3216389871934826), (-998.9771)}, doubleArray0, 0.01);
      
      mnUserTransformation0.setLimits(string1, double6, doubleArray0[0]);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertEquals(4, doubleArray0.length);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertArrayEquals(new double[] {1.0, 0.5, (-1.3216389871934826), (-998.9771)}, doubleArray0, 0.01);
      
      mnUserTransformation1.add(string0, doubleArray0[3], double4, double0, double5);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double5, 0.01);
      assertNotEquals(double0, double6, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double4, 0.01);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertNotEquals(double4, double5, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double6, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double6, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.5, (-1.3216389871934826), (-998.9771)}, doubleArray0, 0.01);
      
      mnUserTransformation1.setLowerLimit(string0, double0);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double5, 0.01);
      assertNotEquals(double0, double6, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double4, 0.01);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertArrayEquals(new double[] {1.0, 0.5, (-1.3216389871934826), (-998.9771)}, doubleArray0, 0.01);
      
      int int1 = mnUserTransformation1.variableParameters();
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertArrayEquals(new double[] {1.0, 0.5, (-1.3216389871934826), (-998.9771)}, doubleArray0, 0.01);
      
      mnUserTransformation1.release(string0);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertArrayEquals(new double[] {1.0, 0.5, (-1.3216389871934826), (-998.9771)}, doubleArray0, 0.01);
      
      MinuitParameter minuitParameter0 = mnUserTransformation1.parameter(int1);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertFalse(minuitParameter0.isConst());
      assertFalse(minuitParameter0.hasLimits());
      assertEquals(1, minuitParameter0.number());
      assertEquals(0.5, minuitParameter0.value(), 0.01);
      assertFalse(minuitParameter0.hasUpperLimit());
      assertEquals(0.5, minuitParameter0.error(), 0.01);
      assertFalse(minuitParameter0.hasLowerLimit());
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertEquals("p1", minuitParameter0.name());
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertFalse(minuitParameter0.isFixed());
      assertEquals(4, doubleArray0.length);
      assertTrue(int1 == int0);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertArrayEquals(new double[] {1.0, 0.5, (-1.3216389871934826), (-998.9771)}, doubleArray0, 0.01);
      assertNotNull(minuitParameter0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int1);
      assertEquals(4, doubleArray0.length);
      assertTrue(int1 == int0);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertArrayEquals(new double[] {1.0, 0.5, (-1.3216389871934826), (-998.9771)}, doubleArray0, 0.01);
      assertNotNull(mnAlgebraicVector0);
      
      // Undeclared exception!
      try { 
        mnUserTransformation1.transform(mnAlgebraicVector0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.freehep.math.minuit.MnUserTransformation cannot be cast to java.lang.Integer
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1699;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setValue(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1699, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-3938);
      // Undeclared exception!
      try { 
        mnUserTransformation0.setValue(int0, doubleArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 100;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setUpperLimit(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-1008);
      // Undeclared exception!
      try { 
        mnUserTransformation0.setUpperLimit(int0, doubleArray0[4]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      double double0 = 1064.6833556814;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLowerLimit(string0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLowerLimit(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-3939);
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLowerLimit(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      double double0 = (-616.1327847862212);
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLimits(string0, double0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLimits(int0, int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      int int0 = 1;
      mnUserTransformation0.add(string0, int0, int0);
      String string1 = "bC`N6(Zf7G-wi4]LPM";
      mnUserTransformation0.add(string1, int0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLimits(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min == max
         //
         verifyException("org.freehep.math.minuit.MinuitParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1.0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-1811);
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLimits(int0, doubleArray0[3], double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = null;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setError(string0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setError(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        mnUserTransformation0.removeLimits(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-500);
      // Undeclared exception!
      try { 
        mnUserTransformation0.removeLimits(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 4493;
      // Undeclared exception!
      try { 
        mnUserTransformation0.release(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4493, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.release(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index=0
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-1672);
      // Undeclared exception!
      try { 
        mnUserTransformation0.release(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.parameter(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-276);
      // Undeclared exception!
      try { 
        mnUserTransformation0.parameter(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = (-1785.68363778);
      doubleArray0[1] = double1;
      double double2 = 1.0;
      doubleArray0[2] = double2;
      double double3 = 8.0;
      doubleArray0[3] = double3;
      double double4 = 2404.1385;
      doubleArray0[4] = double4;
      double double5 = (-1.0073750955346759);
      doubleArray0[5] = double5;
      double double6 = 2545.77712145;
      doubleArray0[6] = double6;
      double double7 = 351.729093914;
      doubleArray0[7] = double7;
      double double8 = (-6390.70509318);
      doubleArray0[8] = double8;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(22, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(22, doubleArray0.length);
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertNotNull(mnUserTransformation1);
      
      String string0 = "";
      double double9 = (-1.0);
      double double10 = 0.0;
      mnUserTransformation1.add(string0, doubleArray0[0], double9, double8, double10);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(22, doubleArray0.length);
      assertNotEquals(double8, double9, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double10, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertEquals(double9, double5, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double10, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double2, 0.01);
      
      double double11 = mnUserTransformation1.value(string0);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(22, doubleArray0.length);
      assertEquals(1.0, double11, 0.01);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertEquals(double11, double2, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(double11, double0, 0.01);
      assertNotEquals(double11, double3, 0.01);
      
      int int0 = 1;
      List<MinuitParameter> list0 = (List<MinuitParameter>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(list0).get(anyInt());
      PrivateAccess.setVariable((Class<MnUserTransformation>) MnUserTransformation.class, mnUserTransformation1, "theParameters", (Object) list0);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(22, doubleArray0.length);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      
      // Undeclared exception!
      try { 
        mnUserTransformation1.name(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.name(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-2132);
      // Undeclared exception!
      try { 
        mnUserTransformation0.name(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "";
      int int0 = 1;
      double double0 = 0.0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int1 = 1;
      List<Object> list0 = (List<Object>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(list0).get(anyInt());
      PrivateAccess.setVariable((Class<MnUserTransformation>) MnUserTransformation.class, mnUserTransformation0, "theExtOfInt", (Object) list0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = 602.7619805335;
      mnUserTransformation0.setUpperLimit(int1, double1);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2extError(int0, double0, doubleArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2extError(int0, int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-1689);
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2extError(int0, int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnAlgebraicVector mnAlgebraicVector0 = null;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = null;
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 4;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.5;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "# of function calls: %d\n";
      double double1 = (-2426.6057946);
      mnUserTransformation0.add(string0, doubleArray0[1], doubleArray0[0], double1, double0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = mnUserTransformation0.variableParameters();
      assertEquals(1, int0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      int int1 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int1);
      assertFalse(int1 == int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 3541;
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2ext(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3541, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-691);
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2ext(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "7U1v};/nN%eG~E[:!'";
      // Undeclared exception!
      try { 
        mnUserTransformation0.index(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.fix(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=0
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(22, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 2354;
      // Undeclared exception!
      try { 
        mnUserTransformation0.extOfInt(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2354, Size: 22
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-1309);
      // Undeclared exception!
      try { 
        mnUserTransformation0.extOfInt(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.ext2int(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-2659);
      // Undeclared exception!
      try { 
        mnUserTransformation0.ext2int(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.error(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-3798);
      // Undeclared exception!
      try { 
        mnUserTransformation0.error(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 2730;
      // Undeclared exception!
      try { 
        mnUserTransformation0.dInt2Ext(int0, doubleArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2730, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 931.39;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-593);
      // Undeclared exception!
      try { 
        mnUserTransformation0.dInt2Ext(int0, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 801.0164366041;
      doubleArray0[0] = double0;
      double double1 = 229.0;
      doubleArray0[1] = double1;
      double double2 = 65.0;
      doubleArray0[2] = double2;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {801.0164366041, 229.0, 65.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(3, doubleArray0.length);
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertArrayEquals(new double[] {801.0164366041, 229.0, 65.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation1);
      
      MnMachinePrecision mnMachinePrecision0 = new MnMachinePrecision();
      assertNotNull(mnMachinePrecision0);
      
      PrivateAccess.setVariable((Class<MnUserTransformation>) MnUserTransformation.class, mnUserTransformation0, "thePrecision", (Object) mnMachinePrecision0);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertEquals(3, doubleArray0.length);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertArrayEquals(new double[] {801.0164366041, 229.0, 65.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      int int1 = mnUserTransformation1.extOfInt(int0);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int1);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {801.0164366041, 229.0, 65.0}, doubleArray0, 0.01);
      
      Map<Object, String> map0 = null;
      PrivateAccess.setVariable((Class<MnUserTransformation>) MnUserTransformation.class, mnUserTransformation0, "nameMap", (Object) map0);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertEquals(3, doubleArray0.length);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertArrayEquals(new double[] {801.0164366041, 229.0, 65.0}, doubleArray0, 0.01);
      
      SqrtUpParameterTransformation sqrtUpParameterTransformation0 = new SqrtUpParameterTransformation();
      assertNotNull(sqrtUpParameterTransformation0);
      
      double double3 = 1.0;
      double double4 = sqrtUpParameterTransformation0.dInt2Ext(double3, double3);
      assertEquals((-0.7071067811865475), double4, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      double double5 = (-1361.01575105073);
      double double6 = 1.0;
      double double7 = sqrtUpParameterTransformation0.int2ext(double5, double6);
      assertEquals((-1359.0161184233575), double7, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double6, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      
      PrivateAccess.setVariable((Class<MnUserTransformation>) MnUserTransformation.class, mnUserTransformation0, "theUpperLimTrafo", (Object) sqrtUpParameterTransformation0);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertEquals(3, doubleArray0.length);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertArrayEquals(new double[] {801.0164366041, 229.0, 65.0}, doubleArray0, 0.01);
      
      SinParameterTransformation sinParameterTransformation0 = new SinParameterTransformation();
      assertNotNull(sinParameterTransformation0);
      
      PrivateAccess.setVariable((Class<MnUserTransformation>) MnUserTransformation.class, mnUserTransformation1, "theDoubleLimTrafo", (Object) sinParameterTransformation0);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(3, doubleArray0.length);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertArrayEquals(new double[] {801.0164366041, 229.0, 65.0}, doubleArray0, 0.01);
      
      List<Integer> list0 = (List<Integer>) mock(List.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<MnUserTransformation>) MnUserTransformation.class, mnUserTransformation1, "theExtOfInt", (Object) list0);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(3, doubleArray0.length);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertArrayEquals(new double[] {801.0164366041, 229.0, 65.0}, doubleArray0, 0.01);
      
      String string0 = "";
      SqrtLowParameterTransformation sqrtLowParameterTransformation0 = new SqrtLowParameterTransformation();
      assertNotNull(sqrtLowParameterTransformation0);
      
      PrivateAccess.setVariable((Class<MnUserTransformation>) MnUserTransformation.class, mnUserTransformation1, "theLowerLimTrafo", (Object) sqrtLowParameterTransformation0);
      assertNotSame(mnUserTransformation0, mnUserTransformation1);
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
      assertEquals(3, doubleArray0.length);
      assertFalse(mnUserTransformation0.equals((Object)mnUserTransformation1));
      assertFalse(mnUserTransformation1.equals((Object)mnUserTransformation0));
      assertArrayEquals(new double[] {801.0164366041, 229.0, 65.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.add(string0, double5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = null;
      MnUserTransformation mnUserTransformation0 = null;
      try {
        mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MnUserTransformation mnUserTransformation0 = null;
      try {
        mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      double double0 = 0.0;
      mnUserTransformation0.add(string0, double0);
      // Undeclared exception!
      try { 
        mnUserTransformation0.fix(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=0
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.5;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "# of function calls: %d\n";
      double double1 = (-2426.6057946);
      mnUserTransformation0.add(string0, doubleArray0[1], doubleArray0[0], double1, double0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = mnUserTransformation0.variableParameters();
      assertEquals(1, int0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnUserCovariance mnUserCovariance0 = mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
      assertEquals(1, mnUserCovariance0.ncol());
      assertEquals(1, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-2040.1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      mnUserTransformation0.setLowerLimit(int0, doubleArray0[1]);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = mnUserTransformation0.dInt2Ext(int0, double0);
      assertEquals(9, doubleArray0.length);
      assertEquals((-0.9999998798657022), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = 2;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      double double0 = mnUserTransformation0.dInt2Ext(int0, doubleArray0[4]);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      String string0 = "p1";
      mnUserTransformation0.setLimits(string0, doubleArray0[2], doubleArray0[0]);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      double double1 = mnUserTransformation0.ext2int(int0, int0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1.5688432017948966, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      mnUserTransformation0.setLowerLimit(int0, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = mnUserTransformation0.ext2int(int0, int0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.001953125, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 2;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnAlgebraicVector mnAlgebraicVector0 = mnAlgebraicSymMatrix0.eigenvalues();
      assertNotNull(mnAlgebraicVector0);
      
      int int1 = 1;
      mnUserTransformation0.setUpperLimit(int1, doubleArray0[4]);
      assertEquals(9, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnUserCovariance mnUserCovariance0 = mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
      assertEquals(2, mnUserCovariance0.ncol());
      assertEquals(2, mnUserCovariance0.nrow());
      assertEquals(9, doubleArray0.length);
      assertFalse(int0 == int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserCovariance0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      int int0 = mnUserTransformation0.variableParameters();
      assertEquals(0, int0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnUserCovariance mnUserCovariance0 = mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 6415.52306079;
      doubleArray0[2] = double0;
      doubleArray0[8] = doubleArray0[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 6415.52306079, 0.0, 0.0, 0.0, 0.0, 0.0, 6415.52306079}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      String string0 = "p5";
      mnUserTransformation0.setLimits(string0, double0, doubleArray0[0]);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 6415.52306079, 0.0, 0.0, 0.0, 0.0, 0.0, 6415.52306079}, doubleArray0, 0.01);
      
      int int0 = 5;
      double double1 = mnUserTransformation0.int2extError(int0, doubleArray0[3], doubleArray0[8]);
      assertEquals(9, doubleArray0.length);
      assertEquals(3818.817155194005, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 6415.52306079, 0.0, 0.0, 0.0, 0.0, 0.0, 6415.52306079}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      mnUserTransformation0.setUpperLimit(int0, doubleArray0[1]);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = mnUserTransformation0.int2extError(int0, int0, doubleArray0[0]);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      mnUserTransformation0.setLowerLimit(int0, doubleArray0[1]);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = mnUserTransformation0.int2extError(int0, doubleArray0[1], int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.41421356237309515, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-2040.1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      double double1 = mnUserTransformation0.int2extError(int0, doubleArray0[1], double0);
      assertEquals(9, doubleArray0.length);
      assertEquals((-2040.1), double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1701.0);
      doubleArray0[0] = double0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1701.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      String string0 = "p5";
      mnUserTransformation0.setLimits(string0, doubleArray0[2], doubleArray0[0]);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1701.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 5;
      double double1 = mnUserTransformation0.int2extError(int0, int0, doubleArray0[8]);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1701.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      mnUserTransformation0.setLowerLimit(int0, doubleArray0[8]);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = 2;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int1);
      assertFalse(int1 == int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnAlgebraicVector mnAlgebraicVector0 = mnAlgebraicSymMatrix0.eigenvalues();
      assertFalse(int1 == int0);
      assertNotNull(mnAlgebraicVector0);
      
      MnAlgebraicVector mnAlgebraicVector1 = mnUserTransformation0.transform(mnAlgebraicVector0);
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      assertEquals(9, doubleArray0.length);
      assertFalse(int1 == int0);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnAlgebraicVector1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-33.730413);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      double double1 = mnUserTransformation0.int2ext(int0, double0);
      assertEquals(7, doubleArray0.length);
      assertEquals((-33.730413), double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      String string0 = null;
      mnUserTransformation0.add(string0, doubleArray0[3], doubleArray0[3], double0, doubleArray0[3]);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        mnUserTransformation0.release(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index=4
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      double double0 = 0.0;
      mnUserTransformation0.add(string0, double0);
      // Undeclared exception!
      try { 
        mnUserTransformation0.add(string0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate name: 
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-2040.1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 2;
      String string0 = "p8";
      // Undeclared exception!
      try { 
        mnUserTransformation0.add(string0, int0, doubleArray0[0], double0, doubleArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate name: p8
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      double double0 = (-13.803081726160917);
      mnUserTransformation0.add(string0, double0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        mnUserTransformation0.add(string0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate name: 
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      double[] doubleArray1 = mnUserTransformation0.errors();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      double[] doubleArray1 = mnUserTransformation0.params();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      int int0 = 1;
      mnUserTransformation0.add(string0, int0, int0);
      double double0 = mnUserTransformation0.error(string0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      String string0 = "EMtm";
      // Undeclared exception!
      try { 
        mnUserTransformation0.removeLimits(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      String string0 = "p3";
      mnUserTransformation0.setError(string0, doubleArray0[8]);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      String string0 = "p1";
      // Undeclared exception!
      try { 
        mnUserTransformation0.setLimits(string0, doubleArray0[2], doubleArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min == max
         //
         verifyException("org.freehep.math.minuit.MinuitParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        mnUserTransformation0.error(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "p6";
      double double0 = 2334.0494893331465;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setValue(string0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      List<MinuitParameter> list0 = mnUserTransformation0.parameters();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        mnUserTransformation0.release(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      mnUserTransformation0.setUpperLimit(int0, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = mnUserTransformation0.ext2int(int0, int0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.001953125, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      double double0 = 1.0;
      doubleArray0[1] = double0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(22, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      mnUserTransformation0.add(string0, doubleArray0[0], doubleArray0[8], doubleArray0[2], doubleArray0[1]);
      assertEquals(22, doubleArray0.length);
      
      double double1 = mnUserTransformation0.value(string0);
      assertEquals(22, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 2;
      mnUserTransformation0.removeLimits(int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(22, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 1;
      String string0 = mnUserTransformation0.name(int0);
      assertEquals(22, doubleArray0.length);
      assertEquals("p1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      String string0 = "FKEG-";
      // Undeclared exception!
      try { 
        mnUserTransformation0.fix(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      mnUserTransformation0.fix(int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MinuitParameter minuitParameter0 = mnUserTransformation0.parameter(int0);
      assertEquals(0.0, minuitParameter0.error(), 0.01);
      assertEquals(0.0, minuitParameter0.value(), 0.01);
      assertTrue(minuitParameter0.isFixed());
      assertEquals(1, minuitParameter0.number());
      assertFalse(minuitParameter0.isConst());
      assertEquals("p1", minuitParameter0.name());
      assertEquals(0.0, minuitParameter0.upperLimit(), 0.01);
      assertEquals(0.0, minuitParameter0.lowerLimit(), 0.01);
      assertFalse(minuitParameter0.hasLimits());
      assertFalse(minuitParameter0.hasLowerLimit());
      assertFalse(minuitParameter0.hasUpperLimit());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minuitParameter0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = (-264);
      // Undeclared exception!
      try { 
        mnUserTransformation0.setError(int0, doubleArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      int int0 = 0;
      mnUserTransformation0.setValue(int0, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      String string0 = "p8";
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        mnUserTransformation0.setUpperLimit(string0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(22, doubleArray0.length);
      assertNotNull(mnUserTransformation0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        mnUserTransformation0.value(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 1161.6789841615907;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      
      mnUserTransformation0.setPrecision(double0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
