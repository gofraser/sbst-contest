/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:23:26 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.EOFException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Member;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)40;
      byteArray0[0] = byte0;
      ConstantPool constantPool0 = null;
      int int0 = 246;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, int0, (int) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte byte0 = (byte) (-57);
      Constant[] constantArray0 = new Constant[4];
      String string0 = "N0_&=)p;p'7";
      String string1 = "=oUrBQTmeJid5iK,;";
      int int0 = 112;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int1 = 725;
      int int2 = (-979);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[4];
      byte byte1 = (byte) (-125);
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "float";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      int int0 = (-726);
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      char char0 = '4';
      Utility.fillup(string0, int0, boolean1, char0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)10;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-29);
      byteArray0[1] = byte1;
      byte byte2 = (byte)12;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-44);
      byteArray0[3] = byte3;
      byte byte4 = (byte)112;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-1);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-15);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      Utility.codeToString(byteArray0, constantPool0, (int) byteArray0[7], int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = true;
      boolean boolean1 = true;
      Utility.printArray(objectArray0, boolean0, boolean1);
      String string0 = "StackMap";
      short short0 = Constants.PUTFIELD;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)95;
      byteArray0[0] = byte0;
      byte byte1 = (byte)19;
      byteArray0[1] = byte1;
      ConstantPool constantPool0 = null;
      int int0 = 2;
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, int0, (int) byteArray0[0], boolean2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 11;
      Utility.classOrInterface(int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)98;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)62;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-24);
      byteArray0[3] = byte3;
      byte byte4 = (byte)122;
      byteArray0[0] = byte4;
      byte byte5 = (byte)118;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[5] = byte5;
      byte byte6 = (byte)75;
      byteArray0[6] = byte6;
      byte byte7 = (byte)65;
      byteArray0[7] = byte7;
      byte byte8 = (byte)85;
      byteArray0[8] = byte8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, boolean0);
      String string0 = ")";
      boolean boolean1 = true;
      try { 
        Utility.decode(string0, boolean1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char char0 = 'L';
      boolean boolean0 = Utility.isJavaIdentifierPart(char0);
      int int0 = 0;
      String string0 = Utility.accessToString(int0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[8] = string0;
      Utility.accessToString((int) char0, boolean0);
      String string1 = "Ook<:]B@l";
      try { 
        Utility.typeOfSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ook<:]B@l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-6);
      byteArray0[0] = byte0;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "(";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-123);
      byteArray0[2] = byte2;
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      int int0 = 129;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, int0, (int) byte2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = null;
      String string0 = ")";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = false;
      FileSystemHandling.setPermissions(evoSuiteFile1, boolean0, boolean1, boolean1);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, string0);
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)9;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-2);
      byteArray0[3] = byte3;
      boolean boolean0 = false;
      Utility.encode(byteArray0, boolean0);
      int int0 = 7;
      String string0 = Utility.accessToString(int0, boolean0);
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      int int1 = 125;
      Utility.codeToString(byteArray0, constantPool0, (int) byte2, int1);
      Utility.convertString(string0);
      Utility.getSignature(string0);
      String string1 = null;
      int int2 = 3;
      char char0 = 'S';
      // Undeclared exception!
      try { 
        Utility.fillup(string1, int2, boolean0, char0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      String string0 = Utility.accessToString(int0, boolean0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName(string0, string0, boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)5;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-108);
      byteArray0[3] = byte4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)5, (byte) (-108), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = null;
      String string2 = Utility.codeToString(byteSequence0, constantPool0, boolean0);
      assertEquals(5, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)5, (byte) (-108), (byte)0}, byteArray0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("nop", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) string1;
      objectArray0[1] = (Object) byteArray0[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) constantPool0;
      objectArray0[4] = (Object) string1;
      objectArray0[5] = (Object) constantPool0;
      String string3 = Utility.printArray(objectArray0);
      assertEquals(6, objectArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotNull(string3);
      
      Utility.codeToString(byteArray0, constantPool0, (int) byte2, (int) byte2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)9;
      byteArray0[0] = byte0;
      byte byte1 = (byte)73;
      byteArray0[1] = byte1;
      byte byte2 = (byte)70;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[2] = byte2;
      byte byte3 = (byte)96;
      byteArray0[3] = byte3;
      byte byte4 = (byte)89;
      byteArray0[4] = byte4;
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      int int1 = 419;
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, constantPool0, int0, int1, boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "Invalid type: ";
      String string1 = "rTp0jFHIXK<d\\,s";
      Utility.replace(string0, string0, string1);
      String string2 = "05\\O[FS(!B9]m";
      Utility.convertString(string2);
      String string3 = "JL#\\+<puc!Vq";
      byte byte0 = Utility.typeOfSignature(string3);
      boolean boolean0 = true;
      char char0 = '@';
      Utility.format(byte0, byte0, boolean0, char0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      ConstantPool constantPool0 = null;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) byte0, (int) byte0, boolean1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "impdep2";
      String string1 = null;
      boolean boolean0 = false;
      LocalVariableTable localVariableTable0 = mock(LocalVariableTable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string0, string1, string1, boolean0, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = null;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-120);
      byteArray0[0] = byte0;
      byte byte1 = (byte)46;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-117);
      byteArray0[2] = byte2;
      byte byte3 = (byte)11;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-15);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-124);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      String string0 = "'?4)r";
      Utility.convertString(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char char0 = 'L';
      boolean boolean0 = Utility.isJavaIdentifierPart(char0);
      int int0 = 0;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      stringArray0[8] = string0;
      Utility.accessToString((int) char0, boolean0);
      try { 
        Utility.typeOfSignature(stringArray0[4]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      Utility.accessToString(int0, boolean0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)10;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-87);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      Utility.getSignature(string0);
      String string1 = ";+.Xt>kr)(";
      Utility.searchOpcode(string1);
      int int1 = (-1135);
      Utility.classOrInterface(int1);
      String string2 = "(!w";
      try { 
        Utility.methodSignatureArgumentTypes(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "\"'3<$rr),F5";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "8Vi+sJ\\n";
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8Vi+sJ\\n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 72;
      Utility.accessToString(int0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = true;
      boolean boolean1 = true;
      Utility.printArray(objectArray0, boolean0, boolean1);
      String string0 = "StackMap";
      Utility.searchOpcode(string0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)95;
      byteArray0[0] = byte0;
      byte byte1 = (byte)64;
      byteArray0[1] = byte1;
      ConstantPool constantPool0 = null;
      int int0 = 2;
      boolean boolean2 = true;
      Utility.codeToString(byteArray0, constantPool0, int0, (int) byteArray0[0], boolean2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      String string1 = Utility.methodTypeToSignature(string0, stringArray0);
      int int0 = 2872;
      int int1 = 1616;
      boolean boolean0 = true;
      char char0 = 'R';
      Utility.format(int0, int1, boolean0, char0);
      int int2 = 36;
      int int3 = 1;
      Utility.clearBit(int2, int3);
      Utility.compactClassName(stringArray0[6]);
      String string2 = "";
      Utility.getSignature(string2);
      String string3 = "";
      Utility.methodSignatureReturnType(string1);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-71);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-62);
      byteArray0[1] = byte1;
      byte byte2 = (byte)63;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-10);
      byteArray0[3] = byte3;
      byte byte4 = (byte)2;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-21);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-64);
      byteArray0[6] = byte6;
      byte byte7 = (byte)84;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-78);
      byteArray0[8] = byte8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 63
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 513;
      String string0 = Utility.classOrInterface(int0);
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.toHexString(byteArray0);
      Utility.compactClassName(string1);
      Utility.convertString(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "F;8+j6Rym\\g~_";
      Utility.convertString(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object[] objectArray0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      String string0 = Utility.printArray(objectArray0, boolean0, boolean1);
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType(string0, boolean2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      boolean boolean0 = false;
      String string0 = Utility.printArray(objectArray0, boolean0);
      String string1 = ",LEb5EF";
      Utility.convertString(string1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      Utility.methodTypeToSignature(string0, stringArray0);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "long";
      byte[] byteArray0 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "P*ng";
      // Undeclared exception!
      try { 
        Utility.signatureToString(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P*ng'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[7];
      int int0 = 1616;
      boolean boolean0 = true;
      char char0 = 'R';
      int int1 = 36;
      int int2 = 1;
      Utility.clearBit(int1, int2);
      // Undeclared exception!
      try { 
        Utility.compactClassName(stringArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = true;
      boolean boolean1 = true;
      Utility.printArray(objectArray0, boolean0, boolean1);
      String string0 = "StackMap";
      Utility.searchOpcode(string0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)95;
      byteArray0[0] = byte0;
      byte byte1 = (byte)41;
      byteArray0[1] = byte1;
      ConstantPool constantPool0 = null;
      int int0 = 2;
      boolean boolean2 = true;
      Utility.codeToString(byteArray0, constantPool0, int0, (int) byteArray0[0], boolean2);
      String string1 = null;
      String string2 = "dup2_x1";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string1, string0, string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "dup2";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      Utility.methodTypeToSignature(string0, stringArray0);
      char char0 = ']';
      Utility.isJavaIdentifierPart(char0);
      Utility.searchOpcode(stringArray0[1]);
      Utility.printArray((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)68;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-100);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-24);
      byteArray0[4] = byte4;
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(byteArray0[0]);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantFloat constantFloat0 = new ConstantFloat(byteArray0[3]);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = "V";
      ClassPath classPath0 = new ClassPath(string0);
      int int0 = (-1360);
      Utility.accessToString(int0);
      boolean boolean0 = false;
      Utility.methodSignatureReturnType(string0, boolean0);
      ClassPath classPath1 = new ClassPath(classPath0, string0);
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath1);
      String string1 = "lastore";
      JavaClass javaClass0 = classPathRepository0.findClass(string1);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      int int1 = 5265;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) byteArray0[3], int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_1
         // 1:    nop
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      boolean boolean0 = false;
      String string0 = Utility.printArray(objectArray0, boolean0);
      String string1 = ",LEb5EF";
      Utility.convertString(string1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      Utility.methodTypeToSignature(string0, stringArray0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-108);
      byteArray0[1] = byte1;
      byte byte2 = (byte)77;
      byteArray0[2] = byte2;
      Utility.encode(byteArray0, boolean0);
      ConstantPool constantPool0 = null;
      int int0 = 539;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, int0, (int) byte2, boolean1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "~&9DZWW";
      String string1 = "EZ~<ig&sq^[6,1Wr$> ";
      boolean boolean0 = false;
      Utility.decode(string1, boolean0);
      try { 
        Utility.typeOfMethodSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~&9DZWW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "boolean";
      Utility.getSignature(string0);
      String string1 = "X_bWI";
      try { 
        Utility.methodSignatureArgumentTypes(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X_bWI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "asore";
      int int0 = 0;
      int int1 = Member.DECLARED;
      String string1 = "GC^>fE:.)q!4vdPo@";
      String string2 = "Y`(;k!?t$\\h_KP1%B";
      try { 
        Utility.methodSignatureReturnType(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y`(;k!?t$\\h_KP1%B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = (-681);
      int int1 = (-1888);
      Utility.setBit(int0, int1);
      String string0 = "|+qjznw";
      Utility.getSignature(string0);
      String string1 = "Le<}tX&|D*(xkS]jaG";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString(string1, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Le<}tX&|D*(xkS]jaG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "$E";
      Utility.replace(string0, string0, string0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)87;
      byteArray0[0] = byte0;
      byte byte1 = (byte)68;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-54);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-55);
      byteArray0[4] = byte4;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = byte3;
      byteArray1[1] = byte1;
      byteArray1[2] = byte4;
      byteArray1[3] = byte1;
      byteArray1[4] = byte3;
      byteArray1[5] = byte0;
      byteArray1[6] = byte2;
      Utility.equals(byteArray0, byteArray1);
      String string1 = "";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType(string1, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "lo/g";
      Utility.replace(string0, string0, string0);
      int int0 = 3777;
      Utility.classOrInterface(int0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = (-3042);
      int int1 = 3500;
      boolean boolean0 = Utility.isSet(int0, int1);
      String string0 = "";
      String string1 = "int";
      Utility.replace(string0, string1, string1);
      char char0 = 'H';
      Utility.fillup(string1, int1, boolean0, char0);
      Utility.accessToString(int1, boolean0);
      int int2 = 4;
      Utility.isSet(int1, int2);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)75;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-68);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-80);
      byteArray0[4] = byte4;
      byte byte5 = (byte)123;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 1787;
      boolean boolean0 = true;
      char char0 = 'V';
      String string0 = Utility.format(int0, int0, boolean0, char0);
      char char1 = 'a';
      Utility.isJavaIdentifierPart(char1);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean0, boolean0);
      int int1 = 1024;
      boolean boolean2 = true;
      char char2 = '#';
      String string1 = Utility.format(int1, int0, boolean2, char2);
      Utility.searchOpcode(string0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)65;
      byteArray0[0] = byte0;
      byte byte1 = (byte)117;
      byteArray0[1] = byte1;
      Constant[] constantArray0 = new Constant[1];
      String string2 = "$";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(string1, string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"$\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-41);
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)92;
      byte byte5 = (byte)85;
      byteArray0[3] = byte5;
      byte byte6 = (byte) (-16);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-72);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = byte8;
      boolean boolean0 = true;
      String string0 = Utility.encode(byteArray0, boolean0);
      String string1 = null;
      String string2 = "\"";
      String string3 = Utility.compactClassName(string0, string2, boolean0);
      Utility.setBit(byteArray0[2], byte5);
      int int0 = 3030;
      Utility.classOrInterface(int0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) string3;
      objectArray0[1] = (Object) byteArray0[3];
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) byteArray0[4];
      Utility.printArray(objectArray0, boolean0);
      Utility.convertString(string2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "+ptBW";
      boolean boolean0 = false;
      int int0 = 1259;
      Utility.accessToString(int0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode(byteArray0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "3Q8m4<I>pC^7sv";
      short short0 = Utility.searchOpcode(string0);
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      String string1 = Utility.methodTypeToSignature(string0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("(L3Q8m4<I>pC^7sv;L3Q8m4<I>pC^7sv;)L3Q8m4<I>pC^7sv;", string1);
      assertNotNull(string1);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      String string2 = Utility.printArray((Object[]) stringArray0, boolean0, boolean1);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("\"3Q8m4<I>pC^7sv\", \"3Q8m4<I>pC^7sv\"", string2);
      assertNotNull(string2);
      
      String string3 = "XF2a:]4w4b_d\\v1r;";
      MockFile mockFile0 = new MockFile(string3, string2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.UK;
      PrintStream printStream0 = mockPrintStream0.format(locale0, stringArray0[1], (Object[]) stringArray0);
      Utility.printArray(printStream0, (Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char char0 = 'L';
      Utility.isJavaIdentifierPart(char0);
      int int0 = 0;
      String string0 = Utility.accessToString(int0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[8] = string0;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(string0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)122;
      byteArray0[1] = byte1;
      byte byte2 = (byte)20;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      boolean boolean0 = true;
      String string0 = Utility.encode(byteArray0, boolean0);
      int int0 = 1200;
      char char0 = 'L';
      String string1 = Utility.fillup(string0, int0, boolean0, char0);
      try { 
        Utility.typeOfSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "lsub";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.convertString(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = null;
      int int0 = 2007;
      boolean boolean0 = true;
      char char0 = 'I';
      // Undeclared exception!
      try { 
        Utility.fillup(string0, int0, boolean0, char0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char char0 = '+';
      Utility.isJavaIdentifierPart(char0);
      String string0 = "7IR _6Yc*~OO>";
      String string1 = "veBQN@FWtM9}*g!gX";
      String string2 = "ok6)";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string0, string1, string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7IR _6Yc*~OO>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-3384);
      Utility.classOrInterface(int0);
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "3s\\.D;{1CHYT#B_";
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3s\\.D;{1CHYT#B_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = null;
      ConstantPool constantPool0 = null;
      int int0 = 60;
      int int1 = 209;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, int0, int1, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "JFx";
      boolean boolean0 = false;
      Utility.methodSignatureReturnType(string0, boolean0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-122);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char char0 = 'G';
      Utility.isJavaIdentifierPart(char0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "(0?`<!";
      int int0 = (-946);
      boolean boolean0 = true;
      char char0 = 'W';
      String string1 = Utility.fillup(string0, int0, boolean0, char0);
      Utility.compactClassName(string1);
      String string2 = null;
      String string3 = "9g";
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString(string1, string2, string3, boolean0, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0?`<!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = null;
      ConstantPool constantPool0 = null;
      int int0 = 8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "\\J]c&Hz@id})@xS;";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType(string0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@xS;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)85;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-34);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-20);
      byteArray0[2] = byte2;
      byte byte3 = (byte)59;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-93);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-66);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      String string0 = Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      char char0 = '&';
      Utility.format(byte3, byteArray0[2], boolean0, char0);
      String string1 = "N(3-*$D.l3";
      String string2 = Utility.getSignature(string1);
      Utility.methodSignatureReturnType(string2, boolean0);
      int int0 = 82;
      String string3 = Utility.classOrInterface(int0);
      Utility.searchOpcode(string1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) byteArray0[0];
      objectArray0[2] = (Object) string3;
      objectArray0[3] = (Object) string1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) string1;
      objectArray0[6] = (Object) byteArray0[2];
      Utility.printArray(objectArray0, boolean0, boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      String string0 = "L3Q8m4<I>pC^7sv;V";
      // Undeclared exception!
      try { 
        Utility.signatureToString(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L3Q8m4<I>pC^7sv;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "L_\\y@";
      try { 
        Utility.methodSignatureReturnType(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L_\\y@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object[] objectArray0 = null;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, boolean0);
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)68;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-100);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-24);
      byteArray0[4] = byte4;
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(byteArray0[0]);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantFloat constantFloat0 = new ConstantFloat(byteArray0[3]);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 5265;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) byteArray0[3], int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_1
         // 1:    nop
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      String[] stringArray0 = Constants.OPCODE_NAMES;
      assertEquals(256, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = 4;
      String string1 = Utility.accessToString(int0, boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("protected", string1);
      assertNotNull(string1);
      
      String string2 = "L?:W1LuS[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(string2, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "\t";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes(string0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 81;
      boolean boolean0 = false;
      char char0 = 'u';
      String string0 = Utility.format(int0, int0, boolean0, char0);
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu81", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      String string1 = "null";
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      String string2 = "QD|C3Gyr]T7S_";
      stringArray0[2] = string2;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      String string3 = Utility.methodTypeToSignature(string0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("(Lnull;Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu81;LQD|C3Gyr]T7S_;Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu81;Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu81;)Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu81;", string3);
      assertNotNull(string3);
      
      String string4 = "";
      int int1 = 0;
      boolean boolean1 = true;
      String string5 = Utility.fillup(string4, int1, boolean1, char0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = "";
      String string7 = "";
      // Undeclared exception!
      Utility.replace(string6, string7, stringArray0[1]);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      String string0 = Utility.accessToString(int0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "~&9DZWW";
      try { 
        Utility.typeOfSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~&9DZWW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "float";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(1, objectArray0.length);
      
      String string1 = "dconst_1";
      short short0 = Utility.searchOpcode(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals((short)15, short0);
      
      String string2 = "";
      try { 
        Utility.methodSignatureReturnType(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "OL;o)}#";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString(string0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OL;o)}#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "";
      short short0 = Utility.searchOpcode(string0);
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte)65;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)65, (byte)0}, byteArray0);
      assertNotSame(string1, string0);
      assertEquals("ff 41 00", string1);
      assertNotNull(string1);
      
      String string2 = " (";
      String string3 = Utility.getSignature(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals("L(;", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = Utility.accessToString(int0, boolean0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode(string0, boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      int int1 = (-214);
      String string1 = Utility.accessToString(int1, boolean0);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("private static synchronized native interface abstract strictfp synthetic annotation enum", string1);
      assertNotNull(string1);
      
      String string2 = "Illegally nested brackets:";
      String string3 = Utility.convertString(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals("Illegally nested brackets:", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) string2;
      objectArray0[1] = (Object) string2;
      objectArray0[2] = (Object) string3;
      objectArray0[3] = (Object) string0;
      objectArray0[4] = (Object) string1;
      objectArray0[5] = (Object) string3;
      String string4 = Utility.printArray(objectArray0);
      assertEquals(6, objectArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertEquals("{Illegally nested brackets:, Illegally nested brackets:, Illegally nested brackets:, , private static synchronized native interface abstract strictfp synthetic annotation enum, Illegally nested brackets:}", string4);
      assertNotNull(string4);
      
      String string5 = "{ftj5%Vq\\<[~\"nAf:H";
      boolean boolean1 = true;
      try { 
        Utility.methodSignatureArgumentTypes(string5, boolean1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {ftj5%Vq\\<[~\"nAf:H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "R<}cNTb>S";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode(string0, boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)82, (byte)60, (byte)125, (byte)99, (byte)78, (byte)84, (byte)98, (byte)62, (byte)83}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)117;
      byteArray0[1] = byte1;
      ConstantPool constantPool0 = null;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) byteArray0[1], int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1396);
      int int2 = Utility.clearBit(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)101;
      byteArray0[0] = byte0;
      boolean boolean0 = false;
      String string0 = Utility.encode(byteArray0, boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101}, byteArray0);
      assertEquals("e", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName(string0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101}, byteArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("e", string1);
      assertNotNull(string1);
      
      String string2 = "java.lang.Object";
      String string3 = "boolean";
      boolean boolean1 = false;
      int int3 = (-1);
      DataInput dataInput0 = null;
      Constant[] constantArray0 = new Constant[5];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref(dataInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "4lK-e6_1_$";
      short short0 = Utility.searchOpcode(string0);
      assertEquals((short) (-1), short0);
      
      char char0 = 'r';
      boolean boolean0 = Utility.isJavaIdentifierPart(char0);
      assertTrue(boolean0);
      
      String string1 = "l2d";
      String string2 = "J";
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString(string0, string1, string2, boolean0, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4lK-e6_1_$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "\n";
      String[] stringArray0 = null;
      String string1 = Utility.methodTypeToSignature(string0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("()L;", string1);
      assertNotNull(string1);
      
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-11);
      byte byte2 = (byte) (-19);
      String string2 = "<";
      MockFile mockFile0 = new MockFile(string2, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/evosuite_6th/</<", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("<", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/<", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      String string3 = ":R#}pK^}?-$wpWS";
      boolean boolean0 = true;
      try { 
        Utility.decode(string3, boolean0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = Utility.accessToString(int0, boolean0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "";
      String string2 = Utility.convertString(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "R!Z}@7*%zby";
      try { 
        Utility.methodSignatureReturnType(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R!Z}@7*%zby'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = Utility.accessToString(int0, boolean0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-6);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      ConstantPool constantPool0 = null;
      int int1 = 13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, int1, (int) byteArray0[1], boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char char0 = '0';
      boolean boolean0 = Utility.isJavaIdentifierPart(char0);
      assertTrue(boolean0);
      
      int int0 = 0;
      int int1 = (-1894);
      boolean boolean1 = Utility.isSet(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "*z.`D";
      int int2 = 0;
      char char1 = 'g';
      String string1 = Utility.fillup(string0, int2, boolean1, char1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
      assertFalse(int2 == int1);
      assertFalse(char1 == char0);
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("*z.`D", string1);
      assertNotNull(string1);
      
      int int3 = 141;
      String string2 = Utility.format(int2, int3, boolean0, char0);
      assertFalse(char0 == char1);
      assertFalse(boolean0 == boolean1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", string2);
      assertNotNull(string2);
      
      String string3 = "";
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char char0 = 'q';
      boolean boolean0 = Utility.isJavaIdentifierPart(char0);
      assertTrue(boolean0);
      
      String string0 = "<illegal opcode>";
      String string1 = ")";
      String string2 = "hS 0U|\"MlK8-I";
      String string3 = Utility.replace(string0, string1, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertEquals("<illegal opcode>", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object[] objectArray0 = null;
      String string0 = Utility.printArray(objectArray0);
      assertNull(string0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PrintWriter printWriter0 = null;
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        Utility.printArray(printWriter0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "<illegal opcode>";
      short short0 = Utility.searchOpcode(string0);
      assertEquals((short)203, short0);
      
      String string1 = "oy26=+";
      boolean boolean0 = true;
      char char0 = '9';
      String string2 = Utility.fillup(string1, short0, boolean0, char0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("oy26=+99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-101);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-31);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)47;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-15);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte) (-31), (byte)0, (byte)47, (byte) (-15), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = null;
      String string3 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(7, byteArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte) (-31), (byte)0, (byte)47, (byte) (-15), (byte)0}, byteArray0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("iflt\t\t#225", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-39);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)92;
      byteArray0[4] = byte4;
      byte byte5 = (byte)90;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-16);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-72);
      byteArray0[8] = byte8;
      boolean boolean0 = true;
      String string0 = Utility.encode(byteArray0, boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-39), (byte)0, (byte)0, (byte)92, (byte)90, (byte) (-16), (byte)0, (byte) (-72)}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName(string1, string2, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = (-1);
      boolean boolean0 = true;
      String string0 = Utility.accessToString(int0, boolean0);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      int int1 = 0;
      String string1 = Utility.classOrInterface(int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("class", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-100);
      byteArray0[0] = byte0;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-100)}, byteArray0);
      assertTrue(boolean1);
      
      String string2 = "7r7(E2MIvv";
      String string3 = " arg";
      String string4 = "(0rUwb";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string2, string3, string4, boolean1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7r7(E2MIvv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char char0 = 'X';
      boolean boolean1 = Utility.isJavaIdentifierPart(char0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = 773;
      boolean boolean2 = true;
      String string0 = Utility.accessToString(int0, boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("public protected native", string0);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString(int0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("public protected native interface", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-20);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-31);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)42;
      byteArray0[4] = byte4;
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-20), (byte) (-31), (byte)0, (byte)42}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      
      int int0 = (-1680);
      int int1 = (-3505);
      int int2 = Utility.setBit(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1680), int2);
      
      String string0 = "<illegal opcode>";
      short short0 = Utility.searchOpcode(string0);
      assertEquals((short)203, short0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byteArray0[1];
      String string1 = Utility.printArray(objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "is$4F9(T^4:l:IF?1";
      boolean boolean0 = true;
      try { 
        Utility.decode(string0, boolean0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-74);
      byteArray0[0] = byte0;
      byte byte1 = (byte)108;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)108, (byte) (-93)}, byteArray0);
      assertTrue(boolean0);
      
      String string0 = "";
      boolean boolean1 = false;
      try { 
        Utility.methodSignatureArgumentTypes(string0, boolean1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = " (";
      String string1 = "";
      String string2 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string0, string1, string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "aastore";
      String string1 = "\\n";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string0, string0, string1, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = ";:2Z]";
      boolean boolean0 = true;
      try { 
        Utility.decode(string0, boolean0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      String string1 = Utility.compactClassName(string0, string0, boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 60;
      String string2 = Utility.classOrInterface(int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("class", string2);
      assertNotNull(string2);
      
      byte byte0 = (byte) (-19);
      byte byte1 = (byte)18;
      String string3 = "";
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool0 = null;
      int int1 = 1;
      String string4 = Utility.codeToString(byteArray0, constantPool0, (int) byte0, int1, boolean0);
      assertEquals(0, byteArray0.length);
      assertFalse(byte0 == byte1);
      assertFalse(int1 == int0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = "G";
      try { 
        Utility.methodSignatureReturnType(string5, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "true";
      String string1 = Utility.getSignature(string0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Ltrue;", string1);
      assertNotNull(string1);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString(string0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `true'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = null;
      String string1 = "(";
      // Undeclared exception!
      try { 
        Utility.replace(string0, string1, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      String string1 = Utility.compactClassName(string0, boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "ZoJBe@q?*99c6\\ q(";
      String string1 = Utility.signatureToString(string0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("boolean", string1);
      assertNotNull(string1);
      
      int int0 = 2376;
      String string2 = Utility.classOrInterface(int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("class", string2);
      assertNotNull(string2);
      
      String string3 = Utility.accessToString(int0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("static volatile native strictfp", string3);
      assertNotNull(string3);
      
      int int1 = 0;
      int int2 = (-1882);
      int int3 = Utility.setBit(int1, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(64, int3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-3305);
      String string0 = Utility.classOrInterface(int0);
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes(string0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      boolean boolean0 = true;
      boolean boolean1 = true;
      String string0 = Utility.printArray(objectArray0, boolean0, boolean1);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = "StackMap";
      short short0 = Utility.searchOpcode(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)95;
      byte byte1 = (byte)41;
      byteArray0[1] = byte1;
      ConstantPool constantPool0 = null;
      int int0 = 2;
      boolean boolean2 = true;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, int0, (int) byteArray0[0], boolean2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString(string0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)8;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte)0}, byteArray0);
      assertEquals("08 00", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      String string1 = Utility.printArray(objectArray0, boolean0);
      assertEquals(0, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      ByteSequence byteSequence0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = null;
      String string1 = "invokevirtual";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string0, string0, string1, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "S\"6q";
      String string1 = Utility.methodSignatureReturnType(string0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("short", string1);
      assertNotNull(string1);
      
      int int0 = (-195);
      int int1 = Utility.clearBit(int0, int0);
      assertFalse(int1 == int0);
      assertEquals((-536871107), int1);
      
      PrintStream printStream0 = null;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) printStream0;
      objectArray0[1] = (Object) printStream0;
      objectArray0[2] = (Object) string1;
      objectArray0[3] = (Object) string0;
      objectArray0[4] = (Object) printStream0;
      objectArray0[5] = (Object) string0;
      // Undeclared exception!
      try { 
        Utility.printArray(printStream0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 428;
      String string0 = Utility.accessToString(int0);
      assertEquals("protected static synchronized transient native", string0);
      assertNotNull(string0);
      
      String string1 = "5\\BB[";
      boolean boolean0 = true;
      String string2 = Utility.compactClassName(string1, boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("5\\BB[", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "[+8";
      short short0 = Utility.searchOpcode(string0);
      assertEquals((short) (-1), short0);
      
      String string1 = "";
      int int0 = 0;
      String string2 = Utility.classOrInterface(int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("class", string2);
      assertNotNull(string2);
      
      int int1 = 283;
      int int2 = Utility.clearBit(short0, int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals((-134217729), int2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = ", length = ";
      String string1 = "MK";
      boolean boolean0 = true;
      String string2 = Utility.compactClassName(string0, string1, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(", length = ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)46;
      byteArray0[0] = byte0;
      boolean boolean0 = true;
      String string0 = Utility.encode(byteArray0, boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode(byteArray0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "";
      int int0 = 1;
      boolean boolean0 = false;
      char char0 = 'm';
      String string1 = Utility.fillup(string0, int0, boolean0, char0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("m", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "<illegal opcode>";
      String string1 = Utility.convertString(string0);
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("<illegal opcode>", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[2];
      int int0 = 2531;
      int int1 = 0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertEquals(2531, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      constantArray0[0] = (Constant) constantNameAndType0;
      int int2 = 0;
      ConstantInteger constantInteger0 = new ConstantInteger(int2);
      assertFalse(int2 == int0);
      assertEquals(0, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertNotNull(constantInteger0);
      
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, boolean0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      boolean boolean0 = true;
      String string0 = Utility.printArray(objectArray0, boolean0);
      assertEquals(3, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = 3901;
      boolean boolean1 = false;
      String string1 = Utility.accessToString(int0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("public protected static final synchronized native interface abstract strictfp", string1);
      assertNotNull(string1);
      
      String string2 = null;
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString(string2, boolean2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "Invalid method signature: ";
      String string1 = ")";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string0, string0, string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 1;
      boolean boolean0 = false;
      String string0 = Utility.accessToString(int0, boolean0);
      assertEquals("public", string0);
      assertNotNull(string0);
      
      int int1 = 501;
      int int2 = Utility.clearBit(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(501, int2);
      
      String string1 = "hdmm8-*0";
      int int3 = 0;
      boolean boolean1 = true;
      char char0 = 'F';
      String string2 = Utility.fillup(string1, int3, boolean1, char0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(boolean1 == boolean0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("hdmm8-*0", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)97;
      byteArray0[0] = byte0;
      byte byte1 = (byte)92;
      byteArray0[1] = byte1;
      byte byte2 = (byte)29;
      byteArray0[2] = byte2;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)92, (byte)29}, byteArray0);
      assertTrue(boolean0);
      
      String string0 = "";
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object3));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object1));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      boolean boolean0 = true;
      String string0 = Utility.printArray(objectArray0, boolean0, boolean0);
      assertEquals(8, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "P&m";
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P&m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "UL)-N2";
      boolean boolean0 = true;
      String string1 = Utility.compactClassName(string0, string0, boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-63);
      byteArray0[2] = byte2;
      byte byte3 = (byte)48;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-84);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)30;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-9);
      byteArray0[8] = byte8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte) (-63), (byte)48, (byte) (-84), (byte)0, (byte)0, (byte)30, (byte) (-9)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte) (-63), (byte)48, (byte) (-84), (byte)0, (byte)0, (byte)30, (byte) (-9)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 12460. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = ", name_and_type_index = ";
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , name_and_type_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "IAPN!|:!!r,";
      try { 
        Utility.typeOfMethodSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: IAPN!|:!!r,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "{C<^,(BuM";
      String string1 = Utility.compactClassName(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("{C<^,(BuM", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "Invalid signature: ";
      String string1 = Utility.getSignature(string0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("LInvalid;", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = ", ";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes(string0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "D{E78";
      try { 
        Utility.methodSignatureArgumentTypes(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D{E78
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility utility0 = null;
      String string0 = "Z";
      Object object0 = PrivateAccess.callMethod((Class<Utility>) Utility.class, utility0, "countBrackets", (Object) string0, (Class<?>) String.class);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      int int0 = 199;
      int int1 = 652;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      char char0 = '8';
      String string1 = Utility.format(int0, int1, boolean1, char0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEqualsstring1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-28);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-28);
      byteArray0[1] = byte1;
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-28), (byte) (-28)}, byteArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = (-308);
      int int1 = (-834);
      int int2 = Utility.setBit(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-308), int2);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)35;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-99);
      byteArray0[1] = byte1;
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      int int3 = 2839;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, int3, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 11;
      String string0 = Utility.classOrInterface(int0);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)98;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)62;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-36);
      byteArray0[3] = byte3;
      byte byte4 = (byte)122;
      byteArray0[4] = byte4;
      byte byte5 = (byte)118;
      byteArray0[5] = byte5;
      byte byte6 = (byte)75;
      byteArray0[6] = byte6;
      byte byte7 = (byte)65;
      byteArray0[7] = byte7;
      byte byte8 = (byte)85;
      byteArray0[8] = byte8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)98, (byte) (-1), (byte)62, (byte) (-36), (byte)122, (byte)118, (byte)75, (byte)65, (byte)85}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      String string1 = Utility.codeToString(byteSequence0, constantPool0, boolean0);
      assertEquals(9, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)98, (byte) (-1), (byte)62, (byte) (-36), (byte)122, (byte)118, (byte)75, (byte)65, (byte)85}, byteArray0);
      assertNotSame(string1, string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fadd", string1);
      assertNotNull(string1);
      
      String string2 = ")";
      boolean boolean1 = true;
      try { 
        Utility.decode(string2, boolean1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)67;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-62);
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)33;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[4] = byte4;
      byte byte5 = (byte)10;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-50);
      byteArray0[6] = byte6;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)67, (byte) (-62), (byte)1, (byte)33, (byte)10, (byte) (-50)}, byteArray0);
      assertTrue(boolean0);
      
      int int0 = (-293);
      int int1 = 0;
      boolean boolean1 = Utility.isSet(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string0, string0, string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      boolean boolean0 = false;
      String string0 = Utility.printArray(objectArray0, boolean0);
      assertEquals(6, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = ",LEb5EF";
      String string2 = Utility.convertString(string1);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals(",LEb5EF", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      String string3 = Utility.methodTypeToSignature(string0, stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(3, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)15;
      byteArray0[0] = byte0;
      byte byte1 = (byte)42;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-110);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-17);
      byteArray0[3] = byte3;
      byte byte4 = (byte)82;
      byteArray0[4] = byte4;
      byte byte5 = (byte)40;
      byteArray0[5] = byte5;
      byte byte6 = (byte)59;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-29);
      byteArray0[7] = byte7;
      byte byte8 = (byte)45;
      byteArray0[8] = byte8;
      String string4 = Utility.toHexString(byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)15, (byte)42, (byte) (-110), (byte) (-17), (byte)82, (byte)40, (byte)59, (byte) (-29), (byte)45}, byteArray0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertEquals("0f 2a 92 ef 52 28 3b e3 2d", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      String string1 = Utility.compactClassName(string0, string0, boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 60;
      String string2 = Utility.classOrInterface(int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("class", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byte byte1 = (byte)18;
      byteArray0[2] = byte0;
      byte byte2 = (byte) (-109);
      byteArray0[3] = byte2;
      String string3 = Utility.encode(byteArray0, boolean0);
      assertEquals(4, byteArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-109)}, byteArray0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals("$A$A$A$93", string3);
      assertNotNull(string3);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string4, string0, string3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = (-3042);
      int int1 = 3493;
      boolean boolean0 = Utility.isSet(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean0);
      
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      Utility.replace(string0, string1, string1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char char0 = 'L';
      boolean boolean0 = Utility.isJavaIdentifierPart(char0);
      assertTrue(boolean0);
      
      int int0 = (-54);
      String string0 = Utility.accessToString(int0);
      assertEquals("private static volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      stringArray0[8] = string0;
      String string1 = Utility.accessToString((int) char0, boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("protected static volatile", string1);
      assertNotNull(string1);
      
      String string2 = "pok:]B@_";
      try { 
        Utility.typeOfSignature(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pok:]B@_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "InnerClasses(";
      boolean boolean0 = false;
      String string1 = Utility.signatureToString(string0, boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("int", string1);
      assertNotNull(string1);
      
      String string2 = "`4%Xt2hg:Zmn3~TPb1[";
      String string3 = "aH_53$6";
      char char0 = 'S';
      boolean boolean1 = Utility.isJavaIdentifierPart(char0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) string3;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) string2;
      objectArray0[5] = (Object) string2;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[6] = object1;
      boolean boolean2 = false;
      String string4 = Utility.printArray(objectArray0, boolean1, boolean2);
      assertEquals(7, objectArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotNull(string4);
      
      String string5 = "%)fU<C@";
      String string6 = "java.lang.";
      String string7 = Utility.replace(string5, string6, string4);
      assertEquals(7, objectArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string7);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string6);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string6);
      assertNotSame(string5, string3);
      assertSame(string5, string7);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string7);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertSame(string7, string5);
      assertEquals("%)fU<C@", string7);
      assertNotNull(string7);
      
      String string8 = "zU@g+xAP66^52";
      try { 
        Utility.methodSignatureReturnType(string8, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `zU@g+xAP66^52'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "short";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      Constant[] constantArray0 = new Constant[4];
      String string1 = "<illegal opcode>";
      try { 
        Utility.methodSignatureReturnType(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "\"'3<$rr),F5";
      try { 
        Utility.typeOfMethodSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"'3<$rr),F5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      String string1 = Utility.methodTypeToSignature(string0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("(L;L;L;L;L;L;L;)L;", string1);
      assertNotNull(string1);
      
      int int0 = 2872;
      int int1 = 1616;
      boolean boolean0 = true;
      char char0 = 'R';
      String string2 = Utility.format(int0, int1, boolean0, char0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      
      int int2 = 36;
      int int3 = 1;
      int int4 = Utility.clearBit(int2, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertEquals(36, int4);
      
      String string3 = Utility.compactClassName(stringArray0[6]);
      assertEquals(7, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = "";
      String string5 = Utility.getSignature(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(string4, string5);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertEquals("L;", string5);
      assertNotNull(string5);
      
      String string6 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString(string6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      boolean boolean0 = true;
      boolean boolean1 = true;
      String string0 = Utility.printArray(objectArray0, boolean0, boolean1);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = "StackMap";
      short short0 = Utility.searchOpcode(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)95;
      byteArray0[0] = byte0;
      byte byte1 = (byte)41;
      byteArray0[1] = byte1;
      ConstantPool constantPool0 = null;
      int int0 = 2;
      boolean boolean2 = true;
      String string2 = Utility.codeToString(byteArray0, constantPool0, int0, (int) byteArray0[0], boolean2);
      assertEquals(5, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)95, (byte)41, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("2:    nop\n3:    nop\n4:    nop\n", string2);
      assertNotNull(string2);
  }
}
