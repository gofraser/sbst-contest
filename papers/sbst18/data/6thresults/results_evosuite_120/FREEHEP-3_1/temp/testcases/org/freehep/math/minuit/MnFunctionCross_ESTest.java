/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:43:44 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 1.4119589891261721;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      double double1 = 0.0;
      doubleArray0[1] = double0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 1.4119589891261721, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, 1.4119589891261721, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      
      mnUserParameterState0.setLimits(int0, double0, double1);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, 1.4119589891261721, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double0, mnStrategy0, double1);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(mnFunctionCross0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertArrayEquals(new double[] {0.0, 1.4119589891261721, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, doubleArray1[0], intArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1252.8801675523878;
      double[] doubleArray0 = new double[5];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      
      mnUserParameterState0.setLimits(int0, double1, doubleArray0[3]);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      FCNBase fCNBase0 = null;
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double0, mnStrategy0, int0);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(mnFunctionCross0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, int0, intArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = null;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      double double0 = 16.6;
      int int0 = 983;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double0, mnStrategy0, int0);
      assertNotNull(mnFunctionCross0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid state
         //
         verifyException("org.freehep.math.minuit.MnApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = null;
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertNotNull(mnUserCovariance0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 3896;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, doubleArray0[0], mnStrategy0, double0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(mnFunctionCross0);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, doubleArray0[0], int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3896, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      double double0 = 689.73806824259;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      assertEquals(9, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertNotNull(mnUserCovariance0);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertEquals(9, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, doubleArray0[7], mnStrategy0, doubleArray0[2]);
      assertEquals(9, doubleArray0.length);
      assertNotNull(mnFunctionCross0);
      assertEquals(9, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, double0, intArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 0.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertNotNull(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertNotNull(mnUserParameterState0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double0, mnStrategy0, double0);
      assertNotNull(mnFunctionCross0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[9];
      mnStrategy0.setHighStrategy();
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      
      int int0 = (-2983);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, doubleArray0[6], int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 0.5;
      double double1 = (-2061.8771);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double1, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = double0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.5, 0.0}, doubleArray0, 0.01);
      
      double double2 = 653.235221704783;
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double2, mnStrategy0, double1);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotNull(mnFunctionCross0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.5, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      mnUserParameterState0.setUpperLimit(intArray0[0], doubleArray0[1]);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.5, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, intArray0[0], intArray0[2]);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-31.9842051284349);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      double double1 = 1993.817;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double1, mnStrategy0, double0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(mnFunctionCross0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, doubleArray0[1], intArray0[1]);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(mnCross0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 0.5;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      double double1 = (-992.403);
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      double double2 = 4.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {(-992.403), 0.5, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double2, mnStrategy0, doubleArray0[0]);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotNull(mnFunctionCross0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertArrayEquals(new double[] {(-992.403), 0.5, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      mnUserParameterState0.setUpperLimit(intArray0[0], doubleArray0[0]);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {(-992.403), 0.5, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, intArray0[0], intArray0[2]);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 0.5;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = double0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.5, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double0, mnStrategy0, double0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnFunctionCross0);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertArrayEquals(new double[] {0.0, 0.5, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      mnUserParameterState0.setUpperLimit(intArray0[0], doubleArray0[1]);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.5, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, intArray0[0], intArray0[2]);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(mnCross0);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertArrayEquals(new double[] {0.0, 0.5, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 1.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      double double1 = (-215.39);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double1, mnStrategy0, int0);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(mnFunctionCross0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, double1, int0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(mnCross0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      double double0 = (-992.403);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {(-992.403), (-992.403), (-992.403)}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, doubleArray0[0], mnStrategy0, doubleArray0[1]);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnFunctionCross0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertArrayEquals(new double[] {(-992.403), (-992.403), (-992.403)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, doubleArray0[2], int0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(mnCross0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertArrayEquals(new double[] {(-992.403), (-992.403), (-992.403)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 0.5;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double0, mnStrategy0, double0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnFunctionCross0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      int int1 = (-2804);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, double0, int1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mnCross0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 1.4119589891261721;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      double double1 = (-215.39);
      doubleArray0[1] = double1;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameters0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, (-215.39), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, (-215.39), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      
      mnUserParameterState0.setLimits(int0, double1, double0);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertArrayEquals(new double[] {0.0, (-215.39), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double1, mnStrategy0, doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(mnFunctionCross0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertArrayEquals(new double[] {0.0, (-215.39), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, double1, intArray0[0]);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(mnCross0);
      assertEquals(5, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertArrayEquals(new double[] {0.0, (-215.39), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-367.137796155021);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      double double1 = 809.2003712;
      doubleArray0[0] = double1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {809.2003712, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isLow());
      
      mnUserParameterState0.setLowerLimit(int0, doubleArray0[1]);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertArrayEquals(new double[] {809.2003712, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, doubleArray0[2], mnStrategy0, doubleArray0[0]);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotNull(mnFunctionCross0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertArrayEquals(new double[] {809.2003712, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, doubleArray0[2], int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 0.5;
      double double1 = (-2061.8771);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double1, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = double1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {(-2061.8771), 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double0, mnStrategy0, doubleArray0[0]);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(mnFunctionCross0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertArrayEquals(new double[] {(-2061.8771), 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      mnUserParameterState0.setUpperLimit(intArray0[0], doubleArray0[1]);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertArrayEquals(new double[] {(-2061.8771), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, int0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 0.5;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = double0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.5, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double0, mnStrategy0, double0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnFunctionCross0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertArrayEquals(new double[] {0.5, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      mnUserParameterState0.setUpperLimit(intArray0[0], doubleArray0[1]);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.5, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, doubleArray0[0], intArray0[2]);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(mnCross0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertArrayEquals(new double[] {0.5, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 0.5;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double0, double0, double0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, double0, mnStrategy0, doubleArray0[0]);
      assertEquals(3, doubleArray0.length);
      assertNotNull(mnFunctionCross0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, double0, intArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }
}
