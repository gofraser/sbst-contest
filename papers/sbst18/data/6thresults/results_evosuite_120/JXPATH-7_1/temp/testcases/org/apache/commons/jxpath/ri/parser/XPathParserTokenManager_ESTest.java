/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:18:24 GMT 2018
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringBufferInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
import org.apache.commons.jxpath.ri.parser.Token;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathParserTokenManager_ESTest extends XPathParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'r';
      charArray0[0] = char0;
      charArray0[1] = char0;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      charArrayReader0.reset();
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r'}, charArray0);
      
      charArrayReader0.reset();
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r'}, charArray0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r'}, charArray0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("rr", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      
      int int0 = 1852;
      long long0 = 961L;
      long long1 = 0L;
      long long2 = 559L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa10_0", (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class, (Object) long0, (Class<?>) long.class, (Object) long2, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(simpleCharStream0).getBeginColumn();
      doReturn(0).when(simpleCharStream0).getBeginLine();
      doReturn(0).when(simpleCharStream0).getEndColumn();
      doReturn(0).when(simpleCharStream0).getEndLine();
      doReturn('a').when(simpleCharStream0).readChar();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, simpleCharStream0.bufpos);
      int int0 = 14;
      xPathParserTokenManager0.curLexState = int0;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa0_0");
      Token token0 = xPathParserTokenManager0.jjFillToken();
      long long0 = 396L;
      long long1 = 2529L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa3_0", (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) token0.beginColumn, (Class<?>) long.class, (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 68;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      int int1 = 2664;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, int1, int1, int1);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      long long0 = 1452L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa15_0", (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) long0, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class);
      long long1 = 2097152L;
      long long2 = 1729L;
      long long3 = 4096L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa13_0", (Object) long1, (Class<?>) long.class, (Object) long2, (Class<?>) long.class, (Object) long3, (Class<?>) long.class, (Object) long3, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = (-9);
      char[] charArray0 = new char[2];
      char char0 = '<';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      long long0 = 2268L;
      long long1 = 2097152L;
      long long2 = 479L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa6_0", (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class, (Object) int0, (Class<?>) long.class, (Object) long2, (Class<?>) long.class);
      xPathParserTokenManager0.getNextToken();
      xPathParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'r';
      charArray0[0] = char0;
      charArray0[1] = char0;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedReader0);
      charArrayReader0.reset();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      Token token0 = xPathParserTokenManager0.getNextToken();
      int int0 = 1852;
      long long0 = (-555L);
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa6_0", (Object) token0.endLine, (Class<?>) long.class, (Object) token0.kind, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) long0, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      int int0 = 2918;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(inputStream0, int0, int0, int0);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      long long0 = 0L;
      long long1 = 1048576L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa3_0", (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) long0, (Class<?>) long.class, (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class);
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      int int0 = 0;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, int0);
      EvoSuiteFile evoSuiteFile1 = null;
      String string0 = null;
      FileSystemHandling.appendLineToFile(evoSuiteFile1, string0);
      PrintStream printStream0 = mock(PrintStream.class, new ViolatedAssumptionAnswer());
      long long0 = (-563L);
      try { 
        PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa12_0", (Object) long0, (Class<?>) long.class, (Object) int0, (Class<?>) long.class, (Object) long0, (Class<?>) long.class, (Object) long0, (Class<?>) long.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      int int0 = 226;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(inputStream0, int0, int0);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      long long0 = 2435L;
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa16_0", (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) long0, (Class<?>) long.class);
      Token token0 = xPathParserTokenManager0.getNextToken();
      Token token1 = xPathParserTokenManager0.jjFillToken();
      int[] intArray0 = new int[7];
      intArray0[0] = token1.beginLine;
      intArray0[1] = token0.beginColumn;
      intArray0[2] = simpleCharStream0.bufpos;
      intArray0[3] = token0.beginLine;
      intArray0[4] = token0.beginLine;
      intArray0[5] = token0.beginColumn;
      intArray0[6] = simpleCharStream0.bufpos;
      PrivateAccess.setVariable((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjstateSet", (Object) intArray0);
      long long1 = 140737488355328L;
      long long2 = 908L;
      InputStream inputStream1 = null;
      DataInputStream dataInputStream0 = new DataInputStream(inputStream1);
      int int1 = 2397;
      simpleCharStream0.ReInit((InputStream) dataInputStream0, int1, token0.beginColumn, token0.beginLine);
      long long3 = 0L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa14_0", (Object) long1, (Class<?>) long.class, (Object) long2, (Class<?>) long.class, (Object) long3, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class);
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "akmPl:'U";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      int int0 = 68;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int0);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      Token token0 = xPathParserTokenManager0.getNextToken();
      long long0 = 1048576L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa17_0", (Object) token0.beginColumn, (Class<?>) long.class, (Object) long0, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('a', 'a').when(simpleCharStream0).readChar();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      long long0 = 65536L;
      int int0 = Integer.MAX_VALUE;
      xPathParserTokenManager0.jjmatchedKind = int0;
      long long1 = 18417088200703L;
      long long2 = (-165L);
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa5_0", (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) long2, (Class<?>) long.class);
      long long3 = 4503599627370496L;
      long long4 = 72057594037927936L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa5_0", (Object) long3, (Class<?>) long.class, (Object) long1, (Class<?>) long.class, (Object) long4, (Class<?>) long.class, (Object) long4, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0);
      int int0 = 56;
      simpleCharStream0.line = int0;
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      int int1 = (-2143);
      xPathParserTokenManager0.jjmatchedPos = int1;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjStopStringLiteralDfa_0", (Object) simpleCharStream0.bufpos, (Class<?>) int.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class);
      long long0 = (-44191614293245952L);
      long long1 = 754L;
      long long2 = 0L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa9_0", (Object) int0, (Class<?>) long.class, (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class, (Object) long2, (Class<?>) long.class);
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 56, column 1.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "akmPl:'U";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      int int0 = 68;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int0);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjStartNfa_0", (Object) simpleCharStream0.bufpos, (Class<?>) int.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class);
      long long0 = 1143L;
      long long1 = (-1172L);
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa10_0", (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class, (Object) long0, (Class<?>) long.class, (Object) long0, (Class<?>) long.class);
      xPathParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "K3;Z=o./gP+:ClV]";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(stringBufferInputStream0, stringBufferInputStream0);
      int int0 = (-238);
      int int1 = (-2033);
      int int2 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, int0, int1, int2);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      xPathParserTokenManager0.getNextToken();
      xPathParserTokenManager0.jjFillToken();
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      long long0 = (-1190L);
      long long1 = (-3370L);
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager1, "jjMoveStringLiteralDfa20_0", (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('a', 'a', 'a', 'a', 'a').when(simpleCharStream0).readChar();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      int int0 = (-4583);
      long long0 = 288230376151711743L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa19_0", (Object) int0, (Class<?>) long.class, (Object) long0, (Class<?>) long.class);
      long long1 = (-4224L);
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa14_0", (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) int0, (Class<?>) long.class, (Object) int0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class);
      xPathParserTokenManager0.jjmatchedPos = int0;
      long long2 = 264L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa13_0", (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) long2, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      Token token0 = xPathParserTokenManager0.jjFillToken();
      Token token1 = xPathParserTokenManager0.jjFillToken();
      Token token2 = xPathParserTokenManager0.jjFillToken();
      token2.image = token1.image;
      token2.endColumn = token0.beginColumn;
      int int1 = 1;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjAddStates", (Object) token2.kind, (Class<?>) int.class, (Object) int1, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('a', 'a', 'a', 'a', 'a').when(simpleCharStream0).readChar();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      int int0 = (-4583);
      long long0 = 288230376151711743L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa19_0", (Object) int0, (Class<?>) long.class, (Object) long0, (Class<?>) long.class);
      long long1 = (-4224L);
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa14_0", (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) int0, (Class<?>) long.class, (Object) int0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class);
      xPathParserTokenManager0.jjmatchedPos = int0;
      long long2 = 264L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa13_0", (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) long2, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      Token token0 = xPathParserTokenManager0.jjFillToken();
      Token token1 = xPathParserTokenManager0.jjFillToken();
      Token token2 = xPathParserTokenManager0.jjFillToken();
      token2.image = token1.image;
      token2.endColumn = token0.beginColumn;
      int int1 = 1;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjAddStates", (Object) token2.kind, (Class<?>) int.class, (Object) int1, (Class<?>) int.class);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = 3;
      char char0 = '8';
      char char1 = ']';
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('a').when(simpleCharStream0).BeginToken();
      doReturn('a', 'a', 'a', 'a', 'a').when(simpleCharStream0).readChar();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      int int1 = 0;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjCheckNAddStates", (Object) int1, (Class<?>) int.class, (Object) simpleCharStream0.bufpos, (Class<?>) int.class);
      xPathParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = (-9);
      char[] charArray0 = new char[2];
      char char0 = '<';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'<', ']'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'<', ']'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'<', ']'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'<', ']'}, charArray0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("<", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(13, token0.kind);
      assertEquals(1, token0.beginLine);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'<', ']'}, charArray0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("<", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(13, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      
      int int1 = 3;
      int int2 = 1;
      try { 
        PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjCheckNAddStates", (Object) int1, (Class<?>) int.class, (Object) int2, (Class<?>) int.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      long long0 = 65536L;
      long long1 = 18417088200704L;
      long long2 = (-165L);
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa5_0", (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) long2, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-238);
      int int1 = (-2033);
      int int2 = 0;
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjStopStringLiteralDfa_0", (Object) int2, (Class<?>) int.class, (Object) int2, (Class<?>) long.class, (Object) int0, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      int int0 = 3;
      char char0 = '8';
      char char1 = ']';
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(simpleCharStream0).getBeginColumn();
      doReturn(0).when(simpleCharStream0).getBeginLine();
      doReturn(0).when(simpleCharStream0).getEndColumn();
      doReturn(0).when(simpleCharStream0).getEndLine();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      Token token0 = xPathParserTokenManager0.jjFillToken();
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa21_0", (Object) token0.beginColumn, (Class<?>) long.class, (Object) token0.beginColumn, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('a').when(simpleCharStream0).BeginToken();
      doReturn('a').when(simpleCharStream0).readChar();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, simpleCharStream0.bufpos);
      int[] intArray0 = new int[2];
      intArray0[0] = simpleCharStream0.bufpos;
      intArray0[1] = simpleCharStream0.bufpos;
      int int0 = (-496);
      xPathParserTokenManager0.jjround = int0;
      PrivateAccess.setVariable((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjstateSet", (Object) intArray0);
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa20_0", (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class);
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa0_0");
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-238);
      int int1 = (-2033);
      int int2 = 0;
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(simpleCharStream0).getBeginColumn();
      doReturn(0).when(simpleCharStream0).getBeginLine();
      doReturn(0).when(simpleCharStream0).getEndColumn();
      doReturn(0).when(simpleCharStream0).getEndLine();
      doReturn('a').when(simpleCharStream0).readChar();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      xPathParserTokenManager0.jjFillToken();
      long long0 = 4423L;
      long long1 = 3855L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa19_0", (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = 3;
      char[] charArray0 = new char[2];
      char char0 = '8';
      charArray0[1] = char0;
      char char1 = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      int int1 = 119;
      charArrayReader0.mark(int1);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      long long0 = 379L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa16_0", (Object) long0, (Class<?>) long.class, (Object) long0, (Class<?>) long.class);
      xPathParserTokenManager0.getNextToken();
      xPathParserTokenManager0.jjFillToken();
      xPathParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = 3;
      char[] charArray0 = new char[2];
      char char0 = '8';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      xPathParserTokenManager0.getNextToken();
      Token token0 = xPathParserTokenManager0.jjFillToken();
      long long0 = 2251799813685248L;
      long long1 = 580817017372672L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa14_0", (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class, (Object) token0.endLine, (Class<?>) long.class, (Object) token0.kind, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "K3;Z=o./gP+:ClV]";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(stringBufferInputStream0, stringBufferInputStream0);
      int int0 = (-238);
      int int1 = (-2033);
      int int2 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, int0, int1, int2);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      int int3 = 115;
      xPathParserTokenManager0.jjnewStateCnt = int3;
      xPathParserTokenManager0.getNextToken();
      long long0 = 1L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa20_0", (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) long0, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      long long0 = 140737488355328L;
      long long1 = 381L;
      long long2 = 18417088200704L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa3_0", (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class, (Object) long0, (Class<?>) long.class, (Object) long2, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char char0 = '';
      int int0 = 0;
      int int1 = 3151;
      int int2 = (-2272);
      char char1 = 'u';
      int int3 = 0;
      char char2 = 'G';
      int int4 = 1177;
      int int5 = 0;
      int int6 = 1;
      int int7 = 6068;
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(char2).when(simpleCharStream0).BeginToken();
      doReturn((String) null).when(simpleCharStream0).GetImage();
      doReturn(int0, 0).when(simpleCharStream0).getBeginColumn();
      doReturn(int4, 0).when(simpleCharStream0).getBeginLine();
      doReturn(int1, int5).when(simpleCharStream0).getEndColumn();
      doReturn(int6, int7).when(simpleCharStream0).getEndLine();
      doReturn(char0).when(simpleCharStream0).readChar();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      xPathParserTokenManager0.jjFillToken();
      xPathParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "akmPl:'U";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      int int0 = 68;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int0);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      xPathParserTokenManager0.getNextToken();
      Token token0 = xPathParserTokenManager0.jjFillToken();
      int int1 = 13;
      try { 
        PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjCheckNAddStates", (Object) token0.beginColumn, (Class<?>) int.class, (Object) int1, (Class<?>) int.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 69
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-886);
      char[] charArray0 = new char[3];
      char char0 = 'q';
      charArray0[0] = char0;
      char char1 = '4';
      charArray0[1] = char1;
      char char2 = '*';
      charArray0[2] = char2;
      int int1 = 0;
      int int2 = 0;
      int int3 = (-2860);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      int int4 = 13;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, int4, int0);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      int int5 = 1579;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjStartNfaWithStates_0", (Object) int1, (Class<?>) int.class, (Object) int5, (Class<?>) int.class, (Object) int5, (Class<?>) int.class);
      int int6 = (-2076);
      XPathParserTokenManager xPathParserTokenManager1 = null;
      try {
        xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0, int6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2076. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "akmPl:'U";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      int int0 = 68;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int0);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      long long0 = (-960L);
      long long1 = 4096L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa5_0", (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class);
      xPathParserTokenManager0.getNextToken();
      xPathParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = 3;
      char[] charArray0 = new char[2];
      char char0 = '8';
      charArray0[0] = char0;
      char char1 = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      int int1 = 119;
      charArrayReader0.mark(int1);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      xPathParserTokenManager0.getNextToken();
      xPathParserTokenManager0.jjFillToken();
      long long0 = 35184372088832L;
      long long1 = 35184372088832L;
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa18_0", (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjAddStates", (Object) simpleCharStream0.bufpos, (Class<?>) int.class, (Object) simpleCharStream0.bufpos, (Class<?>) int.class);
      int int0 = 5002;
      xPathParserTokenManager0.jjmatchedPos = int0;
      int int1 = 0;
      int int2 = (-2860);
      try { 
        PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjCheckNAddTwoStates", (Object) int1, (Class<?>) int.class, (Object) int2, (Class<?>) int.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2860
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      int int0 = 1431;
      int int1 = 12;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, int0, int0, int1);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      try { 
        PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjAddStates", (Object) int1, (Class<?>) int.class, (Object) simpleCharStream0.bufpos, (Class<?>) int.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = 3;
      char[] charArray0 = new char[2];
      char char0 = '7';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      xPathParserTokenManager0.getNextToken();
      xPathParserTokenManager0.jjFillToken();
      xPathParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "akmPl:'U";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      int int0 = 68;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int0);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      Token token0 = xPathParserTokenManager0.getNextToken();
      int int1 = 78;
      int int2 = (-821);
      long long0 = 0L;
      long long1 = (-549L);
      try { 
        PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjCanMove_0", (Object) token0.endColumn, (Class<?>) int.class, (Object) int1, (Class<?>) int.class, (Object) int2, (Class<?>) int.class, (Object) long0, (Class<?>) long.class, (Object) long1, (Class<?>) long.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 78
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = (-28);
      char[] charArray0 = new char[2];
      char char0 = '<';
      charArray0[0] = char0;
      char char1 = 'h';
      charArray0[0] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      xPathParserTokenManager0.getNextToken();
      xPathParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char char0 = 'Y';
      int int0 = 1;
      char char1 = ' ';
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(char0).when(simpleCharStream0).BeginToken();
      doReturn((String) null, (String) null).when(simpleCharStream0).GetImage();
      doReturn(0, 0).when(simpleCharStream0).getBeginColumn();
      doReturn(0, 0).when(simpleCharStream0).getBeginLine();
      doReturn(int0, 0).when(simpleCharStream0).getEndColumn();
      doReturn(int0, 0).when(simpleCharStream0).getEndLine();
      doReturn(char1).when(simpleCharStream0).readChar();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      int int1 = (-872);
      xPathParserTokenManager0.jjnewStateCnt = int1;
      int int2 = (-3741);
      xPathParserTokenManager0.curLexState = int2;
      xPathParserTokenManager0.getNextToken();
      xPathParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char char0 = 'q';
      int int0 = 19;
      char char1 = ' ';
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(char0, 'a').when(simpleCharStream0).BeginToken();
      doReturn((String) null, (String) null).when(simpleCharStream0).GetImage();
      doReturn(0, 0).when(simpleCharStream0).getBeginColumn();
      doReturn(0, 0).when(simpleCharStream0).getBeginLine();
      doReturn(int0, 0).when(simpleCharStream0).getEndColumn();
      doReturn(int0, 0).when(simpleCharStream0).getEndLine();
      doReturn(char1, 'a', 'a', 'a', 'a').when(simpleCharStream0).readChar();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(19, token0.endLine);
      assertEquals(19, token0.endColumn);
      
      char char2 = 'R';
      xPathParserTokenManager0.curChar = char2;
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(char0 == char1);
      assertFalse(char0 == char2);
      assertFalse(char1 == char0);
      assertFalse(char1 == char2);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(78, token1.kind);
      
      xPathParserTokenManager0.getNextToken();
      xPathParserTokenManager0.jjFillToken();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char char0 = '{';
      int int0 = 859;
      int int1 = 1576;
      int int2 = 529;
      int int3 = 0;
      int int4 = (-278);
      int int5 = 2739;
      int int6 = (-1931);
      int int7 = (-701);
      int int8 = (-1);
      int int9 = (-598);
      int int10 = (-1186);
      int int11 = 2;
      SimpleCharStream simpleCharStream0 = mock(SimpleCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(char0).when(simpleCharStream0).BeginToken();
      doReturn(int0, int0, int0, int1).when(simpleCharStream0).getBeginColumn();
      doReturn(int1, int0, int2, int3).when(simpleCharStream0).getBeginLine();
      doReturn(int4, int5, int6, int5, int7).when(simpleCharStream0).getEndColumn();
      doReturn(int8, int9, int1, int10, int11).when(simpleCharStream0).getEndLine();
      doReturn(char0).when(simpleCharStream0).readChar();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int10);
      assertFalse(int0 == int1);
      assertFalse(int0 == int9);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int8);
      assertFalse(int0 == int6);
      assertFalse(int0 == int11);
      assertFalse(int0 == int7);
      assertFalse(int0 == int2);
      assertFalse(int1 == int9);
      assertFalse(int1 == int11);
      assertFalse(int1 == int7);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int6);
      assertFalse(int1 == int8);
      assertFalse(int1 == int2);
      assertFalse(int1 == int10);
      assertFalse(int1 == int4);
      assertFalse(int1 == int5);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int10);
      assertFalse(int2 == int7);
      assertFalse(int2 == int9);
      assertFalse(int2 == int4);
      assertFalse(int2 == int11);
      assertFalse(int2 == int0);
      assertFalse(int2 == int6);
      assertFalse(int2 == int8);
      assertFalse(int2 == int5);
      assertFalse(int3 == int7);
      assertFalse(int3 == int4);
      assertFalse(int3 == int9);
      assertFalse(int3 == int11);
      assertFalse(int3 == int5);
      assertFalse(int3 == int10);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int8);
      assertFalse(int3 == int0);
      assertFalse(int3 == int6);
      assertFalse(int4 == int2);
      assertFalse(int4 == int5);
      assertFalse(int4 == int10);
      assertFalse(int4 == int11);
      assertFalse(int4 == int9);
      assertFalse(int4 == int7);
      assertFalse(int4 == int8);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int6);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int6);
      assertFalse(int5 == int11);
      assertFalse(int5 == int9);
      assertFalse(int5 == int4);
      assertFalse(int5 == int10);
      assertFalse(int5 == int7);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int8);
      assertFalse(int6 == int1);
      assertFalse(int6 == int10);
      assertFalse(int6 == int5);
      assertFalse(int6 == int7);
      assertFalse(int6 == int9);
      assertFalse(int6 == int4);
      assertFalse(int6 == int11);
      assertFalse(int6 == int2);
      assertFalse(int6 == int8);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int7 == int10);
      assertFalse(int7 == int3);
      assertFalse(int7 == int11);
      assertFalse(int7 == int5);
      assertFalse(int7 == int9);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int8);
      assertFalse(int7 == int1);
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int9);
      assertFalse(int8 == int11);
      assertFalse(int8 == int7);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int10);
      assertFalse(int9 == int2);
      assertFalse(int9 == int0);
      assertFalse(int9 == int6);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int10);
      assertFalse(int9 == int11);
      assertFalse(int9 == int3);
      assertFalse(int9 == int7);
      assertFalse(int9 == int4);
      assertFalse(int10 == int1);
      assertFalse(int10 == int5);
      assertFalse(int10 == int7);
      assertFalse(int10 == int9);
      assertFalse(int10 == int4);
      assertFalse(int10 == int11);
      assertFalse(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int0);
      assertFalse(int10 == int6);
      assertFalse(int10 == int8);
      assertFalse(int11 == int9);
      assertFalse(int11 == int7);
      assertFalse(int11 == int0);
      assertFalse(int11 == int6);
      assertFalse(int11 == int3);
      assertFalse(int11 == int8);
      assertFalse(int11 == int1);
      assertFalse(int11 == int2);
      assertFalse(int11 == int10);
      assertFalse(int11 == int4);
      assertFalse(int11 == int5);
      
      int int12 = 1508;
      xPathParserTokenManager0.defaultLexState = int12;
      xPathParserTokenManager0.SwitchTo(simpleCharStream0.bufpos);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int10);
      assertFalse(int0 == int12);
      assertFalse(int0 == int9);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int8);
      assertFalse(int0 == int6);
      assertFalse(int0 == int11);
      assertFalse(int0 == int7);
      assertFalse(int0 == int2);
      assertFalse(int1 == int9);
      assertFalse(int1 == int11);
      assertFalse(int1 == int7);
      assertFalse(int1 == int3);
      assertFalse(int1 == int6);
      assertFalse(int1 == int0);
      assertFalse(int1 == int8);
      assertFalse(int1 == int2);
      assertFalse(int1 == int12);
      assertFalse(int1 == int10);
      assertFalse(int1 == int4);
      assertFalse(int1 == int5);
      assertFalse(int2 == int1);
      assertFalse(int2 == int12);
      assertFalse(int2 == int3);
      assertFalse(int2 == int10);
      assertFalse(int2 == int7);
      assertFalse(int2 == int4);
      assertFalse(int2 == int9);
      assertFalse(int2 == int11);
      assertFalse(int2 == int6);
      assertFalse(int2 == int0);
      assertFalse(int2 == int8);
      assertFalse(int2 == int5);
      assertFalse(int3 == int7);
      assertFalse(int3 == int4);
      assertFalse(int3 == int11);
      assertFalse(int3 == int9);
      assertFalse(int3 == int5);
      assertFalse(int3 == int10);
      assertFalse(int3 == int1);
      assertFalse(int3 == int12);
      assertFalse(int3 == int2);
      assertFalse(int3 == int8);
      assertFalse(int3 == int6);
      assertFalse(int3 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int12);
      assertFalse(int4 == int5);
      assertFalse(int4 == int11);
      assertFalse(int4 == int10);
      assertFalse(int4 == int9);
      assertFalse(int4 == int7);
      assertFalse(int4 == int8);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int6);
      assertFalse(int4 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int6);
      assertFalse(int5 == int0);
      assertFalse(int5 == int11);
      assertFalse(int5 == int12);
      assertFalse(int5 == int4);
      assertFalse(int5 == int9);
      assertFalse(int5 == int7);
      assertFalse(int5 == int10);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int8);
      assertFalse(int6 == int12);
      assertFalse(int6 == int1);
      assertFalse(int6 == int10);
      assertFalse(int6 == int5);
      assertFalse(int6 == int7);
      assertFalse(int6 == int4);
      assertFalse(int6 == int11);
      assertFalse(int6 == int9);
      assertFalse(int6 == int2);
      assertFalse(int6 == int8);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int7 == int10);
      assertFalse(int7 == int3);
      assertFalse(int7 == int11);
      assertFalse(int7 == int5);
      assertFalse(int7 == int12);
      assertFalse(int7 == int9);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertFalse(int7 == int8);
      assertFalse(int7 == int1);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int11);
      assertFalse(int8 == int9);
      assertFalse(int8 == int7);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int12);
      assertFalse(int8 == int10);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertFalse(int9 == int0);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int10);
      assertFalse(int9 == int11);
      assertFalse(int9 == int3);
      assertFalse(int9 == int7);
      assertFalse(int9 == int4);
      assertFalse(int9 == int12);
      assertFalse(int10 == int1);
      assertFalse(int10 == int12);
      assertFalse(int10 == int5);
      assertFalse(int10 == int7);
      assertFalse(int10 == int4);
      assertFalse(int10 == int9);
      assertFalse(int10 == int11);
      assertFalse(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int6);
      assertFalse(int10 == int0);
      assertFalse(int10 == int8);
      assertFalse(int11 == int9);
      assertFalse(int11 == int7);
      assertFalse(int11 == int6);
      assertFalse(int11 == int0);
      assertFalse(int11 == int3);
      assertFalse(int11 == int8);
      assertFalse(int11 == int1);
      assertFalse(int11 == int2);
      assertFalse(int11 == int12);
      assertFalse(int11 == int10);
      assertFalse(int11 == int4);
      assertFalse(int11 == int5);
      
      Token token0 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int10);
      assertFalse(int0 == int12);
      assertFalse(int0 == int9);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int8);
      assertFalse(int0 == int6);
      assertFalse(int0 == int11);
      assertFalse(int0 == int7);
      assertFalse(int0 == int2);
      assertFalse(int1 == int9);
      assertFalse(int1 == int11);
      assertFalse(int1 == int7);
      assertFalse(int1 == int3);
      assertFalse(int1 == int6);
      assertFalse(int1 == int0);
      assertFalse(int1 == int8);
      assertFalse(int1 == int2);
      assertFalse(int1 == int12);
      assertFalse(int1 == int10);
      assertFalse(int1 == int4);
      assertFalse(int1 == int5);
      assertFalse(int2 == int1);
      assertFalse(int2 == int12);
      assertFalse(int2 == int3);
      assertFalse(int2 == int10);
      assertFalse(int2 == int7);
      assertFalse(int2 == int4);
      assertFalse(int2 == int9);
      assertFalse(int2 == int11);
      assertFalse(int2 == int6);
      assertFalse(int2 == int0);
      assertFalse(int2 == int8);
      assertFalse(int2 == int5);
      assertFalse(int3 == int7);
      assertFalse(int3 == int4);
      assertFalse(int3 == int11);
      assertFalse(int3 == int9);
      assertFalse(int3 == int5);
      assertFalse(int3 == int10);
      assertFalse(int3 == int1);
      assertFalse(int3 == int12);
      assertFalse(int3 == int2);
      assertFalse(int3 == int8);
      assertFalse(int3 == int6);
      assertFalse(int3 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int12);
      assertFalse(int4 == int5);
      assertFalse(int4 == int11);
      assertFalse(int4 == int10);
      assertFalse(int4 == int9);
      assertFalse(int4 == int7);
      assertFalse(int4 == int8);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int6);
      assertFalse(int4 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int6);
      assertFalse(int5 == int0);
      assertFalse(int5 == int11);
      assertFalse(int5 == int12);
      assertFalse(int5 == int4);
      assertFalse(int5 == int9);
      assertFalse(int5 == int7);
      assertFalse(int5 == int10);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int8);
      assertFalse(int6 == int12);
      assertFalse(int6 == int1);
      assertFalse(int6 == int10);
      assertFalse(int6 == int5);
      assertFalse(int6 == int7);
      assertFalse(int6 == int4);
      assertFalse(int6 == int11);
      assertFalse(int6 == int9);
      assertFalse(int6 == int2);
      assertFalse(int6 == int8);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int7 == int10);
      assertFalse(int7 == int3);
      assertFalse(int7 == int11);
      assertFalse(int7 == int5);
      assertFalse(int7 == int12);
      assertFalse(int7 == int9);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertFalse(int7 == int8);
      assertFalse(int7 == int1);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int11);
      assertFalse(int8 == int9);
      assertFalse(int8 == int7);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int12);
      assertFalse(int8 == int10);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertFalse(int9 == int0);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int10);
      assertFalse(int9 == int11);
      assertFalse(int9 == int3);
      assertFalse(int9 == int7);
      assertFalse(int9 == int4);
      assertFalse(int9 == int12);
      assertFalse(int10 == int1);
      assertFalse(int10 == int12);
      assertFalse(int10 == int5);
      assertFalse(int10 == int7);
      assertFalse(int10 == int4);
      assertFalse(int10 == int9);
      assertFalse(int10 == int11);
      assertFalse(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int6);
      assertFalse(int10 == int0);
      assertFalse(int10 == int8);
      assertFalse(int11 == int9);
      assertFalse(int11 == int7);
      assertFalse(int11 == int6);
      assertFalse(int11 == int0);
      assertFalse(int11 == int3);
      assertFalse(int11 == int8);
      assertFalse(int11 == int1);
      assertFalse(int11 == int2);
      assertFalse(int11 == int12);
      assertFalse(int11 == int10);
      assertFalse(int11 == int4);
      assertFalse(int11 == int5);
      assertEquals("", token0.toString());
      assertEquals(1576, token0.beginLine);
      assertEquals(859, token0.beginColumn);
      assertEquals((-278), token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals((-1), token0.endLine);
      
      xPathParserTokenManager0.jjmatchedKind = token0.kind;
      assertEquals("", token0.toString());
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int10);
      assertFalse(int0 == int12);
      assertFalse(int0 == int9);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int8);
      assertFalse(int0 == int6);
      assertFalse(int0 == int11);
      assertFalse(int0 == int7);
      assertFalse(int0 == int2);
      assertFalse(int1 == int9);
      assertFalse(int1 == int11);
      assertFalse(int1 == int7);
      assertFalse(int1 == int3);
      assertFalse(int1 == int6);
      assertFalse(int1 == int0);
      assertFalse(int1 == int8);
      assertFalse(int1 == int2);
      assertFalse(int1 == int12);
      assertFalse(int1 == int10);
      assertFalse(int1 == int4);
      assertFalse(int1 == int5);
      assertFalse(int2 == int1);
      assertFalse(int2 == int12);
      assertFalse(int2 == int3);
      assertFalse(int2 == int10);
      assertFalse(int2 == int7);
      assertFalse(int2 == int4);
      assertFalse(int2 == int9);
      assertFalse(int2 == int11);
      assertFalse(int2 == int6);
      assertFalse(int2 == int0);
      assertFalse(int2 == int8);
      assertFalse(int2 == int5);
      assertFalse(int3 == int7);
      assertFalse(int3 == int4);
      assertFalse(int3 == int11);
      assertFalse(int3 == int9);
      assertFalse(int3 == int5);
      assertFalse(int3 == int10);
      assertFalse(int3 == int1);
      assertFalse(int3 == int12);
      assertFalse(int3 == int2);
      assertFalse(int3 == int8);
      assertFalse(int3 == int6);
      assertFalse(int3 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int12);
      assertFalse(int4 == int5);
      assertFalse(int4 == int11);
      assertFalse(int4 == int10);
      assertFalse(int4 == int9);
      assertFalse(int4 == int7);
      assertFalse(int4 == int8);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int6);
      assertFalse(int4 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int6);
      assertFalse(int5 == int0);
      assertFalse(int5 == int11);
      assertFalse(int5 == int12);
      assertFalse(int5 == int4);
      assertFalse(int5 == int9);
      assertFalse(int5 == int7);
      assertFalse(int5 == int10);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int8);
      assertFalse(int6 == int12);
      assertFalse(int6 == int1);
      assertFalse(int6 == int10);
      assertFalse(int6 == int5);
      assertFalse(int6 == int7);
      assertFalse(int6 == int4);
      assertFalse(int6 == int11);
      assertFalse(int6 == int9);
      assertFalse(int6 == int2);
      assertFalse(int6 == int8);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int7 == int10);
      assertFalse(int7 == int3);
      assertFalse(int7 == int11);
      assertFalse(int7 == int5);
      assertFalse(int7 == int12);
      assertFalse(int7 == int9);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertFalse(int7 == int8);
      assertFalse(int7 == int1);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int11);
      assertFalse(int8 == int9);
      assertFalse(int8 == int7);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int12);
      assertFalse(int8 == int10);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertFalse(int9 == int0);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int10);
      assertFalse(int9 == int11);
      assertFalse(int9 == int3);
      assertFalse(int9 == int7);
      assertFalse(int9 == int4);
      assertFalse(int9 == int12);
      assertFalse(int10 == int1);
      assertFalse(int10 == int12);
      assertFalse(int10 == int5);
      assertFalse(int10 == int7);
      assertFalse(int10 == int4);
      assertFalse(int10 == int9);
      assertFalse(int10 == int11);
      assertFalse(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int6);
      assertFalse(int10 == int0);
      assertFalse(int10 == int8);
      assertFalse(int11 == int9);
      assertFalse(int11 == int7);
      assertFalse(int11 == int6);
      assertFalse(int11 == int0);
      assertFalse(int11 == int3);
      assertFalse(int11 == int8);
      assertFalse(int11 == int1);
      assertFalse(int11 == int2);
      assertFalse(int11 == int12);
      assertFalse(int11 == int10);
      assertFalse(int11 == int4);
      assertFalse(int11 == int5);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals("", token1.toString());
      assertEquals((-598), token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(859, token1.beginLine);
      assertEquals(859, token1.beginColumn);
      assertEquals(2739, token1.endColumn);
      
      token0.endColumn = xPathParserTokenManager0.defaultLexState;
      assertEquals("", token0.toString());
      
      token0.kind = token1.beginLine;
      assertEquals("", token0.toString());
      assertEquals("", token1.toString());
      
      Token token2 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int10);
      assertFalse(int0 == int12);
      assertFalse(int0 == int9);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int8);
      assertFalse(int0 == int6);
      assertFalse(int0 == int11);
      assertFalse(int0 == int7);
      assertFalse(int0 == int2);
      assertFalse(int1 == int9);
      assertFalse(int1 == int11);
      assertFalse(int1 == int7);
      assertFalse(int1 == int3);
      assertFalse(int1 == int6);
      assertFalse(int1 == int0);
      assertFalse(int1 == int8);
      assertFalse(int1 == int2);
      assertFalse(int1 == int12);
      assertFalse(int1 == int10);
      assertFalse(int1 == int4);
      assertFalse(int1 == int5);
      assertFalse(int2 == int1);
      assertFalse(int2 == int12);
      assertFalse(int2 == int3);
      assertFalse(int2 == int10);
      assertFalse(int2 == int7);
      assertFalse(int2 == int4);
      assertFalse(int2 == int9);
      assertFalse(int2 == int11);
      assertFalse(int2 == int6);
      assertFalse(int2 == int0);
      assertFalse(int2 == int8);
      assertFalse(int2 == int5);
      assertFalse(int3 == int7);
      assertFalse(int3 == int4);
      assertFalse(int3 == int11);
      assertFalse(int3 == int9);
      assertFalse(int3 == int5);
      assertFalse(int3 == int10);
      assertFalse(int3 == int1);
      assertFalse(int3 == int12);
      assertFalse(int3 == int2);
      assertFalse(int3 == int8);
      assertFalse(int3 == int6);
      assertFalse(int3 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int12);
      assertFalse(int4 == int5);
      assertFalse(int4 == int11);
      assertFalse(int4 == int10);
      assertFalse(int4 == int9);
      assertFalse(int4 == int7);
      assertFalse(int4 == int8);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int6);
      assertFalse(int4 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int6);
      assertFalse(int5 == int0);
      assertFalse(int5 == int11);
      assertFalse(int5 == int12);
      assertFalse(int5 == int4);
      assertFalse(int5 == int9);
      assertFalse(int5 == int7);
      assertFalse(int5 == int10);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int8);
      assertFalse(int6 == int12);
      assertFalse(int6 == int1);
      assertFalse(int6 == int10);
      assertFalse(int6 == int5);
      assertFalse(int6 == int7);
      assertFalse(int6 == int4);
      assertFalse(int6 == int11);
      assertFalse(int6 == int9);
      assertFalse(int6 == int2);
      assertFalse(int6 == int8);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int7 == int10);
      assertFalse(int7 == int3);
      assertFalse(int7 == int11);
      assertFalse(int7 == int5);
      assertFalse(int7 == int12);
      assertFalse(int7 == int9);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertFalse(int7 == int8);
      assertFalse(int7 == int1);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int11);
      assertFalse(int8 == int9);
      assertFalse(int8 == int7);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int12);
      assertFalse(int8 == int10);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertFalse(int9 == int0);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int10);
      assertFalse(int9 == int11);
      assertFalse(int9 == int3);
      assertFalse(int9 == int7);
      assertFalse(int9 == int4);
      assertFalse(int9 == int12);
      assertFalse(int10 == int1);
      assertFalse(int10 == int12);
      assertFalse(int10 == int5);
      assertFalse(int10 == int7);
      assertFalse(int10 == int4);
      assertFalse(int10 == int9);
      assertFalse(int10 == int11);
      assertFalse(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int6);
      assertFalse(int10 == int0);
      assertFalse(int10 == int8);
      assertFalse(int11 == int9);
      assertFalse(int11 == int7);
      assertFalse(int11 == int6);
      assertFalse(int11 == int0);
      assertFalse(int11 == int3);
      assertFalse(int11 == int8);
      assertFalse(int11 == int1);
      assertFalse(int11 == int2);
      assertFalse(int11 == int12);
      assertFalse(int11 == int10);
      assertFalse(int11 == int4);
      assertFalse(int11 == int5);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals("", token2.toString());
      assertEquals((-1931), token2.endColumn);
      assertEquals(859, token2.beginColumn);
      assertEquals(529, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1576, token2.endLine);
      
      Token token3 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int10);
      assertFalse(int0 == int12);
      assertFalse(int0 == int9);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int8);
      assertFalse(int0 == int6);
      assertFalse(int0 == int11);
      assertFalse(int0 == int7);
      assertFalse(int0 == int2);
      assertFalse(int1 == int9);
      assertFalse(int1 == int11);
      assertFalse(int1 == int7);
      assertFalse(int1 == int3);
      assertFalse(int1 == int6);
      assertFalse(int1 == int0);
      assertFalse(int1 == int8);
      assertFalse(int1 == int2);
      assertFalse(int1 == int12);
      assertFalse(int1 == int10);
      assertFalse(int1 == int4);
      assertFalse(int1 == int5);
      assertFalse(int2 == int1);
      assertFalse(int2 == int12);
      assertFalse(int2 == int3);
      assertFalse(int2 == int10);
      assertFalse(int2 == int7);
      assertFalse(int2 == int4);
      assertFalse(int2 == int9);
      assertFalse(int2 == int11);
      assertFalse(int2 == int6);
      assertFalse(int2 == int0);
      assertFalse(int2 == int8);
      assertFalse(int2 == int5);
      assertFalse(int3 == int7);
      assertFalse(int3 == int4);
      assertFalse(int3 == int11);
      assertFalse(int3 == int9);
      assertFalse(int3 == int5);
      assertFalse(int3 == int10);
      assertFalse(int3 == int1);
      assertFalse(int3 == int12);
      assertFalse(int3 == int2);
      assertFalse(int3 == int8);
      assertFalse(int3 == int6);
      assertFalse(int3 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int12);
      assertFalse(int4 == int5);
      assertFalse(int4 == int11);
      assertFalse(int4 == int10);
      assertFalse(int4 == int9);
      assertFalse(int4 == int7);
      assertFalse(int4 == int8);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int6);
      assertFalse(int4 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int6);
      assertFalse(int5 == int0);
      assertFalse(int5 == int11);
      assertFalse(int5 == int12);
      assertFalse(int5 == int4);
      assertFalse(int5 == int9);
      assertFalse(int5 == int7);
      assertFalse(int5 == int10);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int8);
      assertFalse(int6 == int12);
      assertFalse(int6 == int1);
      assertFalse(int6 == int10);
      assertFalse(int6 == int5);
      assertFalse(int6 == int7);
      assertFalse(int6 == int4);
      assertFalse(int6 == int11);
      assertFalse(int6 == int9);
      assertFalse(int6 == int2);
      assertFalse(int6 == int8);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int7 == int10);
      assertFalse(int7 == int3);
      assertFalse(int7 == int11);
      assertFalse(int7 == int5);
      assertFalse(int7 == int12);
      assertFalse(int7 == int9);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertFalse(int7 == int8);
      assertFalse(int7 == int1);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int11);
      assertFalse(int8 == int9);
      assertFalse(int8 == int7);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int12);
      assertFalse(int8 == int10);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertFalse(int9 == int0);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int10);
      assertFalse(int9 == int11);
      assertFalse(int9 == int3);
      assertFalse(int9 == int7);
      assertFalse(int9 == int4);
      assertFalse(int9 == int12);
      assertFalse(int10 == int1);
      assertFalse(int10 == int12);
      assertFalse(int10 == int5);
      assertFalse(int10 == int7);
      assertFalse(int10 == int4);
      assertFalse(int10 == int9);
      assertFalse(int10 == int11);
      assertFalse(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int6);
      assertFalse(int10 == int0);
      assertFalse(int10 == int8);
      assertFalse(int11 == int9);
      assertFalse(int11 == int7);
      assertFalse(int11 == int6);
      assertFalse(int11 == int0);
      assertFalse(int11 == int3);
      assertFalse(int11 == int8);
      assertFalse(int11 == int1);
      assertFalse(int11 == int2);
      assertFalse(int11 == int12);
      assertFalse(int11 == int10);
      assertFalse(int11 == int4);
      assertFalse(int11 == int5);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertEquals("", token3.toString());
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals((-1186), token3.endLine);
      assertEquals(2739, token3.endColumn);
      assertEquals(1576, token3.beginColumn);
      
      xPathParserTokenManager0.defaultLexState = int12;
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2, column -701.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = 3;
      char[] charArray0 = new char[2];
      char char0 = '^';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'^', ']'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'^', ']'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'^', ']'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"^\" (94), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = (-9);
      char[] charArray0 = new char[10];
      char char0 = 'O';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'O', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'O', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'O', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'O', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("O", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'O', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("O", token1.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "_@W}i]KgA.";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(10, stringBufferInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(stringBufferInputStream0, stringBufferInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(10, stringBufferInputStream0.available());
      
      int int0 = (-238);
      int int1 = (-2033);
      int int2 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, int0, int1, int2);
      assertNotNull(simpleCharStream0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(10, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(10, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-2033), simpleCharStream0.getBeginColumn());
      assertEquals((-238), simpleCharStream0.getEndLine());
      assertEquals((-2033), simpleCharStream0.getEndColumn());
      assertEquals((-238), simpleCharStream0.getLine());
      assertEquals((-2033), simpleCharStream0.getColumn());
      assertEquals((-238), simpleCharStream0.getBeginLine());
      assertEquals("_", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-2033), token0.beginColumn);
      assertEquals((-2033), token0.endColumn);
      assertEquals((-238), token0.endLine);
      assertEquals((-238), token0.beginLine);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = (-9);
      char[] charArray0 = new char[2];
      char char0 = '8';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = charArray0[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', '8'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', '8'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', '8'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', '8'}, charArray0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("88", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', '8'}, charArray0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("88", token1.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(20, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "DCXVf";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0);
      assertNotNull(simpleCharStream0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      boolean boolean0 = stringBufferInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(8, stringBufferInputStream0.available());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("DC", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "K3;Z=o./gP+:ClV]";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(16, stringBufferInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(stringBufferInputStream0, stringBufferInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(16, stringBufferInputStream0.available());
      
      int int0 = (-238);
      int int1 = (-2033);
      int int2 = 0;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)12;
      byteArray0[0] = byte0;
      byte byte1 = (byte)60;
      byteArray0[1] = byte1;
      byte byte2 = (byte)5;
      byteArray0[2] = byte2;
      byte byte3 = (byte)71;
      byteArray0[3] = byte3;
      byte byte4 = (byte)64;
      byteArray0[4] = byte4;
      byte byte5 = (byte)64;
      byteArray0[5] = byte5;
      byte byte6 = (byte)18;
      byteArray0[6] = byte6;
      byte byte7 = (byte)15;
      byteArray0[7] = byte7;
      int int3 = stringBufferInputStream0.read(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)75, (byte)51, (byte)59, (byte)90, (byte)61, (byte)111, (byte)46, (byte)47}, byteArray0);
      assertEquals(8, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(8, stringBufferInputStream0.available());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, int0, int1, int2);
      assertNotNull(simpleCharStream0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-238), simpleCharStream0.getBeginLine());
      assertEquals((-2032), simpleCharStream0.getEndColumn());
      assertEquals((-238), simpleCharStream0.getEndLine());
      assertEquals((-238), simpleCharStream0.getLine());
      assertEquals((-2033), simpleCharStream0.getBeginColumn());
      assertEquals((-2032), simpleCharStream0.getColumn());
      assertEquals("gP", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals((-238), token0.endLine);
      assertEquals((-2032), token0.endColumn);
      assertEquals((-238), token0.beginLine);
      assertEquals((-2033), token0.beginColumn);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-238), simpleCharStream0.getBeginLine());
      assertEquals((-2031), simpleCharStream0.getEndColumn());
      assertEquals((-238), simpleCharStream0.getEndLine());
      assertEquals((-2031), simpleCharStream0.getBeginColumn());
      assertEquals((-2031), simpleCharStream0.getColumn());
      assertEquals((-238), simpleCharStream0.getLine());
      assertEquals("+", token1.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2031), token1.beginColumn);
      assertEquals((-238), token1.beginLine);
      assertEquals((-2031), token1.endColumn);
      assertEquals(9, token1.kind);
      assertEquals((-238), token1.endLine);
      
      Token token2 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-238), simpleCharStream0.getBeginLine());
      assertEquals((-2031), simpleCharStream0.getEndColumn());
      assertEquals((-238), simpleCharStream0.getEndLine());
      assertEquals((-2031), simpleCharStream0.getBeginColumn());
      assertEquals((-2031), simpleCharStream0.getColumn());
      assertEquals((-238), simpleCharStream0.getLine());
      assertEquals("+", token2.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-238), token2.endLine);
      assertEquals((-238), token2.beginLine);
      assertEquals((-2031), token2.beginColumn);
      assertEquals((-2031), token2.endColumn);
      assertEquals(9, token2.kind);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = 3;
      char[] charArray0 = new char[2];
      char char0 = '8';
      charArray0[0] = char0;
      char char1 = 'e';
      charArray0[1] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'e'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'e'}, charArray0);
      assertTrue(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'e'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'e'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char2 = simpleCharStream0.readChar();
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'e'}, charArray0);
      assertEquals('8', char2);
      assertTrue(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.input_stream = simpleCharStream0;
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getEndLine());
      assertEquals(1, xPathParserTokenManager0.input_stream.getLine());
      assertEquals(1, xPathParserTokenManager0.input_stream.getEndColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'e'}, charArray0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      xPathParserTokenManager0.input_stream = simpleCharStream0;
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getEndLine());
      assertEquals(1, xPathParserTokenManager0.input_stream.getLine());
      assertEquals(1, xPathParserTokenManager0.input_stream.getEndColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getBeginLine());
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'e'}, charArray0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals("", token1.toString());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'e'}, charArray0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals("e", token2.toString());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(78, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.beginColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      int int1 = 1395;
      int[] intArray0 = new int[7];
      int int2 = 2541;
      char[] charArray0 = new char[5];
      char char0 = 't';
      charArray0[0] = char0;
      char char1 = '7';
      charArray0[1] = char1;
      char char2 = '+';
      charArray0[2] = char2;
      char char3 = '*';
      charArray0[3] = char3;
      char char4 = 'Q';
      charArray0[4] = char4;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'t', '7', '+', '*', 'Q'}, charArray0);
      
      int int3 = 636;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, int1, int3);
      assertNotNull(simpleCharStream0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'t', '7', '+', '*', 'Q'}, charArray0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'t', '7', '+', '*', 'Q'}, charArray0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'t', '7', '+', '*', 'Q'}, charArray0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(637, simpleCharStream0.getColumn());
      assertEquals(1395, simpleCharStream0.getLine());
      assertEquals(637, simpleCharStream0.getEndColumn());
      assertEquals(636, simpleCharStream0.getBeginColumn());
      assertEquals(1395, simpleCharStream0.getBeginLine());
      assertEquals(1395, simpleCharStream0.getEndLine());
      assertEquals("t7", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1395, token0.beginLine);
      assertEquals(637, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1395, token0.endLine);
      assertEquals(636, token0.beginColumn);
      
      intArray0[0] = int2;
      intArray0[1] = int0;
      intArray0[2] = int1;
      intArray0[6] = int1;
      int int4 = 41;
      int int5 = 3162;
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "dakmPlU";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      
      int int0 = 68;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int0);
      assertNotNull(simpleCharStream0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(73, simpleCharStream0.getEndColumn());
      assertEquals(68, simpleCharStream0.getBeginLine());
      assertEquals(73, simpleCharStream0.getColumn());
      assertEquals(68, simpleCharStream0.getBeginColumn());
      assertEquals(68, simpleCharStream0.getEndLine());
      assertEquals(68, simpleCharStream0.getLine());
      assertEquals("dakmPl", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(73, token0.endColumn);
      assertEquals(68, token0.beginColumn);
      assertEquals(68, token0.endLine);
      assertEquals(68, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)10;
      byteArray0[0] = byte0;
      byte byte1 = (byte)13;
      byteArray0[1] = byte1;
      byteArray0[2] = byteArray0[1];
      byte byte2 = (byte)117;
      byteArray0[3] = byte2;
      byte byte3 = (byte)9;
      byteArray0[4] = byte3;
      byte byte4 = (byte)1;
      byteArray0[5] = byte4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte)13, (byte)13, (byte)117, (byte)9, (byte)1}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      int int0 = 1;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, int0);
      assertNotNull(pushbackInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte)13, (byte)13, (byte)117, (byte)9, (byte)1}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      int int1 = 3239;
      boolean boolean1 = pushbackInputStream0.markSupported();
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte)13, (byte)13, (byte)117, (byte)9, (byte)1}, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertEquals(6, byteArrayInputStream0.available());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte)13, (byte)13, (byte)117, (byte)9, (byte)1}, byteArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, int1, int0);
      assertNotNull(simpleCharStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte)13, (byte)13, (byte)117, (byte)9, (byte)1}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte)13, (byte)13, (byte)117, (byte)9, (byte)1}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte)13, (byte)13, (byte)117, (byte)9, (byte)1}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(3242, simpleCharStream0.getEndLine());
      assertEquals(3242, simpleCharStream0.getLine());
      assertEquals(3242, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("u", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(3242, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(3242, token0.endLine);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3242, column 10.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "akmPl:'U";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(9, stringBufferInputStream0.available());
      
      int int0 = 68;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int0);
      assertNotNull(simpleCharStream0);
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.jjround = simpleCharStream0.bufpos;
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(68, simpleCharStream0.getBeginColumn());
      assertEquals(68, simpleCharStream0.getLine());
      assertEquals(68, simpleCharStream0.getBeginLine());
      assertEquals(69, simpleCharStream0.getColumn());
      assertEquals(68, simpleCharStream0.getEndLine());
      assertEquals(69, simpleCharStream0.getEndColumn());
      assertEquals("ak", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(68, token0.beginColumn);
      assertEquals(68, token0.endLine);
      assertEquals(68, token0.beginLine);
      assertEquals(69, token0.endColumn);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(68, simpleCharStream0.getLine());
      assertEquals(68, simpleCharStream0.getBeginLine());
      assertEquals(72, simpleCharStream0.getEndColumn());
      assertEquals(68, simpleCharStream0.getEndLine());
      assertEquals(72, simpleCharStream0.getColumn());
      assertEquals(70, simpleCharStream0.getBeginColumn());
      assertEquals("mPl", token1.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(72, token1.endColumn);
      assertEquals(68, token1.endLine);
      assertEquals(70, token1.beginColumn);
      assertEquals(68, token1.beginLine);
      assertEquals(78, token1.kind);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "~NBWaeEkX17I?AG";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(15, stringBufferInputStream0.available());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0);
      assertNotNull(simpleCharStream0);
      assertEquals(15, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(126, int0);
      assertEquals(14, stringBufferInputStream0.available());
      
      boolean boolean0 = simpleCharStream0.prevCharIsCR;
      assertFalse(boolean0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(14, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals("NBWaeEkX17I", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, simpleCharStream0.bufpos);
      assertEquals(11, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 12.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "g=Q<:ad.a,ws";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(12, stringBufferInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(stringBufferInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(12, stringBufferInputStream0.available());
      
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, int0, int0);
      assertNotNull(simpleCharStream0);
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      int int1 = (-1291);
      xPathParserTokenManager0.jjnewStateCnt = int1;
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int2 = 1;
      xPathParserTokenManager0.jjround = int2;
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals('g', char0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      int int3 = (-707);
      xPathParserTokenManager0.jjmatchedPos = int3;
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("=", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(11, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)122;
      byteArray0[0] = byte0;
      byte byte1 = (byte)4;
      byteArray0[1] = byte1;
      byte byte2 = (byte)16;
      byteArray0[2] = byte2;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)4, (byte)16}, byteArray0);
      assertFalse(boolean0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("Q", token1.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(0, token1.endLine);
      
      int int4 = stringBufferInputStream0.read();
      assertEquals((-1), int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(0, stringBufferInputStream0.available());
      
      String string1 = dataInputStream0.readLine();
      assertNull(string1);
      assertEquals(0, stringBufferInputStream0.available());
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("<", token2.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(13, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      
      String string2 = simpleCharStream0.GetImage();
      assertNotNull(string2);
      assertEquals("<", string2);
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(string0, string2);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(":", token3.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.beginLine);
      assertEquals(79, token3.kind);
      assertEquals(4, token3.beginColumn);
      
      Token token4 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertNotSame(string0, string2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(":", token4.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token4.beginColumn);
      assertEquals(4, token4.endColumn);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.beginLine);
      assertEquals(79, token4.kind);
      
      Token token5 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertNotSame(string0, string2);
      assertNotSame(token5, token2);
      assertNotSame(token5, token1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("ad.a", token5.toString());
      assertEquals(8, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token5.beginLine);
      assertEquals(78, token5.kind);
      assertEquals(0, token5.endLine);
      assertEquals(8, token5.endColumn);
      assertEquals(5, token5.beginColumn);
      
      Token token6 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token6);
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token3));
      assertNotSame(string0, string2);
      assertNotSame(token6, token0);
      assertNotSame(token6, token1);
      assertNotSame(token6, token4);
      assertNotSame(token6, token2);
      assertNotSame(token6, token5);
      assertNotSame(token6, token3);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(",", token6.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, simpleCharStream0.bufpos);
      assertEquals(0, token6.endLine);
      assertEquals(87, token6.kind);
      assertEquals(9, token6.endColumn);
      assertEquals(9, token6.beginColumn);
      assertEquals(0, token6.beginLine);
      
      Token token7 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token7);
      assertFalse(token7.equals((Object)token0));
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token1));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertNotSame(token7, token0);
      assertNotSame(token7, token4);
      assertNotSame(token7, token3);
      assertNotSame(token7, token1);
      assertNotSame(token7, token2);
      assertNotSame(token7, token6);
      assertNotSame(token7, token5);
      assertNotSame(string0, string2);
      assertEquals("ws", token7.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(10, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, token7.endLine);
      assertEquals(0, token7.beginLine);
      assertEquals(78, token7.kind);
      assertEquals(10, token7.beginColumn);
      assertEquals(11, token7.endColumn);
      assertEquals(11, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token8 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token8);
      assertFalse(string0.equals((Object)string2));
      assertFalse(token8.equals((Object)token4));
      assertFalse(token8.equals((Object)token1));
      assertFalse(token8.equals((Object)token2));
      assertFalse(token8.equals((Object)token0));
      assertFalse(token8.equals((Object)token6));
      assertFalse(token8.equals((Object)token5));
      assertFalse(token8.equals((Object)token3));
      assertFalse(token8.equals((Object)token7));
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertNotSame(string0, string2);
      assertNotSame(token8, token4);
      assertNotSame(token8, token1);
      assertNotSame(token8, token2);
      assertNotSame(token8, token0);
      assertNotSame(token8, token6);
      assertNotSame(token8, token5);
      assertNotSame(token8, token3);
      assertNotSame(token8, token7);
      assertEquals("", token8.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(11, token8.beginColumn);
      assertEquals(11, token8.endColumn);
      assertEquals(0, token8.kind);
      assertEquals(0, token8.endLine);
      assertEquals(0, token8.beginLine);
      assertEquals(11, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token9 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token9);
      assertFalse(string0.equals((Object)string2));
      assertFalse(token9.equals((Object)token6));
      assertFalse(token9.equals((Object)token3));
      assertFalse(token9.equals((Object)token8));
      assertFalse(token9.equals((Object)token5));
      assertFalse(token9.equals((Object)token4));
      assertFalse(token9.equals((Object)token7));
      assertFalse(token9.equals((Object)token1));
      assertFalse(token9.equals((Object)token2));
      assertFalse(token9.equals((Object)token0));
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertNotSame(string0, string2);
      assertNotSame(token9, token6);
      assertNotSame(token9, token3);
      assertNotSame(token9, token8);
      assertNotSame(token9, token5);
      assertNotSame(token9, token4);
      assertNotSame(token9, token7);
      assertNotSame(token9, token1);
      assertNotSame(token9, token2);
      assertNotSame(token9, token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("", token9.toString());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, token9.endLine);
      assertEquals(11, token9.beginColumn);
      assertEquals(0, token9.beginLine);
      assertEquals(11, token9.endColumn);
      assertEquals(0, token9.kind);
      assertEquals(11, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token10 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token10);
      assertFalse(string0.equals((Object)string2));
      assertFalse(token10.equals((Object)token7));
      assertFalse(token10.equals((Object)token5));
      assertFalse(token10.equals((Object)token9));
      assertFalse(token10.equals((Object)token0));
      assertFalse(token10.equals((Object)token3));
      assertFalse(token10.equals((Object)token8));
      assertFalse(token10.equals((Object)token1));
      assertFalse(token10.equals((Object)token2));
      assertFalse(token10.equals((Object)token6));
      assertFalse(token10.equals((Object)token4));
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertNotSame(string0, string2);
      assertNotSame(token10, token7);
      assertNotSame(token10, token5);
      assertNotSame(token10, token9);
      assertNotSame(token10, token0);
      assertNotSame(token10, token3);
      assertNotSame(token10, token8);
      assertNotSame(token10, token1);
      assertNotSame(token10, token2);
      assertNotSame(token10, token6);
      assertNotSame(token10, token4);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("", token10.toString());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(11, token10.endColumn);
      assertEquals(11, token10.beginColumn);
      assertEquals(0, token10.kind);
      assertEquals(0, token10.beginLine);
      assertEquals(0, token10.endLine);
      assertEquals(11, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token11 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token11);
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(token11.equals((Object)token6));
      assertFalse(token11.equals((Object)token3));
      assertFalse(token11.equals((Object)token8));
      assertFalse(token11.equals((Object)token9));
      assertFalse(token11.equals((Object)token10));
      assertFalse(token11.equals((Object)token0));
      assertFalse(token11.equals((Object)token4));
      assertFalse(token11.equals((Object)token2));
      assertFalse(token11.equals((Object)token7));
      assertFalse(token11.equals((Object)token1));
      assertFalse(token11.equals((Object)token5));
      assertNotSame(string0, string2);
      assertNotSame(token11, token6);
      assertNotSame(token11, token3);
      assertNotSame(token11, token8);
      assertNotSame(token11, token9);
      assertNotSame(token11, token10);
      assertNotSame(token11, token0);
      assertNotSame(token11, token4);
      assertNotSame(token11, token2);
      assertNotSame(token11, token7);
      assertNotSame(token11, token1);
      assertNotSame(token11, token5);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("", token11.toString());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, token11.beginLine);
      assertEquals(11, token11.endColumn);
      assertEquals(0, token11.kind);
      assertEquals(11, token11.beginColumn);
      assertEquals(0, token11.endLine);
      assertEquals(11, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-208);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)29;
      byteArray0[0] = byte0;
      byte byte1 = (byte)7;
      byteArray0[1] = byte1;
      int int1 = (-1904);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int1, byte1);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)29, (byte)7}, byteArray0);
      assertFalse(byte1 == byte0);
      assertFalse(int1 == int0);
      assertEquals(7, byteArrayInputStream0.available());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertNotNull(simpleCharStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)29, (byte)7}, byteArray0);
      assertFalse(byte1 == byte0);
      assertFalse(int1 == int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)29, (byte)7}, byteArray0);
      assertFalse(byte1 == byte0);
      assertFalse(int1 == int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "4akmPl:'U";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(10, stringBufferInputStream0.available());
      
      int int0 = 68;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int0);
      assertNotNull(simpleCharStream0);
      assertEquals(10, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(10, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(68, simpleCharStream0.getBeginLine());
      assertEquals(68, simpleCharStream0.getLine());
      assertEquals(68, simpleCharStream0.getEndColumn());
      assertEquals(68, simpleCharStream0.getEndLine());
      assertEquals(68, simpleCharStream0.getBeginColumn());
      assertEquals(68, simpleCharStream0.getColumn());
      assertEquals("4", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(68, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(68, token0.endLine);
      assertEquals(68, token0.beginColumn);
      assertEquals(68, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "3;Z=o.gP+:ClV]";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(14, stringBufferInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(stringBufferInputStream0, stringBufferInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(14, stringBufferInputStream0.available());
      
      int int0 = (-238);
      int int1 = (-2033);
      int int2 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, int0, int1, int2);
      assertNotNull(simpleCharStream0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(14, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(14, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-238), simpleCharStream0.getLine());
      assertEquals((-2033), simpleCharStream0.getColumn());
      assertEquals((-2033), simpleCharStream0.getEndColumn());
      assertEquals((-2033), simpleCharStream0.getBeginColumn());
      assertEquals((-238), simpleCharStream0.getEndLine());
      assertEquals((-238), simpleCharStream0.getBeginLine());
      assertEquals("3", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-2033), token0.endColumn);
      assertEquals((-238), token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals((-238), token0.beginLine);
      assertEquals((-2033), token0.beginColumn);
      
      long long0 = 8192L;
      long long1 = 531L;
      long long2 = 692L;
      Object object0 = PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa3_0", (Object) long0, (Class<?>) long.class, (Object) token0.kind, (Class<?>) long.class, (Object) long1, (Class<?>) long.class, (Object) long2, (Class<?>) long.class);
      assertNotNull(object0);
      assertEquals(4, object0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(object0.equals((Object)int2));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)int1));
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-2032), simpleCharStream0.getColumn());
      assertEquals((-238), simpleCharStream0.getLine());
      assertEquals((-2032), simpleCharStream0.getEndColumn());
      assertEquals((-2033), simpleCharStream0.getBeginColumn());
      assertEquals((-238), simpleCharStream0.getEndLine());
      assertEquals((-238), simpleCharStream0.getBeginLine());
      assertEquals("3", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-2033), token0.endColumn);
      assertEquals((-238), token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals((-238), token0.beginLine);
      assertEquals((-2033), token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "K3;Z=o./gP+:ClV]";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(16, stringBufferInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(stringBufferInputStream0, stringBufferInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(16, stringBufferInputStream0.available());
      
      int int0 = (-238);
      int int1 = (-2022);
      int int2 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, int0, int1, int2);
      assertNotNull(simpleCharStream0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(16, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(16, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-238), simpleCharStream0.getEndLine());
      assertEquals((-2021), simpleCharStream0.getColumn());
      assertEquals((-2021), simpleCharStream0.getEndColumn());
      assertEquals((-238), simpleCharStream0.getBeginLine());
      assertEquals((-2022), simpleCharStream0.getBeginColumn());
      assertEquals((-238), simpleCharStream0.getLine());
      assertEquals("K3", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-238), token0.endLine);
      assertEquals((-238), token0.beginLine);
      assertEquals((-2022), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals((-2021), token0.endColumn);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -238, column -2020.  Encountered: \";\" (59), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "akmPl:'U";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(9, stringBufferInputStream0.available());
      
      int int0 = 86;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int0);
      assertNotNull(simpleCharStream0);
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals('a', char0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(86, simpleCharStream0.getEndLine());
      assertEquals(86, simpleCharStream0.getBeginColumn());
      assertEquals(86, simpleCharStream0.getEndColumn());
      assertEquals(86, simpleCharStream0.getLine());
      assertEquals(86, simpleCharStream0.getBeginLine());
      assertEquals(86, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(86, simpleCharStream0.getEndLine());
      assertEquals(86, simpleCharStream0.getBeginColumn());
      assertEquals(86, simpleCharStream0.getEndColumn());
      assertEquals(86, simpleCharStream0.getLine());
      assertEquals(86, simpleCharStream0.getBeginLine());
      assertEquals(86, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(86, simpleCharStream0.getEndLine());
      assertEquals(87, simpleCharStream0.getBeginColumn());
      assertEquals(90, simpleCharStream0.getColumn());
      assertEquals(86, simpleCharStream0.getLine());
      assertEquals(86, simpleCharStream0.getBeginLine());
      assertEquals(90, simpleCharStream0.getEndColumn());
      assertEquals("kmPl", token0.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(90, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(86, token0.endLine);
      assertEquals(87, token0.beginColumn);
      assertEquals(86, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)126;
      byteArray0[0] = byte0;
      byte byte1 = (byte)43;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-27);
      byteArray0[2] = byte2;
      byte byte3 = (byte)15;
      byteArray0[3] = byte3;
      byte byte4 = (byte)110;
      byteArray0[4] = byte4;
      byte byte5 = (byte)107;
      byteArray0[5] = byte5;
      byte byte6 = (byte)120;
      byteArray0[6] = byte6;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)126, (byte)43, (byte) (-27), (byte)15, (byte)110, (byte)107, (byte)120}, byteArray0);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte7 = (byte)15;
      byteArray1[0] = byte7;
      byte byte8 = (byte)83;
      byteArray1[1] = byte8;
      byte byte9 = (byte)45;
      byteArray1[2] = byte9;
      byte byte10 = (byte)1;
      byteArray1[3] = byte10;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)83, (byte)45, (byte)1}, byteArray1);
      assertFalse(boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[3];
      char char0 = 'T';
      charArray0[0] = char0;
      char char1 = 'q';
      charArray0[1] = char1;
      char char2 = 'x';
      charArray0[2] = char2;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'T', 'q', 'x'}, charArray0);
      
      int int0 = 1531;
      int int1 = (-2067);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, int0, int1);
      assertNotNull(simpleCharStream0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'T', 'q', 'x'}, charArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'T', 'q', 'x'}, charArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'T', 'q', 'x'}, charArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1531, simpleCharStream0.getLine());
      assertEquals((-2067), simpleCharStream0.getBeginColumn());
      assertEquals((-2065), simpleCharStream0.getColumn());
      assertEquals(1531, simpleCharStream0.getEndLine());
      assertEquals((-2065), simpleCharStream0.getEndColumn());
      assertEquals(1531, simpleCharStream0.getBeginLine());
      assertEquals("Tqx", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1531, token0.beginLine);
      assertEquals(1531, token0.endLine);
      assertEquals((-2067), token0.beginColumn);
      assertEquals((-2065), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "Uo/1U_>-!V._o";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(13, stringBufferInputStream0.available());
      
      int int0 = (-4162);
      int int1 = (-211);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int1);
      assertNotNull(simpleCharStream0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals('U', char0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-211), simpleCharStream0.getColumn());
      assertEquals((-211), simpleCharStream0.getEndColumn());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-211), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int2 = 0;
      xPathParserTokenManager0.SwitchTo(int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-211), simpleCharStream0.getColumn());
      assertEquals((-211), simpleCharStream0.getEndColumn());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-211), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      long long0 = stringBufferInputStream0.skip(int0);
      assertEquals(0L, long0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(0, stringBufferInputStream0.available());
      
      xPathParserTokenManager0.defaultLexState = simpleCharStream0.bufpos;
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-211), simpleCharStream0.getColumn());
      assertEquals((-211), simpleCharStream0.getEndColumn());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-211), simpleCharStream0.getBeginColumn());
      
      int int3 = 0;
      xPathParserTokenManager0.SwitchTo(int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-211), simpleCharStream0.getColumn());
      assertEquals((-211), simpleCharStream0.getEndColumn());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-211), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-211), simpleCharStream0.getColumn());
      assertEquals((-211), simpleCharStream0.getEndColumn());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-211), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string1 = "N";
      String string2 = "";
      MockFile mockFile0 = new MockFile(string1, string2);
      assertNotNull(mockFile0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("N", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      
      MockFile mockFile1 = new MockFile(mockFile0, string2);
      assertNotNull(mockFile1);
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("N", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("N", mockFile1.getName());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertNotNull(mockPrintStream0);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("N", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("N", mockFile1.getName());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("N", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("N", mockFile1.getName());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-211), simpleCharStream0.getColumn());
      assertEquals((-211), simpleCharStream0.getEndColumn());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-211), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-211), simpleCharStream0.getColumn());
      assertEquals((-211), simpleCharStream0.getEndColumn());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-211), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-210), simpleCharStream0.getEndColumn());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-210), simpleCharStream0.getBeginColumn());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-210), simpleCharStream0.getColumn());
      assertEquals("o", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-4162), token0.beginLine);
      assertEquals((-210), token0.endColumn);
      assertEquals((-4162), token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals((-210), token0.beginColumn);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-210), simpleCharStream0.getEndColumn());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-210), simpleCharStream0.getBeginColumn());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-210), simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int4 = 64;
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(token1, token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-209), simpleCharStream0.getEndColumn());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-209), simpleCharStream0.getColumn());
      assertEquals((-209), simpleCharStream0.getBeginColumn());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals("/", token1.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-209), token1.endColumn);
      assertEquals((-4162), token1.endLine);
      assertEquals((-209), token1.beginColumn);
      assertEquals((-4162), token1.beginLine);
      assertEquals(6, token1.kind);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(int4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 64. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "akmPB7l:'U";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(11, stringBufferInputStream0.available());
      
      int int0 = 68;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int0);
      assertNotNull(simpleCharStream0);
      assertEquals(11, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(11, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(74, simpleCharStream0.getEndColumn());
      assertEquals(68, simpleCharStream0.getBeginLine());
      assertEquals(68, simpleCharStream0.getEndLine());
      assertEquals(74, simpleCharStream0.getColumn());
      assertEquals(68, simpleCharStream0.getBeginColumn());
      assertEquals(68, simpleCharStream0.getLine());
      assertEquals("akmPB7l", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(68, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(74, token0.endColumn);
      assertEquals(68, token0.beginLine);
      assertEquals(68, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "Uo/1U_>-!V._o";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(13, stringBufferInputStream0.available());
      
      int int0 = (-4162);
      int int1 = (-211);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int1);
      assertNotNull(simpleCharStream0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      int int2 = 0;
      xPathParserTokenManager0.SwitchTo(int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.defaultLexState = simpleCharStream0.bufpos;
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int3 = 0;
      xPathParserTokenManager0.SwitchTo(int3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      String string1 = "N";
      String string2 = "";
      MockFile mockFile0 = new MockFile(string1, string2);
      assertNotNull(mockFile0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("N", mockFile0.getName());
      
      MockFile mockFile1 = new MockFile(mockFile0, string2);
      assertNotNull(mockFile1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("N", mockFile0.getName());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("N", mockFile1.getName());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = mockFile1.setReadable(boolean0, boolean1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("N", mockFile0.getName());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("N", mockFile1.getName());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertNotNull(mockPrintStream0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("N", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertEquals("N", mockFile1.getName());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/evosuite_6th");
      boolean boolean3 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("N", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertEquals("N", mockFile1.getName());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-210), simpleCharStream0.getColumn());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-211), simpleCharStream0.getBeginColumn());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-210), simpleCharStream0.getEndColumn());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals("Uo", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-4162), token0.beginLine);
      assertEquals((-211), token0.beginColumn);
      assertEquals((-4162), token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals((-210), token0.endColumn);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(token1, token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-209), simpleCharStream0.getColumn());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-209), simpleCharStream0.getBeginColumn());
      assertEquals((-209), simpleCharStream0.getEndColumn());
      assertEquals("/", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals((-4162), token1.endLine);
      assertEquals((-209), token1.beginColumn);
      assertEquals((-209), token1.endColumn);
      assertEquals(6, token1.kind);
      assertEquals((-4162), token1.beginLine);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-209), simpleCharStream0.getColumn());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-209), simpleCharStream0.getBeginColumn());
      assertEquals((-209), simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      
      int int4 = 64;
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-208), simpleCharStream0.getBeginColumn());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-208), simpleCharStream0.getColumn());
      assertEquals((-208), simpleCharStream0.getEndColumn());
      assertEquals("1", token2.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(20, token2.kind);
      assertEquals((-208), token2.endColumn);
      assertEquals((-208), token2.beginColumn);
      assertEquals((-4162), token2.endLine);
      assertEquals((-4162), token2.beginLine);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "..";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(2, stringBufferInputStream0.available());
      
      int int0 = 1204;
      int int1 = (-1885);
      int int2 = (-1044);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int1, int2);
      assertNotNull(simpleCharStream0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.ReInit((InputStream) stringBufferInputStream0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char0 = '*';
      xPathParserTokenManager0.curChar = char0;
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int3 = 6;
      xPathParserTokenManager0.jjmatchedPos = int3;
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      char char1 = '?';
      xPathParserTokenManager0.curChar = char1;
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("..", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(83, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      
      int int4 = (-2002);
      token0.endColumn = int4;
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("..", token0.toString());
      
      xPathParserTokenManager0.jjmatchedPos = token0.beginLine;
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      
      Token token2 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("", token2.toString());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      Token token3 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("", token3.toString());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(2, token3.beginColumn);
      assertEquals(2, token3.endColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      Token token4 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("", token4.toString());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, token4.endColumn);
      assertEquals(2, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(0, token4.kind);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      Token token5 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token5);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("", token5.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token5.beginLine);
      assertEquals(0, token5.kind);
      assertEquals(1, token5.endLine);
      assertEquals(2, token5.endColumn);
      assertEquals(2, token5.beginColumn);
      
      Token token6 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token6);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token5));
      assertNotSame(token6, token1);
      assertNotSame(token6, token3);
      assertNotSame(token6, token2);
      assertNotSame(token6, token4);
      assertNotSame(token6, token0);
      assertNotSame(token6, token5);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("", token6.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token6.endColumn);
      assertEquals(1, token6.endLine);
      assertEquals(2, token6.beginColumn);
      assertEquals(1, token6.beginLine);
      assertEquals(0, token6.kind);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = 3;
      char[] charArray0 = new char[2];
      char char0 = '8';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', ']'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', ']'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', ']'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', ']'}, charArray0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("8", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      
      simpleCharStream0.buffer = charArray0;
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', ']'}, charArray0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("8", token1.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(20, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', ']'}, charArray0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("]", token2.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(85, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)12;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-36);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)123;
      byteArray0[3] = byte3;
      byte byte4 = (byte)81;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-36), (byte)0, (byte)123, (byte)81, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      int int0 = 0;
      int int1 = 64;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, int0, byteArray0[0], int1);
      assertNotNull(simpleCharStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-36), (byte)0, (byte)123, (byte)81, (byte)0}, byteArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-36), (byte)0, (byte)123, (byte)81, (byte)0}, byteArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.curLexState = (int) byteArray0[5];
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(6, byteArrayInputStream0.available());
      
      simpleCharStream0.maxNextCharInd = (int) byteArray0[1];
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(6, byteArrayInputStream0.available());
      
      long long0 = byteArrayInputStream0.skip(simpleCharStream0.maxNextCharInd);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-36), (byte)0, (byte)123, (byte)81, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "Uo/1U_>-!V._o";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(13, stringBufferInputStream0.available());
      
      int int0 = (-4162);
      int int1 = (-211);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int1);
      assertNotNull(simpleCharStream0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int2 = 0;
      xPathParserTokenManager0.SwitchTo(int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.defaultLexState = simpleCharStream0.bufpos;
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      int int3 = 0;
      xPathParserTokenManager0.SwitchTo(int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string1 = "N";
      String string2 = "";
      MockFile mockFile0 = new MockFile(string1, string2);
      assertNotNull(mockFile0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertEquals("N", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      
      MockFile mockFile1 = new MockFile(mockFile0, string2);
      assertNotNull(mockFile1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertEquals("N", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertEquals("N", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = mockFile1.setReadable(boolean0, boolean1);
      assertFalse(boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertEquals("N", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertEquals("N", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertNotNull(mockPrintStream0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertEquals("N", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertEquals("N", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertEquals("N", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertEquals("N", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-210), simpleCharStream0.getEndColumn());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-211), simpleCharStream0.getBeginColumn());
      assertEquals((-210), simpleCharStream0.getColumn());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals("Uo", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-4162), token0.endLine);
      assertEquals((-210), token0.endColumn);
      assertEquals((-211), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals((-4162), token0.beginLine);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(token1, token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-209), simpleCharStream0.getEndColumn());
      assertEquals((-209), simpleCharStream0.getBeginColumn());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-209), simpleCharStream0.getColumn());
      assertEquals("/", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(6, token1.kind);
      assertEquals((-209), token1.endColumn);
      assertEquals((-209), token1.beginColumn);
      assertEquals((-4162), token1.beginLine);
      assertEquals((-4162), token1.endLine);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-209), simpleCharStream0.getEndColumn());
      assertEquals((-209), simpleCharStream0.getBeginColumn());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-209), simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      
      int int4 = 64;
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(int4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 64. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      
      int int0 = (-1054);
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(int0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1054. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 172;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int1 = (-2057);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, int0, int1);
      assertNotNull(simpleCharStream0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int2 = 0;
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, int2);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int[] intArray0 = null;
      simpleCharStream0.bufline = intArray0;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int3 = (-126);
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, int3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -126. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, int0, int0);
      assertNotNull(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      
      int int0 = 0;
      xPathParserTokenManager0.jjmatchedKind = int0;
      PrintStream printStream0 = null;
      xPathParserTokenManager0.setDebugStream(printStream0);
      int int1 = 0;
      xPathParserTokenManager0.ReInit(simpleCharStream0, int1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 0;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertNotNull(mockFileReader0);
      assertFalse(fileDescriptor0.valid());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, int0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Reader reader0 = null;
      int int0 = 2424;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, int0, int0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = (-1005);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, int0, int0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)3;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-91);
      byteArray0[1] = byte1;
      byte byte2 = (byte)73;
      byteArray0[2] = byte2;
      byte byte3 = (byte)117;
      byteArray0[3] = byte3;
      byte byte4 = (byte)9;
      byteArray0[4] = byte1;
      byte byte5 = (byte)1;
      byteArray0[5] = byte5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-91), (byte)73, (byte)117, (byte) (-91), (byte)1}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      int int0 = 1;
      boolean boolean0 = SimpleCharStream.staticFlag;
      assertFalse(boolean0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, int0);
      assertNotNull(pushbackInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-91), (byte)73, (byte)117, (byte) (-91), (byte)1}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      int int1 = 3239;
      boolean boolean1 = pushbackInputStream0.markSupported();
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-91), (byte)73, (byte)117, (byte) (-91), (byte)1}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertEquals(6, byteArrayInputStream0.available());
      
      EvoSuiteFile evoSuiteFile0 = null;
      int int2 = pushbackInputStream0.read();
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-91), (byte)73, (byte)117, (byte) (-91), (byte)1}, byteArray0);
      assertEquals(3, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertEquals(5, byteArrayInputStream0.available());
      
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-91), (byte)73, (byte)117, (byte) (-91), (byte)1}, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, int1, int0);
      assertNotNull(simpleCharStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-91), (byte)73, (byte)117, (byte) (-91), (byte)1}, byteArray0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-91), (byte)73, (byte)117, (byte) (-91), (byte)1}, byteArray0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      long long0 = 65536L;
      Object object0 = PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa2_0", (Object) byte4, (Class<?>) long.class, (Object) long0, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) int1, (Class<?>) long.class);
      assertNotNull(object0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-91), (byte)73, (byte)117, (byte) (-91), (byte)1}, byteArray0);
      assertEquals(3, object0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)int1));
      assertTrue(object0.equals((Object)int2));
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte3);
      assertFalse(byte4 == byte5);
      assertFalse(byte4 == byte1);
      assertFalse(byte4 == byte0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(3239, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(3239, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(3239, simpleCharStream0.getLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-91), (byte)73, (byte)117, (byte) (-91), (byte)1}, byteArray0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(3239, simpleCharStream0.getBeginLine());
      assertEquals(3239, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3239, simpleCharStream0.getLine());
      assertEquals("Iu", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertEquals(3239, token0.endLine);
      assertEquals(3239, token0.beginLine);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3239, column 4.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)3;
      byteArray0[0] = byte0;
      byte byte1 = (byte)13;
      byteArray0[1] = byte1;
      byte byte2 = (byte)73;
      byteArray0[2] = byte2;
      byte byte3 = (byte)117;
      byteArray0[3] = byte3;
      byte byte4 = (byte)9;
      byteArray0[4] = byte1;
      byte byte5 = (byte)1;
      byteArray0[5] = byte5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)13, (byte)73, (byte)117, (byte)13, (byte)1}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      int int0 = 1;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, int0);
      assertNotNull(pushbackInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)13, (byte)73, (byte)117, (byte)13, (byte)1}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      int int1 = 3239;
      boolean boolean1 = pushbackInputStream0.markSupported();
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)13, (byte)73, (byte)117, (byte)13, (byte)1}, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertEquals(6, byteArrayInputStream0.available());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)13, (byte)73, (byte)117, (byte)13, (byte)1}, byteArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, int1, int0);
      assertNotNull(simpleCharStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)13, (byte)73, (byte)117, (byte)13, (byte)1}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)13, (byte)73, (byte)117, (byte)13, (byte)1}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3239, column 1.  Encountered: \"\\u0003\" (3), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = 3;
      char[] charArray0 = new char[2];
      char char0 = '8';
      charArray0[0] = char0;
      char char1 = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      char char2 = simpleCharStream0.readChar();
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', '\u0000'}, charArray0);
      assertEquals('8', char2);
      assertFalse(char2 == char1);
      assertTrue(char2 == char0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.input_stream = simpleCharStream0;
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, xPathParserTokenManager0.input_stream.getEndColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getLine());
      assertEquals(1, xPathParserTokenManager0.input_stream.getColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getEndLine());
      assertEquals(1, xPathParserTokenManager0.input_stream.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      xPathParserTokenManager0.input_stream = simpleCharStream0;
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, xPathParserTokenManager0.input_stream.getEndColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getLine());
      assertEquals(1, xPathParserTokenManager0.input_stream.getColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(1, xPathParserTokenManager0.input_stream.getEndLine());
      assertEquals(1, xPathParserTokenManager0.input_stream.getBeginLine());
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', '\u0000'}, charArray0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = 3;
      char[] charArray0 = new char[2];
      char char0 = '8';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', ']'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', ']'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', ']'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string1 = "yJF-jqaYEgfw";
      MockFile mockFile0 = new MockFile(string1);
      assertNotNull(mockFile0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("yJF-jqaYEgfw", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("yJF-jqaYEgfw", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', ']'}, charArray0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("8", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      
      String string2 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, string2);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "akmPl:'U";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(9, stringBufferInputStream0.available());
      
      int int0 = 68;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int0);
      assertNotNull(simpleCharStream0);
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(72, simpleCharStream0.getColumn());
      assertEquals(72, simpleCharStream0.getEndColumn());
      assertEquals(68, simpleCharStream0.getEndLine());
      assertEquals(68, simpleCharStream0.getBeginLine());
      assertEquals(68, simpleCharStream0.getBeginColumn());
      assertEquals(68, simpleCharStream0.getLine());
      assertEquals("akmPl", token0.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(68, token0.beginColumn);
      assertEquals(72, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(68, token0.beginLine);
      assertEquals(68, token0.endLine);
      
      long long0 = 1L;
      long long1 = 2879L;
      Object object0 = PrivateAccess.callMethod((Class<XPathParserTokenManager>) XPathParserTokenManager.class, xPathParserTokenManager0, "jjMoveStringLiteralDfa9_0", (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) long0, (Class<?>) long.class, (Object) simpleCharStream0.bufpos, (Class<?>) long.class, (Object) long1, (Class<?>) long.class);
      assertNotNull(object0);
      assertEquals(10, object0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(object0.equals((Object)int0));
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(73, simpleCharStream0.getEndColumn());
      assertEquals(73, simpleCharStream0.getColumn());
      assertEquals(68, simpleCharStream0.getEndLine());
      assertEquals(68, simpleCharStream0.getBeginLine());
      assertEquals(68, simpleCharStream0.getBeginColumn());
      assertEquals(68, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "Uo/1U_>-!V._o";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(13, stringBufferInputStream0.available());
      
      int int0 = (-4162);
      int int1 = (-211);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringBufferInputStream0, int0, int1);
      assertNotNull(simpleCharStream0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int2 = 0;
      xPathParserTokenManager0.SwitchTo(int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      long long0 = stringBufferInputStream0.skip(int0);
      assertEquals(0L, long0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(13, stringBufferInputStream0.available());
      
      xPathParserTokenManager0.defaultLexState = simpleCharStream0.bufpos;
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int3 = 0;
      xPathParserTokenManager0.SwitchTo(int3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string1 = "N";
      String string2 = "";
      MockFile mockFile0 = new MockFile(string1, string2);
      assertNotNull(mockFile0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("N", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      
      MockFile mockFile1 = new MockFile(mockFile0, string2);
      assertNotNull(mockFile1);
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("N", mockFile1.getName());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.exists());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("N", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertNotNull(mockPrintStream0);
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertEquals("N", mockFile1.getName());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("N", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(mockFile0, mockFile1);
      assertEquals("N", mockFile1.getName());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("/home/evosuite_6th/N", mockFile1.toString());
      assertEquals("/home/evosuite_6th", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/evosuite_6th/N", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("N", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-211), simpleCharStream0.getBeginColumn());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-210), simpleCharStream0.getColumn());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-210), simpleCharStream0.getEndColumn());
      assertEquals("Uo", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-4162), token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals((-4162), token0.beginLine);
      assertEquals((-211), token0.beginColumn);
      assertEquals((-210), token0.endColumn);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-211), simpleCharStream0.getBeginColumn());
      assertEquals((-4162), simpleCharStream0.getEndLine());
      assertEquals((-4162), simpleCharStream0.getBeginLine());
      assertEquals((-210), simpleCharStream0.getColumn());
      assertEquals((-4162), simpleCharStream0.getLine());
      assertEquals((-210), simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int4 = 64;
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(int4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 64. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = (-886);
      char[] charArray0 = new char[3];
      char char0 = 'q';
      charArray0[0] = char0;
      char char1 = '4';
      charArray0[1] = char1;
      char char2 = '*';
      charArray0[2] = char2;
      int int1 = 33;
      int int2 = 0;
      int int3 = 0;
      SimpleCharStream simpleCharStream0 = null;
      int int4 = (-2860);
      XPathParserTokenManager xPathParserTokenManager0 = null;
      try {
        xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, int4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2860. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = null;
      String string0 = "";
      int int0 = (-9);
      char[] charArray0 = new char[2];
      char char0 = '<';
      charArray0[1] = charArray0[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      String string1 = "reCrhThEf0C";
      // Undeclared exception!
      try { 
        Charset.forName(string1);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // reCrhThEf0C
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
