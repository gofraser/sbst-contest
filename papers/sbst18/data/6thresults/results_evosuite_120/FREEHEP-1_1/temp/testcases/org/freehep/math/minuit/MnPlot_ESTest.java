/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:36:43 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Spliterator;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.MnPlot;
import org.freehep.math.minuit.Point;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnPlot_ESTest extends MnPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      int int0 = mnPlot0.length();
      assertEquals(30, int0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = (-1.0);
      double double1 = 104.88759373275;
      Point point0 = new Point(double0, double1);
      assertEquals(104.88759373275, point0.second, 0.01);
      assertEquals((-1.0), point0.first, 0.01);
      assertNotNull(point0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = 1.0;
      point0.second = double2;
      boolean boolean0 = linkedList0.offerLast(point0);
      assertEquals(1.0, point0.second, 0.01);
      assertEquals((-1.0), point0.first, 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertEquals(1, linkedList0.size());
      
      mnPlot0.plot((double) int0, (double) int0, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(1, linkedList0.size());
      
      double double3 = 0.0;
      mnPlot0.plot((List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(1, linkedList0.size());
      
      LinkedList<Point> linkedList1 = new LinkedList<Point>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      double double4 = 2938.2529294061474;
      double double5 = 10.715870105808772;
      Point point1 = new Point(double4, double5);
      assertEquals(2938.2529294061474, point1.first, 0.01);
      assertEquals(10.715870105808772, point1.second, 0.01);
      assertNotNull(point1);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertFalse(point1.equals((Object)point0));
      
      boolean boolean1 = linkedList1.add(point1);
      assertEquals(2938.2529294061474, point1.first, 0.01);
      assertEquals(10.715870105808772, point1.second, 0.01);
      assertTrue(boolean1);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.contains(point1));
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(point1, point0);
      
      boolean boolean2 = linkedList1.add(point1);
      assertEquals(2938.2529294061474, point1.first, 0.01);
      assertEquals(10.715870105808772, point1.second, 0.01);
      assertTrue(boolean2);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.contains(point1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(point1, point0);
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.contains(point1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      double double6 = 0.0;
      mnPlot0.plot((List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.contains(point1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      LinkedList<Point> linkedList2 = new LinkedList<Point>();
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(point0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      
      Point point2 = null;
      Spliterator<Point> spliterator0 = linkedList2.spliterator();
      assertNotNull(spliterator0);
      assertFalse(linkedList2.contains(point0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      
      double double7 = 1297.90592241;
      mnPlot0.plot(double7, point1.first, (List<Point>) linkedList1);
      assertEquals(2938.2529294061474, point1.first, 0.01);
      assertEquals(10.715870105808772, point1.second, 0.01);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.contains(point1));
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double7, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double6, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double7, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double6, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(point1, point0);
      
      boolean boolean3 = linkedList2.offer(point2);
      assertTrue(boolean3);
      assertFalse(linkedList2.contains(point0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(1, linkedList2.size());
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot(double3, double6, (List<Point>) linkedList2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      double double0 = 0.0;
      double double1 = (-1303.979699);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double2 = (-192.448160782);
      double double3 = (-686.3069508815266);
      Point point0 = new Point(double2, double3);
      assertEquals((-686.3069508815266), point0.second, 0.01);
      assertEquals((-192.448160782), point0.first, 0.01);
      assertNotNull(point0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      point0.second = double3;
      LinkedList<Point> linkedList1 = new LinkedList<Point>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertFalse(linkedList0.contains(point0));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      
      mnPlot0.plot(double2, double3, (List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      double double4 = 1.0;
      double double5 = (-1941.485);
      int int0 = 1;
      Object object0 = PrivateAccess.callMethod((Class<MnPlot>) MnPlot.class, mnPlot0, "mnbins", (Object) double5, (Class<?>) double.class, (Object) point0.second, (Class<?>) double.class, (Object) int0, (Class<?>) int.class);
      assertEquals((-686.3069508815266), point0.second, 0.01);
      assertEquals((-192.448160782), point0.first, 0.01);
      assertNull(object0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double5, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double5, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      
      double double6 = (-104.66880955600095);
      mnPlot0.plot(double4, double6, (List<Point>) linkedList0);
      assertFalse(linkedList0.contains(point0));
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double6, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertEquals(0, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      double double0 = 0.0;
      double double1 = (-1303.979699);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double2 = (-192.448160782);
      double double3 = (-686.3069508815266);
      Point point0 = new Point(double2, double3);
      assertEquals((-686.3069508815266), point0.second, 0.01);
      assertEquals((-192.448160782), point0.first, 0.01);
      assertNotNull(point0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      point0.second = double3;
      boolean boolean0 = linkedList0.add(point0);
      assertEquals((-686.3069508815266), point0.second, 0.01);
      assertEquals((-192.448160782), point0.first, 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1, linkedList0.size());
      
      mnPlot0.plot(double0, double1, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertEquals(1, linkedList0.size());
      
      LinkedList<Point> linkedList1 = new LinkedList<Point>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = double2;
      doubleArray0[1] = point0.first;
      double double4 = (-6.43682539);
      doubleArray0[2] = double4;
      doubleArray0[3] = double3;
      double double5 = 1.0;
      doubleArray0[4] = double5;
      doubleArray0[5] = double1;
      doubleArray0[6] = point0.first;
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(charSequence0).length();
      StringBuffer stringBuffer0 = new StringBuffer(charSequence0);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      int int0 = 1468;
      int int1 = 2142;
      try { 
        PrivateAccess.callMethod((Class<MnPlot>) MnPlot.class, mnPlot0, "mnplot", (Object) doubleArray0, (Class<?>) double[].class, (Object) doubleArray0, (Class<?>) double[].class, (Object) stringBuffer0, (Class<?>) StringBuffer.class, (Object) int0, (Class<?>) int.class, (Object) int0, (Class<?>) int.class, (Object) int1, (Class<?>) int.class);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 30;
      int int1 = (-1);
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertNotNull(mnPlot0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        mnPlot0.plot((double) int1, (double) int0, (List<Point>) linkedList0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 60
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1;
      MnPlot mnPlot0 = new MnPlot(int0, int0);
      assertNotNull(mnPlot0);
      
      int int1 = mnPlot0.width();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Point point0 = new Point(int0, int1);
      assertEquals(1.0, point0.second, 0.01);
      assertEquals(1.0, point0.first, 0.01);
      assertNotNull(point0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = linkedList0.add(point0);
      assertEquals(1.0, point0.second, 0.01);
      assertEquals(1.0, point0.first, 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(point0));
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1, linkedList0.size());
      
      double double0 = 0.0;
      Point point1 = new Point(int1, double0);
      assertEquals(0.0, point1.second, 0.01);
      assertEquals(1.0, point1.first, 0.01);
      assertNotNull(point1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(point1.equals((Object)point0));
      
      boolean boolean1 = linkedList0.add(point1);
      assertEquals(0.0, point1.second, 0.01);
      assertEquals(1.0, point1.first, 0.01);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(point0));
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(point1.equals((Object)point0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertNotSame(point1, point0);
      
      ListIterator<Point> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(2, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        mnPlot0.plot((List<Point>) linkedList0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 10;
      MnPlot mnPlot0 = new MnPlot(int0, int0);
      assertNotNull(mnPlot0);
      
      double double0 = (-1287.72108862529);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double1 = (-1.0);
      double double2 = 295.96;
      Point point0 = new Point(double1, double2);
      assertEquals(295.96, point0.second, 0.01);
      assertEquals((-1.0), point0.first, 0.01);
      assertNotNull(point0);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      boolean boolean0 = linkedList0.add(point0);
      assertEquals(295.96, point0.second, 0.01);
      assertEquals((-1.0), point0.first, 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        mnPlot0.plot((double) int0, double0, (List<Point>) linkedList0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 60
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-2525);
      MnPlot mnPlot0 = new MnPlot(int0, int0);
      assertNotNull(mnPlot0);
      
      int int1 = mnPlot0.length();
      assertEquals((-2525), int1);
      assertTrue(int1 == int0);
      
      double double0 = 0.0;
      double double1 = 3114.532;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        mnPlot0.plot(double0, double1, (List<Point>) linkedList0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-816);
      int int1 = 0;
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertNotNull(mnPlot0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = (-1427.8687);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        mnPlot0.plot(double0, (double) int0, (List<Point>) linkedList0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.remove(object0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      double double0 = (-2073.87066433453);
      LinkedList<Point> linkedList1 = new LinkedList<Point>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      int int0 = 0;
      List<Point> list0 = linkedList1.subList(int0, int0);
      assertNotNull(list0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(linkedList1, linkedList0);
      
      double double1 = 0.0;
      double double2 = 0.0;
      Point point0 = new Point(double1, double2);
      assertEquals(0.0, point0.second, 0.01);
      assertEquals(0.0, point0.first, 0.01);
      assertNotNull(point0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(double1, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      boolean boolean1 = linkedList1.add(point0);
      assertEquals(0.0, point0.second, 0.01);
      assertEquals(0.0, point0.first, 0.01);
      assertTrue(boolean1);
      assertTrue(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(double1, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      mnPlot0.plot(double0, double0, (List<Point>) linkedList1);
      assertTrue(linkedList1.contains(point0));
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertFalse(linkedList0.contains(point0));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      
      int int1 = mnPlot0.length();
      assertEquals(30, int1);
      assertFalse(int1 == int0);
      
      int int2 = mnPlot0.length();
      assertEquals(30, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = mnPlot0.width();
      assertEquals(80, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      double double3 = 0.0;
      Point point1 = new Point(int3, double3);
      assertEquals(0.0, point1.second, 0.01);
      assertEquals(80.0, point1.first, 0.01);
      assertNotNull(point1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertFalse(point1.equals((Object)point0));
      
      point1.second = (double) int1;
      boolean boolean2 = linkedList0.offerLast(point1);
      assertEquals(30.0, point1.second, 0.01);
      assertEquals(80.0, point1.first, 0.01);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(point1));
      assertFalse(linkedList0.contains(point0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(point1.equals((Object)point0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(point1, point0);
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertTrue(linkedList1.contains(point0));
      assertFalse(linkedList1.contains(point1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point1));
      assertFalse(linkedList0.contains(point0));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(1, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      
      double double4 = 509.833845218488;
      mnPlot0.plot(double1, double4, (List<Point>) linkedList1);
      assertTrue(linkedList1.contains(point0));
      assertFalse(linkedList1.contains(point1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double1, double3, 0.01);
      assertEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      int int4 = mnPlot0.length();
      assertEquals(30, int4);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot(double3, (double) int4, list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      MnPlot mnPlot0 = new MnPlot(int0, int0);
      assertNotNull(mnPlot0);
      
      int int1 = mnPlot0.width();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-242);
      MnPlot mnPlot0 = new MnPlot(int0, int0);
      assertNotNull(mnPlot0);
      
      int int1 = mnPlot0.width();
      assertEquals((-242), int1);
      assertTrue(int1 == int0);
      
      double double0 = 0.0;
      double double1 = (-702.778);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        mnPlot0.plot((List<Point>) linkedList0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 207;
      int int1 = 0;
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertNotNull(mnPlot0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = 640.11689385;
      double double1 = 1.0;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double2 = 1.0;
      Stream<Point> stream0 = linkedList0.stream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      Point point0 = new Point(int0, double2);
      assertEquals(207.0, point0.first, 0.01);
      assertEquals(1.0, point0.second, 0.01);
      assertNotNull(point0);
      assertFalse(int0 == int1);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      point0.first = (double) int1;
      boolean boolean0 = linkedList0.add(point0);
      assertEquals(0.0, point0.first, 0.01);
      assertEquals(1.0, point0.second, 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(point0));
      assertFalse(int0 == int1);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(1, linkedList0.size());
      
      mnPlot0.plot(double0, double1, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, linkedList0.size());
      
      int int2 = mnPlot0.width();
      assertEquals(120, int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = mnPlot0.length();
      assertEquals(0, int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int3);
      assertEquals(1, linkedList0.size());
      
      int int4 = mnPlot0.width();
      assertEquals(120, int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int3);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 934;
      MnPlot mnPlot0 = new MnPlot(int0, int0);
      assertNotNull(mnPlot0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      mnPlot0.plot((double) int0, (double) int0, (List<Point>) linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = 1.0;
      double double1 = 0.0;
      double double2 = 0.0;
      LinkedList<Point> linkedList1 = new LinkedList<Point>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      mnPlot0.plot(double2, double1, (List<Point>) linkedList1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(double1, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      LinkedList<Point> linkedList2 = new LinkedList<Point>();
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      
      Point point0 = new Point(double0, double0);
      assertEquals(1.0, point0.first, 0.01);
      assertEquals(1.0, point0.second, 0.01);
      assertNotNull(point0);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      
      int int1 = 0;
      linkedList2.add(int1, point0);
      assertEquals(1.0, point0.first, 0.01);
      assertEquals(1.0, point0.second, 0.01);
      assertTrue(linkedList2.contains(point0));
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(int1 == int0);
      assertEquals(1, linkedList2.size());
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      
      boolean boolean0 = linkedList2.add(point0);
      assertEquals(1.0, point0.first, 0.01);
      assertEquals(1.0, point0.second, 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList2.contains(point0));
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertEquals(2, linkedList2.size());
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      
      boolean boolean1 = linkedList2.add(point0);
      assertEquals(1.0, point0.first, 0.01);
      assertEquals(1.0, point0.second, 0.01);
      assertTrue(boolean1);
      assertTrue(linkedList2.contains(point0));
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, linkedList2.size());
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      
      boolean boolean2 = linkedList2.add(point0);
      assertEquals(1.0, point0.first, 0.01);
      assertEquals(1.0, point0.second, 0.01);
      assertTrue(boolean2);
      assertTrue(linkedList2.contains(point0));
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, linkedList2.size());
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      
      mnPlot0.plot(double0, double1, (List<Point>) linkedList2);
      assertTrue(linkedList2.contains(point0));
      assertFalse(int0 == int1);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(double1, double2, 0.01);
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertEquals(4, linkedList2.size());
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      
      // Undeclared exception!
      mnPlot0.plot((double) int0, double0, (List<Point>) linkedList2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 209;
      MnPlot mnPlot0 = new MnPlot(int0, int0);
      assertNotNull(mnPlot0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = 0.0;
      Point point0 = new Point(int0, double0);
      assertEquals(0.0, point0.second, 0.01);
      assertEquals(209.0, point0.first, 0.01);
      assertNotNull(point0);
      
      linkedList0.push(point0);
      assertEquals(0.0, point0.second, 0.01);
      assertEquals(209.0, point0.first, 0.01);
      assertTrue(linkedList0.contains(point0));
      assertEquals(1, linkedList0.size());
      
      double double1 = (-2030.551514);
      Point point1 = new Point(double1, int0);
      assertEquals(209.0, point1.second, 0.01);
      assertEquals((-2030.551514), point1.first, 0.01);
      assertNotNull(point1);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(point1.equals((Object)point0));
      
      double double2 = (-3683.7357095092);
      point1.second = double2;
      double double3 = 0.0;
      point1.second = double3;
      boolean boolean0 = linkedList0.add(point1);
      assertEquals((-2030.551514), point1.first, 0.01);
      assertEquals(0.0, point1.second, 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertEquals(2, linkedList0.size());
      assertNotSame(point1, point0);
      
      double double4 = 0.0;
      mnPlot0.plot(double1, double4, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(2, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(point1);
      assertEquals((-2030.551514), point1.first, 0.01);
      assertEquals(0.0, point1.second, 0.01);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, linkedList0.size());
      assertNotSame(point1, point0);
      
      // Undeclared exception!
      mnPlot0.plot((List<Point>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      double double0 = (-1853.02827);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double1 = (-3257.0);
      double double2 = 2.5;
      Point point0 = new Point(double1, double2);
      assertEquals(2.5, point0.second, 0.01);
      assertEquals((-3257.0), point0.first, 0.01);
      assertNotNull(point0);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      boolean boolean0 = linkedList0.add(point0);
      assertEquals(2.5, point0.second, 0.01);
      assertEquals((-3257.0), point0.first, 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1, linkedList0.size());
      
      mnPlot0.plot(double0, double0, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertEquals(1, linkedList0.size());
      
      int int0 = mnPlot0.length();
      assertEquals(30, int0);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(1, linkedList0.size());
      
      int int1 = mnPlot0.width();
      assertEquals(80, int1);
      assertFalse(int1 == int0);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      int int0 = mnPlot0.length();
      assertEquals(30, int0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = (-1.0);
      double double1 = 104.88759373275;
      Point point0 = new Point(double0, double1);
      assertEquals(104.88759373275, point0.second, 0.01);
      assertEquals((-1.0), point0.first, 0.01);
      assertNotNull(point0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      point0.second = double0;
      boolean boolean0 = linkedList0.offerLast(point0);
      assertEquals((-1.0), point0.first, 0.01);
      assertEquals((-1.0), point0.second, 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, linkedList0.size());
      
      mnPlot0.plot((double) int0, (double) int0, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(1, linkedList0.size());
      
      double double2 = 0.0;
      LinkedList<Point> linkedList1 = new LinkedList<Point>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      double double3 = 2938.2529294061474;
      double double4 = 0.0;
      Point point1 = new Point(double3, double4);
      assertEquals(0.0, point1.second, 0.01);
      assertEquals(2938.2529294061474, point1.first, 0.01);
      assertNotNull(point1);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertFalse(point1.equals((Object)point0));
      
      boolean boolean1 = linkedList1.add(point1);
      assertEquals(0.0, point1.second, 0.01);
      assertEquals(2938.2529294061474, point1.first, 0.01);
      assertTrue(boolean1);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.contains(point1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(point1, point0);
      
      boolean boolean2 = linkedList1.add(point1);
      assertEquals(0.0, point1.second, 0.01);
      assertEquals(2938.2529294061474, point1.first, 0.01);
      assertTrue(boolean2);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.contains(point1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(point1, point0);
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.contains(point1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      double double5 = 0.0;
      mnPlot0.plot((List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.contains(point1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      LinkedList<Point> linkedList2 = new LinkedList<Point>();
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(point1));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      
      Point point2 = null;
      Spliterator<Point> spliterator0 = linkedList2.spliterator();
      assertNotNull(spliterator0);
      assertFalse(linkedList2.contains(point1));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      
      double double6 = 1297.90592241;
      mnPlot0.plot(double6, point1.first, (List<Point>) linkedList1);
      assertEquals(0.0, point1.second, 0.01);
      assertEquals(2938.2529294061474, point1.first, 0.01);
      assertFalse(linkedList1.contains(point0));
      assertTrue(linkedList1.contains(point1));
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotEquals(double3, double5, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double6, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double6, 0.01);
      assertEquals(double4, double5, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(point1, point0);
      
      boolean boolean3 = linkedList2.offer(point2);
      assertTrue(boolean3);
      assertFalse(linkedList2.contains(point1));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(1, linkedList2.size());
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot(double2, double5, (List<Point>) linkedList2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 3312;
      MnPlot mnPlot0 = new MnPlot(int0, int0);
      assertNotNull(mnPlot0);
      
      double double0 = 2746.40971994615;
      double double1 = 1720.9985658804094;
      double double2 = 2761.0550247744;
      double double3 = (-4042.036983253502);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double4 = (-1142.46378265);
      UnaryOperator<Point> unaryOperator0 = null;
      int int1 = mnPlot0.length();
      assertEquals(56, int1);
      assertFalse(int1 == int0);
      
      int int2 = mnPlot0.length();
      assertEquals(56, int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = mnPlot0.width();
      assertEquals(120, int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      double double5 = (-538.7689921629976);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      double double0 = 0.0;
      double double1 = (-71.3);
      List<Point> list0 = (List<Point>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(list0).iterator();
      doReturn(0, 0, 0).when(list0).size();
      // Undeclared exception!
      try { 
        mnPlot0.plot(list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertNotNull(mnPlot0);
      
      double double0 = 823.0;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Point point0 = new Point(int0, int0);
      assertEquals(0.0, point0.first, 0.01);
      assertEquals(0.0, point0.second, 0.01);
      assertNotNull(point0);
      
      double double1 = (-3299.9443);
      double double2 = 0.0;
      point0.second = double2;
      point0.second = double1;
      // Undeclared exception!
      try { 
        mnPlot0.plot(point0.second, point0.second, (List<Point>) linkedList0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 0.0;
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-3915);
      MnPlot mnPlot0 = new MnPlot(int0, int0);
      assertNotNull(mnPlot0);
      
      double double0 = 1.0;
      List<Point> list0 = null;
      // Undeclared exception!
      try { 
        mnPlot0.plot(double0, (double) int0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 304;
      int int1 = 12;
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertNotNull(mnPlot0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Point> linkedList1 = new LinkedList<Point>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      double double0 = (-643.039);
      Point point0 = new Point(int1, double0);
      assertEquals(12.0, point0.first, 0.01);
      assertEquals((-643.039), point0.second, 0.01);
      assertNotNull(point0);
      assertFalse(int1 == int0);
      
      boolean boolean0 = linkedList1.add(point0);
      assertEquals(12.0, point0.first, 0.01);
      assertEquals((-643.039), point0.second, 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(point0));
      assertFalse(int1 == int0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      LinkedList<Point> linkedList2 = new LinkedList<Point>();
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(point0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      
      mnPlot0.plot((List<Point>) linkedList2);
      assertFalse(linkedList2.contains(point0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double double1 = (-815.4560179642);
      double double2 = 0.5;
      Point point1 = new Point(double1, double2);
      assertEquals((-815.4560179642), point1.first, 0.01);
      assertEquals(0.5, point1.second, 0.01);
      assertNotNull(point1);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(point1.equals((Object)point0));
      
      boolean boolean1 = linkedList2.add(point1);
      assertEquals((-815.4560179642), point1.first, 0.01);
      assertEquals(0.5, point1.second, 0.01);
      assertTrue(boolean1);
      assertTrue(linkedList2.contains(point1));
      assertFalse(linkedList2.contains(point0));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList2.size());
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(point1, point0);
      
      boolean boolean2 = linkedList2.add(point0);
      assertEquals(12.0, point0.first, 0.01);
      assertEquals((-643.039), point0.second, 0.01);
      assertTrue(boolean2);
      assertTrue(linkedList2.contains(point1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(int1 == int0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertFalse(point0.equals((Object)point1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(2, linkedList2.size());
      assertNotSame(point0, point1);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      
      boolean boolean3 = linkedList1.remove(object0);
      assertFalse(boolean3);
      assertFalse(linkedList1.contains(point1));
      assertTrue(linkedList1.contains(point0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList1, linkedList2);
      
      mnPlot0.plot((List<Point>) linkedList2);
      assertTrue(linkedList2.contains(point1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(2, linkedList2.size());
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      
      mnPlot0.plot((List<Point>) linkedList2);
      assertTrue(linkedList2.contains(point1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(2, linkedList2.size());
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point1));
      assertTrue(linkedList1.contains(point0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList1, linkedList2);
      
      int int2 = mnPlot0.width();
      assertEquals(120, int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      LinkedList<Point> linkedList3 = new LinkedList<Point>();
      assertNotNull(linkedList3);
      assertFalse(linkedList3.contains(point1));
      assertTrue(linkedList3.equals((Object)linkedList0));
      assertFalse(linkedList3.equals((Object)linkedList1));
      assertFalse(linkedList3.equals((Object)linkedList2));
      assertEquals(0, linkedList3.size());
      
      boolean boolean4 = linkedList3.add(point1);
      assertEquals((-815.4560179642), point1.first, 0.01);
      assertEquals(0.5, point1.second, 0.01);
      assertTrue(boolean4);
      assertFalse(linkedList3.contains(point0));
      assertTrue(linkedList3.contains(point1));
      assertFalse(linkedList3.equals((Object)linkedList1));
      assertFalse(linkedList3.equals((Object)linkedList0));
      assertFalse(linkedList3.equals((Object)linkedList2));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertEquals(1, linkedList3.size());
      assertNotSame(linkedList3, linkedList1);
      assertNotSame(linkedList3, linkedList0);
      assertNotSame(linkedList3, linkedList2);
      assertNotSame(point1, point0);
      
      // Undeclared exception!
      try { 
        linkedList3.set(int1, point0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      double double0 = 0.0;
      double double1 = (-1303.979699);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = 0;
      Object object0 = PrivateAccess.callMethod((Class<MnPlot>) MnPlot.class, mnPlot0, "mnbins", (Object) double1, (Class<?>) double.class, (Object) double1, (Class<?>) double.class, (Object) int0, (Class<?>) int.class);
      assertNull(object0);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = (-192.448160782);
      double double3 = (-686.3069508815266);
      Point point0 = new Point(double2, double3);
      assertEquals((-686.3069508815266), point0.second, 0.01);
      assertEquals((-192.448160782), point0.first, 0.01);
      assertNotNull(point0);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      point0.second = double3;
      boolean boolean0 = linkedList0.add(point0);
      assertEquals((-686.3069508815266), point0.second, 0.01);
      assertEquals((-192.448160782), point0.first, 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1, linkedList0.size());
      
      mnPlot0.plot(double0, double1, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, linkedList0.size());
      
      LinkedList<Point> linkedList1 = new LinkedList<Point>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(1, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      
      mnPlot0.plot(double2, double3, (List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      double double4 = 1.0;
      double double5 = (-104.66880955600095);
      mnPlot0.plot(double4, double5, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(1, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
  }
}
