/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:02:43 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.MnPlot;
import org.freehep.math.minuit.Point;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnPlot_ESTest extends MnPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      int int1 = 631;
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mnPlot0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, linkedList0.size());
      
      double double0 = 1570.05;
      Point point0 = new Point(double0, int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, point0.second, 0.01);
      assertEquals(1570.05, point0.first, 0.01);
      assertNotNull(point0);
      
      boolean boolean0 = linkedList0.add(point0);
      assertTrue(linkedList0.contains(point0));
      assertFalse(int0 == int1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertEquals(0.0, point0.second, 0.01);
      assertEquals(1570.05, point0.first, 0.01);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot((double) int1, (double) int1, (List<Point>) linkedList0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 278;
      int int1 = 413;
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mnPlot0);
      
      double double0 = 2.0;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double1 = (-2103.675);
      double double2 = 0.0;
      double double3 = 0.0;
      Point point0 = new Point(double2, double3);
      assertEquals(double2, double3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, point0.first, 0.01);
      assertEquals(0.0, point0.second, 0.01);
      assertNotNull(point0);
      
      boolean boolean0 = linkedList0.offer(point0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(double2, double3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertEquals(0.0, point0.first, 0.01);
      assertEquals(0.0, point0.second, 0.01);
      
      Point point1 = new Point(double1, double1);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertEquals((-2103.675), point1.second, 0.01);
      assertEquals((-2103.675), point1.first, 0.01);
      assertNotNull(point1);
      
      point1.first = double1;
      boolean boolean1 = linkedList0.add(point1);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertNotSame(point1, point0);
      assertTrue(boolean1);
      assertEquals((-2103.675), point1.second, 0.01);
      assertEquals((-2103.675), point1.first, 0.01);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2, linkedList0.size());
      
      mnPlot0.plot(double0, double0, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertEquals(2, linkedList0.size());
      
      int int2 = mnPlot0.length();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(56, int2);
      
      int int3 = mnPlot0.length();
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(56, int3);
      
      int int4 = mnPlot0.width();
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertEquals(120, int4);
      
      // Undeclared exception!
      mnPlot0.plot((List<Point>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      MnPlot mnPlot0 = new MnPlot(int0, int0);
      assertNotNull(mnPlot0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = 0.0;
      Point point0 = new Point(int0, int0);
      assertEquals(0.0, point0.second, 0.01);
      assertEquals(0.0, point0.first, 0.01);
      assertNotNull(point0);
      
      boolean boolean0 = linkedList0.offer(point0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertEquals(0.0, point0.second, 0.01);
      assertEquals(0.0, point0.first, 0.01);
      
      Point point1 = new Point(double0, int0);
      assertFalse(point1.equals((Object)point0));
      assertEquals(0.0, point1.first, 0.01);
      assertEquals(0.0, point1.second, 0.01);
      assertNotNull(point1);
      
      boolean boolean1 = linkedList0.add(point1);
      assertTrue(linkedList0.contains(point1));
      assertFalse(point1.equals((Object)point0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertNotSame(point1, point0);
      assertTrue(boolean1);
      assertEquals(0.0, point1.first, 0.01);
      assertEquals(0.0, point1.second, 0.01);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot((List<Point>) linkedList0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      double double0 = (-2587.753794133468);
      double double1 = (-2462.4082);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double2 = 6.004999999999999;
      double double3 = (-2512.687179472);
      double double4 = 440.8893667;
      Point point0 = new Point(double3, double4);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(440.8893667, point0.second, 0.01);
      assertEquals((-2512.687179472), point0.first, 0.01);
      assertNotNull(point0);
      
      linkedList0.addFirst(point0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(440.8893667, point0.second, 0.01);
      assertEquals((-2512.687179472), point0.first, 0.01);
      
      Point point1 = new Point(double2, double1);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertEquals((-2462.4082), point1.second, 0.01);
      assertEquals(6.004999999999999, point1.first, 0.01);
      assertNotNull(point1);
      
      boolean boolean0 = linkedList0.add(point1);
      assertTrue(linkedList0.contains(point1));
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertEquals(2, linkedList0.size());
      assertNotSame(point1, point0);
      assertTrue(boolean0);
      assertEquals((-2462.4082), point1.second, 0.01);
      assertEquals(6.004999999999999, point1.first, 0.01);
      
      mnPlot0.plot(double0, double1, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point1));
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-2261);
      MnPlot mnPlot0 = new MnPlot(int0, int0);
      assertNotNull(mnPlot0);
      
      int int1 = mnPlot0.length();
      assertTrue(int1 == int0);
      assertEquals((-2261), int1);
      
      int int2 = mnPlot0.width();
      assertTrue(int0 == int1);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-2261), int2);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot((double) int2, (double) int0, (List<Point>) linkedList0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      double double0 = 0.0;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double1 = 1.0;
      double double2 = 0.0;
      mnPlot0.plot(double2, double1, (List<Point>) linkedList0);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0, linkedList0.size());
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertEquals(0, linkedList0.size());
      
      mnPlot0.plot(double0, double1, (List<Point>) linkedList0);
      assertEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertEquals(0, linkedList0.size());
      
      double double3 = 0.0;
      Point point0 = new Point(double0, double3);
      assertEquals(double0, double2, 0.01);
      assertEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, point0.first, 0.01);
      assertEquals(0.0, point0.second, 0.01);
      assertNotNull(point0);
      
      point0.first = double0;
      boolean boolean0 = linkedList0.add(point0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(double0, double2, 0.01);
      assertEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertEquals(0.0, point0.first, 0.01);
      assertEquals(0.0, point0.second, 0.01);
      
      mnPlot0.plot(double0, double0, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(double0, double2, 0.01);
      assertEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertEquals(1, linkedList0.size());
      
      double double4 = (-185.2566);
      double double5 = (-2489.960836985216);
      point0.second = double5;
      mnPlot0.plot(double4, double1, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double5, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1, linkedList0.size());
      
      double double6 = 2248.15537;
      point0.first = double6;
      double double7 = 0.0;
      double double8 = 1.0;
      double double9 = 4660.3594345;
      point0.second = double9;
      mnPlot0.plot(double8, double7, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double8, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double9, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double1, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double9, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(point0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(double0, double2, 0.01);
      assertEquals(double0, double3, 0.01);
      assertNotEquals(double0, double5, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double9, 0.01);
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double6, 0.01);
      assertNotEquals(double0, double8, 0.01);
      assertEquals(double0, double7, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double6, 0.01);
      assertNotEquals(double3, double8, 0.01);
      assertNotEquals(double3, double9, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double5, 0.01);
      assertEquals(double3, double7, 0.01);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertEquals(4660.3594345, point0.second, 0.01);
      assertEquals(2248.15537, point0.first, 0.01);
      
      mnPlot0.plot(double0, double7, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(double0, double2, 0.01);
      assertEquals(double0, double3, 0.01);
      assertNotEquals(double0, double5, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double9, 0.01);
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double6, 0.01);
      assertNotEquals(double0, double8, 0.01);
      assertEquals(double0, double7, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double8, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double9, 0.01);
      assertEquals(2, linkedList0.size());
      
      mnPlot0.plot(double7, double7, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double8, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double9, 0.01);
      assertEquals(2, linkedList0.size());
      
      int int0 = mnPlot0.width();
      assertEquals(80, int0);
      
      LinkedList<Point> linkedList1 = new LinkedList<Point>();
      assertFalse(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean2 = linkedList1.add(point0);
      assertTrue(linkedList1.contains(point0));
      assertEquals(double0, double2, 0.01);
      assertEquals(double0, double3, 0.01);
      assertNotEquals(double0, double5, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double9, 0.01);
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double6, 0.01);
      assertNotEquals(double0, double8, 0.01);
      assertEquals(double0, double7, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double6, 0.01);
      assertNotEquals(double3, double8, 0.01);
      assertNotEquals(double3, double9, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double5, 0.01);
      assertEquals(double3, double7, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean2);
      assertEquals(4660.3594345, point0.second, 0.01);
      assertEquals(2248.15537, point0.first, 0.01);
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertTrue(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      double double10 = 1884.395672975124;
      // Undeclared exception!
      mnPlot0.plot(double0, double10, (List<Point>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Point point0 = null;
      boolean boolean0 = linkedList0.offerLast(point0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot((List<Point>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-1);
      int int1 = 0;
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mnPlot0);
      
      double double0 = (-2055.39745);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot(double0, double0, (List<Point>) linkedList0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 2196;
      MnPlot mnPlot0 = new MnPlot(int0, int0);
      assertNotNull(mnPlot0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertNotNull(mnPlot0);
      
      int int2 = mnPlot0.length();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = mnPlot0.length();
      assertTrue(int0 == int2);
      assertTrue(int1 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int4 = 2117;
      LinkedList<Point> linkedList1 = new LinkedList<Point>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList0.retainAll(linkedList1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(boolean0);
      
      int int5 = 1;
      // Undeclared exception!
      try { 
        linkedList0.subList(int4, int5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1083);
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mnPlot0);
      
      int int2 = mnPlot0.width();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      double double0 = 0.0;
      double double1 = 6.99409134;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot(double0, double1, (List<Point>) linkedList0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      double double0 = 35.053897012767614;
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      double double0 = (-1779.0653962654);
      double double1 = 456.7;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double2 = (-5351.3);
      Point point0 = new Point(double1, double2);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(456.7, point0.first, 0.01);
      assertEquals((-5351.3), point0.second, 0.01);
      assertNotNull(point0);
      
      double double3 = 906.07;
      point0.first = double3;
      double double4 = 221.2283763146;
      point0.first = double4;
      boolean boolean0 = linkedList0.add(point0);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertEquals((-5351.3), point0.second, 0.01);
      assertEquals(221.2283763146, point0.first, 0.01);
      
      Point point1 = new Point(double1, double1);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertEquals(456.7, point1.first, 0.01);
      assertEquals(456.7, point1.second, 0.01);
      assertNotNull(point1);
      
      linkedList0.addLast(point1);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertEquals(2, linkedList0.size());
      assertNotSame(point1, point0);
      assertEquals(456.7, point1.first, 0.01);
      assertEquals(456.7, point1.second, 0.01);
      
      double double5 = (-2242.6360986);
      boolean boolean1 = linkedList0.add(point1);
      assertTrue(linkedList0.contains(point0));
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double5, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertFalse(point1.equals((Object)point0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, linkedList0.size());
      assertNotSame(point1, point0);
      assertTrue(boolean1);
      assertEquals(456.7, point1.first, 0.01);
      assertEquals(456.7, point1.second, 0.01);
      
      Point point2 = new Point(double0, double5);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double5, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertFalse(point2.equals((Object)point0));
      assertFalse(point2.equals((Object)point1));
      assertEquals((-2242.6360986), point2.second, 0.01);
      assertEquals((-1779.0653962654), point2.first, 0.01);
      assertNotNull(point2);
      
      point2.second = double0;
      boolean boolean2 = linkedList0.add(point2);
      assertTrue(linkedList0.contains(point2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double5, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertFalse(point2.equals((Object)point0));
      assertFalse(point2.equals((Object)point1));
      assertEquals(4, linkedList0.size());
      assertNotSame(point2, point0);
      assertNotSame(point2, point1);
      assertTrue(boolean2);
      assertEquals((-1779.0653962654), point2.second, 0.01);
      assertEquals((-1779.0653962654), point2.first, 0.01);
      
      mnPlot0.plot(double0, double1, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point2));
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double5, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double5, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertEquals(4, linkedList0.size());
      
      int int0 = mnPlot0.width();
      assertEquals(80, int0);
      
      int int1 = mnPlot0.width();
      assertTrue(int1 == int0);
      assertEquals(80, int1);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point2));
      assertEquals(4, linkedList0.size());
      
      int int2 = mnPlot0.length();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(30, int2);
      
      int int3 = mnPlot0.length();
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(30, int3);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point2));
      assertEquals(4, linkedList0.size());
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point2));
      assertEquals(4, linkedList0.size());
      
      double double6 = (-972.153);
      mnPlot0.plot((double) int2, double6, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(4, linkedList0.size());
      
      double double7 = (-311.1156635856949);
      double double8 = 3239.9602;
      mnPlot0.plot(double7, double8, (List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point2));
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double8, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(4, linkedList0.size());
      
      int int4 = mnPlot0.width();
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(80, int4);
      
      LinkedList<Point> linkedList1 = new LinkedList<Point>();
      assertFalse(linkedList1.contains(point2));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point2));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      int int5 = mnPlot0.length();
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      assertEquals(30, int5);
      
      int int6 = mnPlot0.width();
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertEquals(80, int6);
      
      int int7 = mnPlot0.length();
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertTrue(int7 == int3);
      assertFalse(int7 == int4);
      assertEquals(30, int7);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      int int1 = 3421;
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mnPlot0);
      
      int int2 = mnPlot0.length();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(56, int2);
      
      double double0 = (-1547.82);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot((double) int1, (double) int1, (List<Point>) linkedList0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      double double0 = 2149.2;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double1 = 334.19352471002;
      LinkedList<Point> linkedList1 = new LinkedList<Point>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      double double2 = (-88.270267605);
      Point point0 = new Point(double2, double0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-88.270267605), point0.first, 0.01);
      assertEquals(2149.2, point0.second, 0.01);
      assertNotNull(point0);
      
      double double3 = 0.0;
      point0.first = double3;
      double double4 = 1340.7269361622;
      mnPlot0.plot(point0.first, double4, (List<Point>) linkedList1);
      assertFalse(linkedList1.contains(point0));
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotEquals(double2, double4, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertEquals(2149.2, point0.second, 0.01);
      assertEquals(0.0, point0.first, 0.01);
      
      linkedList1.push(point0);
      assertTrue(linkedList1.contains(point0));
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotEquals(double2, double4, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertEquals(2149.2, point0.second, 0.01);
      assertEquals(0.0, point0.first, 0.01);
      
      boolean boolean0 = linkedList1.add(point0);
      assertTrue(linkedList1.contains(point0));
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotEquals(double2, double4, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0);
      assertEquals(2149.2, point0.second, 0.01);
      assertEquals(0.0, point0.first, 0.01);
      
      mnPlot0.plot(double0, double1, (List<Point>) linkedList1);
      assertTrue(linkedList1.contains(point0));
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      ListIterator<Point> listIterator0 = linkedList1.listIterator();
      assertTrue(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(2, linkedList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(listIterator0);
      
      int int0 = mnPlot0.length();
      assertEquals(30, int0);
      
      double double5 = (-1485.6);
      mnPlot0.plot(double4, double5, (List<Point>) linkedList1);
      assertTrue(linkedList1.contains(point0));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      double double6 = 0.5;
      mnPlot0.plot(double6, double4, (List<Point>) linkedList1);
      assertTrue(linkedList1.contains(point0));
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotEquals(double4, double6, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      double double7 = 1.0;
      mnPlot0.plot((List<Point>) linkedList1);
      assertTrue(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      mnPlot0.plot(double3, double7, (List<Point>) linkedList1);
      assertTrue(linkedList1.contains(point0));
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double7, 0.01);
      assertNotEquals(double3, double5, 0.01);
      assertNotEquals(double3, double6, 0.01);
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      int int1 = mnPlot0.width();
      assertFalse(int1 == int0);
      assertEquals(80, int1);
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertTrue(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      mnPlot0.plot((List<Point>) linkedList1);
      assertTrue(linkedList1.contains(point0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      Collection<Object> collection0 = null;
      // Undeclared exception!
      try { 
        linkedList1.containsAll(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 278;
      int int1 = 413;
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mnPlot0);
      
      double double0 = (-1606.4172559);
      double double1 = (-2341.637805);
      List<Point> list0 = (List<Point>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(list0).iterator();
      doReturn(0, 0, 0).when(list0).size();
      double double2 = (-3266.5167460947);
      int int2 = (-1525);
      Object object0 = PrivateAccess.callMethod((Class<MnPlot>) MnPlot.class, mnPlot0, "mnbins", (Object) double0, (Class<?>) double.class, (Object) double2, (Class<?>) double.class, (Object) int2, (Class<?>) int.class);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot(double0, double1, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MnPlot mnPlot0 = new MnPlot();
      assertNotNull(mnPlot0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = 0.0;
      double double1 = 0.0;
      Point point0 = new Point(double0, double1);
      assertEquals(double0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, point0.first, 0.01);
      assertEquals(0.0, point0.second, 0.01);
      assertNotNull(point0);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertFalse(linkedList0.contains(point0));
      assertEquals(0, linkedList0.size());
      
      double double2 = (-1182.6489752668904);
      boolean boolean0 = linkedList0.add(point0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertEquals(0.0, point0.first, 0.01);
      assertEquals(0.0, point0.second, 0.01);
      
      mnPlot0.plot((List<Point>) linkedList0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-908);
      double double0 = 690.3637911489;
      double double1 = 0.0;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-1);
      MnPlot mnPlot0 = new MnPlot(int0, int0);
      assertNotNull(mnPlot0);
      
      int int1 = mnPlot0.length();
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = mnPlot0.length();
      assertTrue(int0 == int1);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      double double0 = 4.399196834070928;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.remove((Object) mnPlot0);
      assertTrue(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot((List<Point>) linkedList0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 9;
      int int1 = 1;
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mnPlot0);
      
      int int2 = mnPlot0.width();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(9, int2);
      
      double double0 = 0.0;
      double double1 = (-2363.73956164965);
      double double2 = 1493.4;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot(double1, double2, (List<Point>) linkedList0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 60
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-934);
      int int1 = 0;
      MnPlot mnPlot0 = new MnPlot(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mnPlot0);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        mnPlot0.plot((List<Point>) linkedList0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
