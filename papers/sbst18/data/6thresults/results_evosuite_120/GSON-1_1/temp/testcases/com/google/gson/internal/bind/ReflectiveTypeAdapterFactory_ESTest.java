/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:54:08 GMT 2018
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.FieldNamingStrategy;
import com.google.gson.Gson;
import com.google.gson.JsonPrimitive;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.ConstructorConstructor;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.FileDescriptor;
import java.io.Reader;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectiveTypeAdapterFactory_ESTest extends ReflectiveTypeAdapterFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ReflectiveTypeAdapterFactory.Adapter<MockHijrahDate> reflectiveTypeAdapterFactory_Adapter0 = (ReflectiveTypeAdapterFactory.Adapter<MockHijrahDate>) mock(ReflectiveTypeAdapterFactory.Adapter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(reflectiveTypeAdapterFactory_Adapter0).read(any(com.google.gson.stream.JsonReader.class));
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = gson0.newJsonReader(reader0);
      assertNotNull(jsonReader0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonReader0.isLenient());
      
      MockHijrahDate mockHijrahDate0 = reflectiveTypeAdapterFactory_Adapter0.read(jsonReader0);
      assertNull(mockHijrahDate0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ObjectConstructor<ChronoLocalDate> objectConstructor0 = null;
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ReflectiveTypeAdapterFactory.Adapter<ChronoLocalDate> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<ChronoLocalDate>(objectConstructor0, hashMap0);
      assertNotNull(reflectiveTypeAdapterFactory_Adapter0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertNotNull(mockFileReader0);
      assertFalse(fileDescriptor0.valid());
      
      JsonReader jsonReader0 = gson0.newJsonReader(mockFileReader0);
      assertNotNull(jsonReader0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(fileDescriptor0.valid());
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        reflectiveTypeAdapterFactory_Adapter0.read(jsonReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Field field0 = null;
      boolean boolean0 = false;
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      // Undeclared exception!
      try { 
        ReflectiveTypeAdapterFactory.excludeField(field0, boolean0, excluder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstructorConstructor constructorConstructor0 = null;
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.IDENTITY;
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor0);
      assertNotNull(jsonAdapterAnnotationTypeAdapterFactory0);
      
      ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory(constructorConstructor0, fieldNamingPolicy0, excluder0, jsonAdapterAnnotationTypeAdapterFactory0);
      assertNotNull(reflectiveTypeAdapterFactory0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      // Undeclared exception!
      try { 
        reflectiveTypeAdapterFactory0.create(gson0, typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstructorConstructor constructorConstructor0 = mock(ConstructorConstructor.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectConstructor) null).when(constructorConstructor0).get(any(com.google.gson.reflect.TypeToken.class));
      FieldNamingStrategy fieldNamingStrategy0 = mock(FieldNamingStrategy.class, new ViolatedAssumptionAnswer());
      Excluder excluder0 = null;
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor0);
      assertNotNull(jsonAdapterAnnotationTypeAdapterFactory0);
      
      ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory(constructorConstructor0, fieldNamingStrategy0, excluder0, jsonAdapterAnnotationTypeAdapterFactory0);
      assertNotNull(reflectiveTypeAdapterFactory0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Object> typeAdapter0 = reflectiveTypeAdapterFactory0.create(gson0, typeToken0);
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstructorConstructor constructorConstructor0 = null;
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = null;
      ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory(constructorConstructor0, fieldNamingPolicy0, excluder0, jsonAdapterAnnotationTypeAdapterFactory0);
      assertNotNull(reflectiveTypeAdapterFactory0);
      
      Field field0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        reflectiveTypeAdapterFactory0.excludeField(field0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      assertNotNull(jsonWriter0);
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      ObjectConstructor<Integer> objectConstructor0 = null;
      Map<String, ReflectiveTypeAdapterFactory.BoundField> map0 = (Map<String, ReflectiveTypeAdapterFactory.BoundField>) mock(Map.class, new ViolatedAssumptionAnswer());
      ReflectiveTypeAdapterFactory.Adapter<Integer> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Integer>(objectConstructor0, map0);
      assertNotNull(reflectiveTypeAdapterFactory_Adapter0);
      
      Integer integer0 = null;
      reflectiveTypeAdapterFactory_Adapter0.write(jsonWriter0, integer0);
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ObjectConstructor<ReflectiveTypeAdapterFactory.BoundField> objectConstructor0 = null;
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ReflectiveTypeAdapterFactory.Adapter<ReflectiveTypeAdapterFactory.BoundField> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<ReflectiveTypeAdapterFactory.BoundField>(objectConstructor0, hashMap0);
      assertNotNull(reflectiveTypeAdapterFactory_Adapter0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      int int0 = 1;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(jsonPrimitive0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      // Undeclared exception!
      try { 
        reflectiveTypeAdapterFactory_Adapter0.fromJsonTree(jsonPrimitive0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ConstructorConstructor constructorConstructor0 = mock(ConstructorConstructor.class, new ViolatedAssumptionAnswer());
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor0);
      assertNotNull(jsonAdapterAnnotationTypeAdapterFactory0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) jsonAdapterAnnotationTypeAdapterFactory0, (Type) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.internal.ConstructorConstructor. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConstructorConstructor constructorConstructor0 = mock(ConstructorConstructor.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectConstructor) null).when(constructorConstructor0).get(any(com.google.gson.reflect.TypeToken.class));
      FieldNamingStrategy fieldNamingStrategy0 = mock(FieldNamingStrategy.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(fieldNamingStrategy0).translateName(any(java.lang.reflect.Field.class));
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor0);
      assertNotNull(jsonAdapterAnnotationTypeAdapterFactory0);
      
      ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory(constructorConstructor0, fieldNamingStrategy0, excluder0, jsonAdapterAnnotationTypeAdapterFactory0);
      assertNotNull(reflectiveTypeAdapterFactory0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<ReflectiveTypeAdapterFactory.BoundField> class0 = ReflectiveTypeAdapterFactory.BoundField.class;
      TypeToken<ReflectiveTypeAdapterFactory.BoundField> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      // Undeclared exception!
      try { 
        reflectiveTypeAdapterFactory0.create(gson0, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField declares multiple JSON fields named null
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory", e);
      }
  }
}
