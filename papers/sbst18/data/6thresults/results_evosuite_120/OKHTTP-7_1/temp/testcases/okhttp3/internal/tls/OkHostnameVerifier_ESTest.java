/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:17:49 GMT 2018
 */

package okhttp3.internal.tls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.Collection;
import java.util.List;
import javax.net.ssl.SSLSession;
import javax.security.auth.x500.X500Principal;
import okhttp3.internal.tls.OkHostnameVerifier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHostnameVerifier_ESTest extends OkHostnameVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "]3_f";
      Certificate[] certificateArray0 = new Certificate[6];
      Certificate certificate0 = mock(Certificate.class, new ViolatedAssumptionAnswer());
      certificateArray0[0] = certificate0;
      SSLSession sSLSession0 = mock(SSLSession.class, new ViolatedAssumptionAnswer());
      doReturn(certificateArray0).when(sSLSession0).getPeerCertificates();
      // Undeclared exception!
      try { 
        okHostnameVerifier0.verify(string0, sSLSession0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.security.cert.Certificate$MockitoMock$1363551780 cannot be cast to java.security.cert.X509Certificate
         //
         verifyException("okhttp3.internal.tls.OkHostnameVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "'Mr\\nI9HU";
      Certificate[] certificateArray0 = new Certificate[0];
      SSLSession sSLSession0 = mock(SSLSession.class, new ViolatedAssumptionAnswer());
      doReturn(certificateArray0).when(sSLSession0).getPeerCertificates();
      // Undeclared exception!
      try { 
        okHostnameVerifier0.verify(string0, sSLSession0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("okhttp3.internal.tls.OkHostnameVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      // Undeclared exception!
      try { 
        okHostnameVerifier0.verify(string0, x509Certificate0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class okhttp3.internal.Util
         //
         verifyException("okhttp3.internal.tls.OkHostnameVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      X509Certificate x509Certificate0 = null;
      // Undeclared exception!
      try { 
        OkHostnameVerifier.allSubjectAltNames(x509Certificate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.tls.OkHostnameVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "BE";
      String string1 = "*.";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string1, (Class<?>) String.class);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(object0);
      assertEquals(false, object0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "h2";
      String string1 = "I0!Nb0wNe$UJ[*l";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string1, (Class<?>) String.class);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(object0);
      assertEquals(false, object0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "*.i0!nb0ne$uj[*l.";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertNotNull(object0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "'Mr\\nI9HU";
      String string1 = ".";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string1, (Class<?>) String.class);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(object0);
      assertEquals(false, object0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "BE";
      String string1 = "";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string1, (Class<?>) String.class);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(object0);
      assertEquals(false, object0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "l";
      String string1 = null;
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string1, (Class<?>) String.class);
      assertNotNull(object0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "okhttp3.internal.tls.OkHostnameVerifier..";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertNotNull(object0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = ".";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertNotNull(object0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertNotNull(object0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "l";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertNotNull(object0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "l";
      String string1 = null;
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(x509Certificate0).getSubjectAlternativeNames();
      int int0 = 0;
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "getSubjectAltNames", (Object) x509Certificate0, (Class<?>) X509Certificate.class, (Object) int0, (Class<?>) int.class);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "l";
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(x509Certificate0).getSubjectAlternativeNames();
      doReturn((X500Principal) null).when(x509Certificate0).getSubjectX500Principal();
      try { 
        PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) x509Certificate0, (Class<?>) X509Certificate.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.tls.DistinguishedNameParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "l";
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(x509Certificate0).getSubjectAlternativeNames();
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyIpAddress", (Object) string0, (Class<?>) String.class, (Object) x509Certificate0, (Class<?>) X509Certificate.class);
      assertNotNull(object0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null, (Collection) null).when(x509Certificate0).getSubjectAlternativeNames();
      List<String> list0 = OkHostnameVerifier.allSubjectAltNames(x509Certificate0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "*.i0!nb0ne$uj[*l.";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      String string1 = "I0!Nb0wNe$UJ[*l..";
      X509Certificate x509Certificate1 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(x509Certificate1).getSubjectAlternativeNames();
      Object object1 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyIpAddress", (Object) string1, (Class<?>) String.class, (Object) x509Certificate1, (Class<?>) X509Certificate.class);
      assertFalse(string1.equals((Object)string0));
      assertTrue(object1.equals((Object)object0));
      assertNotNull(object1);
      assertEquals(false, object1);
      assertNotSame(string1, string0);
      
      SSLSession sSLSession0 = mock(SSLSession.class, new ViolatedAssumptionAnswer());
      doReturn((Certificate[]) null).when(sSLSession0).getPeerCertificates();
      // Undeclared exception!
      try { 
        okHostnameVerifier0.verify(string0, sSLSession0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.tls.OkHostnameVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      String string0 = null;
      Object object1 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, ((OkHostnameVerifier) object0).INSTANCE, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertNotNull(object1);
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "]3_f";
      Certificate[] certificateArray0 = new Certificate[6];
      SSLSession sSLSession0 = mock(SSLSession.class, new ViolatedAssumptionAnswer());
      doReturn(certificateArray0).when(sSLSession0).getPeerCertificates();
      // Undeclared exception!
      try { 
        okHostnameVerifier0.verify(string0, sSLSession0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class okhttp3.internal.Util
         //
         verifyException("okhttp3.internal.tls.OkHostnameVerifier", e);
      }
  }
}
