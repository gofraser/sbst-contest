/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 19:46:19 GMT 2018
 */

package okhttp3.internal.tls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import javax.net.ssl.SSLSession;
import javax.security.auth.x500.X500Principal;
import okhttp3.internal.tls.OkHostnameVerifier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHostnameVerifier_ESTest extends OkHostnameVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "*.";
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null, (Collection) null).when(x509Certificate0).getSubjectAlternativeNames();
      List<String> list0 = OkHostnameVerifier.allSubjectAltNames(x509Certificate0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertEquals(false, object0);
      assertNotNull(object0);
      
      String string1 = "..";
      String string2 = "ffff0000.";
      Object object1 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string1, (Class<?>) String.class, (Object) string2, (Class<?>) String.class);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(object1.equals((Object)object0));
      assertEquals(false, object1);
      assertNotNull(object1);
      
      SSLSession sSLSession0 = mock(SSLSession.class, new ViolatedAssumptionAnswer());
      doReturn((Certificate[]) null).when(sSLSession0).getPeerCertificates();
      // Undeclared exception!
      try { 
        okHostnameVerifier0.verify(string0, sSLSession0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.tls.OkHostnameVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = null;
      Certificate[] certificateArray0 = new Certificate[8];
      Certificate certificate0 = mock(Certificate.class, new ViolatedAssumptionAnswer());
      certificateArray0[0] = certificate0;
      SSLSession sSLSession0 = mock(SSLSession.class, new ViolatedAssumptionAnswer());
      doReturn(certificateArray0).when(sSLSession0).getPeerCertificates();
      // Undeclared exception!
      try { 
        okHostnameVerifier0.verify(string0, sSLSession0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.security.cert.Certificate$MockitoMock$1822921540 cannot be cast to java.security.cert.X509Certificate
         //
         verifyException("okhttp3.internal.tls.OkHostnameVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "";
      Certificate[] certificateArray0 = new Certificate[0];
      SSLSession sSLSession0 = mock(SSLSession.class, new ViolatedAssumptionAnswer());
      doReturn(certificateArray0).when(sSLSession0).getPeerCertificates();
      // Undeclared exception!
      try { 
        okHostnameVerifier0.verify(string0, sSLSession0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("okhttp3.internal.tls.OkHostnameVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Collection<List<String>> collection0 = (Collection<List<String>>) mock(Collection.class, new ViolatedAssumptionAnswer());
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null, (Collection) null).when(x509Certificate0).getSubjectAlternativeNames();
      String string0 = "gDa5";
      OkHostnameVerifier okHostnameVerifier0 = (OkHostnameVerifier)PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(okHostnameVerifier0);
      
      Collection<List<String>> collection1 = (Collection<List<String>>) mock(Collection.class, new ViolatedAssumptionAnswer());
      X509Certificate x509Certificate1 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(x509Certificate1).getSubjectAlternativeNames();
      String string1 = ".3Jvd";
      Collection<List<Object>> collection2 = (Collection<List<Object>>) mock(Collection.class, new ViolatedAssumptionAnswer());
      X509Certificate x509Certificate2 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(x509Certificate2).getSubjectAlternativeNames();
      List<String> list0 = OkHostnameVerifier.allSubjectAltNames(x509Certificate0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(list0));
      assertNotNull(linkedList0);
      
      String string2 = "@_PQ4E8cdq\\O)k";
      String string3 = ".";
      Boolean boolean0 = (Boolean)PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string2, (Class<?>) String.class, (Object) string3, (Class<?>) String.class);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      X509Certificate x509Certificate3 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null, (Collection) null).when(x509Certificate3).getSubjectAlternativeNames();
      List<String> list1 = OkHostnameVerifier.allSubjectAltNames(x509Certificate3);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.contains(string0));
      assertNotNull(list1);
      
      Collection<List<X509Certificate>> collection3 = (Collection<List<X509Certificate>>) mock(Collection.class, new ViolatedAssumptionAnswer());
      String string4 = "[";
      String string5 = "ffff0000";
      Boolean boolean1 = (Boolean)PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string5, (Class<?>) String.class);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = (Boolean)PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyIpAddress", (Object) string0, (Class<?>) String.class, (Object) x509Certificate1, (Class<?>) X509Certificate.class);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      int int0 = (-105861870);
      OkHostnameVerifier okHostnameVerifier1 = OkHostnameVerifier.INSTANCE;
      assertNotSame(okHostnameVerifier1, okHostnameVerifier0);
      assertFalse(okHostnameVerifier1.equals((Object)okHostnameVerifier0));
      assertNotNull(okHostnameVerifier1);
      
      String string6 = "ffff0000.";
      String string7 = "X,:";
      Boolean boolean3 = (Boolean)PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier1, "verifyHostname", (Object) string6, (Class<?>) String.class, (Object) string7, (Class<?>) String.class);
      assertNotSame(okHostnameVerifier1, okHostnameVerifier0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string7);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertFalse(okHostnameVerifier1.equals((Object)okHostnameVerifier0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "getSubjectAltNames", (Object) x509Certificate2, (Class<?>) X509Certificate.class, (Object) int0, (Class<?>) int.class);
      assertNotSame(okHostnameVerifier0, okHostnameVerifier1);
      assertFalse(okHostnameVerifier0.equals((Object)okHostnameVerifier1));
      assertNotNull(object0);
      
      String string8 = "source == null";
      X509Certificate x509Certificate4 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        okHostnameVerifier0.verify(string8, x509Certificate4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class okhttp3.internal.Util
         //
         verifyException("okhttp3.internal.tls.OkHostnameVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      X509Certificate x509Certificate0 = null;
      // Undeclared exception!
      try { 
        OkHostnameVerifier.allSubjectAltNames(x509Certificate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.tls.OkHostnameVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "UTF-32LE";
      String string1 = "*.*.";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string1, (Class<?>) String.class);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "`!2.+&j*H852[l%SG";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "BPeeKi7";
      String string1 = "gDa5..";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string1, (Class<?>) String.class);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      String string0 = "GMT";
      String string1 = "";
      Object object1 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, (OkHostnameVerifier) object0, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string1, (Class<?>) String.class);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "UTF-16LE";
      String string1 = null;
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string1, (Class<?>) String.class);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      String string0 = "|[yWOt..";
      Object object1 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, ((OkHostnameVerifier) object0).INSTANCE, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertEquals(false, object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = null;
      String string1 = "";
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyHostname", (Object) string1, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = null;
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "*.";
      LinkedList<List<Object>> linkedList0 = new LinkedList<List<Object>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(string0));
      assertNotNull(linkedList1);
      
      Object object0 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertEquals(false, object0);
      assertNotNull(object0);
      
      Collection<List<Object>> collection0 = null;
      X509Certificate x509Certificate1 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(x509Certificate1).getSubjectAlternativeNames();
      int int0 = 468;
      Object object1 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "getSubjectAltNames", (Object) x509Certificate1, (Class<?>) X509Certificate.class, (Object) int0, (Class<?>) int.class);
      assertNotNull(object1);
      
      Object object2 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertTrue(object2.equals((Object)object0));
      assertEquals(false, object2);
      assertNotNull(object2);
      
      String string1 = "..";
      String string2 = "Malformed DN: ";
      Object object3 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string2, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(object3.equals((Object)object0));
      assertTrue(object3.equals((Object)object2));
      assertEquals(false, object3);
      assertNotNull(object3);
      
      String string3 = "ffff0000.";
      Object object4 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0.INSTANCE, "verifyHostname", (Object) string1, (Class<?>) String.class, (Object) string3, (Class<?>) String.class);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(object4.equals((Object)object3));
      assertTrue(object4.equals((Object)object0));
      assertTrue(object4.equals((Object)object2));
      assertEquals(false, object4);
      assertNotNull(object4);
      
      Certificate[] certificateArray0 = new Certificate[1];
      certificateArray0[0] = (Certificate) x509Certificate0;
      SSLSession sSLSession0 = mock(SSLSession.class, new ViolatedAssumptionAnswer());
      String string4 = "x,:.";
      Object object5 = PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, okHostnameVerifier0, "verifyHostname", (Object) string4, (Class<?>) String.class, (Object) string0, (Class<?>) String.class);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(object5.equals((Object)object0));
      assertTrue(object5.equals((Object)object3));
      assertTrue(object5.equals((Object)object2));
      assertTrue(object5.equals((Object)object4));
      assertEquals(false, object5);
      assertNotNull(object5);
      
      X509Certificate x509Certificate2 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null, (Collection) null).when(x509Certificate2).getSubjectAlternativeNames();
      List<String> list0 = OkHostnameVerifier.allSubjectAltNames(x509Certificate2);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = PrivateAccess.callDefaultConstructorOfTheClassUnderTest();
      assertNotNull(object0);
      
      String string0 = "okhttp3.internal.tls.OkHostnameVerifier";
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(x509Certificate0).getSubjectAlternativeNames();
      doReturn((X500Principal) null).when(x509Certificate0).getSubjectX500Principal();
      try { 
        PrivateAccess.callMethod((Class<OkHostnameVerifier>) OkHostnameVerifier.class, (OkHostnameVerifier) object0, "verifyHostname", (Object) string0, (Class<?>) String.class, (Object) x509Certificate0, (Class<?>) X509Certificate.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.tls.DistinguishedNameParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OkHostnameVerifier okHostnameVerifier0 = OkHostnameVerifier.INSTANCE;
      assertNotNull(okHostnameVerifier0);
      
      String string0 = "*.";
      Certificate[] certificateArray0 = new Certificate[1];
      SSLSession sSLSession0 = mock(SSLSession.class, new ViolatedAssumptionAnswer());
      doReturn(certificateArray0).when(sSLSession0).getPeerCertificates();
      // Undeclared exception!
      try { 
        okHostnameVerifier0.verify(string0, sSLSession0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class okhttp3.internal.Util
         //
         verifyException("okhttp3.internal.tls.OkHostnameVerifier", e);
      }
  }
}
