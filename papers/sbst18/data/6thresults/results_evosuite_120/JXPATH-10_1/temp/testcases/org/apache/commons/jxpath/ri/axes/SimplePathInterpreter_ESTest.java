/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:57:46 GMT 2018
 */

package org.apache.commons.jxpath.ri.axes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathBeanInfo;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.SimplePathInterpreter;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer;
import org.apache.commons.jxpath.ri.model.beans.CollectionPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimplePathInterpreter_ESTest extends SimplePathInterpreter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = "";
      Locale locale0 = new Locale(string0, string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = new NullPointer(locale0, string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant(nullPointer0.UNKNOWN_NAMESPACE);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(constant0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(coreOperationNegate0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, constant0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(nullPointer0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPropertyPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getIndex());
      assertEquals(0, nullPropertyPointer0.getPropertyCount());
      assertEquals(0, nullPropertyPointer0.getLength());
      assertFalse(nullPropertyPointer0.isActual());
      assertFalse(nullPropertyPointer0.isNode());
      assertNull(nullPropertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
      assertFalse(nullPropertyPointer0.isRoot());
      assertFalse(nullPropertyPointer0.isCollection());
      assertEquals("*", nullPropertyPointer0.getPropertyName());
      assertTrue(nullPropertyPointer0.isLeaf());
      assertTrue(nullPropertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertNotNull(nullPropertyPointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = false;
      ChildContext childContext0 = new ChildContext(evalContext0, processingInstructionTest0, boolean0, boolean0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(childContext0);
      
      Step[] stepArray0 = null;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(childContext0, nullPropertyPointer0, expressionArray0, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePathInterpreter simplePathInterpreter0 = new SimplePathInterpreter();
      assertNotNull(simplePathInterpreter0);
      
      EvalContext evalContext0 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      NodePointer nodePointer0 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      Step[] stepArray0 = null;
      int int0 = 4270;
      Expression[] expressionArray0 = new Expression[9];
      try { 
        PrivateAccess.callMethod((Class<SimplePathInterpreter>) SimplePathInterpreter.class, simplePathInterpreter0, "createNullPointerForPredicates", (Object) evalContext0, (Class<?>) EvalContext.class, (Object) nodePointer0, (Class<?>) NodePointer.class, (Object) stepArray0, (Class<?>) Step[].class, (Object) int0, (Class<?>) int.class, (Object) expressionArray0, (Class<?>) Expression[].class, (Object) int0, (Class<?>) int.class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvalContext evalContext0 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      Step[] stepArray0 = new Step[6];
      Expression[] expressionArray0 = new Expression[8];
      NodePointer nodePointer0 = null;
      QName qName0 = mock(QName.class, new ViolatedAssumptionAnswer());
      EvalContext evalContext1 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      int int0 = 631;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int0);
      assertEquals(631, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      DescendantContext descendantContext0 = new DescendantContext(evalContext1, boolean0, nodeTypeTest0);
      assertEquals(631, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      JXPathBeanInfo jXPathBeanInfo0 = mock(JXPathBeanInfo.class, new ViolatedAssumptionAnswer());
      BeanPointer beanPointer0 = new BeanPointer(nodePointer0, qName0, descendantContext0, jXPathBeanInfo0);
      assertEquals(631, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      SimplePathInterpreter simplePathInterpreter0 = new SimplePathInterpreter();
      assertNotNull(simplePathInterpreter0);
      
      try { 
        PrivateAccess.callMethod((Class<SimplePathInterpreter>) SimplePathInterpreter.class, simplePathInterpreter0, "doPredicate", (Object) evalContext0, (Class<?>) EvalContext.class, (Object) beanPointer0, (Class<?>) NodePointer.class, (Object) stepArray0, (Class<?>) Step[].class, (Object) beanPointer0.WHOLE_COLLECTION, (Class<?>) int.class, (Object) expressionArray0, (Class<?>) Expression[].class, (Object) int0, (Class<?>) int.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 631
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvalContext evalContext0 = null;
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = "";
      NullPointer nullPointer0 = new NullPointer(locale0, string0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertFalse(propertyPointer0.isCollection());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isActual());
      assertFalse(propertyPointer0.isRoot());
      assertTrue(propertyPointer0.isLeaf());
      assertFalse(propertyPointer0.isNode());
      assertNull(propertyPointer0.getNamespaceURI());
      assertFalse(propertyPointer0.isAttribute());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(propertyPointer0);
      
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[2];
      int int0 = 5;
      QName qName0 = new QName(string0, string0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, nullPointer0.UNKNOWN_NAMESPACE);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(propertyPointer0.WHOLE_COLLECTION, propertyPointer0.UNSPECIFIED_PROPERTY, int0).when(step0).getAxis();
      doReturn(nodeNameTest0).when(step0).getNodeTest();
      doReturn((Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      NullPropertyPointer nullPropertyPointer0 = (NullPropertyPointer)SimplePathInterpreter.interpretSimpleLocationPath(evalContext0, nullPointer0, stepArray0);
      assertEquals(2, stepArray0.length);
      assertNotSame(nullPropertyPointer0, propertyPointer0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPropertyPointer0.isNode());
      assertTrue(nullPropertyPointer0.isAttribute());
      assertFalse(nullPropertyPointer0.isActual());
      assertFalse(nullPropertyPointer0.isCollection());
      assertFalse(nullPropertyPointer0.isRoot());
      assertEquals(":", nullPropertyPointer0.getPropertyName());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getIndex());
      assertTrue(nullPropertyPointer0.isContainer());
      assertTrue(nullPropertyPointer0.isLeaf());
      assertEquals(0, nullPropertyPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
      assertEquals(0, nullPropertyPointer0.getPropertyCount());
      assertNull(nullPropertyPointer0.getNamespaceURI());
      assertFalse(nullPropertyPointer0.equals((Object)propertyPointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPropertyPointer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvalContext evalContext0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      Class<Object> class0 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertNotNull(jXPathBasicBeanInfo0);
      
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(collectionPointer0, jXPathBasicBeanInfo0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isNode());
      assertFalse(beanPropertyPointer0.isRoot());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertTrue(beanPropertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertNotNull(beanPropertyPointer0);
      
      QName qName0 = beanPropertyPointer0.getName();
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isNode());
      assertFalse(beanPropertyPointer0.isRoot());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertTrue(beanPropertyPointer0.isContainer());
      assertEquals("*", qName0.toString());
      assertEquals("*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertNotNull(qName0);
      
      NodeTest nodeTest0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, nodeTest0);
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      BeanPointer beanPointer0 = new BeanPointer(collectionPointer0, qName0, namespaceContext0, jXPathBasicBeanInfo0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isNode());
      assertFalse(beanPropertyPointer0.isRoot());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertTrue(beanPropertyPointer0.isContainer());
      assertEquals("*", qName0.toString());
      assertEquals("*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertFalse(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      Step[] stepArray0 = new Step[7];
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(collectionPointer0.UNKNOWN_NAMESPACE);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(beanPropertyPointer0.WHOLE_COLLECTION, beanPointer0.WHOLE_COLLECTION, beanPropertyPointer0.UNSPECIFIED_PROPERTY, beanPropertyPointer0.UNSPECIFIED_PROPERTY, beanPropertyPointer0.UNSPECIFIED_PROPERTY).when(step0).getAxis();
      doReturn((Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      stepArray0[2] = stepArray0[1];
      stepArray0[3] = stepArray0[2];
      stepArray0[4] = stepArray0[3];
      stepArray0[5] = stepArray0[4];
      stepArray0[6] = stepArray0[5];
      BeanPointer beanPointer1 = (BeanPointer)SimplePathInterpreter.interpretSimpleLocationPath(evalContext0, beanPointer0, stepArray0);
      assertEquals(7, stepArray0.length);
      assertNotSame(beanPointer1, beanPointer0);
      assertNotSame(beanPointer0, beanPointer1);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isNode());
      assertFalse(beanPropertyPointer0.isRoot());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertTrue(beanPropertyPointer0.isContainer());
      assertFalse(beanPointer1.isRoot());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isContainer());
      assertEquals(0, beanPointer1.getIndex());
      assertEquals("*", qName0.toString());
      assertEquals("*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertFalse(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer1.equals((Object)beanPointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvalContext evalContext0 = null;
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = "0$]-gy++%#3FOA~";
      NullPointer nullPointer0 = new NullPointer(locale0, string0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isCollection());
      assertFalse(propertyPointer0.isRoot());
      assertTrue(propertyPointer0.isContainer());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isNode());
      assertFalse(propertyPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(propertyPointer0);
      
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(nullPointer0.WHOLE_COLLECTION, propertyPointer0.WHOLE_COLLECTION).when(step0).getAxis();
      doReturn((Object) expressionArray0, (Object) expressionArray0).when(step0).getPredicates();
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      NullPointer nullPointer1 = (NullPointer)SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, nullPointer0, expressionArray0, stepArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertSame(nullPointer0, nullPointer1);
      assertSame(nullPointer1, nullPointer0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer1.isActual());
      assertTrue(nullPointer1.isNode());
      assertFalse(nullPointer1.isAttribute());
      assertFalse(nullPointer1.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer1.getLength());
      assertTrue(nullPointer1.isLeaf());
      assertNull(nullPointer1.getNamespaceURI());
      assertFalse(nullPointer1.isCollection());
      assertTrue(nullPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer1.getIndex());
      assertFalse(nullPointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      AttributeContext attributeContext0 = new AttributeContext(evalContext0, nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      NodePointer nodePointer0 = attributeContext0.getCurrentNodePointer();
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNull(nodePointer0);
      
      String string0 = "xml";
      QName qName1 = new QName(string0, string0);
      assertEquals("xml", qName1.getPrefix());
      assertEquals("xml:xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertNotNull(qName1);
      
      Class<Object> class0 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertNotNull(jXPathBasicBeanInfo0);
      
      BeanPointer beanPointer0 = new BeanPointer(nodePointer0, qName1, qName0, jXPathBasicBeanInfo0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals("xml", qName1.getPrefix());
      assertEquals("xml:xml", qName1.toString());
      assertEquals("xml", qName1.getName());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      Step[] stepArray0 = new Step[9];
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[5] = (Expression) constant0;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(beanPointer0.WHOLE_COLLECTION, 0).when(step0).getAxis();
      doReturn((Object) expressionArray1, (Object) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      stepArray0[2] = stepArray0[1];
      stepArray0[3] = stepArray0[2];
      stepArray0[4] = stepArray0[3];
      stepArray0[5] = stepArray0[4];
      stepArray0[6] = stepArray0[5];
      stepArray0[7] = stepArray0[6];
      stepArray0[8] = stepArray0[7];
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, beanPointer0, expressionArray0, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ParentContext parentContext0 = new ParentContext(evalContext0, processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertNotNull(parentContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, basicNodeSet0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = evalContext0;
      evalContextArray0[1] = evalContext0;
      evalContextArray0[2] = (EvalContext) nodeSetContext0;
      evalContextArray0[3] = (EvalContext) nodeSetContext0;
      evalContextArray0[4] = (EvalContext) nodeSetContext0;
      evalContextArray0[5] = (EvalContext) parentContext0;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      assertEquals(6, evalContextArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertNotNull(unionContext0);
      
      boolean boolean0 = false;
      QName qName0 = new QName(string0, string0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, boolean0, nodeNameTest0);
      assertEquals(6, evalContextArray0.length);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNotNull(descendantContext0);
      
      NodePointer nodePointer0 = null;
      Step[] stepArray0 = new Step[9];
      int int0 = 1000;
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(step0).getAxis();
      doReturn((Object) expressionArray0, (Object) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      stepArray0[2] = stepArray0[1];
      stepArray0[3] = stepArray0[2];
      stepArray0[4] = stepArray0[3];
      stepArray0[5] = stepArray0[4];
      stepArray0[6] = stepArray0[5];
      stepArray0[7] = stepArray0[6];
      stepArray0[8] = stepArray0[7];
      NodePointer nodePointer1 = SimplePathInterpreter.interpretSimpleLocationPath(descendantContext0, nodePointer0, stepArray0);
      assertEquals(9, stepArray0.length);
      assertEquals(6, evalContextArray0.length);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNull(nodePointer1);
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.createNullPointer(evalContextArray0[5], nodePointer1, stepArray0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AttributeContext attributeContext0 = new AttributeContext(evalContext0, processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(processingInstructionTest0, locale0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(collectionPointer0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
      assertEquals(0, nullPropertyPointer0.getLength());
      assertFalse(nullPropertyPointer0.isCollection());
      assertFalse(nullPropertyPointer0.isRoot());
      assertFalse(nullPropertyPointer0.isActual());
      assertTrue(nullPropertyPointer0.isLeaf());
      assertFalse(nullPropertyPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getIndex());
      assertFalse(nullPropertyPointer0.isNode());
      assertNull(nullPropertyPointer0.getNamespaceURI());
      assertTrue(nullPropertyPointer0.isContainer());
      assertEquals("*", nullPropertyPointer0.getPropertyName());
      assertEquals(0, nullPropertyPointer0.getPropertyCount());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPropertyPointer0);
      
      QName qName0 = nullPropertyPointer0.getName();
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
      assertEquals(0, nullPropertyPointer0.getLength());
      assertFalse(nullPropertyPointer0.isCollection());
      assertFalse(nullPropertyPointer0.isRoot());
      assertFalse(nullPropertyPointer0.isActual());
      assertTrue(nullPropertyPointer0.isLeaf());
      assertFalse(nullPropertyPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getIndex());
      assertFalse(nullPropertyPointer0.isNode());
      assertNull(nullPropertyPointer0.getNamespaceURI());
      assertTrue(nullPropertyPointer0.isContainer());
      assertEquals("*", nullPropertyPointer0.getPropertyName());
      assertEquals(0, nullPropertyPointer0.getPropertyCount());
      assertEquals("*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
      assertEquals(0, nullPropertyPointer0.getLength());
      assertFalse(nullPropertyPointer0.isCollection());
      assertFalse(nullPropertyPointer0.isRoot());
      assertFalse(nullPropertyPointer0.isActual());
      assertTrue(nullPropertyPointer0.isLeaf());
      assertFalse(nullPropertyPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getIndex());
      assertFalse(nullPropertyPointer0.isNode());
      assertNull(nullPropertyPointer0.getNamespaceURI());
      assertTrue(nullPropertyPointer0.isContainer());
      assertEquals("*", nullPropertyPointer0.getPropertyName());
      assertEquals(0, nullPropertyPointer0.getPropertyCount());
      assertEquals("*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Step[] stepArray0 = new Step[0];
      int int0 = 0;
      NodePointer nodePointer0 = SimplePathInterpreter.createNullPointer(attributeContext0, variablePointer0, stepArray0, int0);
      assertEquals(0, stepArray0.length);
      assertSame(variablePointer0, nodePointer0);
      assertSame(nodePointer0, variablePointer0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
      assertEquals(0, nullPropertyPointer0.getLength());
      assertFalse(nullPropertyPointer0.isCollection());
      assertFalse(nullPropertyPointer0.isRoot());
      assertFalse(nullPropertyPointer0.isActual());
      assertTrue(nullPropertyPointer0.isLeaf());
      assertFalse(nullPropertyPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getIndex());
      assertFalse(nullPropertyPointer0.isNode());
      assertNull(nullPropertyPointer0.getNamespaceURI());
      assertTrue(nullPropertyPointer0.isContainer());
      assertEquals("*", nullPropertyPointer0.getPropertyName());
      assertEquals(0, nullPropertyPointer0.getPropertyCount());
      assertEquals("*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isNode());
      assertNull(nodePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvalContext evalContext0 = null;
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = "";
      NullPointer nullPointer0 = new NullPointer(locale0, string0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertEquals(0, propertyPointer0.getLength());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertNull(propertyPointer0.getNamespaceURI());
      assertFalse(propertyPointer0.isNode());
      assertFalse(propertyPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isActual());
      assertFalse(propertyPointer0.isCollection());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(propertyPointer0);
      
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[2];
      int int0 = 206;
      int int1 = 5;
      String string1 = "";
      String string2 = "fHE%?l";
      QName qName0 = new QName(string1, string2);
      assertEquals("", qName0.getPrefix());
      assertEquals("fHE%?l", qName0.getName());
      assertEquals(":fHE%?l", qName0.toString());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, nullPointer0.UNKNOWN_NAMESPACE);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals("", qName0.getPrefix());
      assertEquals("fHE%?l", qName0.getName());
      assertEquals(":fHE%?l", qName0.toString());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":fHE%?l", nodeNameTest0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(int0, propertyPointer0.UNSPECIFIED_PROPERTY, int1, int1, 0).when(step0).getAxis();
      doReturn(nodeNameTest0, nodeNameTest0).when(step0).getNodeTest();
      doReturn((Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0, (Object) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      NullPropertyPointer nullPropertyPointer0 = (NullPropertyPointer)SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, propertyPointer0, expressionArray0, stepArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotSame(nullPropertyPointer0, propertyPointer0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(propertyPointer0, nullPropertyPointer0);
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
      assertEquals(":fHE%?l", nullPropertyPointer0.getPropertyName());
      assertFalse(nullPropertyPointer0.isRoot());
      assertFalse(nullPropertyPointer0.isCollection());
      assertNull(nullPropertyPointer0.getNamespaceURI());
      assertTrue(nullPropertyPointer0.isAttribute());
      assertTrue(nullPropertyPointer0.isLeaf());
      assertEquals(0, nullPropertyPointer0.getLength());
      assertFalse(nullPropertyPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getIndex());
      assertFalse(nullPropertyPointer0.isNode());
      assertEquals(0, nullPropertyPointer0.getPropertyCount());
      assertTrue(nullPropertyPointer0.isContainer());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertEquals(0, propertyPointer0.getLength());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertNull(propertyPointer0.getNamespaceURI());
      assertFalse(propertyPointer0.isNode());
      assertFalse(propertyPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isActual());
      assertFalse(propertyPointer0.isCollection());
      assertTrue(propertyPointer0.isContainer());
      assertFalse(nullPropertyPointer0.equals((Object)propertyPointer0));
      assertFalse(string0.equals((Object)string2));
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPropertyPointer0);
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.createNullPointer(evalContext0, nullPropertyPointer0, stepArray0, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = "aE{J[}A,&wjAka&v.";
      String string1 = "ga,opp";
      QName qName0 = new QName(string0, string1);
      assertEquals("aE{J[}A,&wjAka&v.", qName0.getPrefix());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", qName0.toString());
      assertEquals("ga,opp", qName0.getName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(qName0);
      
      String string2 = "org.apache.commons.jxpath.ri.axes.RootContext";
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, string2);
      assertEquals("aE{J[}A,&wjAka&v.", qName0.getPrefix());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", qName0.toString());
      assertEquals("ga,opp", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", nodeNameTest0.toString());
      assertEquals("org.apache.commons.jxpath.ri.axes.RootContext", nodeNameTest0.getNamespaceURI());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(nodeNameTest0);
      
      ParentContext parentContext0 = new ParentContext(evalContext0, nodeNameTest0);
      assertEquals("aE{J[}A,&wjAka&v.", qName0.getPrefix());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", qName0.toString());
      assertEquals("ga,opp", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", nodeNameTest0.toString());
      assertEquals("org.apache.commons.jxpath.ri.axes.RootContext", nodeNameTest0.getNamespaceURI());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(parentContext0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("aE{J[}A,&wjAka&v.", qName0.getPrefix());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", qName0.toString());
      assertEquals("ga,opp", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("aE{J[}A,&wjAka&v.", qName0.getPrefix());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", qName0.toString());
      assertEquals("ga,opp", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      
      Step[] stepArray0 = new Step[4];
      NodePointer nodePointer1 = variablePointer0.namespacePointer(string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("aE{J[}A,&wjAka&v.", qName0.getPrefix());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", qName0.toString());
      assertEquals("ga,opp", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(nodePointer1);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      assertEquals(4, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[2]);
      assertEquals(4, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(nodePointer0.WHOLE_COLLECTION, nodePointer0.WHOLE_COLLECTION).when(step0).getAxis();
      doReturn((Object) expressionArray0, (Object) expressionArray0, (Object) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      stepArray0[2] = stepArray0[1];
      stepArray0[3] = stepArray0[2];
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleLocationPath(parentContext0, nodePointer0, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = "aE{J[}A,&wjAka&v.";
      String string1 = "ga,opp";
      QName qName0 = new QName(string0, string1);
      assertEquals("ga,opp", qName0.getName());
      assertEquals("aE{J[}A,&wjAka&v.", qName0.getPrefix());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", qName0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(qName0);
      
      String string2 = "org.apache.commons.jxpath.ri.axes.RootContext";
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, string2);
      assertEquals("ga,opp", qName0.getName());
      assertEquals("aE{J[}A,&wjAka&v.", qName0.getPrefix());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.axes.RootContext", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", nodeNameTest0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(nodeNameTest0);
      
      ParentContext parentContext0 = new ParentContext(evalContext0, nodeNameTest0);
      assertEquals("ga,opp", qName0.getName());
      assertEquals("aE{J[}A,&wjAka&v.", qName0.getPrefix());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.axes.RootContext", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", nodeNameTest0.toString());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(parentContext0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("ga,opp", qName0.getName());
      assertEquals("aE{J[}A,&wjAka&v.", qName0.getPrefix());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", qName0.toString());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("ga,opp", qName0.getName());
      assertEquals("aE{J[}A,&wjAka&v.", qName0.getPrefix());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", qName0.toString());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(nodePointer0.isRoot());
      assertNull(nodePointer0.getNamespaceURI());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      
      Step[] stepArray0 = new Step[4];
      NodePointer nodePointer1 = variablePointer0.namespacePointer(string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("ga,opp", qName0.getName());
      assertEquals("aE{J[}A,&wjAka&v.", qName0.getPrefix());
      assertEquals("aE{J[}A,&wjAka&v.:ga,opp", qName0.toString());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(nodePointer1);
      
      int int0 = 0;
      int int1 = 999;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(int1, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(999, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertFalse(int1 == int0);
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int1).when(step0).getAxis();
      doReturn((Object) expressionArray0, (Object) expressionArray0, (Object) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      stepArray0[2] = stepArray0[1];
      stepArray0[3] = stepArray0[2];
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleLocationPath(parentContext0, nodePointer0, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvalContext evalContext0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      String string0 = "B'[&['0r~p";
      QName qName0 = new QName(string0, string0);
      assertEquals("B'[&['0r~p", qName0.getName());
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("B'[&['0r~p", qName0.getName());
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Step[] stepArray0 = new Step[5];
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleLocationPath(evalContext0, variablePointer0, stepArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'B'[&['0r~p:B'[&['0r~p'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvalContext evalContext0 = null;
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(evalContext0, locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      QName qName0 = collectionPointer0.getName();
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Step[] stepArray0 = new Step[5];
      int int0 = 2;
      Expression[] expressionArray0 = new Expression[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(collectionPointer0.WHOLE_COLLECTION);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeTypeTest0);
      
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(step0).getAxis();
      doReturn(nodeTypeTest0).when(step0).getNodeTest();
      doReturn((Object) expressionArray0, (Object) expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleLocationPath(evalContext0, variablePointer0, stepArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.compiler.NodeTypeTest cannot be cast to org.apache.commons.jxpath.ri.compiler.NodeNameTest
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvalContext evalContext0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      Class<Object> class0 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertNotNull(jXPathBasicBeanInfo0);
      
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(collectionPointer0, jXPathBasicBeanInfo0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(beanPropertyPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isRoot());
      assertTrue(beanPropertyPointer0.isContainer());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPropertyPointer0);
      
      QName qName0 = beanPropertyPointer0.getName();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(beanPropertyPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isRoot());
      assertTrue(beanPropertyPointer0.isContainer());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertEquals("*", qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      NodeTest nodeTest0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, nodeTest0);
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      BeanPointer beanPointer0 = new BeanPointer(collectionPointer0, qName0, namespaceContext0, jXPathBasicBeanInfo0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(beanPropertyPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isRoot());
      assertTrue(beanPropertyPointer0.isContainer());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertEquals("*", qName0.getName());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      Step[] stepArray0 = new Step[7];
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant(beanPointer0.UNKNOWN_NAMESPACE);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(beanPropertyPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isRoot());
      assertTrue(beanPropertyPointer0.isContainer());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertEquals("*", qName0.getName());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      assertEquals(4, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(beanPointer0.WHOLE_COLLECTION).when(step0).getAxis();
      doReturn((Object) expressionArray0, (Object) expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleLocationPath(evalContext0, beanPointer0, stepArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvalContext evalContext0 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      NodePointer nodePointer0 = null;
      Expression[] expressionArray0 = new Expression[3];
      Expression expression0 = mock(Expression.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(expression0).toString();
      doReturn((Object) null).when(expression0).computeValue(any(org.apache.commons.jxpath.ri.EvalContext.class));
      expressionArray0[0] = expression0;
      Step[] stepArray0 = new Step[9];
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, nodePointer0, expressionArray0, stepArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Predicate value is null: null
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvalContext evalContext0 = null;
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = "";
      NullPointer nullPointer0 = new NullPointer(locale0, string0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertFalse(propertyPointer0.isCollection());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isAttribute());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isActual());
      assertFalse(propertyPointer0.isRoot());
      assertTrue(propertyPointer0.isLeaf());
      assertNull(propertyPointer0.getNamespaceURI());
      assertFalse(propertyPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(propertyPointer0);
      
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[2];
      int int0 = 5;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(propertyPointer0.UNKNOWN_NAMESPACE);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertFalse(propertyPointer0.isCollection());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isAttribute());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isActual());
      assertFalse(propertyPointer0.isRoot());
      assertTrue(propertyPointer0.isLeaf());
      assertNull(propertyPointer0.getNamespaceURI());
      assertFalse(propertyPointer0.isNode());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(processingInstructionTest0);
      
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(nullPointer0.WHOLE_COLLECTION, propertyPointer0.UNSPECIFIED_PROPERTY, int0).when(step0).getAxis();
      doReturn(processingInstructionTest0).when(step0).getNodeTest();
      doReturn((Object) expressionArray0, (Object) expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, propertyPointer0, expressionArray0, stepArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest cannot be cast to org.apache.commons.jxpath.ri.compiler.NodeNameTest
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvalContext evalContext0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      String string0 = "B'[&['0r~p";
      QName qName0 = new QName(string0, string0);
      assertEquals("B'[&['0r~p", qName0.getName());
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("B'[&['0r~p", qName0.getName());
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Step[] stepArray0 = new Step[5];
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant(variablePointer0.UNKNOWN_NAMESPACE);
      assertEquals("B'[&['0r~p", qName0.getName());
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], constant0);
      assertEquals(9, expressionArray0.length);
      assertEquals("B'[&['0r~p", qName0.getName());
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, variablePointer0, expressionArray0, stepArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "n0j%^Z.Au&A<:0=$";
      Step[] stepArray0 = new Step[6];
      int int0 = 1;
      Expression[] expressionArray0 = new Expression[8];
      Expression expression0 = mock(Expression.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(expression0).toString();
      doReturn(string0).when(expression0).computeValue(any(org.apache.commons.jxpath.ri.EvalContext.class));
      expressionArray0[0] = expression0;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(step0).getAxis();
      doReturn(expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      EvalContext evalContext0 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      NodePointer nodePointer0 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn((NodePointer) null).when(nodePointer0).getValuePointer();
      // Undeclared exception!
      try { 
        SimplePathInterpreter.createNullPointer(evalContext0, nodePointer0, stepArray0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Predicate value is null: n0j%^Z.Au&A<:0=$
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[1];
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      assertEquals(1, evalContextArray0.length);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(unionContext0);
      
      String string0 = "java.lang.String";
      QName qName0 = new QName(string0);
      assertEquals("java.lang.String", qName0.getName());
      assertEquals("java.lang.String", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = new NullPointer(qName0, locale0);
      assertEquals("java.lang.String", qName0.getName());
      assertEquals("java.lang.String", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      assertEquals("java.lang.String", qName0.getName());
      assertEquals("java.lang.String", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertFalse(propertyPointer0.isCollection());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isActual());
      assertFalse(propertyPointer0.isNode());
      assertNull(propertyPointer0.getNamespaceURI());
      assertFalse(propertyPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertNotNull(propertyPointer0);
      
      Step[] stepArray0 = new Step[8];
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      assertEquals(8, stepArray0.length);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(propertyPointer0.UNSPECIFIED_PROPERTY).when(step0).getAxis();
      doReturn(expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      int int0 = 1;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.createNullPointer(unionContext0, propertyPointer0, stepArray0, int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = "K[M{jOQ9tk2o~|KQ@";
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName(string0, string0);
      assertEquals("K[M{jOQ9tk2o~|KQ@:K[M{jOQ9tk2o~|KQ@", qName0.toString());
      assertEquals("K[M{jOQ9tk2o~|KQ@", qName0.getName());
      assertEquals("K[M{jOQ9tk2o~|KQ@", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("K[M{jOQ9tk2o~|KQ@:K[M{jOQ9tk2o~|KQ@", qName0.toString());
      assertEquals("K[M{jOQ9tk2o~|KQ@", qName0.getName());
      assertEquals("K[M{jOQ9tk2o~|KQ@", qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Step[] stepArray0 = new Step[2];
      // Undeclared exception!
      try { 
        SimplePathInterpreter.createNullPointer(evalContext0, variablePointer0, stepArray0, variablePointer0.WHOLE_COLLECTION);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'K[M{jOQ9tk2o~|KQ@:K[M{jOQ9tk2o~|KQ@'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvalContext evalContext0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      String string0 = "B'[&['0r~p";
      QName qName0 = new QName(string0, string0);
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(variablePointer0, string0);
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      Step[] stepArray0 = new Step[0];
      int int0 = 0;
      NodePointer nodePointer0 = SimplePathInterpreter.createNullPointer(evalContext0, collectionPointer0, stepArray0, int0);
      assertEquals(0, stepArray0.length);
      assertSame(collectionPointer0, nodePointer0);
      assertSame(nodePointer0, collectionPointer0);
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertNull(nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = "aE{J[}:,&Aka&v.";
      Step[] stepArray0 = new Step[4];
      int int0 = 2;
      Expression[] expressionArray0 = new Expression[0];
      Locale locale0 = new Locale(string0, string0);
      assertEquals("ae{j[}:,&aka&v.", locale0.getLanguage());
      assertEquals("AE{J[}:,&AKA&V.", locale0.getCountry());
      assertEquals("ae{j[}:,&aka&v._AE{J[}:,&AKA&V.", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(string0, locale0);
      assertEquals("ae{j[}:,&aka&v.", locale0.getLanguage());
      assertEquals("AE{J[}:,&AKA&V.", locale0.getCountry());
      assertEquals("ae{j[}:,&aka&v._AE{J[}:,&AKA&V.", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      QName qName0 = new QName(string0);
      assertEquals("aE{J[}:,&Aka&v.", qName0.toString());
      assertEquals(",&Aka&v.", qName0.getName());
      assertEquals("aE{J[}", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, string0);
      assertEquals("aE{J[}:,&Aka&v.", qName0.toString());
      assertEquals(",&Aka&v.", qName0.getName());
      assertEquals("aE{J[}", qName0.getPrefix());
      assertEquals("aE{J[}:,&Aka&v.", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("aE{J[}:,&Aka&v.", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(step0).getAxis();
      doReturn(nodeNameTest0).when(step0).getNodeTest();
      doReturn(expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, collectionPointer0, expressionArray0, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(string0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ParentContext parentContext0 = new ParentContext(evalContext0, processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertNotNull(parentContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, basicNodeSet0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertNotNull(nodeSetContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[6];
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      assertEquals(6, evalContextArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertNotNull(unionContext0);
      
      boolean boolean0 = false;
      QName qName0 = new QName(string0, string0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, boolean0, nodeNameTest0);
      assertEquals(6, evalContextArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      NodePointer nodePointer0 = null;
      Step[] stepArray0 = new Step[9];
      int int0 = 7;
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) int0);
      assertEquals(7.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(step0).getAxis();
      doReturn(expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      stepArray0[2] = stepArray0[1];
      stepArray0[3] = stepArray0[2];
      stepArray0[4] = stepArray0[3];
      stepArray0[5] = stepArray0[4];
      stepArray0[6] = stepArray0[5];
      stepArray0[7] = stepArray0[6];
      NodePointer nodePointer1 = SimplePathInterpreter.interpretSimpleLocationPath(descendantContext0, nodePointer0, stepArray0);
      assertEquals(6, evalContextArray0.length);
      assertEquals(9, stepArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertNull(nodePointer1);
      
      // Undeclared exception!
      try { 
        SimplePathInterpreter.createNullPointer(evalContextArray0[5], nodePointer1, stepArray0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvalContext evalContext0 = null;
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = "";
      NullPointer nullPointer0 = new NullPointer(locale0, string0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(propertyPointer0.isLeaf());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isNode());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isActual());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(propertyPointer0);
      
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName(propertyPointer0.UNKNOWN_NAMESPACE, string0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(propertyPointer0.isLeaf());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isNode());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isActual());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isCollection());
      assertEquals("<<unknown namespace>>:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, string0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(propertyPointer0.isLeaf());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isNode());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isActual());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isCollection());
      assertEquals("<<unknown namespace>>:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>:", nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      int int0 = 2;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(nullPointer0.WHOLE_COLLECTION, propertyPointer0.UNSPECIFIED_PROPERTY, propertyPointer0.WHOLE_COLLECTION, int0).when(step0).getAxis();
      doReturn(nodeNameTest0).when(step0).getNodeTest();
      doReturn((Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      NullPointer nullPointer1 = (NullPointer)SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, propertyPointer0, expressionArray0, stepArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotSame(nullPointer0, nullPointer1);
      assertNotSame(nullPointer1, nullPointer0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(propertyPointer0.isLeaf());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isNode());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isActual());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isCollection());
      assertFalse(nullPointer1.isActual());
      assertTrue(nullPointer1.isLeaf());
      assertFalse(nullPointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer1.getIndex());
      assertNull(nullPointer1.getNamespaceURI());
      assertFalse(nullPointer1.isContainer());
      assertFalse(nullPointer1.isRoot());
      assertTrue(nullPointer1.isNode());
      assertFalse(nullPointer1.isAttribute());
      assertFalse(nullPointer1.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer1.getLength());
      assertFalse(nullPointer1.equals((Object)nullPointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer1);
      
      int int1 = 1;
      NullPropertyPointer nullPropertyPointer0 = (NullPropertyPointer)SimplePathInterpreter.createNullPointer(evalContext0, nullPointer1, stepArray0, int1);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotSame(nullPointer0, nullPointer1);
      assertNotSame(propertyPointer0, nullPropertyPointer0);
      assertNotSame(nullPointer1, nullPointer0);
      assertNotSame(nullPropertyPointer0, propertyPointer0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(propertyPointer0.isLeaf());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isNode());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isActual());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isCollection());
      assertFalse(nullPointer1.isActual());
      assertTrue(nullPointer1.isLeaf());
      assertFalse(nullPointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer1.getIndex());
      assertNull(nullPointer1.getNamespaceURI());
      assertFalse(nullPointer1.isContainer());
      assertFalse(nullPointer1.isRoot());
      assertTrue(nullPointer1.isNode());
      assertFalse(nullPointer1.isAttribute());
      assertFalse(nullPointer1.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer1.getLength());
      assertFalse(nullPropertyPointer0.isCollection());
      assertEquals("<<unknown namespace>>:", nullPropertyPointer0.getPropertyName());
      assertFalse(nullPropertyPointer0.isRoot());
      assertFalse(nullPropertyPointer0.isActual());
      assertFalse(nullPropertyPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
      assertEquals(0, nullPropertyPointer0.getPropertyCount());
      assertNull(nullPropertyPointer0.getNamespaceURI());
      assertEquals(0, nullPropertyPointer0.getLength());
      assertTrue(nullPropertyPointer0.isLeaf());
      assertFalse(nullPropertyPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getIndex());
      assertTrue(nullPropertyPointer0.isContainer());
      assertFalse(nullPointer0.equals((Object)nullPointer1));
      assertFalse(nullPointer1.equals((Object)nullPointer0));
      assertFalse(int1 == int0);
      assertFalse(nullPropertyPointer0.equals((Object)propertyPointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertNotNull(nullPropertyPointer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvalContext evalContext0 = null;
      Step[] stepArray0 = new Step[8];
      NodePointer nodePointer0 = null;
      int int0 = 998;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.createNullPointer(evalContext0, nodePointer0, stepArray0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 998
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = "aE{J[}:,&Aka&v.";
      Step[] stepArray0 = new Step[4];
      Locale locale0 = new Locale(string0, string0);
      assertEquals("AE{J[}:,&AKA&V.", locale0.getCountry());
      assertEquals("ae{j[}:,&aka&v.", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ae{j[}:,&aka&v._AE{J[}:,&AKA&V.", locale0.toString());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(string0, locale0);
      assertEquals("AE{J[}:,&AKA&V.", locale0.getCountry());
      assertEquals("ae{j[}:,&aka&v.", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ae{j[}:,&aka&v._AE{J[}:,&AKA&V.", locale0.toString());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant(collectionPointer0.WHOLE_COLLECTION);
      assertEquals("AE{J[}:,&AKA&V.", locale0.getCountry());
      assertEquals("ae{j[}:,&aka&v.", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ae{j[}:,&aka&v._AE{J[}:,&AKA&V.", locale0.toString());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(constant0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertEquals("AE{J[}:,&AKA&V.", locale0.getCountry());
      assertEquals("ae{j[}:,&aka&v.", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ae{j[}:,&aka&v._AE{J[}:,&AKA&V.", locale0.toString());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, collectionPointer0, expressionArray0, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePathInterpreter simplePathInterpreter0 = new SimplePathInterpreter();
      assertNotNull(simplePathInterpreter0);
      
      NodePointer nodePointer0 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn((NodeIterator) null).when(nodePointer0).attributeIterator(any(org.apache.commons.jxpath.ri.QName.class));
      String string0 = "])";
      Object object0 = PrivateAccess.callMethod((Class<SimplePathInterpreter>) SimplePathInterpreter.class, simplePathInterpreter0, "isNameAttributeEqual", (Object) nodePointer0, (Class<?>) NodePointer.class, (Object) string0, (Class<?>) String.class);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePathInterpreter simplePathInterpreter0 = new SimplePathInterpreter();
      assertNotNull(simplePathInterpreter0);
      
      boolean boolean0 = true;
      NodePointer nodePointer0 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(nodePointer0).isActual();
      Object object0 = PrivateAccess.callMethod((Class<SimplePathInterpreter>) SimplePathInterpreter.class, simplePathInterpreter0, "computeQuality", (Object) nodePointer0, (Class<?>) NodePointer.class);
      assertEquals(1000, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvalContext evalContext0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      String string0 = "B'[&['0r~p";
      QName qName0 = new QName(string0, string0);
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Step[] stepArray0 = new Step[5];
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(variablePointer0.WHOLE_COLLECTION);
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, variablePointer0, expressionArray0, stepArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'B'[&['0r~p:B'[&['0r~p'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvalContext evalContext0 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      NodePointer nodePointer0 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(nodePointer0).toString();
      NodePointer nodePointer1 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn(nodePointer0).when(nodePointer1).getValuePointer();
      Step[] stepArray0 = new Step[6];
      int int0 = 1;
      NodeTest nodeTest0 = mock(NodeTest.class, new ViolatedAssumptionAnswer());
      Expression[] expressionArray0 = new Expression[8];
      Expression expression0 = mock(Expression.class, new ViolatedAssumptionAnswer());
      expressionArray0[0] = expression0;
      Expression expression1 = mock(Expression.class, new ViolatedAssumptionAnswer());
      expressionArray0[1] = expression1;
      Expression expression2 = mock(Expression.class, new ViolatedAssumptionAnswer());
      expressionArray0[2] = expression2;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], expressionArray0[1]);
      assertEquals(8, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      Constant constant0 = new Constant(nodePointer1.WHOLE_COLLECTION);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[4] = (Expression) constant0;
      Expression expression3 = mock(Expression.class, new ViolatedAssumptionAnswer());
      expressionArray0[5] = expression3;
      Expression expression4 = mock(Expression.class, new ViolatedAssumptionAnswer());
      expressionArray0[6] = expression4;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[5], expressionArray0[2]);
      assertEquals(8, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[7] = (Expression) coreOperationNotEqual0;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(step0).getAxis();
      doReturn((Object) expressionArray0, (Object) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      Step step1 = mock(Step.class, new ViolatedAssumptionAnswer());
      stepArray0[2] = step1;
      Step step2 = mock(Step.class, new ViolatedAssumptionAnswer());
      stepArray0[3] = step2;
      Step step3 = mock(Step.class, new ViolatedAssumptionAnswer());
      stepArray0[4] = step3;
      Step step4 = mock(Step.class, new ViolatedAssumptionAnswer());
      stepArray0[5] = step4;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleLocationPath(evalContext0, nodePointer1, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EvalContext evalContext0 = null;
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = "";
      NullPointer nullPointer0 = new NullPointer(locale0, string0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isCollection());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertNull(propertyPointer0.getNamespaceURI());
      assertTrue(propertyPointer0.isContainer());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isNode());
      assertFalse(propertyPointer0.isActual());
      assertEquals(0, propertyPointer0.getLength());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(propertyPointer0);
      
      Step[] stepArray0 = new Step[2];
      SimplePathInterpreter simplePathInterpreter0 = new SimplePathInterpreter();
      assertNotNull(simplePathInterpreter0);
      
      LinkedList<PropertyOwnerPointer> linkedList0 = new LinkedList<PropertyOwnerPointer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Expression[] expressionArray0 = new Expression[7];
      Object object0 = PrivateAccess.callMethod((Class<SimplePathInterpreter>) SimplePathInterpreter.class, simplePathInterpreter0, "doPredicatesStandard", (Object) evalContext0, (Class<?>) EvalContext.class, (Object) linkedList0, (Class<?>) List.class, (Object) stepArray0, (Class<?>) Step[].class, (Object) propertyPointer0.UNSPECIFIED_PROPERTY, (Class<?>) int.class, (Object) expressionArray0, (Class<?>) Expression[].class, (Object) propertyPointer0.UNSPECIFIED_PROPERTY, (Class<?>) int.class);
      assertEquals(2, stepArray0.length);
      assertEquals(7, expressionArray0.length);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isCollection());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertNull(propertyPointer0.getNamespaceURI());
      assertTrue(propertyPointer0.isContainer());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isNode());
      assertFalse(propertyPointer0.isActual());
      assertEquals(0, propertyPointer0.getLength());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, linkedList0.size());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EvalContext evalContext0 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      NodePointer nodePointer0 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(nodePointer0).toString();
      NodePointer nodePointer1 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn(nodePointer0).when(nodePointer1).getValuePointer();
      Step[] stepArray0 = new Step[6];
      NodeTest nodeTest0 = mock(NodeTest.class, new ViolatedAssumptionAnswer());
      Expression[] expressionArray0 = new Expression[1];
      Expression expression0 = mock(Expression.class, new ViolatedAssumptionAnswer());
      expressionArray0[0] = expression0;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(nodePointer1.WHOLE_COLLECTION).when(step0).getAxis();
      doReturn((Object) expressionArray0, (Object) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      Step step1 = mock(Step.class, new ViolatedAssumptionAnswer());
      stepArray0[2] = step1;
      Step step2 = mock(Step.class, new ViolatedAssumptionAnswer());
      stepArray0[3] = step2;
      Step step3 = mock(Step.class, new ViolatedAssumptionAnswer());
      stepArray0[4] = step3;
      Step step4 = mock(Step.class, new ViolatedAssumptionAnswer());
      stepArray0[5] = step4;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleLocationPath(evalContext0, nodePointer1, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EvalContext evalContext0 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      QName qName0 = mock(QName.class, new ViolatedAssumptionAnswer());
      Locale locale0 = null;
      NullPointer nullPointer0 = new NullPointer(qName0, locale0);
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isNode());
      assertFalse(propertyPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertNull(propertyPointer0.getNamespaceURI());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isCollection());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(propertyPointer0);
      
      NodePointer nodePointer0 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn(propertyPointer0).when(nodePointer0).getValuePointer();
      Step[] stepArray0 = new Step[4];
      int int0 = (-617);
      int int1 = (-1425);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(int1);
      assertEquals((-1425), nodeTypeTest0.getNodeType());
      assertFalse(int1 == int0);
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray0 = new Expression[4];
      Expression expression0 = mock(Expression.class, new ViolatedAssumptionAnswer());
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expression0, expression0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Expression expression1 = mock(Expression.class, new ViolatedAssumptionAnswer());
      expressionArray0[1] = expression1;
      Expression expression2 = mock(Expression.class, new ViolatedAssumptionAnswer());
      expressionArray0[2] = expression2;
      Expression expression3 = mock(Expression.class, new ViolatedAssumptionAnswer());
      expressionArray0[3] = expression3;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(propertyPointer0.UNSPECIFIED_PROPERTY).when(step0).getAxis();
      doReturn((Object) expressionArray0, (Object) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      Step step1 = mock(Step.class, new ViolatedAssumptionAnswer());
      stepArray0[1] = step1;
      Step step2 = mock(Step.class, new ViolatedAssumptionAnswer());
      stepArray0[2] = step2;
      Step step3 = mock(Step.class, new ViolatedAssumptionAnswer());
      stepArray0[3] = step3;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleLocationPath(evalContext0, nodePointer0, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = "ga,opp";
      Step[] stepArray0 = new Step[4];
      int int0 = 2;
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName(string0);
      assertEquals("ga,opp", qName0.getName());
      assertEquals("ga,opp", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, string0);
      assertEquals("ga,opp", qName0.getName());
      assertEquals("ga,opp", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("ga,opp", nodeNameTest0.getNamespaceURI());
      assertEquals("ga,opp", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(step0).getAxis();
      doReturn(nodeNameTest0, (NodeTest) null).when(step0).getNodeTest();
      doReturn(expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("ga,opp", qName0.getName());
      assertEquals("ga,opp", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, variablePointer0, expressionArray0, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EvalContext evalContext0 = null;
      Locale locale0 = Locale.ITALY;
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = "";
      NullPointer nullPointer0 = new NullPointer(locale0, string0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(propertyPointer0.isContainer());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertFalse(propertyPointer0.isNode());
      assertFalse(propertyPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(propertyPointer0);
      
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[2];
      int int0 = 5;
      QName qName0 = propertyPointer0.getName();
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(propertyPointer0.isContainer());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertFalse(propertyPointer0.isNode());
      assertFalse(propertyPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isCollection());
      assertEquals("*", qName0.getName());
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, nullPointer0.UNKNOWN_NAMESPACE);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(propertyPointer0.isContainer());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertFalse(propertyPointer0.isNode());
      assertFalse(propertyPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isCollection());
      assertEquals("*", qName0.getName());
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("*", nodeNameTest0.toString());
      assertTrue(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(nullPointer0.WHOLE_COLLECTION, propertyPointer0.UNSPECIFIED_PROPERTY, int0, int0, 0).when(step0).getAxis();
      doReturn(nodeNameTest0, nodeNameTest0).when(step0).getNodeTest();
      doReturn((Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0, (Object) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      NullPropertyPointer nullPropertyPointer0 = (NullPropertyPointer)SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, propertyPointer0, expressionArray0, stepArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotSame(propertyPointer0, nullPropertyPointer0);
      assertNotSame(nullPropertyPointer0, propertyPointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(propertyPointer0.isContainer());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertFalse(propertyPointer0.isNode());
      assertFalse(propertyPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isCollection());
      assertFalse(nullPropertyPointer0.isNode());
      assertNull(nullPropertyPointer0.getNamespaceURI());
      assertTrue(nullPropertyPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getIndex());
      assertEquals(0, nullPropertyPointer0.getLength());
      assertTrue(nullPropertyPointer0.isContainer());
      assertFalse(nullPropertyPointer0.isActual());
      assertFalse(nullPropertyPointer0.isRoot());
      assertFalse(nullPropertyPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
      assertTrue(nullPropertyPointer0.isLeaf());
      assertEquals(0, nullPropertyPointer0.getPropertyCount());
      assertEquals("*", nullPropertyPointer0.getPropertyName());
      assertFalse(nullPropertyPointer0.equals((Object)propertyPointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPropertyPointer0);
      
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, nullPropertyPointer0, expressionArray0, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EvalContext evalContext0 = null;
      Locale locale0 = Locale.ITALY;
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = "";
      NullPointer nullPointer0 = new NullPointer(locale0, string0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isNode());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isCollection());
      assertNull(propertyPointer0.getNamespaceURI());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(propertyPointer0);
      
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName(propertyPointer0.UNKNOWN_NAMESPACE, propertyPointer0.UNKNOWN_NAMESPACE);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isNode());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isCollection());
      assertNull(propertyPointer0.getNamespaceURI());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isActual());
      assertEquals("<<unknown namespace>>:<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, nullPointer0.UNKNOWN_NAMESPACE);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isNode());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isCollection());
      assertNull(propertyPointer0.getNamespaceURI());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isActual());
      assertEquals("<<unknown namespace>>:<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("<<unknown namespace>>:<<unknown namespace>>", nodeNameTest0.toString());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      int int0 = 2;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(propertyPointer0.UNSPECIFIED_PROPERTY, propertyPointer0.UNSPECIFIED_PROPERTY, propertyPointer0.UNSPECIFIED_PROPERTY, int0).when(step0).getAxis();
      doReturn(nodeNameTest0).when(step0).getNodeTest();
      doReturn((Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      NullPointer nullPointer1 = (NullPointer)SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, propertyPointer0, expressionArray0, stepArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotSame(nullPointer0, nullPointer1);
      assertNotSame(nullPointer1, nullPointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isNode());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isCollection());
      assertNull(propertyPointer0.getNamespaceURI());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer1.getIndex());
      assertFalse(nullPointer1.isContainer());
      assertFalse(nullPointer1.isAttribute());
      assertFalse(nullPointer1.isActual());
      assertTrue(nullPointer1.isLeaf());
      assertTrue(nullPointer1.isNode());
      assertEquals(0, nullPointer1.getLength());
      assertFalse(nullPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer1.isRoot());
      assertNull(nullPointer1.getNamespaceURI());
      assertFalse(nullPointer1.isCollection());
      assertFalse(nullPointer1.equals((Object)nullPointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer1);
      
      NodePointer nodePointer0 = SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, nullPointer1, expressionArray0, stepArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotSame(nullPointer0, nullPointer1);
      assertNotSame(nullPointer1, nullPointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isNode());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertTrue(propertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isCollection());
      assertNull(propertyPointer0.getNamespaceURI());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer1.getIndex());
      assertFalse(nullPointer1.isContainer());
      assertFalse(nullPointer1.isAttribute());
      assertFalse(nullPointer1.isActual());
      assertTrue(nullPointer1.isLeaf());
      assertTrue(nullPointer1.isNode());
      assertEquals(0, nullPointer1.getLength());
      assertFalse(nullPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer1.isRoot());
      assertNull(nullPointer1.getNamespaceURI());
      assertFalse(nullPointer1.isCollection());
      assertFalse(nullPointer0.equals((Object)nullPointer1));
      assertFalse(nullPointer1.equals((Object)nullPointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(nodePointer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = "aE{J[}:,&Aka&v.";
      String string1 = "ga,opp";
      Step[] stepArray0 = new Step[4];
      int int0 = 2;
      Expression[] expressionArray0 = new Expression[0];
      Locale locale0 = new Locale(string1, string0);
      assertEquals("AE{J[}:,&AKA&V.", locale0.getCountry());
      assertEquals("ga,opp_AE{J[}:,&AKA&V.", locale0.toString());
      assertEquals("ga,opp", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(string0, locale0);
      assertEquals("AE{J[}:,&AKA&V.", locale0.getCountry());
      assertEquals("ga,opp_AE{J[}:,&AKA&V.", locale0.toString());
      assertEquals("ga,opp", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isContainer());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      QName qName0 = new QName(string1);
      assertEquals("ga,opp", qName0.getName());
      assertEquals("ga,opp", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, string1);
      assertEquals("ga,opp", qName0.getName());
      assertEquals("ga,opp", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("ga,opp", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("ga,opp", nodeNameTest0.getNamespaceURI());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(nodeNameTest0);
      
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0, int0).when(step0).getAxis();
      doReturn(nodeNameTest0, (NodeTest) null).when(step0).getNodeTest();
      doReturn(expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, collectionPointer0, expressionArray0, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EvalContext evalContext0 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      NodePointer nodePointer0 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn((NodeIterator) null).when(nodePointer0).attributeIterator(any(org.apache.commons.jxpath.ri.QName.class));
      doReturn((NodePointer) null).when(nodePointer0).getValuePointer();
      doReturn((String) null).when(nodePointer0).toString();
      NodePointer nodePointer1 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn(nodePointer0).when(nodePointer1).getValuePointer();
      Step[] stepArray0 = new Step[11];
      int int0 = 13;
      QName qName0 = mock(QName.class, new ViolatedAssumptionAnswer());
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray0 = null;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0, 0).when(step0).getAxis();
      doReturn(nodeNameTest0, nodeNameTest0).when(step0).getNodeTest();
      doReturn((Object) expressionArray0, (Object) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleLocationPath(evalContext0, nodePointer1, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EvalContext evalContext0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      Class<Object> class0 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertNotNull(jXPathBasicBeanInfo0);
      
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(collectionPointer0, jXPathBasicBeanInfo0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(beanPropertyPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isRoot());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertTrue(beanPropertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPropertyPointer0);
      
      QName qName0 = beanPropertyPointer0.getName();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(beanPropertyPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isRoot());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertTrue(beanPropertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertEquals("*", qName0.getName());
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      NodeTest nodeTest0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, nodeTest0);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      BeanPointer beanPointer0 = new BeanPointer(collectionPointer0, qName0, namespaceContext0, jXPathBasicBeanInfo0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(beanPropertyPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isRoot());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertTrue(beanPropertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertEquals("*", qName0.getName());
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      Step[] stepArray0 = new Step[7];
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(step0).getAxis();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      stepArray0[2] = stepArray0[1];
      stepArray0[3] = stepArray0[2];
      stepArray0[4] = stepArray0[3];
      stepArray0[5] = stepArray0[4];
      stepArray0[6] = stepArray0[5];
      BeanPointer beanPointer1 = (BeanPointer)SimplePathInterpreter.interpretSimpleLocationPath(evalContext0, beanPointer0, stepArray0);
      assertEquals(7, stepArray0.length);
      assertSame(beanPointer1, beanPointer0);
      assertSame(beanPointer0, beanPointer1);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isRoot());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertFalse(beanPropertyPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isRoot());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertTrue(beanPropertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertEquals("*", qName0.getName());
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EvalContext evalContext0 = null;
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = "";
      NullPointer nullPointer0 = new NullPointer(locale0, string0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isCollection());
      assertFalse(propertyPointer0.isRoot());
      assertTrue(propertyPointer0.isContainer());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isNode());
      assertFalse(propertyPointer0.isActual());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(propertyPointer0);
      
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[2];
      int int0 = 5;
      QName qName0 = new QName(string0, string0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, string0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(propertyPointer0.UNSPECIFIED_PROPERTY, propertyPointer0.UNSPECIFIED_PROPERTY, int0, int0).when(step0).getAxis();
      doReturn(nodeNameTest0, nodeNameTest0).when(step0).getNodeTest();
      doReturn((Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      NullPropertyPointer nullPropertyPointer0 = (NullPropertyPointer)SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, propertyPointer0, expressionArray0, stepArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotSame(propertyPointer0, nullPropertyPointer0);
      assertNotSame(nullPropertyPointer0, propertyPointer0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isCollection());
      assertFalse(propertyPointer0.isRoot());
      assertTrue(propertyPointer0.isContainer());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isNode());
      assertFalse(propertyPointer0.isActual());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getIndex());
      assertFalse(nullPropertyPointer0.isNode());
      assertTrue(nullPropertyPointer0.isContainer());
      assertNull(nullPropertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
      assertEquals(0, nullPropertyPointer0.getPropertyCount());
      assertTrue(nullPropertyPointer0.isAttribute());
      assertFalse(nullPropertyPointer0.isActual());
      assertEquals(0, nullPropertyPointer0.getLength());
      assertFalse(nullPropertyPointer0.isRoot());
      assertFalse(nullPropertyPointer0.isCollection());
      assertTrue(nullPropertyPointer0.isLeaf());
      assertEquals(":", nullPropertyPointer0.getPropertyName());
      assertFalse(nullPropertyPointer0.equals((Object)propertyPointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertNotNull(nullPropertyPointer0);
      
      NodePointer nodePointer0 = SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, nullPropertyPointer0, expressionArray0, stepArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotSame(propertyPointer0, nullPropertyPointer0);
      assertNotSame(nullPropertyPointer0, propertyPointer0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertFalse(propertyPointer0.isCollection());
      assertFalse(propertyPointer0.isRoot());
      assertTrue(propertyPointer0.isContainer());
      assertFalse(propertyPointer0.isAttribute());
      assertFalse(propertyPointer0.isNode());
      assertFalse(propertyPointer0.isActual());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getIndex());
      assertFalse(nullPropertyPointer0.isNode());
      assertTrue(nullPropertyPointer0.isContainer());
      assertNull(nullPropertyPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nullPropertyPointer0.getPropertyIndex());
      assertEquals(0, nullPropertyPointer0.getPropertyCount());
      assertTrue(nullPropertyPointer0.isAttribute());
      assertFalse(nullPropertyPointer0.isActual());
      assertEquals(0, nullPropertyPointer0.getLength());
      assertFalse(nullPropertyPointer0.isRoot());
      assertFalse(nullPropertyPointer0.isCollection());
      assertTrue(nullPropertyPointer0.isLeaf());
      assertEquals(":", nullPropertyPointer0.getPropertyName());
      assertFalse(propertyPointer0.equals((Object)nullPropertyPointer0));
      assertFalse(nullPropertyPointer0.equals((Object)propertyPointer0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertNull(nodePointer0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EvalContext evalContext0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      String string0 = "B'[&['0r~p";
      QName qName0 = new QName(string0, string0);
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(variablePointer0, string0);
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(variablePointer0.UNKNOWN_NAMESPACE);
      assertEquals("B'[&['0r~p:B'[&['0r~p", qName0.toString());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertEquals("B'[&['0r~p", qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(variablePointer0.WHOLE_COLLECTION, collectionPointer0.WHOLE_COLLECTION).when(step0).getAxis();
      doReturn(processingInstructionTest0, processingInstructionTest0).when(step0).getNodeTest();
      doReturn(expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, collectionPointer0, expressionArray0, stepArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported node test for attributes: processing-instruction('<<unknown namespace>>')
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EvalContext evalContext0 = null;
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = "";
      NullPointer nullPointer0 = new NullPointer(locale0, string0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(propertyPointer0.isActual());
      assertFalse(propertyPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getIndex());
      assertEquals(0, propertyPointer0.getPropertyCount());
      assertNull(propertyPointer0.getNamespaceURI());
      assertEquals("*", propertyPointer0.getPropertyName());
      assertEquals(Integer.MIN_VALUE, propertyPointer0.getPropertyIndex());
      assertTrue(propertyPointer0.isLeaf());
      assertEquals(0, propertyPointer0.getLength());
      assertTrue(propertyPointer0.isContainer());
      assertFalse(propertyPointer0.isRoot());
      assertFalse(propertyPointer0.isCollection());
      assertFalse(propertyPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertNotNull(propertyPointer0);
      
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[2];
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(nullPointer0.WHOLE_COLLECTION, propertyPointer0.UNSPECIFIED_PROPERTY, propertyPointer0.UNSPECIFIED_PROPERTY, propertyPointer0.UNSPECIFIED_PROPERTY, 0).when(step0).getAxis();
      doReturn((Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray0, (Object) expressionArray1, (Object) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      NullPointer nullPointer1 = (NullPointer)SimplePathInterpreter.interpretSimpleLocationPath(evalContext0, nullPointer0, stepArray0);
      assertEquals(2, stepArray0.length);
      assertSame(nullPointer0, nullPointer1);
      assertSame(nullPointer1, nullPointer0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer1.isActual());
      assertTrue(nullPointer1.isLeaf());
      assertTrue(nullPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer1.getIndex());
      assertFalse(nullPointer1.isContainer());
      assertNull(nullPointer1.getNamespaceURI());
      assertFalse(nullPointer1.isCollection());
      assertTrue(nullPointer1.isNode());
      assertEquals(0, nullPointer1.getLength());
      assertFalse(nullPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer1);
      
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, propertyPointer0, expressionArray0, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EvalContext evalContext0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      Class<Object> class0 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertNotNull(jXPathBasicBeanInfo0);
      
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(collectionPointer0, jXPathBasicBeanInfo0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isNode());
      assertFalse(beanPropertyPointer0.isRoot());
      assertTrue(beanPropertyPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertNotNull(beanPropertyPointer0);
      
      QName qName0 = beanPropertyPointer0.getName();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isNode());
      assertFalse(beanPropertyPointer0.isRoot());
      assertTrue(beanPropertyPointer0.isContainer());
      assertEquals("*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertNotNull(qName0);
      
      NodeTest nodeTest0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, nodeTest0);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      BeanPointer beanPointer0 = new BeanPointer(collectionPointer0, qName0, namespaceContext0, jXPathBasicBeanInfo0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(jXPathBasicBeanInfo0.isDynamic());
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, beanPropertyPointer0.getPropertyIndex());
      assertNull(beanPropertyPointer0.getNamespaceURI());
      assertFalse(beanPropertyPointer0.isAttribute());
      assertFalse(beanPropertyPointer0.isNode());
      assertFalse(beanPropertyPointer0.isRoot());
      assertTrue(beanPropertyPointer0.isContainer());
      assertEquals("*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, PropertyPointer.UNSPECIFIED_PROPERTY);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      Step[] stepArray0 = new Step[7];
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(step0).getAxis();
      doReturn((Expression[]) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleLocationPath(evalContext0, beanPointer0, stepArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SimplePathInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EvalContext evalContext0 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      NodePointer nodePointer0 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(nodePointer0).toString();
      Step[] stepArray0 = new Step[0];
      NodePointer nodePointer1 = SimplePathInterpreter.interpretSimpleLocationPath(evalContext0, nodePointer0, stepArray0);
      assertEquals(0, stepArray0.length);
      assertSame(nodePointer1, nodePointer0);
      assertFalse(nodePointer1.isRoot());
      assertNull(nodePointer1.getNamespaceURI());
      assertFalse(nodePointer1.isNode());
      assertFalse(nodePointer1.isContainer());
      assertEquals(0, nodePointer1.getIndex());
      assertFalse(nodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EvalContext evalContext0 = mock(EvalContext.class, new ViolatedAssumptionAnswer());
      NodeTest nodeTest0 = mock(NodeTest.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      ChildContext childContext0 = new ChildContext(evalContext0, nodeTest0, boolean0, boolean0);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      Step[] stepArray0 = new Step[9];
      int int0 = 1;
      Expression[] expressionArray0 = null;
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(step0).getAxis();
      doReturn(expressionArray0).when(step0).getPredicates();
      stepArray0[0] = step0;
      NodePointer nodePointer0 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn((NodePointer) null).when(nodePointer0).getValuePointer();
      NodePointer nodePointer1 = SimplePathInterpreter.interpretSimpleLocationPath(childContext0, nodePointer0, stepArray0);
      assertEquals(9, stepArray0.length);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNull(nodePointer1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EvalContext evalContext0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      String string0 = "B'[&['0r~p";
      QName qName0 = new QName(string0);
      assertEquals("B'[&['0r~p", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("B'[&['0r~p", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(variablePointer0, string0);
      assertEquals("B'[&['0r~p", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("B'[&['0r~p", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      Step[] stepArray0 = new Step[5];
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      // Undeclared exception!
      try { 
        SimplePathInterpreter.interpretSimpleExpressionPath(evalContext0, collectionPointer0, expressionArray0, stepArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimplePathInterpreter simplePathInterpreter0 = new SimplePathInterpreter();
      assertNotNull(simplePathInterpreter0);
      
      NodePointer nodePointer0 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn((NodePointer) null).when(nodePointer0).getImmediateParentPointer();
      doReturn(false).when(nodePointer0).isActual();
      boolean boolean0 = false;
      NodePointer nodePointer1 = mock(NodePointer.class, new ViolatedAssumptionAnswer());
      doReturn(nodePointer0).when(nodePointer1).getImmediateParentPointer();
      doReturn(boolean0).when(nodePointer1).isActual();
      Object object0 = PrivateAccess.callMethod((Class<SimplePathInterpreter>) SimplePathInterpreter.class, simplePathInterpreter0, "computeQuality", (Object) nodePointer1, (Class<?>) NodePointer.class);
      assertEquals(998, object0);
      assertNotNull(object0);
  }
}
